/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.jniinchi;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import net.sf.jniinchi.INCHI_PARITY;
import net.sf.jniinchi.INCHI_STEREOTYPE;
import net.sf.jniinchi.JniInchiAtom;
import net.sf.jniinchi.JniInchiStereo0D;

public class JniInchiStereo0DEvoSuiteTest {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 net.sf.jniinchi.JniInchiStereo0D.getNeighbor(I)Lnet/sf/jniinchi/JniInchiAtom;: root-Branch
   * 2 net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/INCHI_PARITY;)Lnet/sf/jniinchi/JniInchiStereo0D;: root-Branch
   * 3 net.sf.jniinchi.JniInchiStereo0D.<init>(Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/INCHI_STEREOTYPE;Lnet/sf/jniinchi/INCHI_PARITY;)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNDEFINED;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertNotNull(jniInchiAtom1);
      assertEquals("InChI Stereo0D: - [,,,] Type::DOUBLEBOND // Parity:UNDEFINED", jniInchiStereo0D0.getDebugString());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiStereo0D.<init>(Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;II)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 0, 1367);
      assertEquals(INCHI_STEREOTYPE.NONE, jniInchiStereo0D0.getStereoType());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiStereo0D.getStereoType()Lnet/sf/jniinchi/INCHI_STEREOTYPE;: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("D}X`jJS+DnRctNt");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.getStereoType();
      assertEquals("InChI Stereo0D: - [D}X`jJS+DnRctNt,D}X`jJS+DnRctNt,D}X`jJS+DnRctNt,D}X`jJS+DnRctNt] Type::DOUBLEBOND // Parity:EVEN", jniInchiStereo0D0.getDebugString());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 net.sf.jniinchi.JniInchiStereo0D.debug()V: root-Branch
   * 2 net.sf.jniinchi.JniInchiStereo0D.getDebugString()Ljava/lang/String;: I9 Branch 1 IFNONNULL L150 - false
   */
  @Test
  public void test3()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("D}X`jJS+DnRctNt");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.debug();
      assertEquals("InChI Stereo0D: - [D}X`jJS+DnRctNt,D}X`jJS+DnRctNt,D}X`jJS+DnRctNt,D}X`jJS+DnRctNt] Type::DOUBLEBOND // Parity:EVEN", jniInchiStereo0D0.getDebugString());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiStereo0D.getNeighbors()[Lnet/sf/jniinchi/JniInchiAtom;: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-1469.5828497725252), (-1469.5828497725252), (-1469.5828497725252), "");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.DOUBLEBOND;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      JniInchiAtom[] jniInchiAtomArray0 = jniInchiStereo0D0.getNeighbors();
      assertNotNull(jniInchiAtomArray0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiStereo0D.getDisconnectedParity()Lnet/sf/jniinchi/INCHI_PARITY;: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNDEFINED;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.getDisconnectedParity();
      assertEquals("InChI Stereo0D: - [,,,] Type::DOUBLEBOND // Parity:UNDEFINED", jniInchiStereo0D0.getDebugString());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiStereo0D.getInchiParity()I: root-Branch
   */
  @Test
  public void test6()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNDEFINED;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      int int0 = jniInchiStereo0D0.getInchiParity();
      assertEquals("InChI Stereo0D: - [,,,] Type::DOUBLEBOND // Parity:UNDEFINED", jniInchiStereo0D0.getDebugString());
      assertEquals(4, int0);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 net.sf.jniinchi.JniInchiStereo0D.setDisconnectedParity(Lnet/sf/jniinchi/INCHI_PARITY;)V: root-Branch
   * 2 net.sf.jniinchi.JniInchiStereo0D.getParity()Lnet/sf/jniinchi/INCHI_PARITY;: root-Branch
   */
  @Test
  public void test7()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("D}X`jJS+DnRctNt");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      INCHI_PARITY iNCHI_PARITY1 = jniInchiStereo0D0.getParity();
      jniInchiStereo0D0.setDisconnectedParity(iNCHI_PARITY1);
      assertEquals("InChI Stereo0D: - [D}X`jJS+DnRctNt,D}X`jJS+DnRctNt,D}X`jJS+DnRctNt,D}X`jJS+DnRctNt] Type::DOUBLEBOND // Parity:EVEN", jniInchiStereo0D0.getDebugString());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiStereo0D.getInchiStereoType()I: root-Branch
   */
  @Test
  public void test8()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 0.0, "");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      int int0 = jniInchiStereo0D0.getInchiStereoType();
      assertEquals(1, int0);
      assertEquals("InChI Stereo0D: - [,,,] Type::DOUBLEBOND // Parity:ODD", jniInchiStereo0D0.getDebugString());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 net.sf.jniinchi.JniInchiStereo0D.getCentralAtom()Lnet/sf/jniinchi/JniInchiAtom;: root-Branch
   * 2 net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/INCHI_PARITY;)Lnet/sf/jniinchi/JniInchiStereo0D;: root-Branch
   */
  @Test
  public void test9()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNDEFINED;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.getCentralAtom();
      assertEquals("InChI Stereo0D: - [,,,] Type::DOUBLEBOND // Parity:UNDEFINED", jniInchiStereo0D0.getDebugString());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiStereo0D.createNewTetrahedralStereo0D(Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/INCHI_PARITY;)Lnet/sf/jniinchi/JniInchiStereo0D;: root-Branch
   */
  @Test
  public void test10()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("&CD+nU'%)l");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertEquals("InChI Stereo0D: &CD+nU'%)l [&CD+nU'%)l,&CD+nU'%)l,&CD+nU'%)l,&CD+nU'%)l] Type::TETRAHEDRAL // Parity:NONE", jniInchiStereo0D0.getDebugString());
      assertNotNull(jniInchiStereo0D0);
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * 1 net.sf.jniinchi.JniInchiStereo0D.getDebugString()Ljava/lang/String;: I9 Branch 1 IFNONNULL L150 - true
   * 2 net.sf.jniinchi.JniInchiStereo0D.debug()V: root-Branch
   * 3 net.sf.jniinchi.JniInchiStereo0D.<init>(Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/JniInchiAtom;Lnet/sf/jniinchi/INCHI_STEREOTYPE;Lnet/sf/jniinchi/INCHI_PARITY;)V: root-Branch
   */
  @Test
  public void test11()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-1469.5828497725252), (-1469.5828497725252), (-1469.5828497725252), "");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.DOUBLEBOND;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.debug();
      assertEquals("InChI Stereo0D:  [,,,] Type::DOUBLEBOND // Parity:EVEN", jniInchiStereo0D0.getDebugString());
  }
}
