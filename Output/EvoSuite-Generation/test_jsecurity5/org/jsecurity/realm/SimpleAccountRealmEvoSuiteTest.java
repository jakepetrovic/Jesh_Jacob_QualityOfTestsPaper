/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.realm;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.jsecurity.authc.AuthenticationException;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.cache.Cache;
import org.jsecurity.cache.HashtableCache;
import org.jsecurity.cache.HashtableCacheManager;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class SimpleAccountRealmEvoSuiteTest {

  private static ExecutorService executor; 

  //Test case number: 0
  /*
   * 7 covered goals:
   * 1 org.jsecurity.realm.SimpleAccountRealm.roleExists(Ljava/lang/String;)Z: I5 Branch 3 IFNULL L108 - true
   * 2 org.jsecurity.realm.SimpleAccountRealm.afterRoleCacheSet()V: root-Branch
   * 3 org.jsecurity.realm.SimpleAccountRealm.afterAuthorizationCacheSet()V: root-Branch
   * 4 org.jsecurity.realm.SimpleAccountRealm.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: root-Branch
   * 5 org.jsecurity.realm.SimpleAccountRealm.<init>()V: root-Branch
   * 6 org.jsecurity.realm.SimpleAccountRealm.accountAndRoleCachesCreated()V: root-Branch
   * 7 org.jsecurity.realm.SimpleAccountRealm.initRoleCache()V: I4 Branch 1 IFNONNULL L72 - true
   */
  @Test
  public void test0()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCache hashtableCache0 = (HashtableCache)hashtableCacheManager0.getCache((String) null);
      simpleAccountRealm0.setAuthorizationCache((Cache) hashtableCache0);
      boolean boolean0 = simpleAccountRealm0.roleExists((String) null);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_0", simpleAccountRealm0.getName());
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.SimpleAccountRealm.doGetAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: root-Branch
   * 2 org.jsecurity.realm.SimpleAccountRealm.getAuthorizationCacheKey(Lorg/jsecurity/subject/PrincipalCollection;)Ljava/lang/Object;: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      // Undeclared exception!
      try {
        simpleAccountRealm0.hasRole((PrincipalCollection) simplePrincipalCollection0, (String) null);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.SimpleAccountRealm.<init>(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      assertEquals("", simpleAccountRealm0.getName());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.SimpleAccountRealm.initRoleCache()V: I4 Branch 1 IFNONNULL L72 - false
   */
  @Test
  public void test3()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      simpleAccountRealm0.initRoleCache();
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_23", simpleAccountRealm0.getName());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.SimpleAccountRealm.accountExists(Ljava/lang/String;)Z: I5 Branch 2 IFNULL L85 - true
   * 2 org.jsecurity.realm.SimpleAccountRealm.getUser(Ljava/lang/String;)Lorg/jsecurity/authc/SimpleAccount;: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      HashtableCache hashtableCache0 = new HashtableCache("argument is of type [");
      simpleAccountRealm0.setAuthorizationCache((Cache) hashtableCache0);
      boolean boolean0 = simpleAccountRealm0.accountExists("argument is of type [");
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_29", simpleAccountRealm0.getName());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 org.jsecurity.realm.SimpleAccountRealm.accountExists(Ljava/lang/String;)Z: I5 Branch 2 IFNULL L85 - false
   * 2 org.jsecurity.realm.SimpleAccountRealm.getUser(Ljava/lang/String;)Lorg/jsecurity/authc/SimpleAccount;: root-Branch
   * 3 org.jsecurity.realm.SimpleAccountRealm.addAccount(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V: root-Branch
   * 4 org.jsecurity.realm.SimpleAccountRealm.add(Lorg/jsecurity/authc/SimpleAccount;)V: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      HashtableCache hashtableCache0 = new HashtableCache("#D\uFFFDo");
      simpleAccountRealm0.setAuthorizationCache((Cache) hashtableCache0);
      String[] stringArray0 = new String[1];
      simpleAccountRealm0.addAccount("#D\uFFFDo", "#D\uFFFDo", stringArray0);
      boolean boolean0 = simpleAccountRealm0.accountExists("#D\uFFFDo");
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_41", simpleAccountRealm0.getName());
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 org.jsecurity.realm.SimpleAccountRealm.roleExists(Ljava/lang/String;)Z: I5 Branch 3 IFNULL L108 - false
   * 2 org.jsecurity.realm.SimpleAccountRealm.add(Lorg/jsecurity/authz/SimpleRole;)V: root-Branch
   * 3 org.jsecurity.realm.SimpleAccountRealm.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: root-Branch
   * 4 org.jsecurity.realm.SimpleAccountRealm.addRole(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test6()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCache hashtableCache0 = (HashtableCache)hashtableCacheManager0.getCache((String) null);
      simpleAccountRealm0.setAuthorizationCache((Cache) hashtableCache0);
      simpleAccountRealm0.addRole((String) null);
      boolean boolean0 = simpleAccountRealm0.roleExists((String) null);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_66", simpleAccountRealm0.getName());
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I3 Branch 4 IFNULL L120 - true
   */
  @Test
  public void test7()  throws Throwable  {
      Set<String> set0 = SimpleAccountRealm.toSet((String) null, (String) null);
      assertNull(set0);
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I3 Branch 4 IFNULL L120 - false
   * 2 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I8 Branch 5 IFLE L120 - false
   */
  @Test
  public void test8()  throws Throwable  {
      Set<String> set0 = SimpleAccountRealm.toSet("", "");
      assertNull(set0);
  }

  //Test case number: 9
  /*
   * 6 covered goals:
   * 1 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I8 Branch 5 IFLE L120 - true
   * 2 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I39 Branch 6 IF_ICMPGE L126 - true
   * 3 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I39 Branch 6 IF_ICMPGE L126 - false
   * 4 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I53 Branch 7 IFLE L128 - true
   * 5 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I53 Branch 7 IFLE L128 - false
   * 6 org.jsecurity.realm.SimpleAccountRealm.toSet(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set;: I3 Branch 4 IFNULL L120 - false
   */
  @Test
  public void test9()  throws Throwable  {
      Set<String> set0 = SimpleAccountRealm.toSet("&QLXgDN*,HoN\"YrMbP9", "");
      assertNotNull(set0);
      assertEquals(18, set0.size());
  }

  //Test case number: 10
  /*
   * 11 covered goals:
   * 1 org.jsecurity.realm.SimpleAccountRealm.doGetAuthenticationInfo(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I18 Branch 8 IFEQ L143 - true
   * 2 org.jsecurity.realm.SimpleAccountRealm.doGetAuthenticationInfo(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I39 Branch 9 IFEQ L146 - true
   * 3 org.jsecurity.realm.SimpleAccountRealm.addAccount(Ljava/lang/String;Ljava/lang/String;)V: root-Branch
   * 4 org.jsecurity.realm.SimpleAccountRealm.afterRoleCacheSet()V: root-Branch
   * 5 org.jsecurity.realm.SimpleAccountRealm.addAccount(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V: root-Branch
   * 6 org.jsecurity.realm.SimpleAccountRealm.afterAuthorizationCacheSet()V: root-Branch
   * 7 org.jsecurity.realm.SimpleAccountRealm.<init>()V: root-Branch
   * 8 org.jsecurity.realm.SimpleAccountRealm.add(Lorg/jsecurity/authc/SimpleAccount;)V: root-Branch
   * 9 org.jsecurity.realm.SimpleAccountRealm.getAuthorizationCacheKey(Lorg/jsecurity/subject/PrincipalCollection;)Ljava/lang/Object;: root-Branch
   * 10 org.jsecurity.realm.SimpleAccountRealm.accountAndRoleCachesCreated()V: root-Branch
   * 11 org.jsecurity.realm.SimpleAccountRealm.initRoleCache()V: I4 Branch 1 IFNONNULL L72 - true
   */
  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
          HashtableCache hashtableCache0 = new HashtableCache("");
          simpleAccountRealm0.setAuthorizationCache((Cache) hashtableCache0);
          simpleAccountRealm0.addAccount("", "");
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false, (InetAddress) inet4Address0);
          simpleAccountRealm0.getAuthenticationInfo((AuthenticationToken) usernamePasswordToken0);
          assertEquals("org.jsecurity.realm.SimpleAccountRealm_82", simpleAccountRealm0.getName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
