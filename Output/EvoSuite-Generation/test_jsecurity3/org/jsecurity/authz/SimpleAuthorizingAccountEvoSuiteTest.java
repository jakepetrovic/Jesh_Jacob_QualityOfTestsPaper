/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authz;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authc.Account;
import org.jsecurity.authz.AuthorizationException;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.SimpleAuthorizingAccount;
import org.jsecurity.authz.SimpleRole;
import org.jsecurity.authz.UnauthorizedException;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;

public class SimpleAuthorizingAccountEvoSuiteTest {

  //Test case number: 1
  /*
   * 10 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/util/Collection;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I18 Branch 4 IFGT L74 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authz/SimpleRole;)V: I10 Branch 11 IFNULL L107 - true
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.getRolenames()Ljava/util/Set;: I15 Branch 21 IFEQ L164 - true
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.getRolenames()Ljava/util/Set;: I15 Branch 21 IFEQ L164 - false
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I6 Branch 25 IFGT L188 - false
   * 6 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I15 Branch 26 IFEQ L189 - true
   * 7 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I15 Branch 26 IFEQ L189 - false
   * 8 org.jsecurity.authz.SimpleAuthorizingAccount.<init>()V: root-Branch
   * 9 org.jsecurity.authz.SimpleAuthorizingAccount.addRole(Ljava/lang/String;)V: I9 Branch 22 IFNONNULL L172 - false
   * 10 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I8 Branch 16 IFNULL L144 - true
   */
  @Test
  public void test1()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      SimpleRole simpleRole0 = new SimpleRole("M,I");
      simpleAuthorizingAccount0.merge(simpleRole0);
      Set<String> set0 = simpleAuthorizingAccount0.getRolenames();
      assertNotNull(set0);
      
      WildcardPermission wildcardPermission0 = new WildcardPermission("Hf]2C-^R*", true);
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      SimpleAuthorizingAccount simpleAuthorizingAccount1 = new SimpleAuthorizingAccount((Collection) set0, (Object) wildcardPermission0, "Hf]2C-^R*", set0, (Set<Permission>) treeSet0);
      assertNotNull(simpleAuthorizingAccount1);
      assertEquals(false, set0.isEmpty());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authc/Account;)V: I9 Branch 7 IFEQ L94 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authc/Account;)V: I23 Branch 8 IFNULL L97 - true
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I15 Branch 1 IFNULL L65 - true
   */
  @Test
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount(object0, object0, "", (Set<String>) linkedHashSet0, (Set<Permission>) null);
      simpleAuthorizingAccount0.merge((Account) simpleAuthorizingAccount0);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I18 Branch 2 IFGT L65 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I15 Branch 1 IFNULL L65 - false
   */
  @Test
  public void test3()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole();
      HashSet<String> hashSet0 = new HashSet<String>();
      WildcardPermission wildcardPermission0 = new WildcardPermission("&X");
      HashSet<Permission> hashSet1 = new HashSet<Permission>();
      hashSet1.add((Permission) wildcardPermission0);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Object) simpleRole0, (Object) simpleRole0, "&X", (Set<String>) hashSet0, (Set<Permission>) hashSet1);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I15 Branch 5 IFNULL L83 - true
   */
  @Test
  public void test4()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole("U '~<Q>.fvU", (Set<Permission>) null);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) simpleRole0, "U '~<Q>.fvU");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) null, "U '~<Q>.fvU", (Set<String>) linkedHashSet0, (Set<Permission>) null);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I15 Branch 5 IFNULL L83 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I18 Branch 6 IFGT L83 - true
   */
  @Test
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TreeSet<Permission> treeSet1 = new TreeSet<Permission>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, object0, "U '~<Q>.fvU", (Set<String>) treeSet0, (Set<Permission>) treeSet1);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  //Test case number: 6
  /*
   * 15 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authc/Account;)V: I23 Branch 8 IFNULL L97 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authc/Account;)V: I26 Branch 9 IFGT L97 - false
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authc/Account;)V: I35 Branch 10 IFEQ L98 - true
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authc/Account;)V: I35 Branch 10 IFEQ L98 - false
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authz/SimpleRole;)V: I10 Branch 11 IFNULL L107 - false
   * 6 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authz/SimpleRole;)V: I19 Branch 12 IFNULL L109 - true
   * 7 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I8 Branch 16 IFNULL L144 - false
   * 8 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I11 Branch 17 IFGT L144 - false
   * 9 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I20 Branch 18 IFEQ L145 - false
   * 10 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I31 Branch 19 IFLE L146 - false
   * 11 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authc/Account;)V: I9 Branch 7 IFEQ L94 - false
   * 12 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I6 Branch 25 IFGT L188 - false
   * 13 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I15 Branch 26 IFEQ L189 - true
   * 14 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I15 Branch 26 IFEQ L189 - false
   * 15 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I15 Branch 1 IFNULL L65 - true
   */
  @Test
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount(object0, object0, "", (Set<String>) linkedHashSet0, (Set<Permission>) null);
      simpleAuthorizingAccount0.merge((Account) simpleAuthorizingAccount0);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.addPrivateRole(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/Collection;)V: I12 Branch 15 IFGT L119 - true
   */
  @Test
  public void test7()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      simpleAuthorizingAccount0.addPrivateRole((PrincipalCollection) null, (Collection<Permission>) linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I20 Branch 18 IFEQ L145 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I31 Branch 19 IFLE L146 - true
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.add(Lorg/jsecurity/authz/SimpleRole;)V: I8 Branch 23 IFNONNULL L180 - true
   */
  @Test
  public void test8()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.addRole("X4 >=MLA,yU");
      simpleAuthorizingAccount0.addRole((String) null);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.getPermissions()Ljava/util/Set;: I15 Branch 20 IFEQ L156 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.getPermissions()Ljava/util/Set;: I15 Branch 20 IFEQ L156 - false
   */
  @Test
  public void test9()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      Object object0 = new Object();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) linkedHashSet0, object0, "eKy/ .*7J", (Set<String>) null, (Set<Permission>) linkedHashSet0);
      assertNotNull(simpleAuthorizingAccount0);
      
      Set<Permission> set0 = simpleAuthorizingAccount0.getPermissions();
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.addRole(Ljava/lang/String;)V: I9 Branch 22 IFNONNULL L172 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.addRole(Ljava/lang/String;)V: I9 Branch 22 IFNONNULL L172 - false
   */
  @Test
  public void test10()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.addRole("_gq1): Vz;1/c");
      simpleAuthorizingAccount0.addRole("_gq1): Vz;1/c");
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.addAll(Ljava/util/Collection;)V: I3 Branch 27 IFNULL L196 - true
   */
  @Test
  public void test11()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.addAll((Collection<SimpleRole>) null);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.addAll(Ljava/util/Collection;)V: I3 Branch 27 IFNULL L196 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.addAll(Ljava/util/Collection;)V: I6 Branch 28 IFGT L196 - true
   */
  @Test
  public void test12()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<SimpleRole> linkedList0 = new LinkedList<SimpleRole>();
      simpleAuthorizingAccount0.addAll((Collection<SimpleRole>) linkedList0);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.addAll(Ljava/util/Collection;)V: I6 Branch 28 IFGT L196 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.addAll(Ljava/util/Collection;)V: I15 Branch 29 IFNONNULL L198 - false
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.addAll(Ljava/util/Collection;)V: I3 Branch 27 IFNULL L196 - false
   */
  @Test
  public void test13()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<SimpleRole> linkedList0 = new LinkedList<SimpleRole>();
      linkedList0.add((SimpleRole) null);
      simpleAuthorizingAccount0.addAll((Collection<SimpleRole>) linkedList0);
      assertEquals(false, linkedList0.isEmpty());
  }

  //Test case number: 14
  /*
   * 6 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.hasRole(Ljava/lang/String;)Z: I5 Branch 30 IFNULL L208 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.checkRole(Ljava/lang/String;)V: I5 Branch 53 IFNE L291 - false
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.checkRoles(Ljava/util/Collection;)V: I3 Branch 54 IFNULL L298 - false
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.checkRoles(Ljava/util/Collection;)V: I6 Branch 55 IFGT L298 - false
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.checkRoles(Ljava/util/Collection;)V: I15 Branch 56 IFEQ L299 - false
   * 6 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;)V: root-Branch
   */
  @Test
  public void test14()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "[null]", "[null]");
      Set<String> set0 = simplePrincipalCollection0.getRealmNames();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "[]");
      // Undeclared exception!
      try {
        simpleAuthorizingAccount0.checkRoles((Collection<String>) set0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User does not have role [[null]]
         */
      }
  }

  //Test case number: 15
  /*
   * 10 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.hasRole(Ljava/lang/String;)Z: I5 Branch 30 IFNULL L208 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.checkRole(Ljava/lang/String;)V: I5 Branch 53 IFNE L291 - true
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.createPrivateRole(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/SimpleRole;: root-Branch
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/util/Collection;Ljava/lang/Object;Ljava/lang/String;)V: root-Branch
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.getPrivateRoleName(Lorg/jsecurity/subject/PrincipalCollection;)Ljava/lang/String;: root-Branch
   * 6 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I3 Branch 24 IFNULL L188 - true
   * 7 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/util/Collection;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I15 Branch 3 IFNULL L74 - false
   * 8 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/util/Collection;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I18 Branch 4 IFGT L74 - false
   * 9 org.jsecurity.authz.SimpleAuthorizingAccount.addPrivateRole(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/Collection;)V: I9 Branch 14 IFNULL L119 - false
   * 10 org.jsecurity.authz.SimpleAuthorizingAccount.addPrivateRole(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/Collection;)V: I12 Branch 15 IFGT L119 - false
   */
  @Test
  public void test15()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      Object object0 = new Object();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) linkedHashSet0, object0, "eKy/ .*7J", (Set<String>) null, (Set<Permission>) linkedHashSet0);
      simpleAuthorizingAccount0.checkRole("org.jsecurity.authz.SimpleAuthorizingAccount_PRIVATE_ROLE_org.jsecurity.subject.PrincipalCollection");
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Lorg/jsecurity/authz/Permission;)Z: I8 Branch 31 IFNULL L213 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Lorg/jsecurity/authz/Permission;)Z: I11 Branch 32 IFGT L213 - false
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Lorg/jsecurity/authz/Permission;)Z: I20 Branch 33 IFEQ L214 - true
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Lorg/jsecurity/authz/Permission;)Z: I20 Branch 33 IFEQ L214 - false
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Lorg/jsecurity/authz/Permission;)Z: I30 Branch 34 IFEQ L215 - true
   */
  @Test
  public void test16()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      SimpleRole simpleRole0 = new SimpleRole("M,I");
      simpleAuthorizingAccount0.merge(simpleRole0);
      boolean boolean0 = simpleAuthorizingAccount0.isPermitted((Permission) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.hasRoles(Ljava/util/List;)[Z: I3 Branch 35 IFNULL L225 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I18 Branch 2 IFGT L65 - true
   */
  @Test
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount(object0, object0, "U '~<Q>.fvU", (Set<String>) linkedHashSet0, (Set<Permission>) linkedHashSet1);
      boolean[] booleanArray0 = simpleAuthorizingAccount0.hasRoles((List<String>) null);
      assertNotNull(booleanArray0);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.hasRoles(Ljava/util/List;)[Z: I3 Branch 35 IFNULL L225 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.hasRoles(Ljava/util/List;)[Z: I6 Branch 36 IFGT L225 - true
   */
  @Test
  public void test18()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean[] booleanArray0 = simpleAuthorizingAccount0.hasRoles((List<String>) linkedList0);
      assertNotNull(booleanArray0);
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.hasRoles(Ljava/util/List;)[Z: I6 Branch 36 IFGT L225 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.hasRoles(Ljava/util/List;)[Z: I29 Branch 37 IFEQ L229 - true
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.hasRoles(Ljava/util/List;)[Z: I29 Branch 37 IFEQ L229 - false
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.hasRoles(Ljava/util/List;)[Z: I3 Branch 35 IFNULL L225 - false
   */
  @Test
  public void test19()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("X4 >=MLA,yU");
      boolean[] booleanArray0 = simpleAuthorizingAccount0.hasRoles((List<String>) linkedList0);
      assertNotNull(booleanArray0);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I3 Branch 38 IFNULL L239 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I6 Branch 39 IFGT L239 - true
   */
  @Test
  public void test20()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = simpleAuthorizingAccount0.hasAllRoles((Collection<String>) hashSet0);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I6 Branch 39 IFGT L239 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I15 Branch 40 IFEQ L240 - false
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I25 Branch 41 IFNE L241 - false
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.hasRole(Ljava/lang/String;)Z: I5 Branch 30 IFNULL L208 - true
   */
  @Test
  public void test21()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("eKy/ .*7J");
      boolean boolean0 = simpleAuthorizingAccount0.hasAllRoles((Collection<String>) hashSet0);
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 16 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I15 Branch 40 IFEQ L240 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I25 Branch 41 IFNE L241 - true
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.setSimpleRoles(Ljava/util/Set;)V: root-Branch
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.add(Lorg/jsecurity/authz/SimpleRole;)V: I8 Branch 23 IFNONNULL L180 - false
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.getRolenames()Ljava/util/Set;: I15 Branch 21 IFEQ L164 - true
   * 6 org.jsecurity.authz.SimpleAuthorizingAccount.getRolenames()Ljava/util/Set;: I15 Branch 21 IFEQ L164 - false
   * 7 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I3 Branch 38 IFNULL L239 - false
   * 8 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I6 Branch 39 IFGT L239 - false
   * 9 org.jsecurity.authz.SimpleAuthorizingAccount.hasAllRoles(Ljava/util/Collection;)Z: I15 Branch 40 IFEQ L240 - false
   * 10 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I8 Branch 16 IFNULL L144 - true
   * 11 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I8 Branch 16 IFNULL L144 - false
   * 12 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I11 Branch 17 IFGT L144 - false
   * 13 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I20 Branch 18 IFEQ L145 - false
   * 14 org.jsecurity.authz.SimpleAuthorizingAccount.getRole(Ljava/lang/String;)Lorg/jsecurity/authz/SimpleRole;: I31 Branch 19 IFLE L146 - false
   * 15 org.jsecurity.authz.SimpleAuthorizingAccount.merge(Lorg/jsecurity/authz/SimpleRole;)V: I10 Branch 11 IFNULL L107 - true
   * 16 org.jsecurity.authz.SimpleAuthorizingAccount.hasRole(Ljava/lang/String;)Z: I5 Branch 30 IFNULL L208 - false
   */
  @Test
  public void test22()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      SimpleRole simpleRole0 = new SimpleRole("M,I");
      simpleAuthorizingAccount0.merge(simpleRole0);
      Set<String> set0 = simpleAuthorizingAccount0.getRolenames();
      assertNotNull(set0);
      
      boolean boolean0 = simpleAuthorizingAccount0.hasAllRoles((Collection<String>) set0);
      assertEquals(true, boolean0);
      assertEquals(false, set0.isEmpty());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Ljava/util/List;)[Z: I3 Branch 42 IFNULL L251 - true
   */
  @Test
  public void test23()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      boolean[] booleanArray0 = simpleAuthorizingAccount0.isPermitted((List<Permission>) null);
      assertNotNull(booleanArray0);
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Ljava/util/List;)[Z: I3 Branch 42 IFNULL L251 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Ljava/util/List;)[Z: I6 Branch 43 IFGT L251 - true
   */
  @Test
  public void test24()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      boolean[] booleanArray0 = simpleAuthorizingAccount0.isPermitted((List<Permission>) linkedList0);
      assertNotNull(booleanArray0);
  }

  //Test case number: 25
  /*
   * 5 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Ljava/util/List;)[Z: I6 Branch 43 IFGT L251 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Ljava/util/List;)[Z: I29 Branch 44 IFEQ L255 - true
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Ljava/util/List;)[Z: I29 Branch 44 IFEQ L255 - false
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Ljava/util/List;)[Z: I3 Branch 42 IFNULL L251 - false
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Lorg/jsecurity/authz/Permission;)Z: I8 Branch 31 IFNULL L213 - true
   */
  @Test
  public void test25()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      linkedList0.add((Permission) null);
      boolean[] booleanArray0 = simpleAuthorizingAccount0.isPermitted((List<Permission>) linkedList0);
      assertNotNull(booleanArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.isPermittedAll(Ljava/util/Collection;)Z: I3 Branch 45 IFNULL L265 - true
   */
  @Test
  public void test26()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      boolean boolean0 = simpleAuthorizingAccount0.isPermittedAll((Collection<Permission>) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 27
  /*
   * 7 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.isPermittedAll(Ljava/util/Collection;)Z: I3 Branch 45 IFNULL L265 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.isPermittedAll(Ljava/util/Collection;)Z: I6 Branch 46 IFGT L265 - true
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;)V: root-Branch
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I3 Branch 24 IFNULL L188 - false
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.addRoles(Ljava/util/Set;)V: I6 Branch 25 IFGT L188 - true
   * 6 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I15 Branch 1 IFNULL L65 - false
   * 7 org.jsecurity.authz.SimpleAuthorizingAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: I18 Branch 2 IFGT L65 - true
   */
  @Test
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount(object0, object0, "U '~<Q>.fvU", (Set<String>) linkedHashSet0, (Set<Permission>) linkedHashSet1);
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      boolean boolean0 = simpleAuthorizingAccount0.isPermittedAll((Collection<Permission>) treeSet0);
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 4 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.isPermittedAll(Ljava/util/Collection;)Z: I6 Branch 46 IFGT L265 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.isPermittedAll(Ljava/util/Collection;)Z: I15 Branch 47 IFEQ L266 - false
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.isPermittedAll(Ljava/util/Collection;)Z: I25 Branch 48 IFNE L267 - false
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.isPermittedAll(Ljava/util/Collection;)Z: I3 Branch 45 IFNULL L265 - false
   */
  @Test
  public void test28()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      boolean boolean0 = simpleAuthorizingAccount0.isPermittedAll((Collection<Permission>) linkedHashSet0);
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 6 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.checkPermission(Lorg/jsecurity/authz/Permission;)V: I5 Branch 49 IFNE L276 - false
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.checkPermissions(Ljava/util/Collection;)V: I3 Branch 50 IFNULL L283 - false
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.checkPermissions(Ljava/util/Collection;)V: I6 Branch 51 IFGT L283 - false
   * 4 org.jsecurity.authz.SimpleAuthorizingAccount.checkPermissions(Ljava/util/Collection;)V: I15 Branch 52 IFEQ L284 - false
   * 5 org.jsecurity.authz.SimpleAuthorizingAccount.getSimpleRoles()Ljava/util/Set;: root-Branch
   * 6 org.jsecurity.authz.SimpleAuthorizingAccount.isPermitted(Lorg/jsecurity/authz/Permission;)Z: I8 Branch 31 IFNULL L213 - true
   */
  @Test
  public void test29()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      linkedList0.add((Permission) null);
      try {
        simpleAuthorizingAccount0.checkPermissions((Collection<Permission>) linkedList0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User is not permitted [null]
         */
      }
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.checkPermissions(Ljava/util/Collection;)V: I3 Branch 50 IFNULL L283 - true
   */
  @Test
  public void test30()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.checkPermissions((Collection<Permission>) null);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.checkPermissions(Ljava/util/Collection;)V: I6 Branch 51 IFGT L283 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.checkPermissions(Ljava/util/Collection;)V: I3 Branch 50 IFNULL L283 - false
   */
  @Test
  public void test31()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      simpleAuthorizingAccount0.checkPermissions((Collection<Permission>) linkedHashSet0);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.checkRoles(Ljava/util/Collection;)V: I3 Branch 54 IFNULL L298 - true
   */
  @Test
  public void test32()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.checkRoles((Collection<String>) null);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  //Test case number: 33
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authz.SimpleAuthorizingAccount.checkRoles(Ljava/util/Collection;)V: I6 Branch 55 IFGT L298 - true
   * 2 org.jsecurity.authz.SimpleAuthorizingAccount.<init>()V: root-Branch
   * 3 org.jsecurity.authz.SimpleAuthorizingAccount.checkRoles(Ljava/util/Collection;)V: I3 Branch 54 IFNULL L298 - false
   */
  @Test
  public void test33()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      simpleAuthorizingAccount0.checkRoles((Collection<String>) treeSet0);
      assertEquals(0, treeSet0.size());
  }
}
