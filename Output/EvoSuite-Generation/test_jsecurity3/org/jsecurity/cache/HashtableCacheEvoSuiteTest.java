/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.cache;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.HashSet;
import java.util.Set;
import org.jsecurity.cache.CacheException;
import org.jsecurity.cache.HashtableCache;

public class HashtableCacheEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.jsecurity.cache.HashtableCache.clear()V: root-Branch
   * 2 org.jsecurity.cache.HashtableCache.<init>(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("~a3<5@iYDJ`Z T\"LJ");
      hashtableCache0.clear();
      assertEquals(0, hashtableCache0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.jsecurity.cache.HashtableCache.size()I: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("Has!tCce ");
      int int0 = hashtableCache0.size();
      assertEquals(0, int0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.jsecurity.cache.HashtableCache.get(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 2 org.jsecurity.cache.HashtableCache.keys()Ljava/util/Set;: I5 Branch 1 IFGT L76 - true
   */
  @Test
  public void test2()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("Has!tCce ");
      Set<Object> set0 = hashtableCache0.keys();
      Object object0 = hashtableCache0.get((Object) set0);
      assertNull(object0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.jsecurity.cache.HashtableCache.remove(Ljava/lang/Object;)V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("Has!tCce ");
      hashtableCache0.remove((Object) 0);
      assertEquals(0, hashtableCache0.size());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.jsecurity.cache.HashtableCache.toString()Ljava/lang/String;: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("~a3<5@iYDJ`Z T\"LJ");
      String string0 = hashtableCache0.toString();
      assertNotNull(string0);
      assertEquals("HashtableCache [~a3<5@iYDJ`Z T\"LJ]", string0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 org.jsecurity.cache.HashtableCache.keys()Ljava/util/Set;: I5 Branch 1 IFGT L76 - false
   * 2 org.jsecurity.cache.HashtableCache.put(Ljava/lang/Object;Ljava/lang/Object;)V: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("~a3<5@iYDJ`Z T\"LJ");
      HashSet<Set<String>> hashSet0 = new HashSet<Set<String>>();
      hashtableCache0.put((Object) hashSet0, (Object) hashSet0);
      Set<Object> set0 = hashtableCache0.keys();
      assertEquals(1, hashtableCache0.size());
      assertEquals(1, set0.size());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.jsecurity.cache.HashtableCache.values()Ljava/util/Set;: I5 Branch 2 IFGT L84 - true
   */
  @Test
  public void test6()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("Has!tCce ");
      Set<Object> set0 = hashtableCache0.values();
      assertEquals(0, set0.size());
  }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 org.jsecurity.cache.HashtableCache.values()Ljava/util/Set;: I5 Branch 2 IFGT L84 - false
   * 2 org.jsecurity.cache.HashtableCache.values()Ljava/util/Set;: I16 Branch 3 IFEQ L86 - true
   * 3 org.jsecurity.cache.HashtableCache.<init>(Ljava/lang/String;)V: root-Branch
   * 4 org.jsecurity.cache.HashtableCache.put(Ljava/lang/Object;Ljava/lang/Object;)V: root-Branch
   */
  @Test
  public void test7()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("~a3<5@iYDJ`Z T\"LJ");
      HashSet<Set<String>> hashSet0 = new HashSet<Set<String>>();
      hashtableCache0.put((Object) hashSet0, (Object) hashSet0);
      hashtableCache0.values();
      assertEquals(1, hashtableCache0.size());
  }
}
