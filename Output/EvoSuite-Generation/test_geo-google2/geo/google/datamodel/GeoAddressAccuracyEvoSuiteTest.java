/*
 * This file was automatically generated by EvoSuite
 */

package geo.google.datamodel;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import geo.google.datamodel.GeoAddressAccuracy;

public class GeoAddressAccuracyEvoSuiteTest {


  //Test case number: 0
  /*
   * 1 covered goal:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getName()Ljava/lang/String;: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.ADDRESS_LEVEL;
      String string0 = geoAddressAccuracy0.getName();
      assertEquals("ADDRESS_LEVEL", string0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getCode()I: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.ADDRESS_LEVEL;
      int int0 = geoAddressAccuracy0.getCode();
      assertEquals(8, int0);
  }

  //Test case number: 2
  /*
   * 10 covered goals:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 1 TABLESWITCH L30 Case 0 - true
   * 2 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 2 TABLESWITCH L30 Case 1 - false
   * 3 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 3 TABLESWITCH L30 Case 2 - false
   * 4 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 4 TABLESWITCH L30 Case 3 - false
   * 5 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 5 TABLESWITCH L30 Case 4 - false
   * 6 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 6 TABLESWITCH L30 Case 5 - false
   * 7 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 7 TABLESWITCH L30 Case 6 - false
   * 8 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 8 TABLESWITCH L30 Case 7 - false
   * 9 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 9 TABLESWITCH L30 Case 8 - false
   * 10 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 10 TABLESWITCH L30 Default-Case - false
   */
  @Test
  public void test2()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(0);
      assertEquals(GeoAddressAccuracy.UNKNOWN_LOCATION, geoAddressAccuracy0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 1 TABLESWITCH L30 Case 0 - false
   * 2 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 2 TABLESWITCH L30 Case 1 - true
   */
  @Test
  public void test3()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(1);
      assertEquals(GeoAddressAccuracy.COUNTRY_LEVEL, geoAddressAccuracy0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 3 TABLESWITCH L30 Case 2 - true
   */
  @Test
  public void test4()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(2);
      assertEquals(GeoAddressAccuracy.REGION_LEVEL, geoAddressAccuracy0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 4 TABLESWITCH L30 Case 3 - true
   */
  @Test
  public void test5()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(3);
      assertEquals(GeoAddressAccuracy.SUB_REGION_LEVEL, geoAddressAccuracy0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 5 TABLESWITCH L30 Case 4 - true
   */
  @Test
  public void test6()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(4);
      assertEquals(GeoAddressAccuracy.TOWN_LEVEL, geoAddressAccuracy0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 6 TABLESWITCH L30 Case 5 - true
   */
  @Test
  public void test7()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(5);
      assertEquals(GeoAddressAccuracy.POST_CODE_LEVEL, geoAddressAccuracy0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 7 TABLESWITCH L30 Case 6 - true
   */
  @Test
  public void test8()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(6);
      assertEquals(GeoAddressAccuracy.STREET_LEVEL, geoAddressAccuracy0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 8 TABLESWITCH L30 Case 7 - true
   */
  @Test
  public void test9()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(7);
      assertEquals(GeoAddressAccuracy.INTERSECTION_LEVEL, geoAddressAccuracy0);
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 9 TABLESWITCH L30 Case 8 - true
   * 2 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 10 TABLESWITCH L30 Default-Case - false
   */
  @Test
  public void test10()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(8);
      assertEquals(GeoAddressAccuracy.ADDRESS_LEVEL, geoAddressAccuracy0);
  }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 10 TABLESWITCH L30 Default-Case - true
   * 2 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 1 TABLESWITCH L30 Case 0 - false
   * 3 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 2 TABLESWITCH L30 Case 1 - false
   * 4 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 3 TABLESWITCH L30 Case 2 - false
   * 5 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 4 TABLESWITCH L30 Case 3 - false
   * 6 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 5 TABLESWITCH L30 Case 4 - false
   * 7 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 6 TABLESWITCH L30 Case 5 - false
   * 8 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 7 TABLESWITCH L30 Case 6 - false
   * 9 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 8 TABLESWITCH L30 Case 7 - false
   * 10 geo.google.datamodel.GeoAddressAccuracy.getAccuracyByCode(I)Lgeo/google/datamodel/GeoAddressAccuracy;: I3 Branch 9 TABLESWITCH L30 Case 8 - false
   */
  @Test
  public void test11()  throws Throwable  {
      GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy.getAccuracyByCode(459491087);
      assertEquals(GeoAddressAccuracy.UNKNOWN_LOCATION, geoAddressAccuracy0);
  }
}
