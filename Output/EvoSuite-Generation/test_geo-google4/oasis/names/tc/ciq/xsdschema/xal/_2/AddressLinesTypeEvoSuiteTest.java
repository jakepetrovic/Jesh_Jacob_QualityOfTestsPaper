/*
 * This file was automatically generated by EvoSuite
 */

package oasis.names.tc.ciq.xsdschema.xal._2;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import oasis.names.tc.ciq.xsdschema.xal._2.AddressLine;
import oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType;

public class AddressLinesTypeEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType.getOtherAttributes()Ljava/util/Map;: root-Branch
   * 2 oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      AddressLinesType addressLinesType0 = new AddressLinesType();
      Map<QName, String> map0 = addressLinesType0.getOtherAttributes();
      assertEquals(0, map0.size());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType.getAddressLine()Ljava/util/List;: I4 Branch 1 IFNONNULL L82 - true
   * 2 oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType.getAddressLine()Ljava/util/List;: I4 Branch 1 IFNONNULL L82 - false
   */
  @Test
  public void test1()  throws Throwable  {
      AddressLinesType addressLinesType0 = new AddressLinesType();
      List<AddressLine> list0 = addressLinesType0.getAddressLine();
      List<AddressLine> list1 = addressLinesType0.getAddressLine();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType.getAny()Ljava/util/List;: I4 Branch 2 IFNONNULL L111 - true
   * 2 oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType.getAny()Ljava/util/List;: I4 Branch 2 IFNONNULL L111 - false
   * 3 oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType.<init>()V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      AddressLinesType addressLinesType0 = new AddressLinesType();
      List<Object> list0 = addressLinesType0.getAny();
      List<Object> list1 = addressLinesType0.getAny();
      assertNotNull(list1);
      assertSame(list1, list0);
  }
}
