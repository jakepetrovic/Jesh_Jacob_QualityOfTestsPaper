/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.schemaspy.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import net.sourceforge.schemaspy.util.LogFormatter;

public class LogFormatterEvoSuiteTest {


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I69 Branch 1 IF_ICMPLE L96 - true
   * 2 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I86 Branch 2 IF_ICMPGE L99 - true
   * 3 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I86 Branch 2 IF_ICMPGE L99 - false
   * 4 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I110 Branch 3 IFNULL L105 - true
   * 5 net.sourceforge.schemaspy.util.LogFormatter.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      LogFormatter logFormatter0 = new LogFormatter();
      assertNotNull(logFormatter0);
      
      Level level0 = Level.FINEST;
      LogRecord logRecord0 = new LogRecord(level0, "DSD4.|FuIOEG");
      // Undeclared exception!
      try {
        logFormatter0.format(logRecord0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I132 Branch 4 IFLT L112 - true
   * 2 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I110 Branch 3 IFNULL L105 - false
   * 3 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I157 Branch 6 IFNULL L116 - true
   * 4 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I196 Branch 7 IFNULL L125 - true
   */
  @Test
  public void test1()  throws Throwable  {
      LogFormatter logFormatter0 = new LogFormatter();
      assertNotNull(logFormatter0);
      
      Level level0 = Level.WARNING;
      LogRecord logRecord0 = new LogRecord(level0, "");
      logRecord0.setSourceClassName("");
      String string0 = logFormatter0.format(logRecord0);
      assertEquals(4621L, logRecord0.getSequenceNumber());
      assertEquals("08:21:23.959 WARNING:  - \n", string0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I138 Branch 5 IF_ICMPGE L112 - true
   * 2 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I157 Branch 6 IFNULL L116 - true
   * 3 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I132 Branch 4 IFLT L112 - false
   */
  @Test
  public void test2()  throws Throwable  {
      LogFormatter logFormatter0 = new LogFormatter();
      assertNotNull(logFormatter0);
      
      Level level0 = Level.WARNING;
      LogRecord logRecord0 = new LogRecord(level0, "HH:mm:ss.");
      logRecord0.setSourceClassName("HH:mm:ss.");
      String string0 = logFormatter0.format(logRecord0);
      assertEquals(4695L, logRecord0.getSequenceNumber());
      assertEquals("08:21:30.716 WARNING: HH:mm:ss. - HH:mm:ss.\n", string0);
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I157 Branch 6 IFNULL L116 - false
   * 2 net.sourceforge.schemaspy.util.LogFormatter.<init>()V: root-Branch
   * 3 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I69 Branch 1 IF_ICMPLE L96 - true
   * 4 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I86 Branch 2 IF_ICMPGE L99 - true
   * 5 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I86 Branch 2 IF_ICMPGE L99 - false
   * 6 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I110 Branch 3 IFNULL L105 - false
   * 7 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I132 Branch 4 IFLT L112 - false
   * 8 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I138 Branch 5 IF_ICMPGE L112 - false
   * 9 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I196 Branch 7 IFNULL L125 - true
   */
  @Test
  public void test3()  throws Throwable  {
      LogFormatter logFormatter0 = new LogFormatter();
      assertNotNull(logFormatter0);
      
      Level level0 = Level.FINEST;
      LogRecord logRecord0 = new LogRecord(level0, "DSD4.|FuIOEG");
      logRecord0.setSourceClassName("DSD4.|FuIOEG");
      logRecord0.setSourceMethodName("08:21:16.830 FINEST:  |FuIOEG - DSD4.|FuIOEG\n");
      String string0 = logFormatter0.format(logRecord0);
      assertEquals(4769L, logRecord0.getSequenceNumber());
      assertEquals("08:21:37.231 FINEST:  |FuIOEG.08:21:16.830 FINEST:  |FuIOEG - DSD4.|FuIOEG\n - DSD4.|FuIOEG\n", string0);
  }
}
