/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authc;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authc.SimpleAuthenticationInfo;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;

public class SimpleAccountEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.addRole(Ljava/lang/String;)V: root-Branch
   * 2 org.jsecurity.authc.SimpleAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "[]");
      simpleAccount0.addRole("");
      assertEquals(false, simpleAccount0.isLocked());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.setRoles(Ljava/util/Set;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "[]", (Object) "[]", "[]");
      simpleAccount0.setRoles((Set<String>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.addStringPermission(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "[]", (Object) "[]", "[]");
      simpleAccount0.addStringPermission("[]");
      assertEquals(false, simpleAccount0.isLocked());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.setLocked(Z)V: root-Branch
   * 2 org.jsecurity.authc.SimpleAccount.<init>(Ljava/util/Collection;Ljava/lang/Object;Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((Collection) linkedHashSet0, (Object) simplePrincipalCollection0, "");
      simpleAccount0.setLocked(true);
      assertEquals(true, simpleAccount0.isLocked());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.addObjectPermission(Lorg/jsecurity/authz/Permission;)V: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "[]", "[]");
      Object object0 = new Object();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) simplePrincipalCollection0, object0, "[]");
      simpleAccount0.addObjectPermission((Permission) null);
      assertEquals(false, simpleAccount0.isCredentialsExpired());
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.toString()Ljava/lang/String;: I4 Branch 10 IFNULL L424 - false
   * 2 org.jsecurity.authc.SimpleAccount.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: root-Branch
   * 3 org.jsecurity.authc.SimpleAccount.getPrincipals()Lorg/jsecurity/subject/PrincipalCollection;: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "[]", (Object) null, "[]", (Set<String>) null, (Set<Permission>) linkedHashSet0);
      String string0 = simpleAccount0.toString();
      assertNotNull(string0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.setPrincipals(Lorg/jsecurity/subject/PrincipalCollection;)V: root-Branch
   */
  @Test
  public void test6()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "[]");
      simpleAccount0.setPrincipals((PrincipalCollection) simplePrincipalCollection0);
      assertEquals(false, simpleAccount0.isCredentialsExpired());
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.merge(Lorg/jsecurity/authc/AuthenticationInfo;)V: I30 Branch 4 IFEQ L384 - false
   * 2 org.jsecurity.authc.SimpleAccount.setCredentialsExpired(Z)V: root-Branch
   * 3 org.jsecurity.authc.SimpleAccount.getCredentials()Ljava/lang/Object;: root-Branch
   * 4 org.jsecurity.authc.SimpleAccount.isLocked()Z: root-Branch
   * 5 org.jsecurity.authc.SimpleAccount.isCredentialsExpired()Z: root-Branch
   * 6 org.jsecurity.authc.SimpleAccount.merge(Lorg/jsecurity/authc/AuthenticationInfo;)V: I10 Branch 2 IFEQ L378 - false
   * 7 org.jsecurity.authc.SimpleAccount.merge(Lorg/jsecurity/authc/AuthenticationInfo;)V: I20 Branch 3 IFEQ L380 - true
   */
  @Test
  public void test7()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((Collection) linkedHashSet0, (Object) simplePrincipalCollection0, "");
      simpleAccount0.setCredentialsExpired(true);
      simpleAccount0.merge((AuthenticationInfo) simpleAccount0);
      assertEquals(true, simpleAccount0.isCredentialsExpired());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.setCredentials(Ljava/lang/Object;)V: root-Branch
   */
  @Test
  public void test8()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "[]", (Object) "[]", "[]");
      simpleAccount0.setCredentials((Object) simpleAccount0);
      assertEquals(false, simpleAccount0.isLocked());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;Ljava/util/Set;Ljava/util/Set;)V: root-Branch
   */
  @Test
  public void test9()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TreeSet<Permission> treeSet1 = new TreeSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "[]", (Set<String>) treeSet0, (Set<Permission>) treeSet1);
      assertEquals(false, simpleAccount0.isCredentialsExpired());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.getObjectPermissions()Ljava/util/Collection;: root-Branch
   * 2 org.jsecurity.authc.SimpleAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;Ljava/util/Set;)V: root-Branch
   */
  @Test
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, "*");
      Set<String> set0 = simplePrincipalCollection0.getRealmNames();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0, set0);
      Collection<Permission> collection0 = simpleAccount0.getObjectPermissions();
      assertNull(collection0);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.getStringPermissions()Ljava/util/Collection;: root-Branch
   * 2 org.jsecurity.authc.SimpleAccount.<init>()V: root-Branch
   */
  @Test
  public void test11()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount();
      // Undeclared exception!
      try {
        simpleAccount0.getStringPermissions();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.setObjectPermissions(Ljava/util/Set;)V: root-Branch
   * 2 org.jsecurity.authc.SimpleAccount.<init>()V: root-Branch
   */
  @Test
  public void test12()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount();
      HashSet<Permission> hashSet0 = new HashSet<Permission>();
      // Undeclared exception!
      try {
        simpleAccount0.setObjectPermissions((Set<Permission>) hashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.getRoles()Ljava/util/Collection;: root-Branch
   */
  @Test
  public void test13()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((Collection) linkedHashSet0, (Object) simplePrincipalCollection0, "");
      Collection<String> collection0 = simpleAccount0.getRoles();
      assertNull(collection0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.addStringPermissions(Ljava/util/Collection;)V: root-Branch
   */
  @Test
  public void test14()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "[]", "[]");
      Object object0 = new Object();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) simplePrincipalCollection0, object0, "[]");
      // Undeclared exception!
      try {
        simpleAccount0.addStringPermissions((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.addRole(Ljava/util/Collection;)V: root-Branch
   */
  @Test
  public void test15()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "[]", (Object) "[]", "[]");
      simpleAccount0.addRole((Collection<String>) linkedHashSet0);
      assertEquals(false, simpleAccount0.isLocked());
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.setStringPermissions(Ljava/util/Set;)V: root-Branch
   */
  @Test
  public void test16()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Object object0 = new Object();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, object0, (Set<String>) linkedHashSet0);
      simpleAccount0.setStringPermissions((Set<String>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.addObjectPermissions(Ljava/util/Collection;)V: root-Branch
   * 2 org.jsecurity.authc.SimpleAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;Ljava/util/Set;)V: root-Branch
   */
  @Test
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, "*");
      Set<String> set0 = simplePrincipalCollection0.getRealmNames();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0, set0);
      // Undeclared exception!
      try {
        simpleAccount0.addObjectPermissions((Collection<Permission>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.merge(Lorg/jsecurity/authc/AuthenticationInfo;)V: I10 Branch 2 IFEQ L378 - true
   */
  @Test
  public void test18()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "[]");
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      simpleAccount0.merge((AuthenticationInfo) simpleAuthenticationInfo0);
      assertEquals(false, simpleAccount0.isCredentialsExpired());
  }

  //Test case number: 19
  /*
   * 7 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.hashCode()I: I4 Branch 5 IFNULL L396 - false
   * 2 org.jsecurity.authc.SimpleAccount.getCredentials()Ljava/lang/Object;: root-Branch
   * 3 org.jsecurity.authc.SimpleAccount.isLocked()Z: root-Branch
   * 4 org.jsecurity.authc.SimpleAccount.isCredentialsExpired()Z: root-Branch
   * 5 org.jsecurity.authc.SimpleAccount.merge(Lorg/jsecurity/authc/AuthenticationInfo;)V: I10 Branch 2 IFEQ L378 - false
   * 6 org.jsecurity.authc.SimpleAccount.merge(Lorg/jsecurity/authc/AuthenticationInfo;)V: I20 Branch 3 IFEQ L380 - true
   * 7 org.jsecurity.authc.SimpleAccount.merge(Lorg/jsecurity/authc/AuthenticationInfo;)V: I30 Branch 4 IFEQ L384 - true
   */
  @Test
  public void test19()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "[]", "[]");
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "[]");
      SimpleAccount simpleAccount1 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simpleAccount0);
      simpleAccount0.merge((AuthenticationInfo) simpleAccount1);
      assertEquals(false, simpleAccount0.isCredentialsExpired());
      assertEquals(false, simpleAccount0.isLocked());
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.equals(Ljava/lang/Object;)Z: I4 Branch 6 IF_ACMPNE L407 - true
   * 2 org.jsecurity.authc.SimpleAccount.equals(Ljava/lang/Object;)Z: I13 Branch 7 IFEQ L410 - false
   * 3 org.jsecurity.authc.SimpleAccount.equals(Ljava/lang/Object;)Z: I23 Branch 8 IFNULL L413 - false
   * 4 org.jsecurity.authc.SimpleAccount.getPrincipals()Lorg/jsecurity/subject/PrincipalCollection;: root-Branch
   * 5 org.jsecurity.authc.SimpleAccount.<init>(Ljava/util/Collection;Ljava/lang/Object;Ljava/lang/String;)V: root-Branch
   * 6 org.jsecurity.authc.SimpleAccount.<init>(Ljava/util/Collection;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V: root-Branch
   */
  @Test
  public void test20()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((Collection) linkedHashSet0, (Object) simplePrincipalCollection0, "");
      HashSet<String> hashSet0 = new HashSet<String>();
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      SimpleAccount simpleAccount1 = new SimpleAccount((Collection) linkedHashSet0, (Object) "[]", "[]", (Set<String>) hashSet0, (Set<Permission>) treeSet0);
      assertNotNull(simpleAccount1);
      
      boolean boolean0 = simpleAccount0.equals((Object) simpleAccount1);
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.SimpleAccount.equals(Ljava/lang/Object;)Z: I4 Branch 6 IF_ACMPNE L407 - false
   */
  @Test
  public void test21()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "[]", (Object) "[]", "[]");
      boolean boolean0 = simpleAccount0.equals((Object) simpleAccount0);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.SimpleAccount.equals(Ljava/lang/Object;)Z: I13 Branch 7 IFEQ L410 - true
   * 2 org.jsecurity.authc.SimpleAccount.<init>(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/Object;)V: root-Branch
   * 3 org.jsecurity.authc.SimpleAccount.equals(Ljava/lang/Object;)Z: I4 Branch 6 IF_ACMPNE L407 - true
   */
  @Test
  public void test22()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "[]", (Object) "[]", "[]");
      AllPermission allPermission0 = new AllPermission();
      boolean boolean0 = simpleAccount0.equals((Object) allPermission0);
      assertEquals(false, boolean0);
  }
}
