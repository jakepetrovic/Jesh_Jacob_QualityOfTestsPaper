/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.jsecurity.mgt.DefaultSecurityManager;
import org.jsecurity.mgt.SecurityManager;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.Subject;
import org.jsecurity.util.ThreadContext;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class ThreadContextEvoSuiteTest {

  private static ExecutorService executor; 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.jsecurity.util.ThreadContext.unbindSubject()Lorg/jsecurity/subject/Subject;: root-Branch
   * 2 org.jsecurity.util.ThreadContext.getResources()Ljava/util/Map;: root-Branch
   * 3 org.jsecurity.util.ThreadContext.remove(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 8 IFNULL L161 - true
   */
  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      Subject subject0 = null;
      try {
        subject0 = ThreadContext.unbindSubject();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.net.Inet4Address cannot be cast to org.jsecurity.subject.Subject
         */
      }
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 org.jsecurity.util.ThreadContext.getSecurityManager()Lorg/jsecurity/mgt/SecurityManager;: root-Branch
   * 2 org.jsecurity.util.ThreadContext.get(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 2 IFEQ L103 - true
   * 3 org.jsecurity.util.ThreadContext.get(Ljava/lang/Object;)Ljava/lang/Object;: I33 Branch 3 IFNULL L108 - true
   */
  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      SecurityManager securityManager0 = null;
      try {
        securityManager0 = ThreadContext.getSecurityManager();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.net.Inet4Address cannot be cast to org.jsecurity.mgt.SecurityManager
         */
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.ThreadContext.containsKey(Ljava/lang/Object;)Z: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = ThreadContext.containsKey((Object) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 12 covered goals:
   * 1 org.jsecurity.util.ThreadContext.get(Ljava/lang/Object;)Ljava/lang/Object;: I33 Branch 3 IFNULL L108 - false
   * 2 org.jsecurity.util.ThreadContext.get(Ljava/lang/Object;)Ljava/lang/Object;: I36 Branch 4 IFEQ L108 - true
   * 3 org.jsecurity.util.ThreadContext.remove(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 8 IFNULL L161 - false
   * 4 org.jsecurity.util.ThreadContext.remove(Ljava/lang/Object;)Ljava/lang/Object;: I12 Branch 9 IFEQ L161 - true
   * 5 org.jsecurity.util.ThreadContext.clear()V: I8 Branch 10 IFEQ L191 - true
   * 6 org.jsecurity.util.ThreadContext.unbindInetAddress()Ljava/net/InetAddress;: root-Branch
   * 7 org.jsecurity.util.ThreadContext.unbindSecurityManager()Lorg/jsecurity/mgt/SecurityManager;: root-Branch
   * 8 org.jsecurity.util.ThreadContext.getSubject()Lorg/jsecurity/subject/Subject;: root-Branch
   * 9 org.jsecurity.util.ThreadContext.getInetAddress()Ljava/net/InetAddress;: root-Branch
   * 10 org.jsecurity.util.ThreadContext.get(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 2 IFEQ L103 - true
   * 11 org.jsecurity.util.ThreadContext.get(Ljava/lang/Object;)Ljava/lang/Object;: I33 Branch 3 IFNULL L108 - true
   * 12 org.jsecurity.util.ThreadContext.remove(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 8 IFNULL L161 - true
   */
  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ThreadContext.getInetAddress();
          Inet4Address inet4Address0 = (Inet4Address)ThreadContext.unbindInetAddress();
          inet4Address0.getAddress();
          Inet4Address inet4Address1 = (Inet4Address)InetAddress.getLocalHost();
          ThreadContext.clear();
          ThreadContext.unbindSecurityManager();
          Object object0 = null;
          inet4Address1.equals((Object) null);
          ThreadContext.getResources();
          ThreadContext.getSubject();
          InetAddress.getByName("");
          // Undeclared exception!
          try {
            inet4Address0.isReachable((-65));
            fail("Expecting exception: IllegalArgumentException");
          } catch(IllegalArgumentException e) {
            /*
             * timeout can't be negative
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.ThreadContext$1.childValue(Ljava/util/Map;)Ljava/util/Map;: I3 Branch 1 IFNULL L70 - false
   */
  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
          DelegatingSubject delegatingSubject0 = new DelegatingSubject((SecurityManager) defaultSecurityManager0);
          Session session0 = delegatingSubject0.getSession(true);
          assertEquals(1800000L, session0.getTimeout());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 org.jsecurity.util.ThreadContext.put(Ljava/lang/Object;Ljava/lang/Object;)V: I3 Branch 5 IFNONNULL L132 - true
   * 2 org.jsecurity.util.ThreadContext.put(Ljava/lang/Object;Ljava/lang/Object;)V: I14 Branch 6 IFNONNULL L136 - true
   * 3 org.jsecurity.util.ThreadContext.put(Ljava/lang/Object;Ljava/lang/Object;)V: I34 Branch 7 IFEQ L143 - true
   * 4 org.jsecurity.util.ThreadContext.bind(Lorg/jsecurity/subject/Subject;)V: I3 Branch 12 IFNULL L291 - false
   */
  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
          DelegatingSubject delegatingSubject0 = new DelegatingSubject((SecurityManager) defaultSecurityManager0);
          ThreadContext.bind((Subject) delegatingSubject0);
          assertEquals(false, delegatingSubject0.isAuthenticated());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.ThreadContext.bind(Lorg/jsecurity/mgt/SecurityManager;)V: I3 Branch 11 IFNULL L233 - false
   */
  @Test
  public void test6()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("Identity principals are not associated with this Subject instance - authorization operations require an identity to check against.  A Subject instance will acquire these identifying principals automatically after a successful login is performed be executing ");
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager((Realm) simpleAccountRealm0);
      ThreadContext.bind((SecurityManager) defaultSecurityManager0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.ThreadContext.bind(Lorg/jsecurity/subject/Subject;)V: I3 Branch 12 IFNULL L291 - true
   */
  @Test
  public void test7()  throws Throwable  {
      ThreadContext.bind((Subject) null);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.ThreadContext.bind(Ljava/net/InetAddress;)V: I3 Branch 13 IFNULL L347 - true
   */
  @Test
  public void test8()  throws Throwable  {
      ThreadContext.bind((InetAddress) null);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 org.jsecurity.util.ThreadContext.bind(Ljava/net/InetAddress;)V: I3 Branch 13 IFNULL L347 - false
   * 2 org.jsecurity.util.ThreadContext.getResources()Ljava/util/Map;: root-Branch
   * 3 org.jsecurity.util.ThreadContext.put(Ljava/lang/Object;Ljava/lang/Object;)V: I3 Branch 5 IFNONNULL L132 - true
   * 4 org.jsecurity.util.ThreadContext.put(Ljava/lang/Object;Ljava/lang/Object;)V: I14 Branch 6 IFNONNULL L136 - true
   * 5 org.jsecurity.util.ThreadContext.put(Ljava/lang/Object;Ljava/lang/Object;)V: I34 Branch 7 IFEQ L143 - true
   */
  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ThreadContext.bind((InetAddress) inet4Address0);
          assertEquals(false, inet4Address0.isLinkLocalAddress());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
