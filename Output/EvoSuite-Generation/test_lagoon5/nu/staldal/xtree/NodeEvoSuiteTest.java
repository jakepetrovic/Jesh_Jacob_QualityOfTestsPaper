/*
 * This file was automatically generated by EvoSuite
 */

package nu.staldal.xtree;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import nu.staldal.xtree.Element;
import nu.staldal.xtree.NodeWithChildren;
import nu.staldal.xtree.ProcessingInstruction;
import nu.staldal.xtree.Text;
import org.xml.sax.SAXParseException;

public class NodeEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 nu.staldal.xtree.Node.isWhitespaceNode()Z: root-Branch
   * 2 nu.staldal.xtree.Node.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("N text content", (String) null);
      boolean boolean0 = processingInstruction0.isWhitespaceNode();
      assertEquals(false, boolean0);
      assertEquals(-1, processingInstruction0.getLineNumber());
      assertEquals(-1, processingInstruction0.getColumnNumber());
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 nu.staldal.xtree.Node.getLineNumber()I: root-Branch
   * 2 nu.staldal.xtree.Node.getSystemId()Ljava/lang/String;: root-Branch
   * 3 nu.staldal.xtree.Node.getColumnNumber()I: root-Branch
   * 4 nu.staldal.xtree.Node.getPublicId()Ljava/lang/String;: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      Element element0 = new Element("", "", (int) 'z', (int) 'z');
      try {
        element0.getAttrValue("", "default");
        fail("Expecting exception: SAXParseException");
      } catch(SAXParseException e) {
        /*
         * Attribute {}default expected
         */
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.getParent()Lnu/staldal/xtree/NodeWithChildren;: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("7tw}sEtt}x6I<El", "7tw}sEtt}x6I<El");
      processingInstruction0.getParent();
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(-1, processingInstruction0.getLineNumber());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.setColumn(I)V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      Element element0 = new Element("7tw}sEtt}x6I<El", "7tw}sEtt}x6I<El", (-1119), (-1119));
      assertEquals(-1, element0.getColumnNumber());
      
      element0.setColumn(0);
      assertEquals(0, element0.getColumnNumber());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.setPublicId(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      Text text0 = new Text("N text content");
      text0.setPublicId((String) null);
      assertEquals(-1, text0.getLineNumber());
      assertEquals(-1, text0.getColumnNumber());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 nu.staldal.xtree.Node.lookupNamespaceURI(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 1 IFNONNULL L190 - true
   * 2 nu.staldal.xtree.Node.setParent(Lnu/staldal/xtree/NodeWithChildren;)V: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      Element element0 = new Element("7tw}sEtt}x6I<El", "7tw}sEtt}x6I<El", (-1119), (-1119));
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("7tw}sEtt}x6I<El", "7tw}sEtt}x6I<El");
      processingInstruction0.setParent((NodeWithChildren) element0);
      processingInstruction0.lookupNamespaceURI("7tw}sEtt}x6I<El");
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(-1, processingInstruction0.getLineNumber());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.setLine(I)V: root-Branch
   */
  @Test
  public void test6()  throws Throwable  {
      Element element0 = new Element("J", "J");
      element0.setLine(919);
      assertEquals(919, element0.getLineNumber());
      assertEquals(-1, element0.getColumnNumber());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.setSystemId(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test7()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("vlU@'2E wE", "vlU@'2E wE");
      processingInstruction0.setSystemId("vlU@'2E wE");
      assertEquals(-1, processingInstruction0.getLineNumber());
      assertEquals("vlU@'2E wE", processingInstruction0.getSystemId());
      assertEquals(-1, processingInstruction0.getColumnNumber());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.lookupNamespaceURI(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 1 IFNONNULL L190 - false
   */
  @Test
  public void test8()  throws Throwable  {
      Text text0 = new Text("N text content");
      text0.lookupNamespaceURI("N text content");
      assertEquals(-1, text0.getColumnNumber());
      assertEquals(-1, text0.getLineNumber());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.lookupNamespacePrefix(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 2 IFNONNULL L207 - true
   */
  @Test
  public void test9()  throws Throwable  {
      Text text0 = new Text("+v");
      Element element0 = new Element("+v", "+v");
      text0.setParent((NodeWithChildren) element0);
      // Undeclared exception!
      try {
        text0.lookupNamespacePrefix("+v");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.lookupNamespacePrefix(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 2 IFNONNULL L207 - false
   */
  @Test
  public void test10()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("default", "default");
      processingInstruction0.lookupNamespacePrefix("default");
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(-1, processingInstruction0.getLineNumber());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.getBaseURI()Ljava/net/URL;: I4 Branch 3 IFNONNULL L222 - true
   */
  @Test
  public void test11()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("{0'r&>n;( '%K", "{0'r&>n;( '%K");
      Element element0 = new Element("{0'r&>n;( '%K", "{0'r&>n;( '%K", 0);
      processingInstruction0.setParent((NodeWithChildren) element0);
      processingInstruction0.getBaseURI();
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(-1, processingInstruction0.getLineNumber());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.getBaseURI()Ljava/net/URL;: I4 Branch 3 IFNONNULL L222 - false
   */
  @Test
  public void test12()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("N text content", (String) null);
      processingInstruction0.getBaseURI();
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(-1, processingInstruction0.getLineNumber());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.getPreserveSpace()Z: I4 Branch 4 IFNONNULL L236 - true
   */
  @Test
  public void test13()  throws Throwable  {
      Element element0 = new Element("7tw}sEtt}x6I<El", "7tw}sEtt}x6I<El", (-1119), (-1119));
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("7tw}sEtt}x6I<El", "7tw}sEtt}x6I<El");
      processingInstruction0.setParent((NodeWithChildren) element0);
      processingInstruction0.getPreserveSpace();
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(-1, processingInstruction0.getLineNumber());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 nu.staldal.xtree.Node.getPreserveSpace()Z: I4 Branch 4 IFNONNULL L236 - false
   */
  @Test
  public void test14()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("vlU@'2E wE", "vlU@'2E wE");
      boolean boolean0 = processingInstruction0.getPreserveSpace();
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(false, boolean0);
      assertEquals(-1, processingInstruction0.getLineNumber());
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 nu.staldal.xtree.Node.getInheritedAttribute(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I4 Branch 5 IFNONNULL L256 - true
   * 2 nu.staldal.xtree.Node.setParent(Lnu/staldal/xtree/NodeWithChildren;)V: root-Branch
   */
  @Test
  public void test15()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("J", "J");
      Element element0 = new Element("J", "J");
      processingInstruction0.setParent((NodeWithChildren) element0);
      processingInstruction0.getInheritedAttribute("J", "J");
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(-1, processingInstruction0.getLineNumber());
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 nu.staldal.xtree.Node.getInheritedAttribute(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I4 Branch 5 IFNONNULL L256 - false
   * 2 nu.staldal.xtree.Node.<init>()V: root-Branch
   */
  @Test
  public void test16()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("N text content", (String) null);
      processingInstruction0.getInheritedAttribute("N text content", "N text content");
      assertEquals(-1, processingInstruction0.getColumnNumber());
      assertEquals(-1, processingInstruction0.getLineNumber());
  }
}
