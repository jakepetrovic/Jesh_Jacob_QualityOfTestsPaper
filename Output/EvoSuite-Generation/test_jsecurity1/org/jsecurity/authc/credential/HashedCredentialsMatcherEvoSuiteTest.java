/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authc.credential;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.credential.Md5CredentialsMatcher;
import org.jsecurity.authc.credential.Sha1CredentialsMatcher;
import org.jsecurity.authc.credential.Sha256CredentialsMatcher;
import org.jsecurity.authc.credential.Sha512CredentialsMatcher;
import org.jsecurity.authz.Permission;
import org.jsecurity.crypto.hash.Sha256Hash;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class HashedCredentialsMatcherEvoSuiteTest {

  private static ExecutorService executor;
    
  //Test case number: 0
  /*
   * 6 covered goals:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.getSalt(Lorg/jsecurity/authc/AuthenticationToken;)Ljava/lang/Object;: root-Branch
   * 2 org.jsecurity.authc.credential.HashedCredentialsMatcher.getHashIterations()I: root-Branch
   * 3 org.jsecurity.authc.credential.HashedCredentialsMatcher.isHashSalted()Z: root-Branch
   * 4 org.jsecurity.authc.credential.HashedCredentialsMatcher.<init>()V: root-Branch
   * 5 org.jsecurity.authc.credential.HashedCredentialsMatcher.setHashSalted(Z)V: root-Branch
   * 6 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationToken;)Ljava/lang/Object;: I9 Branch 2 IFEQ L209 - false
   */
  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K<-M*l", "K<-M*l", false, (InetAddress) inet4Address0);
          Sha1CredentialsMatcher sha1CredentialsMatcher0 = new Sha1CredentialsMatcher();
          assertEquals(false, sha1CredentialsMatcher0.isHashSalted());
          
          sha1CredentialsMatcher0.setHashSalted(true);
          sha1CredentialsMatcher0.getCredentials((AuthenticationToken) usernamePasswordToken0);
          assertEquals(true, sha1CredentialsMatcher0.isHashSalted());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.isStoredCredentialsHexEncoded()Z: root-Branch
   * 2 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I15 Branch 3 IFNE L238 - true
   * 3 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I23 Branch 5 IFEQ L241 - false
   */
  @Test
  public void test1()  throws Throwable  {
      Md5CredentialsMatcher md5CredentialsMatcher0 = new Md5CredentialsMatcher();
      HashSet<String> hashSet0 = new HashSet<String>();
      HashSet<Permission> hashSet1 = new HashSet<Permission>((int) (byte)94);
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "\u0000\u0000\u0000", (Object) "\u0000\u0000\u0000", "\u0000\u0000\u0000", (Set<String>) hashSet0, (Set<Permission>) hashSet1);
      // Undeclared exception!
      try {
        md5CredentialsMatcher0.getCredentials((AuthenticationInfo) simpleAccount0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Odd number of characters.
         */
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.setHashIterations(I)V: I4 Branch 1 IF_ICMPGE L175 - true
   */
  @Test
  public void test2()  throws Throwable  {
      Sha512CredentialsMatcher sha512CredentialsMatcher0 = new Sha512CredentialsMatcher();
      sha512CredentialsMatcher0.setHashIterations((int) (byte)124);
      assertEquals(124, sha512CredentialsMatcher0.getHashIterations());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.setHashIterations(I)V: I4 Branch 1 IF_ICMPGE L175 - false
   */
  @Test
  public void test3()  throws Throwable  {
      Sha512CredentialsMatcher sha512CredentialsMatcher0 = new Sha512CredentialsMatcher();
      sha512CredentialsMatcher0.setHashIterations((-1634));
      assertEquals(true, sha512CredentialsMatcher0.isStoredCredentialsHexEncoded());
      assertEquals(1, sha512CredentialsMatcher0.getHashIterations());
      assertEquals(false, sha512CredentialsMatcher0.isHashSalted());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationToken;)Ljava/lang/Object;: I9 Branch 2 IFEQ L209 - true
   * 2 org.jsecurity.authc.credential.HashedCredentialsMatcher.getHashIterations()I: root-Branch
   * 3 org.jsecurity.authc.credential.HashedCredentialsMatcher.isHashSalted()Z: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K<-M*l", "K<-M*l", false, (InetAddress) inet4Address0);
          Sha256Hash sha256Hash0 = (Sha256Hash)sha256CredentialsMatcher0.getCredentials((AuthenticationToken) usernamePasswordToken0);
          assertEquals(1, sha256CredentialsMatcher0.getHashIterations());
          assertNotNull(sha256Hash0);
          assertEquals(true, sha256CredentialsMatcher0.isStoredCredentialsHexEncoded());
          assertEquals("a20b97dbc471d3165cc519859c399a5ee9214e7cd3203ab5891ec086e3a8828d", sha256Hash0.toHex());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I23 Branch 5 IFEQ L241 - true
   * 2 org.jsecurity.authc.credential.HashedCredentialsMatcher.<init>()V: root-Branch
   * 3 org.jsecurity.authc.credential.HashedCredentialsMatcher.setStoredCredentialsHexEncoded(Z)V: root-Branch
   * 4 org.jsecurity.authc.credential.HashedCredentialsMatcher.isStoredCredentialsHexEncoded()Z: root-Branch
   * 5 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I15 Branch 3 IFNE L238 - true
   */
  @Test
  public void test5()  throws Throwable  {
      Md5CredentialsMatcher md5CredentialsMatcher0 = new Md5CredentialsMatcher();
      assertEquals(true, md5CredentialsMatcher0.isStoredCredentialsHexEncoded());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      md5CredentialsMatcher0.setStoredCredentialsHexEncoded(false);
      HashSet<Permission> hashSet1 = new HashSet<Permission>(1);
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "\u0000\u0000\u0000\u0000\u0000", (Object) "\u0000\u0000\u0000\u0000\u0000", "\u0000\u0000\u0000\u0000\u0000", (Set<String>) hashSet0, (Set<Permission>) hashSet1);
      md5CredentialsMatcher0.getCredentials((AuthenticationInfo) simpleAccount0);
      assertEquals(false, md5CredentialsMatcher0.isStoredCredentialsHexEncoded());
  }
}
