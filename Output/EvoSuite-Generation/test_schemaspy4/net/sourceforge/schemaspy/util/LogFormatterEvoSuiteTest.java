/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.schemaspy.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import net.sourceforge.schemaspy.util.LogFormatter;

public class LogFormatterEvoSuiteTest {


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I69 Branch 1 IF_ICMPLE L96 - true
   * 2 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I86 Branch 2 IF_ICMPGE L99 - true
   * 3 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I86 Branch 2 IF_ICMPGE L99 - false
   * 4 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I110 Branch 3 IFNULL L105 - true
   * 5 net.sourceforge.schemaspy.util.LogFormatter.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      LogFormatter logFormatter0 = new LogFormatter();
      assertNotNull(logFormatter0);
      
      Level level0 = Level.FINER;
      LogRecord logRecord0 = new LogRecord(level0, "#>Y\"1T)mv");
      // Undeclared exception!
      try {
        logFormatter0.format(logRecord0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I110 Branch 3 IFNULL L105 - false
   * 2 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I132 Branch 4 IFLT L112 - true
   * 3 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I157 Branch 6 IFNULL L116 - true
   * 4 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I196 Branch 7 IFNULL L125 - true
   */
  @Test
  public void test1()  throws Throwable  {
      LogFormatter logFormatter0 = new LogFormatter();
      assertNotNull(logFormatter0);
      
      Level level0 = Level.FINER;
      LogRecord logRecord0 = new LogRecord(level0, "#>Y\"1T)mv");
      logRecord0.setSourceClassName("#>Y\"1T)mv");
      String string0 = logFormatter0.format(logRecord0);
      assertEquals(1433974171087L, logRecord0.getMillis());
      assertEquals("16:09:31.087 FINER:   #>Y\"1T)mv - #>Y\"1T)mv\n", string0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I132 Branch 4 IFLT L112 - false
   * 2 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I138 Branch 5 IF_ICMPGE L112 - false
   * 3 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I157 Branch 6 IFNULL L116 - true
   */
  @Test
  public void test2()  throws Throwable  {
      LogFormatter logFormatter0 = new LogFormatter();
      assertNotNull(logFormatter0);
      
      Level level0 = Level.FINER;
      LogRecord logRecord0 = new LogRecord(level0, "ine.Kparto");
      logRecord0.setSourceClassName("ine.Kparto");
      String string0 = logFormatter0.format(logRecord0);
      assertEquals(4474L, logRecord0.getSequenceNumber());
      assertEquals("16:09:37.689 FINER:   Kparto - ine.Kparto\n", string0);
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I157 Branch 6 IFNULL L116 - false
   * 2 net.sourceforge.schemaspy.util.LogFormatter.<init>()V: root-Branch
   * 3 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I69 Branch 1 IF_ICMPLE L96 - true
   * 4 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I86 Branch 2 IF_ICMPGE L99 - true
   * 5 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I86 Branch 2 IF_ICMPGE L99 - false
   * 6 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I110 Branch 3 IFNULL L105 - false
   * 7 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I132 Branch 4 IFLT L112 - false
   * 8 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I138 Branch 5 IF_ICMPGE L112 - false
   * 9 net.sourceforge.schemaspy.util.LogFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;: I196 Branch 7 IFNULL L125 - true
   */
  @Test
  public void test3()  throws Throwable  {
      LogFormatter logFormatter0 = new LogFormatter();
      assertNotNull(logFormatter0);
      
      Level level0 = Level.FINER;
      LogRecord logRecord0 = new LogRecord(level0, "ine.Kparto");
      logRecord0.setSourceMethodName("ine.Kparto");
      logRecord0.setSourceClassName("ine.Kparto");
      String string0 = logFormatter0.format(logRecord0);
      assertEquals(1433974184949L, logRecord0.getMillis());
      assertEquals("16:09:44.949 FINER:   Kparto.ine.Kparto - ine.Kparto\n", string0);
  }
}
