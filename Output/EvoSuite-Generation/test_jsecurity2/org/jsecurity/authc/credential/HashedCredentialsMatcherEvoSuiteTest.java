/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authc.credential;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.credential.Md2CredentialsMatcher;
import org.jsecurity.authc.credential.Sha384CredentialsMatcher;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;

public class HashedCredentialsMatcherEvoSuiteTest {


  //Test case number: 0
  /*
   * 9 covered goals:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.getSalt(Lorg/jsecurity/authc/AuthenticationToken;)Ljava/lang/Object;: root-Branch
   * 2 org.jsecurity.authc.credential.HashedCredentialsMatcher.getHashIterations()I: root-Branch
   * 3 org.jsecurity.authc.credential.HashedCredentialsMatcher.isHashSalted()Z: root-Branch
   * 4 org.jsecurity.authc.credential.HashedCredentialsMatcher.<init>()V: root-Branch
   * 5 org.jsecurity.authc.credential.HashedCredentialsMatcher.setHashSalted(Z)V: root-Branch
   * 6 org.jsecurity.authc.credential.HashedCredentialsMatcher.isStoredCredentialsHexEncoded()Z: root-Branch
   * 7 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationToken;)Ljava/lang/Object;: I9 Branch 2 IFEQ L209 - false
   * 8 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I15 Branch 3 IFNE L238 - true
   * 9 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I23 Branch 5 IFEQ L241 - false
   */
  @Test
  public void test0()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      assertEquals(false, md2CredentialsMatcher0.isHashSalted());
      
      md2CredentialsMatcher0.setHashSalted(true);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("-", "-", true);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "\u0000\u0000");
      // Undeclared exception!
      try {
        md2CredentialsMatcher0.doCredentialsMatch((AuthenticationToken) usernamePasswordToken0, (AuthenticationInfo) simpleAccount0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal hexadecimal charcter \u0000 at index 0
         */
      }
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I23 Branch 5 IFEQ L241 - true
   * 2 org.jsecurity.authc.credential.HashedCredentialsMatcher.setStoredCredentialsHexEncoded(Z)V: root-Branch
   * 3 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationToken;)Ljava/lang/Object;: I9 Branch 2 IFEQ L209 - true
   */
  @Test
  public void test1()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      assertEquals(true, md2CredentialsMatcher0.isStoredCredentialsHexEncoded());
      
      md2CredentialsMatcher0.setStoredCredentialsHexEncoded(false);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("-", "-", true);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "\u0000\u0000");
      md2CredentialsMatcher0.doCredentialsMatch((AuthenticationToken) usernamePasswordToken0, (AuthenticationInfo) simpleAccount0);
      assertEquals(false, md2CredentialsMatcher0.isStoredCredentialsHexEncoded());
      assertEquals(1, md2CredentialsMatcher0.getHashIterations());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.setHashIterations(I)V: I4 Branch 1 IF_ICMPGE L175 - true
   */
  @Test
  public void test2()  throws Throwable  {
      Sha384CredentialsMatcher sha384CredentialsMatcher0 = new Sha384CredentialsMatcher();
      sha384CredentialsMatcher0.setHashIterations((int) 'p');
      assertEquals(112, sha384CredentialsMatcher0.getHashIterations());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.setHashIterations(I)V: I4 Branch 1 IF_ICMPGE L175 - false
   */
  @Test
  public void test3()  throws Throwable  {
      Sha384CredentialsMatcher sha384CredentialsMatcher0 = new Sha384CredentialsMatcher();
      sha384CredentialsMatcher0.setHashIterations((int) '\u0000');
      assertEquals(false, sha384CredentialsMatcher0.isHashSalted());
      assertEquals(1, sha384CredentialsMatcher0.getHashIterations());
      assertEquals(true, sha384CredentialsMatcher0.isStoredCredentialsHexEncoded());
  }

  //Test case number: 4
  /*
   * 7 covered goals:
   * 1 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationToken;)Ljava/lang/Object;: I9 Branch 2 IFEQ L209 - true
   * 2 org.jsecurity.authc.credential.HashedCredentialsMatcher.getHashIterations()I: root-Branch
   * 3 org.jsecurity.authc.credential.HashedCredentialsMatcher.isHashSalted()Z: root-Branch
   * 4 org.jsecurity.authc.credential.HashedCredentialsMatcher.<init>()V: root-Branch
   * 5 org.jsecurity.authc.credential.HashedCredentialsMatcher.isStoredCredentialsHexEncoded()Z: root-Branch
   * 6 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I15 Branch 3 IFNE L238 - true
   * 7 org.jsecurity.authc.credential.HashedCredentialsMatcher.getCredentials(Lorg/jsecurity/authc/AuthenticationInfo;)Ljava/lang/Object;: I23 Branch 5 IFEQ L241 - false
   */
  @Test
  public void test4()  throws Throwable  {
      Sha384CredentialsMatcher sha384CredentialsMatcher0 = new Sha384CredentialsMatcher();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", "");
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      // Undeclared exception!
      try {
        sha384CredentialsMatcher0.doCredentialsMatch((AuthenticationToken) usernamePasswordToken0, (AuthenticationInfo) simpleAccount0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal hexadecimal charcter \u0000 at index 0
         */
      }
  }
}
