package randoop;

import junit.framework.*;

public class RandoopTest8 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test1");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var3 = var1.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var5 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, 0);
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var6 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError((java.lang.Throwable)var1);
    org.databene.jdbacl.SQLScriptException var8 = new org.databene.jdbacl.SQLScriptException(1);
    int var9 = var8.getLineNo();
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var10 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError((java.lang.Throwable)var8);
    var6.addSuppressed((java.lang.Throwable)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test2");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var9 = var0.isDeterministicFKName("jdbc:h2:mem:select next value for 10");
    java.lang.String var11 = var0.renderFetchSequenceValue("");
    boolean var12 = var0.supportsRegex();
    boolean var13 = var0.supportsRegex();
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.math.BigInteger var19 = var17.getMinValueIfNotDefault();
    java.math.BigInteger var20 = var17.getStartIfNotDefault();
    java.math.BigInteger var21 = var17.getMinValue();
    java.lang.String var22 = var0.renderCreateSequence(var17);
    var17.setOrder((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "select nextval('')"+ "'", var11.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "CREATE SEQUENCE "+ "'", var22.equals("CREATE SEQUENCE "));

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test3");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    boolean var3 = var0.isSequenceSupported();
    boolean var6 = var0.isDefaultSchema("CREATE SEQUENCE call next value for 'hi!'", "Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    boolean var8 = var0.isDeterministicIndexName("REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')");
    java.lang.String var9 = var0.getJDBCDriverClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "org.firebirdsql.jdbc.FBDriver"+ "'", var9.equals("org.firebirdsql.jdbc.FBDriver"));

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test4");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var6 = var0.isSequenceSupported();
    java.lang.String var8 = var0.renderDropSequence("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var12.setCache((java.lang.Long)100L);
    java.lang.String var15 = var12.getObjectType();
    java.math.BigInteger var16 = var12.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var20 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var20.setName("10");
    java.math.BigInteger var23 = var20.getIncrement();
    java.math.BigInteger var24 = var20.getIncrement();
    var12.setLastNumber(var24);
    java.lang.Long var26 = var12.getCache();
    java.lang.String var27 = var0.renderCreateSequence(var12);
    java.lang.String var29 = var0.renderDropSequence("DROP SEQUENCE NOT REGEXP_MATCHES(sequence, '') RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "DROP SEQUENCE drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. RESTRICT"+ "'", var8.equals("DROP SEQUENCE drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "sequence"+ "'", var15.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 100L+ "'", var26.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var27.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "DROP SEQUENCE DROP SEQUENCE NOT REGEXP_MATCHES(sequence, '') RESTRICT RESTRICT"+ "'", var29.equals("DROP SEQUENCE DROP SEQUENCE NOT REGEXP_MATCHES(sequence, '') RESTRICT RESTRICT"));

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test5");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var22 = var21.getType();
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var40.addColumnName("sequence");
    var21.addUkConstraint(var40);
    var21.setNullable(true);
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var21);
    var21.setSize((java.lang.Integer)100);
    boolean var49 = var21.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var46.equals("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test6");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__68();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test7");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var8 = org.databene.jdbacl.DBUtil.getMetaData("drop sequence drop sequence Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ", false, false, true, true, "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE  NOT SIMILAR TO 'CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'''", true, true);
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test8");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    java.util.List var20 = var17.getComponents();
    var12.setCatalog(var17);
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var25.setCache((java.lang.Long)100L);
    java.lang.String var28 = var25.getObjectType();
    java.math.BigInteger var29 = var25.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var33 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var33.setName("10");
    java.math.BigInteger var36 = var33.getIncrement();
    java.math.BigInteger var37 = var33.getIncrement();
    var25.setLastNumber(var37);
    var12.addSequence(var25);
    org.databene.jdbacl.model.DBPackage var40 = new org.databene.jdbacl.model.DBPackage("alter sequence call next value for 'hi!' restart with 100", var12);
    java.lang.String var41 = var40.getObjectType();
    var40.setDataObjectId("hi!");
    var40.setObjectId("drop sequence select gen_id('d', 1) from RDB$DATABASE;: class org.databene.jdbacl.model.FKChangeRule");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test9");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    java.lang.String var9 = var0.getCharErrorDisplay(100);
    var0.mCOLUMN_NAME();
    var0.traceIn("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique", 69);
    var0.mCREATE_INDEX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "'d'"+ "'", var9.equals("'d'"));

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test10");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    java.util.List var19 = var16.getTables(false);
    org.databene.jdbacl.model.TableContainer var22 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var23 = var22.getTables();
    org.databene.jdbacl.model.TableContainer var24 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var22);
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    var25.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var29 = var28.getForeignKeyConstraints();
    var25.addReferrer((org.databene.jdbacl.model.DBTable)var28);
    var22.addTable((org.databene.jdbacl.model.DBTable)var28);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.removeTable((org.databene.jdbacl.model.DBTable)var32);
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    java.util.Set var45 = var41.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var48 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var49 = var48.isAlpha();
    boolean var50 = var48.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var53 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var41, var48, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var37.addColumn((org.databene.jdbacl.model.DBColumn)var53);
    var22.removeTable((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    java.util.Set var60 = var56.getUniqueConstraints(false);
    java.lang.String var61 = var56.getDoc();
    var56.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    var22.addTable((org.databene.jdbacl.model.DBTable)var56);
    var16.removeTable((org.databene.jdbacl.model.DBTable)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBCheckConstraint var67 = new org.databene.jdbacl.model.DBCheckConstraint("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0-identity-NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')", true, (org.databene.jdbacl.model.DBTable)var56, "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence, SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP ''HI!'') unique");
      fail("Expected exception of type org.databene.commons.SyntaxError");
    } catch (org.databene.commons.SyntaxError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "."+ "'", var61.equals("."));

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test11");


    org.databene.jdbacl.model.DBDataType var2 = org.databene.jdbacl.model.DBDataType.getInstance(69, "DROP SEQUENCE ");
    int var3 = var2.getJdbcType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 69);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test12");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("CREATE SEQUENCE  CACHE 100");
    org.databene.jdbacl.model.xml.XMLModelImporter var2 = new org.databene.jdbacl.model.xml.XMLModelImporter(var1);
    var2.close();
    var2.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test13");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var5 = org.databene.jdbacl.DBUtil.connect("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1", "left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual.", "CONSTRAINT columnCHECK \"'hi!'\"", "ResultSetConverter", true);
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test14");


    org.databene.jdbacl.JDBCConnectData var1 = org.databene.jdbacl.DatabaseTestUtil.getConnectData("CONSTRAINT \"select nextval('')\" UNIQUE (, sequence, drop generator DROP SEQUENCE catalog RESTRICT)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test15");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("hi! identity by primary key", "CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT", "Identity definition by NK-PK query: alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    java.lang.String var4 = var3.getDefaultDatabase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test16");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String[] var5 = var4.getColumnNames();
    java.lang.String var6 = var4.getTableName();
    java.lang.String var7 = var4.toString();
    java.lang.String[] var8 = var4.getColumnNames();
    boolean var9 = var4.isNameDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var6.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var7.equals("CONSTRAINT columnCHECK \"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test17");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.mT__137();
    var10.mBETWEEN();
    var10.beginResync();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test18");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var80 = new org.databene.jdbacl.ResultSetConverter(var78);
    java.lang.String var81 = var80.toString();
    java.lang.Class var82 = var80.getSourceType();
    java.lang.Class var83 = var80.getTargetType();
    java.lang.Class var84 = var80.getSourceType();
    java.lang.String var85 = var80.toString();
    java.lang.String var86 = var80.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "ResultSetConverter"+ "'", var81.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "ResultSetConverter"+ "'", var85.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "ResultSetConverter"+ "'", var86.equals("ResultSetConverter"));

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test19");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var14 = var12.LT(10);
    boolean var16 = var10.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var12, 69);
    var10.endResync();
    org.databene.jdbacl.sql.parser.SQLLexer var18 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var20 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var20.release((-1));
    boolean var24 = var18.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var20, 0);
    int var25 = var18.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var27 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var18.consumeUntil((org.antlr.runtime.IntStream)var27, 100);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    var18.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var40);
    var18.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var43 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var43.mCREATE_TABLE();
    var43.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var47 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var49 = var47.LT(10);
    var43.setCharStream((org.antlr.runtime.CharStream)var47);
    var18.consumeUntil((org.antlr.runtime.IntStream)var47, 1);
    java.lang.String var53 = var47.toString();
    var47.setLine(14);
    var10.setCharStream((org.antlr.runtime.CharStream)var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.mBEFORE();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "DROP SEQUENCE "+ "'", var53.equals("DROP SEQUENCE "));

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test20");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDefaultPort("CREATE SEQUENCE 10");
    var0.setDbSystem("SET GENERATOR . TO -1");
    java.lang.String var7 = var0.toString();
    java.lang.String var8 = var0.getDefaultSchema();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SET GENERATOR . TO -1"+ "'", var7.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test21");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__126();
    var10.mT__133();
    var10.mDATE();
    org.databene.jdbacl.sql.parser.SQLLexer var19 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var19.mCREATE_TABLE();
    var19.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var23 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var25 = var23.LT(10);
    var19.setCharStream((org.antlr.runtime.CharStream)var23);
    var23.reset();
    int var29 = var23.LT(14);
    var10.setCharStream((org.antlr.runtime.CharStream)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 32);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test22");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var34 = var33.getTables();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var33);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    var33.addTable((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var47);
    org.databene.jdbacl.model.TableContainer var56 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var57 = var56.getTables();
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var56);
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    var56.addTable((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var68 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var68);
    org.databene.jdbacl.model.DBForeignKeyConstraint var70 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var39, var47, (org.databene.jdbacl.model.DBTable)var62, var68);
    org.databene.jdbacl.model.DBTable var71 = var70.getRefereeTable();
    var4.addForeignKey(var70);
    java.lang.String[] var73 = var70.getColumnNames();
    org.databene.jdbacl.model.DBTable var74 = var70.getRefereeTable();
    org.databene.jdbacl.model.FKChangeRule var75 = var70.getDeleteRule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "."+ "'", var53.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var69.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test23");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getStart();
    org.databene.jdbacl.model.TableContainer var7 = new org.databene.jdbacl.model.TableContainer("hi! as 10 on . = 10.");
    java.util.List var9 = var7.getSequences(true);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    java.util.List var28 = var25.getSequences(true);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    org.databene.jdbacl.model.DBDataType var38 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var39 = var38.isAlpha();
    java.lang.String var40 = var38.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var41 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var44 = var41.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var46 = var41.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var47 = var38.equals((java.lang.Object)var46);
    org.databene.jdbacl.model.DefaultDBColumn var50 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var33, var38, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    var33.addReferrer((org.databene.jdbacl.model.DBTable)var51);
    org.databene.jdbacl.model.DBIndex var59 = var51.getIndex("");
    java.util.List var60 = var51.getComponents();
    var25.removeTable((org.databene.jdbacl.model.DBTable)var51);
    java.util.List var63 = var25.getTables(true);
    java.util.List var64 = var7.getTables(false, var63);
    boolean var65 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "DROP SEQUENCE "+ "'", var40.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var46.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test24");


    org.databene.jdbacl.sql.ColumnExpression var3 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var7 = var6.getValue();
    org.databene.jdbacl.sql.ColumnExpression var10 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var11 = var10.getValue();
    org.databene.jdbacl.sql.BetweenExpression var12 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var3, (org.databene.script.Expression)var6, (org.databene.script.Expression)var10);
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var19 = var18.getValue();
    org.databene.jdbacl.sql.ColumnExpression var22 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var23 = var22.getValue();
    org.databene.jdbacl.sql.BetweenExpression var24 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var15, (org.databene.script.Expression)var18, (org.databene.script.Expression)var22);
    var12.addTerm((org.databene.script.Expression)var18);
    org.databene.script.Expression[] var26 = new org.databene.script.Expression[] { var12};
    org.databene.jdbacl.sql.FunctionInvocation var27 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var26);
    java.lang.String var28 = var27.getFunctionName();
    java.lang.String var29 = var27.toString();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.identity.IdentityProvider var40 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var41 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var34, var40);
    org.databene.jdbacl.identity.xml.IdentityParseContext var42 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var40);
    var42.remove("drop sequence 10");
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String[] var54 = new java.lang.String[] { ""};
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.join("", "", var50, "hi!", "10", var54);
    org.databene.jdbacl.identity.IdentityProvider var56 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var57 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var50, var56);
    org.databene.jdbacl.identity.xml.IdentityParseContext var58 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var56);
    var42.set("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", (java.lang.Object)var58);
    org.databene.jdbacl.identity.IdentityProvider var60 = var58.getIdentityProvider();
    java.lang.Object var61 = var27.evaluate((org.databene.commons.Context)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "sequence"+ "'", var11.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "sequence"+ "'", var19.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var28.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var29.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi! as 10 on . = 10."+ "'", var55.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test25");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    org.databene.jdbacl.model.DBIndex var31 = var23.getIndex("");
    java.util.List var32 = var23.getIndexes();
    java.util.Set var33 = var23.getForeignKeyConstraints();
    java.util.List var34 = var23.getCheckConstraints();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var35 = var23.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBCatalog var36 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var37 = var36.getName();
    org.databene.jdbacl.model.Database var38 = var36.getDatabase();
    java.lang.String var39 = var36.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var41 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var43 = var41.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var44 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var45 = var44.getName();
    java.lang.String var46 = var41.formatValue((java.lang.Object)var44);
    var44.setName("'hi!'");
    java.util.List var49 = var44.getSchemas();
    org.databene.jdbacl.model.DBSchema var50 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var44);
    var36.removeSchema(var50);
    java.util.List var53 = var50.getSequences(false);
    boolean var54 = var23.equals((java.lang.Object)var50);
    java.util.List var55 = var50.getPackages();
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable("select next value for Identity definition by unique key: select next value for 10", var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test26");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setCache((java.lang.Long)100L);
    java.lang.String var12 = var9.getObjectType();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    java.lang.String var14 = var9.getSchemaName();
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    org.databene.jdbacl.model.DBSchema var26 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var20);
    org.databene.jdbacl.model.DBTrigger var27 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var26);
    var27.setTableName("sequence");
    boolean var30 = var9.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.lang.String var31 = var27.getTableName();
    var27.setTriggeringEvent("CREATE GENERATOR CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE  NOT REGEXP 'drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi! as 10 on . = 10."+ "'", var14.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "sequence"+ "'", var31.equals("sequence"));

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test27");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var9 = var0.isDeterministicFKName("jdbc:h2:mem:select next value for 10");
    boolean var12 = var0.isDefaultCatalog("drop generator drop generator .", "select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;");
    org.databene.jdbacl.DBExecutionResult var14 = new org.databene.jdbacl.DBExecutionResult((java.lang.Object)var0, (java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test28");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    var4.setDoc(".");
    boolean var8 = var4.equals((java.lang.Object)(-1.0f));
    var2.removeTable((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    org.databene.jdbacl.model.DBUniqueConstraint var29 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var15, "select nextval('')", false, var23);
    org.databene.jdbacl.model.DBDataType var32 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var33 = var32.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var34 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var15, var32);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    org.databene.jdbacl.model.DBDataType var44 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var45 = var44.isAlpha();
    java.lang.String var46 = var44.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var47 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var50 = var47.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var52 = var47.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var53 = var44.equals((java.lang.Object)var52);
    org.databene.jdbacl.model.DefaultDBColumn var56 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var39, var44, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var59 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var60 = var59.isTemporal();
    boolean var61 = var44.equals((java.lang.Object)var59);
    org.databene.jdbacl.model.DefaultDBColumn var64 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.", (org.databene.jdbacl.model.DBTable)var15, var44, (java.lang.Integer)1, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var67 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence call next value for 'hi!' restart with 100", (org.databene.jdbacl.model.DBTable)var4, var44, (java.lang.Integer)41, (java.lang.Integer)4);
    java.lang.String var68 = var67.getDefaultValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "DROP SEQUENCE "+ "'", var46.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var52.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test29");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var5 = var4.toString();
    org.databene.jdbacl.model.DBCheckConstraint var10 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var11 = var10.getConditionText();
    java.lang.String var12 = var10.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var17 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var18 = var17.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var23 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var24 = var23.getTableName();
    boolean var25 = var17.isEquivalent(var23);
    boolean var26 = var10.isEquivalent(var23);
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var32 = var31.getTables();
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var31);
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    var31.addTable((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var45);
    org.databene.jdbacl.model.TableContainer var54 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var55 = var54.getTables();
    org.databene.jdbacl.model.TableContainer var56 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var54);
    org.databene.jdbacl.model.DefaultDBTable var57 = new org.databene.jdbacl.model.DefaultDBTable();
    var57.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var61 = var60.getForeignKeyConstraints();
    var57.addReferrer((org.databene.jdbacl.model.DBTable)var60);
    var54.addTable((org.databene.jdbacl.model.DBTable)var60);
    java.lang.String[] var66 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var66);
    org.databene.jdbacl.model.DBForeignKeyConstraint var68 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var37, var45, (org.databene.jdbacl.model.DBTable)var60, var66);
    java.lang.String[] var69 = var68.getRefereeColumnNames();
    java.lang.String[] var70 = var68.getRefereeColumnNames();
    boolean var71 = var23.isIdentical((org.databene.jdbacl.model.DBObject)var68);
    boolean var72 = var4.isEquivalent(var23);
    java.lang.String var73 = var4.toString();
    org.databene.jdbacl.model.DBCheckConstraint var78 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var79 = var78.getConditionText();
    boolean var80 = var4.isEquivalent(var78);
    java.lang.String var81 = var78.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var5.equals("CONSTRAINT columnCHECK \"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "\"'hi!'\""+ "'", var11.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "\"'hi!'\""+ "'", var12.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "\"'hi!'\""+ "'", var18.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var24.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "."+ "'", var51.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var67.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var73.equals("CONSTRAINT columnCHECK \"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "\"'hi!'\""+ "'", var79.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var81.equals("CONSTRAINT columnCHECK \"'hi!'\""));

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test30");


    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.ColumnExpression var13 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var14 = var13.getValue();
    org.databene.jdbacl.sql.BetweenExpression var15 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var6, (org.databene.script.Expression)var9, (org.databene.script.Expression)var13);
    java.lang.Object var16 = var6.getValue();
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var20 = var19.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var21 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var23 = var21.renderFetchSequenceValue("'hi!'");
    var19.setValue("'hi!'");
    boolean var25 = var19.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var28 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var29 = var28.isConstant();
    java.lang.Object var30 = var28.getValue();
    org.databene.jdbacl.sql.BetweenExpression var31 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var6, (org.databene.script.Expression)var19, (org.databene.script.Expression)var28);
    org.databene.script.Expression[] var32 = var31.getSourceExpressions();
    org.databene.jdbacl.sql.FunctionInvocation var33 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", var32);
    org.databene.jdbacl.identity.mem.GlobalRowId var34 = new org.databene.jdbacl.identity.mem.GlobalRowId("select   REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'.nextval from dual", "No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", (java.lang.Object)var32);
    org.databene.jdbacl.sql.FunctionInvocation var35 = new org.databene.jdbacl.sql.FunctionInvocation("select nextval for null[DROP SEQUENCE ] from sysibm.sysdummy1", var32);
    org.databene.script.Expression[] var36 = var35.getTerms();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "sequence"+ "'", var14.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "sequence"+ "'", var16.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "sequence"+ "'", var20.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "call next value for 'hi!'"+ "'", var23.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test31");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    var0.mTABLE_NAME();
    var0.mDROP_TABLE();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mBARBAR();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test32");


    org.databene.jdbacl.identity.NoIdentity var1 = new org.databene.jdbacl.identity.NoIdentity("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.String var2 = var1.getDescription();
    java.lang.String var3 = var1.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "No identity defined for table CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var2.equals("No identity defined for table CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "No identity defined for table CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var3.equals("No identity defined for table CONSTRAINT \"select nextval('')\" UNIQUE ()"));

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test33");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var3 = var1.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var5 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, 0);
    org.databene.jdbacl.SQLScriptException var7 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var5, 10);
    java.lang.String var8 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "org.databene.jdbacl.SQLScriptException: Error in execution of script line 0: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: "+ "'", var8.equals("org.databene.jdbacl.SQLScriptException: Error in execution of script line 0: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: "));

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test34");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mTABLE_DETAILS();
    int var16 = var0.getRuleMemoizationCacheSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__62();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test35");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    boolean var7 = var0.isDeterministicUKName("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var10 = var0.isDefaultCatalog("select nextval(''((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"''hi!''\")'')", "alter sequence CREATE GENERATOR drop sequence  restart with 10");
    boolean var13 = var0.isDefaultCatalog("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')", "')'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test36");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("drop sequence ", "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "alter sequence drop sequence 10 restart with 0", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT", ".", "alter sequence hi! restart with 1");
    org.databene.jdbacl.model.cache.CachingDBImporter var8 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test37");


    org.databene.jdbacl.JDBCConnectData var7 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var9 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    java.util.List var28 = var25.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var25);
    org.databene.jdbacl.model.jdbc.LazyTable var32 = new org.databene.jdbacl.model.jdbc.LazyTable(var9, var25, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.getObjectType();
    java.lang.String var35 = var32.getDoc();
    java.lang.String var36 = var32.toString();
    org.databene.jdbacl.model.DBCatalog var37 = var32.getCatalog();
    java.lang.String var38 = var37.getName();
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    org.databene.jdbacl.model.Database var42 = var40.getDatabase();
    java.lang.String var43 = var40.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var45 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var47 = var45.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var48 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var49 = var48.getName();
    java.lang.String var50 = var45.formatValue((java.lang.Object)var48);
    var48.setName("'hi!'");
    java.util.List var53 = var48.getSchemas();
    org.databene.jdbacl.model.DBSchema var54 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var48);
    var40.removeSchema(var54);
    java.util.List var57 = var54.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var54);
    var37.addSchema(var54);
    org.databene.jdbacl.model.DBSequence var60 = new org.databene.jdbacl.model.DBSequence("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var33.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "table"+ "'", var34.equals("table"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var35.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var36.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "'hi!'"+ "'", var38.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test38");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var23);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var40);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var23, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var40);
    org.databene.jdbacl.identity.NaturalPkIdentity var45 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var46 = var45.getName();
    boolean var48 = var45.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    var49.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var53 = var52.getForeignKeyConstraints();
    var49.addReferrer((org.databene.jdbacl.model.DBTable)var52);
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String[] var64 = new java.lang.String[] { ""};
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.join("", "", var60, "hi!", "10", var64);
    org.databene.jdbacl.model.DBUniqueConstraint var66 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var52, "select nextval('')", false, var60);
    java.lang.String var67 = var45.extractNK((java.lang.Object[])var60);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var3, var23, (java.lang.Object[])var60);
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String[] var78 = new java.lang.String[] { ""};
    java.lang.String var79 = org.databene.jdbacl.SQLUtil.join("", "", var74, "hi!", "10", var78);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var80 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var3, "jdbc:h2:mem:select next value for 10", false, var78);
    java.util.Set var82 = var3.getUniqueConstraints(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "."+ "'", var29.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "."+ "'", var42.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var43.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi! as 10 on . = 10."+ "'", var65.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var68.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi! as 10 on . = 10."+ "'", var79.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test39");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    org.databene.jdbacl.model.DBSchema var23 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var17);
    org.databene.jdbacl.model.DBTrigger var24 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var23);
    var11.addTrigger(var24);
    org.databene.jdbacl.model.DBTrigger var26 = new org.databene.jdbacl.model.DBTrigger("SELECT * FROM null WHERE  = ''", var11);
    org.databene.jdbacl.dialect.DerbyDialect var30 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var32 = var30.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var33 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var34 = var33.getName();
    java.lang.String var35 = var30.formatValue((java.lang.Object)var33);
    var33.setName("'hi!'");
    java.util.List var38 = var33.getSchemas();
    org.databene.jdbacl.model.DBSchema var39 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var33);
    org.databene.jdbacl.model.DBTrigger var40 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var39);
    java.util.List var41 = var39.getPackages();
    org.databene.jdbacl.model.DBPackage var42 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var39);
    java.util.List var43 = var42.getComponents();
    var11.addPackage(var42);
    var42.setSubObjectName("select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test40");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    var0.mSIZE();
    org.databene.jdbacl.sql.parser.SQLLexer var17 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var17.mCREATE_TABLE();
    var17.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var21 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var23 = var21.LT(10);
    var17.setCharStream((org.antlr.runtime.CharStream)var21);
    int var26 = var21.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var27 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var21);
    var27.setText("select next value for SET GENERATOR.TO - 1");
    var27.setBacktrackingLevel(1);
    var27.mT__92();
    var27.mDROP_TABLE();
    java.lang.String var34 = var27.getText();
    var27.mT__95();
    var27.mIS();
    var27.mCOMMENT_TABLE();
    var27.mT__135();
    org.databene.jdbacl.sql.parser.SQLLexer var39 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var39.mCREATE_TABLE();
    var39.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var43 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var45 = var43.LT(10);
    var39.setCharStream((org.antlr.runtime.CharStream)var43);
    int var48 = var43.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var49 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var43);
    var49.setText("select next value for SET GENERATOR.TO - 1");
    var49.setBacktrackingLevel(1);
    var49.mLE();
    var49.mT__99();
    var49.mT__110();
    org.antlr.runtime.Token var57 = var49.emit();
    var27.emit(var57);
    java.lang.String var59 = var0.getTokenErrorDisplay(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var34.equals("select next value for SET GENERATOR.TO - 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "'select next value for SET GENERATOR.TO - 1'"+ "'", var59.equals("'select next value for SET GENERATOR.TO - 1'"));

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test41");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    var0.setDoc("select next value for SET GENERATOR.TO - 1");
    org.databene.jdbacl.model.DBIndex var8 = var0.getIndex("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    java.lang.String[] var9 = var0.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test42");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    boolean var6 = var0.isDefaultSchema("jdbc:h2:mem:select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT') SIMILAR TO 'drop sequence select next value for CREATE GENERATOR  NOT REGEXP 'UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join 'Identity definition by NK-PK query: CONSTRAINT \"select nextval('')\" UNIQUE ()' : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')''", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. REGEXP 'left join select next value for (\"sequence\") as (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1) on EQUEN.DROP SEQUENCE  = (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1).DROP SEQUENCE '");
    boolean var8 = var0.isDeterministicUKName("VALUES (NEXT VALUE FOR postgres)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test43");


    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var5 = var4.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    org.databene.jdbacl.model.Database var8 = var6.getDatabase();
    java.lang.String var9 = var6.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var11 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var13 = var11.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var14 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var15 = var14.getName();
    java.lang.String var16 = var11.formatValue((java.lang.Object)var14);
    var14.setName("'hi!'");
    java.util.List var19 = var14.getSchemas();
    org.databene.jdbacl.model.DBSchema var20 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var14);
    var6.removeSchema(var20);
    org.databene.jdbacl.dialect.DerbyDialect var24 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var26 = var24.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = var24.formatValue((java.lang.Object)var27);
    var27.setName("'hi!'");
    java.util.List var32 = var27.getSchemas();
    org.databene.jdbacl.model.DBSchema var33 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var27);
    org.databene.jdbacl.model.DBTrigger var34 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var33);
    var34.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var37 = var34.getTriggerBody();
    java.lang.String var38 = var34.getColumnName();
    java.lang.String var39 = var34.getWhenClause();
    var20.addTrigger(var34);
    boolean var41 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var20);
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var20);
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("CREATE SEQUENCE  CACHE 100", var20);
    java.lang.String var44 = var20.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var42.equals("schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test44");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var29 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var30 = var29.getValue();
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.BetweenExpression var35 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var26, (org.databene.script.Expression)var29, (org.databene.script.Expression)var33);
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var17, (org.databene.script.Expression)var29);
    org.databene.script.Expression[] var37 = var36.getSourceExpressions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test45");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    org.databene.jdbacl.model.DBTable var44 = var41.getTable();
    java.lang.String[] var45 = var41.getColumnNames();
    java.lang.String[] var46 = var41.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test46");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    java.lang.String var11 = var0.getDefaultDatabase();
    java.lang.String var12 = var0.getDefaultUser();
    java.lang.String var13 = var0.getDbSystem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test47");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var4 = var1.isDefaultSchema("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)", "alter sequence hi! restart with 1");
    boolean var6 = var1.isDeterministicPKName("jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    boolean var8 = var1.isDeterministicUKName("");
    boolean var10 = var1.isDeterministicPKName("select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual");
    boolean var13 = var1.isDefaultCatalog("alter sequence NOT drop generator sequence ~ 'hi!' restart with 10", "SET GENERATOR Sub identity of ():\nnull TO -1");
    boolean var16 = var1.isDefaultCatalog("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") null \"sequence\" null \"'hi!'\")", "NO_ACTION");
    boolean var18 = var1.isDeterministicUKName("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .");
    boolean var21 = var1.isDefaultCatalog("drop sequence alter sequence NOT drop generator sequence ~ 'hi!' restart with 10 NOT REGEXP 'jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: '", "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MINVALUE 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test48");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    var0.mTABLE_NAME();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var19 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var21 = var19.LA(10);
    java.lang.String var22 = var19.getText();
    java.lang.String var23 = var19.getSourceName();
    var0.consumeUntil((org.antlr.runtime.IntStream)var19, 14);
    java.lang.String var26 = var19.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "DROP SEQUENCE "+ "'", var22.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test49");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    java.lang.String var33 = var31.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var34 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var37 = var34.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var39 = var34.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var40 = var31.equals((java.lang.Object)var39);
    org.databene.jdbacl.model.DefaultDBColumn var43 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var26, var31, (java.lang.Integer)0, (java.lang.Integer)(-1));
    var43.setDefaultValue(".");
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var43);
    java.lang.Integer var47 = var43.getSize();
    org.databene.jdbacl.model.DBCatalog var48 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var49 = var48.getName();
    org.databene.jdbacl.model.Database var50 = var48.getDatabase();
    org.databene.jdbacl.model.DBSequence var54 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var55 = var54.dropDDL();
    java.math.BigInteger var56 = var54.getMinValueIfNotDefault();
    boolean var57 = var48.isIdentical((org.databene.jdbacl.model.DBObject)var54);
    org.databene.jdbacl.model.DBTreeModel var58 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.dialect.DerbyDialect var61 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var63 = var61.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var64 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var65 = var64.getName();
    java.lang.String var66 = var61.formatValue((java.lang.Object)var64);
    var64.setName("'hi!'");
    java.util.List var69 = var64.getSchemas();
    org.databene.jdbacl.model.DBSchema var70 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var64);
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable("select next value for 10", var70);
    org.databene.jdbacl.model.DBCatalog var73 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    int var74 = var58.getIndexOfChild((org.databene.jdbacl.model.DBObject)var71, (org.databene.jdbacl.model.DBObject)var73);
    var43.setOwner((org.databene.jdbacl.model.CompositeDBObject)var73);
    var73.setName("select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE;");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "DROP SEQUENCE "+ "'", var33.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var39.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 0+ "'", var47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "drop sequence "+ "'", var55.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test50");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var3 = var1.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var5 = new org.databene.jdbacl.SQLScriptException(1);
    var3.addSuppressed((java.lang.Throwable)var5);
    org.databene.jdbacl.SQLScriptException var9 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var3, "drop sequence ", (-1));
    java.lang.Throwable[] var10 = var9.getSuppressed();
    org.databene.jdbacl.SQLScriptException var12 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var9, 100);
    org.databene.jdbacl.SQLScriptException var15 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var12, "No identity defined for table NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')", 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test51");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.Collection var1 = var0.getSubContainers();
    org.databene.jdbacl.sql.parser.SQLLexer var3 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var5 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var5.release((-1));
    boolean var9 = var3.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var5, 0);
    int var10 = var3.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var3.consumeUntil((org.antlr.runtime.IntStream)var12, 100);
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    var3.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var25);
    java.util.List var27 = var0.getSequences(false, var25);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.removeTable((org.databene.jdbacl.model.DBTable)var28);
    java.util.List var31 = var0.getTables(false);
    java.util.List var32 = var0.getTables();
    java.util.List var33 = var0.getComponents();
    org.databene.jdbacl.model.DBTable var35 = var0.getTable("select gen_id(CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence)., 1) from RDB$DATABASE;");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test52");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var3 = var0.isSequenceBoundarySupported();
    boolean var5 = var0.isDeterministicFKName("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var7 = var0.isDeterministicIndexName("jdbc:h2:mem:hi! as 10 on . = 10.");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test53");


    org.databene.jdbacl.model.DBSchema var1 = new org.databene.jdbacl.model.DBSchema("table as NOT REGEXP_MATCHES(sequence, '') on select next value for (\"sequence\"). = NOT REGEXP_MATCHES(sequence, '').DROP SEQUENCE ");

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test54");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE -identity-call next value for JDBCDBImporter", "catalog null", "drop generator DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key", "drop sequence trigger", "org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ", "UniqueKeyIdentity(CREATE SEQUENCE 10)");

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test55");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var7.mCREATE_TABLE();
    var7.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var11 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var13 = var11.LT(10);
    var7.setCharStream((org.antlr.runtime.CharStream)var11);
    boolean var16 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var11, 69);
    var11.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test56");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingIndexes(true);
    var6.setImportingChecks(true);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test57");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var43 = var41.getTable();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.CompositeDBObject var45 = var41.getOwner();
    org.databene.jdbacl.model.FKChangeRule var46 = var41.getDeleteRule();
    org.databene.jdbacl.dialect.FirebirdDialect var47 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var49 = var47.isDeterministicIndexName("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'");
    boolean var50 = var46.equals((java.lang.Object)var49);
    java.lang.String var51 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "NO_ACTION"+ "'", var51.equals("NO_ACTION"));

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test58");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__65();
    var10.mPLUS();
    var10.mT__62();
    var10.mDEFAULT();
    var10.mT__61();
    var10.match("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test59");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    java.lang.String var20 = var19.toString();
    boolean var21 = var19.isNameDeterministic();
    var1.addUniqueConstraint(var19);
    java.lang.String[] var23 = var19.getColumnNames();
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnNames(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var20.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "()"+ "'", var24.equals("()"));

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test60");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    var0.consumeUntil((org.antlr.runtime.IntStream)var9, 14);
    var0.mCREATE_TABLE();
    var0.mCREATE_TABLE();
    org.databene.jdbacl.sql.parser.SQLLexer var16 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.antlr.runtime.CharStream var17 = var16.getCharStream();
    var16.mTABLE_NAME();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var20 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var20.setCharPositionInLine(1);
    int var23 = var20.getCharPositionInLine();
    var20.setCharPositionInLine(69);
    int var27 = var20.LT(3);
    int var29 = var20.LT(10);
    boolean var31 = var16.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var20, 100);
    int var32 = var20.getCharPositionInLine();
    java.lang.String var33 = var20.toString();
    int var34 = var20.getCharPositionInLine();
    var20.setLine(100);
    var0.setCharStream((org.antlr.runtime.CharStream)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "DROP SEQUENCE "+ "'", var33.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 69);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test61");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var3 = var1.isDeterministicUKName("EQUEN");
    boolean var6 = var1.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ", "CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    boolean var9 = var1.isDefaultCatalog("alter sequence NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.') restart with 10", "select alter sequence drop sequence 10 restart with 0.nextval from dual");
    boolean var11 = var1.isDeterministicPKName("select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    boolean var13 = var1.isDeterministicIndexName("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test62");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var5, var22);
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    org.databene.jdbacl.model.DBDataType var34 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var35 = var34.isAlpha();
    java.lang.String var36 = var34.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var37 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var40 = var37.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var42 = var37.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var43 = var34.equals((java.lang.Object)var42);
    org.databene.jdbacl.model.DefaultDBColumn var46 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var29, var34, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isTemporal();
    boolean var51 = var34.equals((java.lang.Object)var49);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.", (org.databene.jdbacl.model.DBTable)var5, var34, (java.lang.Integer)1, (java.lang.Integer)(-1));
    java.lang.String var55 = var34.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "DROP SEQUENCE "+ "'", var36.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var42.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "DROP SEQUENCE "+ "'", var55.equals("DROP SEQUENCE "));

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test63");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("drop generator left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ", "select next value for CREATE SEQUENCE  CACHE 100", "SubNkPkQueryIdentity(-1)", "DROP SEQUENCE Identity definition by unique key: DROP SEQUENCE  RESTRICT", "jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", "DROP SEQUENCE EQUEN RESTRICT");

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test64");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.removeTable((org.databene.jdbacl.model.DBTable)var12);
    org.databene.jdbacl.model.DefaultDBTable var14 = new org.databene.jdbacl.model.DefaultDBTable();
    var14.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var18 = var17.getForeignKeyConstraints();
    var14.addReferrer((org.databene.jdbacl.model.DBTable)var17);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    java.util.Set var25 = var21.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var28 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var29 = var28.isAlpha();
    boolean var30 = var28.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var33 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var21, var28, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var17.addColumn((org.databene.jdbacl.model.DBColumn)var33);
    var2.removeTable((org.databene.jdbacl.model.DBTable)var17);
    org.databene.jdbacl.model.DBTable var37 = var2.getTable("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    java.util.Set var44 = var40.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var47 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var48 = var47.isAlpha();
    boolean var49 = var47.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var52 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var40, var47, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var56 = var55.isAlpha();
    java.lang.String var57 = var55.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var58 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var61 = var58.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var63 = var58.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var64 = var55.equals((java.lang.Object)var63);
    boolean var65 = var55.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var66 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var40, var55);
    var2.removeTable((org.databene.jdbacl.model.DBTable)var40);
    java.util.List var69 = var2.getSequences(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "DROP SEQUENCE "+ "'", var57.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var63.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test65");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var16 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var17 = var16.getTables();
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var16);
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    var19.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var23 = var22.getForeignKeyConstraints();
    var19.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    var16.addTable((org.databene.jdbacl.model.DBTable)var22);
    var13.setTable((org.databene.jdbacl.model.DBTable)var22);
    java.util.Set var28 = var22.getUniqueConstraints(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test66");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE : class org.databene.jdbacl.model.FKChangeRule");
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var7 = var6.getTables();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var6);
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var13 = var12.getForeignKeyConstraints();
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var12);
    var6.addTable((org.databene.jdbacl.model.DBTable)var12);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var20);
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var41 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var41);
    org.databene.jdbacl.model.DBForeignKeyConstraint var43 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var12, var20, (org.databene.jdbacl.model.DBTable)var35, var41);
    java.lang.String[] var44 = var43.getForeignKeyColumnNames();
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[][] var87 = new java.lang.String[][] { var84};
    org.databene.jdbacl.ResultsWithMetadata var88 = new org.databene.jdbacl.ResultsWithMetadata(var44, var87);
    java.lang.String[][] var89 = var88.getResults();
    java.lang.String[][] var90 = var88.getResults();
    java.lang.String[][] var91 = var88.getResults();
    java.lang.String var92 = var1.extractNK((java.lang.Object[])var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "."+ "'", var26.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var42.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test67");


    java.lang.String var1 = org.databene.jdbacl.DBUtil.escape("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"+ "'", var1.equals("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"));

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test68");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var4 = var1.isDefaultSchema("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)", "alter sequence hi! restart with 1");
    boolean var5 = var1.isSequenceSupported();
    boolean var7 = var1.isDeterministicUKName("DROP SEQUENCE (100)");
    boolean var9 = var1.isDeterministicIndexName("drop generator select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test69");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"+ "'", var5.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"));

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test70");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    org.databene.jdbacl.model.DBUniqueConstraint var55 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var41, "select nextval('')", false, var49);
    java.lang.String var56 = var55.toString();
    boolean var57 = var36.isEquivalent((org.databene.jdbacl.model.DBObject)var55);
    org.databene.jdbacl.model.DBTable var58 = var36.getTable();
    org.databene.jdbacl.model.DBForeignKeyConstraint var59 = var36.getForeignKeyConstraint();
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    var60.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var64 = var63.getForeignKeyConstraints();
    var60.addReferrer((org.databene.jdbacl.model.DBTable)var63);
    java.lang.String[] var71 = new java.lang.String[] { ""};
    java.lang.String[] var75 = new java.lang.String[] { ""};
    java.lang.String var76 = org.databene.jdbacl.SQLUtil.join("", "", var71, "hi!", "10", var75);
    org.databene.jdbacl.model.DBUniqueConstraint var77 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var63, "select nextval('')", false, var71);
    org.databene.jdbacl.model.DBCatalog var78 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var79 = var78.getName();
    java.util.List var80 = var78.getComponents();
    boolean var81 = var77.isIdentical((org.databene.jdbacl.model.DBObject)var78);
    java.lang.String var82 = var77.toString();
    java.lang.String var83 = var77.toString();
    var36.addUkConstraint(var77);
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var56.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi! as 10 on . = 10."+ "'", var76.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var82.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var83.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "column jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var85.equals("column jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test71");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var3 = var0.isDefaultSchema("select next value for 10", "NaturalPkIdentity(hi!)");
    boolean var5 = var0.isDeterministicPKName("alter sequence -1 restart with 1");
    java.lang.String var9 = var0.regexQuery("select next value for SET GENERATOR.TO - 1", false, "NOT drop sequence  ~ 'alter sequence  restart with -1'");
    java.lang.String var13 = var0.regexQuery("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", false, "drop generator foreign key constraint CREATE GENERATOR drop sequence ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "REGEXP_LIKE(select next value for SET GENERATOR.TO - 1, 'NOT drop sequence  ~ 'alter sequence  restart with -1'')"+ "'", var9.equals("REGEXP_LIKE(select next value for SET GENERATOR.TO - 1, 'NOT drop sequence  ~ 'alter sequence  restart with -1'')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "REGEXP_LIKE(jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1), 'drop generator foreign key constraint CREATE GENERATOR drop sequence ')"+ "'", var13.equals("REGEXP_LIKE(jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1), 'drop generator foreign key constraint CREATE GENERATOR drop sequence ')"));

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test72");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    java.util.List var17 = var14.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var21 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var23 = var21.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var21.formatValue((java.lang.Object)var24);
    var24.setName("'hi!'");
    java.util.List var29 = var24.getSchemas();
    org.databene.jdbacl.model.DBSchema var30 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var24);
    org.databene.jdbacl.model.DBTrigger var31 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var30);
    java.util.List var32 = var30.getPackages();
    org.databene.jdbacl.model.DBPackage var33 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var30);
    java.util.List var34 = var33.getComponents();
    var14.addPackage(var33);
    java.lang.String var36 = var33.getSubObjectName();
    java.util.List var37 = var33.getComponents();
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    org.databene.jdbacl.model.Database var40 = var38.getDatabase();
    java.lang.String var41 = var38.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var43 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var45 = var43.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var46 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var47 = var46.getName();
    java.lang.String var48 = var43.formatValue((java.lang.Object)var46);
    var46.setName("'hi!'");
    java.util.List var51 = var46.getSchemas();
    org.databene.jdbacl.model.DBSchema var52 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var46);
    var38.removeSchema(var52);
    org.databene.jdbacl.dialect.DerbyDialect var56 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var58 = var56.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var59 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var60 = var59.getName();
    java.lang.String var61 = var56.formatValue((java.lang.Object)var59);
    var59.setName("'hi!'");
    java.util.List var64 = var59.getSchemas();
    org.databene.jdbacl.model.DBSchema var65 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var59);
    org.databene.jdbacl.model.DBTrigger var66 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var65);
    var66.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var69 = var66.getTriggerBody();
    java.lang.String var70 = var66.getColumnName();
    java.lang.String var71 = var66.getWhenClause();
    var52.addTrigger(var66);
    java.util.List var73 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var52);
    java.util.List var74 = var52.getTriggers();
    org.databene.jdbacl.model.DBTable var76 = var52.getTable("drop generator .");
    java.util.List var77 = var52.getTriggers();
    boolean var78 = var33.isIdentical((org.databene.jdbacl.model.DBObject)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test73");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    org.databene.jdbacl.model.DBTrigger var28 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    var28.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var31 = var28.getTriggerBody();
    java.lang.String var32 = var28.getColumnName();
    java.lang.String var33 = var28.getWhenClause();
    var14.addTrigger(var28);
    java.util.List var35 = var14.getComponents();
    org.databene.jdbacl.model.DBTreeModel var36 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var14);
    java.util.List var38 = var14.getSequences(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test74");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var80 = new org.databene.jdbacl.ResultSetConverter(var78);
    org.databene.jdbacl.ResultSetConverter var82 = new org.databene.jdbacl.ResultSetConverter(var78, false);
    org.databene.jdbacl.ResultSetConverter var84 = new org.databene.jdbacl.ResultSetConverter(var78, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test75");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mT__97();
    var10.mSLASH();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test76");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var32 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var33 = var32.getName();
    org.databene.jdbacl.model.Database var34 = var32.getDatabase();
    java.lang.String var35 = var32.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    var32.removeSchema(var46);
    java.util.List var49 = var46.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var53 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var55 = var53.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var56 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var57 = var56.getName();
    java.lang.String var58 = var53.formatValue((java.lang.Object)var56);
    var56.setName("'hi!'");
    java.util.List var61 = var56.getSchemas();
    org.databene.jdbacl.model.DBSchema var62 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var56);
    org.databene.jdbacl.model.DBTrigger var63 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var62);
    java.util.List var64 = var62.getPackages();
    org.databene.jdbacl.model.DBPackage var65 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var62);
    java.util.List var66 = var65.getComponents();
    var46.addPackage(var65);
    java.lang.String var68 = var65.getSubObjectName();
    var24.addPackage(var65);
    var65.setStatus("UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test77");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    java.math.BigInteger var6 = var3.getIncrement();
    java.lang.Boolean var7 = var3.isCycle();
    java.lang.String var8 = var3.dropDDL();
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var9.setDoc("drop sequence ");
    boolean var13 = var3.equals((java.lang.Object)"drop sequence ");
    java.lang.String var14 = var3.getCatalogName();
    java.lang.String var15 = var3.getSchemaName();
    java.lang.String var16 = var3.getName();
    java.math.BigInteger var17 = var3.getStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence 10"+ "'", var8.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence "+ "'", var14.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi! as 10 on . = 10."+ "'", var15.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "10"+ "'", var16.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test78");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("Identity definition by unique key: select next value for 10", "CREATE SEQUENCE  CACHE 100");
    java.lang.String var5 = var0.renderFetchSequenceValue("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )");
    boolean var7 = var0.isDeterministicUKName("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    boolean var9 = var0.isDeterministicFKName("Identity definition by unique key: ");
    boolean var12 = var0.isDefaultSchema("alter sequence -1 restart with 1", "CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence).");
    boolean var14 = var0.isDeterministicFKName("REGEXP_LIKE(jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1), 'drop generator foreign key constraint CREATE GENERATOR drop sequence ')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "select nextval for CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE ) from sysibm.sysdummy1"+ "'", var5.equals("select nextval for CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE ) from sysibm.sysdummy1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test79");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBIndex var30 = var22.getIndex("");
    java.util.List var31 = var22.getIndexes();
    java.util.Set var32 = var22.getForeignKeyConstraints();
    java.util.List var33 = var22.getCheckConstraints();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var34 = var22.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    org.databene.jdbacl.model.Database var37 = var35.getDatabase();
    java.lang.String var38 = var35.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var40 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var42 = var40.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var43 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var44 = var43.getName();
    java.lang.String var45 = var40.formatValue((java.lang.Object)var43);
    var43.setName("'hi!'");
    java.util.List var48 = var43.getSchemas();
    org.databene.jdbacl.model.DBSchema var49 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var43);
    var35.removeSchema(var49);
    java.util.List var52 = var49.getSequences(false);
    boolean var53 = var22.equals((java.lang.Object)var49);
    org.databene.jdbacl.model.DBTable var55 = var49.getTable("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"REGEXP_MATCHES(NOT REGEXP_LIKE(DROP SEQUENCE (100), 'CONSTRAINT \"select nextval('')\" '), 'jdbc:h2:mem:hi! as 10 on . = 10.')\"");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test80");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("foreign key constraint");

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test81");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicPKName("10");
    boolean var5 = var0.isDefaultSchema("SET GENERATOR . TO -1", "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var8 = var0.isDefaultCatalog("10", "null[DROP SEQUENCE ]");
    boolean var11 = var0.isDefaultSchema("jdbc:hsqldb:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '", "CREATE SEQUENCE  CACHE 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test82");


    java.lang.String var3 = org.databene.jdbacl.SQLUtil.substituteMarkers("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0", "column jdbc:h2:mem:hi! as 10 on . = 10.", (java.lang.Object)"Identity definition by unique key: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0"+ "'", var3.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0"));

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test83");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    java.lang.String var4 = var0.getDefaultSchema();
    java.lang.String[] var5 = var0.getJars();
    var0.setDefaultPort("'hi!'");
    org.databene.jdbacl.dialect.HSQL2Dialect var8 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var10 = var8.renderFetchSequenceValue("'hi!'");
    boolean var11 = var8.supportsRegex();
    java.lang.String var14 = var8.renderSequenceValue("CREATE SEQUENCE 10", 1L);
    boolean var16 = var8.isDeterministicIndexName("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')");
    java.lang.String var19 = var8.renderSequenceValue("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER", 1L);
    boolean var20 = var0.equals((java.lang.Object)1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "call next value for 'hi!'"+ "'", var10.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "alter sequence CREATE SEQUENCE 10 restart with 1"+ "'", var14.equals("alter sequence CREATE SEQUENCE 10 restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "alter sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER restart with 1"+ "'", var19.equals("alter sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test84");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    var2.reset();
    java.lang.String var10 = var2.substring(4, 4);
    java.lang.String var11 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + " "+ "'", var10.equals(" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test85");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("null[]", "alter sequence drop generator sequence restart with 100", "jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    java.lang.String var4 = var3.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "null[]"+ "'", var4.equals("null[]"));

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test86");


    boolean var1 = org.databene.jdbacl.SQLUtil.isProcedureCall("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test87");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    var0.setDefaultUser("hi! as 10 on . = 10.");
    var0.setDownloadUrl("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    java.lang.String var8 = var0.getUrlPattern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test88");


    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    var37.addTable((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.join("", "", var51, "hi!", "10", var55);
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var51);
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var61 = var60.getTables();
    org.databene.jdbacl.model.TableContainer var62 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var60);
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    var63.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var67 = var66.getForeignKeyConstraints();
    var63.addReferrer((org.databene.jdbacl.model.DBTable)var66);
    var60.addTable((org.databene.jdbacl.model.DBTable)var66);
    java.lang.String[] var72 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var72);
    org.databene.jdbacl.model.DBForeignKeyConstraint var74 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var43, var51, (org.databene.jdbacl.model.DBTable)var66, var72);
    org.databene.jdbacl.model.DBTable var75 = var74.getRefereeTable();
    var8.addForeignKey(var74);
    org.databene.jdbacl.model.FKChangeRule var77 = var74.getDeleteRule();
    java.lang.String var78 = var77.toString();
    java.lang.String var79 = var77.toString();
    java.lang.Class var80 = var77.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var81 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var80);
    org.databene.jdbacl.ResultSetConverter var82 = new org.databene.jdbacl.ResultSetConverter(var80);
    java.lang.String var83 = var82.toString();
    java.lang.Class var84 = var82.getTargetType();
    org.databene.jdbacl.ColumnInfo var85 = new org.databene.jdbacl.ColumnInfo("drop generator REGEXP_LIKE(select next value for SET GENERATOR.TO - 1, 'NOT drop sequence  ~ 'alter sequence  restart with -1'')", 79, var84);
    java.lang.String var86 = var85.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi! as 10 on . = 10."+ "'", var56.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "."+ "'", var57.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var73.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "NO_ACTION"+ "'", var78.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NO_ACTION"+ "'", var79.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "ResultSetConverter"+ "'", var83.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "drop generator REGEXP_LIKE(select next value for SET GENERATOR.TO - 1, 'NOT drop sequence  ~ 'alter sequence  restart with -1''): class org.databene.jdbacl.model.FKChangeRule"+ "'", var86.equals("drop generator REGEXP_LIKE(select next value for SET GENERATOR.TO - 1, 'NOT drop sequence  ~ 'alter sequence  restart with -1''): class org.databene.jdbacl.model.FKChangeRule"));

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test89");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    java.util.List var3 = var0.getRuleInvocationStack();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var5 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var5.setCharPositionInLine(1);
    int var8 = var5.getCharPositionInLine();
    var5.setCharPositionInLine(69);
    var5.setCharPositionInLine(1);
    var0.setCharStream((org.antlr.runtime.CharStream)var5);
    var0.matchAny();
    var0.skip();
    java.lang.String var16 = var0.getSourceName();
    int var17 = var0.getNumberOfSyntaxErrors();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test90");


    org.databene.jdbacl.sql.parser.SQLParser.relational_expression_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.relational_expression_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test91");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    boolean var8 = var0.supportsRegex();
    boolean var10 = var0.isDeterministicIndexName("jdbc:hsqldb:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script line -1: DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test92");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("DROP SEQUENCE drop sequence CONSTRAINT \"select nextval('')\" UNIQUE () RESTRICT", false, "jdbc:hsqldb:mem:CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER", "alter sequence  restart with -1");
      fail("Expected exception of type org.databene.commons.SyntaxError");
    } catch (org.databene.commons.SyntaxError e) {
      // Expected exception.
    }

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test93");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getTriggerBody();
    var12.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var12.setTriggerBody("DROP SEQUENCE -1 RESTRICT");
    var12.setTriggerType("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.String var23 = var12.getDescription();
    java.lang.String var24 = var12.getTableName();
    java.lang.String var25 = var12.getDescription();
    java.lang.String var26 = var12.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var23.equals("CREATE GENERATOR drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var25.equals("CREATE GENERATOR drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var26.equals("CREATE GENERATOR drop sequence "));

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test94");


    org.databene.jdbacl.sql.parser.SQLParser.table_detail_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.table_detail_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getStart();
    java.lang.Object var5 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test95");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    var0.mALTER_TABLE();
    var0.emitErrorMessage("hi! as 10 on . = 10.");
    var0.reset();
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.join("", "", var33, "hi!", "10", var37);
    org.databene.jdbacl.model.DBUniqueConstraint var39 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var25, "select nextval('')", false, var33);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var45);
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("", "", var58, "hi!", "10", var62);
    java.lang.String var64 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var45, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var62);
    org.databene.jdbacl.identity.NaturalPkIdentity var67 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var68 = var67.getName();
    boolean var70 = var67.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable();
    var71.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var75 = var74.getForeignKeyConstraints();
    var71.addReferrer((org.databene.jdbacl.model.DBTable)var74);
    java.lang.String[] var82 = new java.lang.String[] { ""};
    java.lang.String[] var86 = new java.lang.String[] { ""};
    java.lang.String var87 = org.databene.jdbacl.SQLUtil.join("", "", var82, "hi!", "10", var86);
    org.databene.jdbacl.model.DBUniqueConstraint var88 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var74, "select nextval('')", false, var82);
    java.lang.String var89 = var67.extractNK((java.lang.Object[])var82);
    java.lang.String var90 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var25, var45, (java.lang.Object[])var82);
    var0.traceIn("NO_ACTION", 14, (java.lang.Object)var25);
    var0.mCOLUMN_NAME();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi! as 10 on . = 10."+ "'", var38.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "."+ "'", var51.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi! as 10 on . = 10."+ "'", var63.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "."+ "'", var64.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var65.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi! as 10 on . = 10."+ "'", var87.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var90.equals("SELECT * FROM null WHERE  = ''"));

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test96");


    org.databene.jdbacl.sql.parser.SQLParser.ora_configs_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.ora_configs_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test97");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    java.lang.String var6 = var0.renderSequenceValue("NOT drop generator sequence ~ 'hi!'", 10L);
    boolean var8 = var0.isDeterministicFKName("alter sequence CREATE GENERATOR drop sequence  restart with 10");
    boolean var10 = var0.isDeterministicFKName("oracle");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "alter sequence NOT drop generator sequence ~ 'hi!' restart with 10"+ "'", var6.equals("alter sequence NOT drop generator sequence ~ 'hi!' restart with 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test98");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var12);
    org.databene.jdbacl.model.DBTrigger var15 = new org.databene.jdbacl.model.DBTrigger("'d'", var12);
    java.lang.String var16 = var15.getTriggeringEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test99");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    boolean var7 = var0.isDeterministicIndexName("hi!");
    java.lang.String var9 = var0.renderFetchSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    boolean var12 = var0.isDefaultSchema("null[DROP SEQUENCE ]", "table");
    org.databene.jdbacl.model.DBSequence var16 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var17 = var16.getMaxValue();
    java.lang.String var18 = var16.toString();
    java.lang.String var19 = var0.renderCreateSequence(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var9.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE "+ "'", var19.equals("CREATE SEQUENCE "));

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test100");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.util.List var16 = var15.getComponents();
    var15.setObjectType("-1");
    java.util.List var19 = var15.getComponents();
    var15.setDataObjectId("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    var15.setObjectType("Identity definition by NK-PK query: alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test101");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.setText("'SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)'");
    var10.mAND();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test102");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setTableOwner("call next value for 'hi!'");
    java.lang.String var15 = var12.getDescription();
    var12.setDescription("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    var12.setTableName("'hi!' : DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test103");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    org.databene.jdbacl.model.DBTrigger var28 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    var28.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var31 = var28.getTriggerBody();
    java.lang.String var32 = var28.getColumnName();
    java.lang.String var33 = var28.getWhenClause();
    var14.addTrigger(var28);
    java.util.List var35 = var14.getComponents();
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    org.databene.jdbacl.dialect.DerbyDialect var49 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var51 = var49.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var52 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var53 = var52.getName();
    java.lang.String var54 = var49.formatValue((java.lang.Object)var52);
    var52.setName("'hi!'");
    java.util.List var57 = var52.getSchemas();
    org.databene.jdbacl.model.DBSchema var58 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var52);
    org.databene.jdbacl.model.DBTrigger var59 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var58);
    var46.addTrigger(var59);
    boolean var61 = var14.isIdentical((org.databene.jdbacl.model.DBObject)var59);
    var59.setActionType("alter sequence CREATE SEQUENCE 10 restart with 1");
    java.lang.String var64 = var59.getBaseObjectType();
    java.lang.String var65 = var59.getReferencingNames();
    java.lang.String var66 = var59.getReferencingNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test104");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var40.addColumnName("sequence");
    var21.addUkConstraint(var40);
    org.databene.jdbacl.model.DBForeignKeyConstraint var44 = var21.getForeignKeyConstraint();
    var21.setSize((java.lang.Integer)69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test105");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.mT__137();
    var10.mOR();
    var10.mT__81();
    var10.mORA_CONFIGS();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test106");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setCache((java.lang.Long)100L);
    java.lang.String var12 = var9.getObjectType();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    java.lang.String var14 = var9.getSchemaName();
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    org.databene.jdbacl.model.DBSchema var26 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var20);
    org.databene.jdbacl.model.DBTrigger var27 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var26);
    var27.setTableName("sequence");
    boolean var30 = var9.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.lang.String var31 = var27.getDescription();
    var27.setStatus("10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi! as 10 on . = 10."+ "'", var14.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test107");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setTableOwner("call next value for 'hi!'");
    java.lang.String var15 = var12.getDescription();
    java.lang.String var16 = var12.getColumnName();
    var12.setTriggeringEvent("'NOT drop generator sequence ~ ''hi!'''");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test108");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.JDBCConnectData var1 = org.databene.jdbacl.JDBCConnectData.parseSingleDbProperties("\"'hi!'\"");
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test109");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    java.lang.String var5 = var0.setSequenceValue("", (-1L));
    boolean var8 = var0.isDefaultCatalog("sequence", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var10 = var0.isDeterministicIndexName("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ");
    boolean var12 = var0.isDeterministicFKName("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1");
    boolean var15 = var0.isDefaultSchema("alter sequence drop generator . restart with 10", "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )");
    java.lang.String var16 = var0.getSystem();
    boolean var19 = var0.isDefaultSchema("Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE .VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;");
    java.lang.String var23 = var0.regexQuery("drop sequence alter sequence hi! restart with 1", true, "call next value for jdbc:h2:mem:DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence  restart with -1"+ "'", var5.equals("alter sequence  restart with -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "h2"+ "'", var16.equals("h2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "drop sequence alter sequence hi! restart with 1 NOT REGEXP 'call next value for jdbc:h2:mem:DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT'"+ "'", var23.equals("drop sequence alter sequence hi! restart with 1 NOT REGEXP 'call next value for jdbc:h2:mem:DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT'"));

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test110");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var3 = var1.isDeterministicUKName("EQUEN");
    boolean var6 = var1.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ", "CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    boolean var9 = var1.isDefaultCatalog("alter sequence NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.') restart with 10", "select alter sequence drop sequence 10 restart with 0.nextval from dual");
    boolean var11 = var1.isDeterministicPKName("select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    boolean var13 = var1.isDeterministicIndexName("call next value for CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.' NOT REGEXP 'SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test111");


    org.databene.jdbacl.dialect.DerbyDialect var0 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var2 = var0.isDeterministicPKName("hi! as 10 on . = 10.");
    boolean var4 = var0.isDeterministicUKName("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    java.lang.String var5 = var0.getSystem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "derby"+ "'", var5.equals("derby"));

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test112");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.lang.String var19 = var0.renderCreateSequence(var17);
    boolean var22 = var0.isDefaultSchema("VALUES (NEXT VALUE FOR call next value for 'hi!')", "catalog null");
    boolean var24 = var0.isDeterministicFKName("Identity definition by NK-PK query: NOT drop generator sequence ~ 'hi!'");
    java.lang.String var26 = var0.renderFetchSequenceValue("CONSTRAINT \"select nextval('')\" UNIQUE (, sequence, drop generator DROP SEQUENCE catalog RESTRICT)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "VALUES (NEXT VALUE FOR CONSTRAINT \"select nextval('')\" UNIQUE (, sequence, drop generator DROP SEQUENCE catalog RESTRICT))"+ "'", var26.equals("VALUES (NEXT VALUE FOR CONSTRAINT \"select nextval('')\" UNIQUE (, sequence, drop generator DROP SEQUENCE catalog RESTRICT))"));

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test113");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__65();
    var10.mT__130();
    var10.mSUB();
    var10.mT__103();
    var10.mSIZE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test114");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBTreeModel var10 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var0);
    var0.setDoc("() = CASE WHEN NOT drop generator sequence ~ 'hi!' THEN alter sequence CREATE GENERATOR drop sequence  restart with -1 ELSE SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 END");
    java.lang.String var13 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test115");


    java.lang.String[] var6 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var7 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var6);
    java.lang.String var8 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("DROP SEQUENCE CREATE GENERATOR  RESTRICT", var6);
    java.lang.String[] var14 = new java.lang.String[] { ""};
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String var19 = org.databene.jdbacl.SQLUtil.join("", "", var14, "hi!", "10", var18);
    java.lang.String var20 = org.databene.jdbacl.SQLUtil.join("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var6, "org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var18);
    org.databene.jdbacl.identity.UniqueKeyIdentity var21 = new org.databene.jdbacl.identity.UniqueKeyIdentity("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\"): class org.databene.jdbacl.model.FKChangeRule", var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var7.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE "+ "'", var8.equals("DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi! as 10 on . = 10."+ "'", var19.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-. join org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.). on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE .DROP SEQUENCE  = CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).."+ "'", var20.equals("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-. join org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.). on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE .DROP SEQUENCE  = CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).."));

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test116");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with 10 restart with 0", false, "drop sequence select gen_id('d', 1) from RDB$DATABASE;: class org.databene.jdbacl.model.FKChangeRule", "UniqueKeyIdentity(((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") null \"sequence\" null \"'hi!'\"))");
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test117");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var29 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var30 = var29.getValue();
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.BetweenExpression var35 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var26, (org.databene.script.Expression)var29, (org.databene.script.Expression)var33);
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var17, (org.databene.script.Expression)var29);
    org.databene.jdbacl.sql.ColumnExpression var39 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var42 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var43 = var42.getValue();
    org.databene.jdbacl.sql.ColumnExpression var46 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var47 = var46.getValue();
    org.databene.jdbacl.sql.BetweenExpression var48 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var39, (org.databene.script.Expression)var42, (org.databene.script.Expression)var46);
    org.databene.jdbacl.sql.ColumnExpression var51 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var54 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var55 = var54.getValue();
    org.databene.jdbacl.sql.ColumnExpression var58 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var59 = var58.getValue();
    org.databene.jdbacl.sql.BetweenExpression var60 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var51, (org.databene.script.Expression)var54, (org.databene.script.Expression)var58);
    org.databene.jdbacl.sql.ColumnExpression var63 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var66 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var67 = var66.getValue();
    org.databene.jdbacl.sql.ColumnExpression var70 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var71 = var70.getValue();
    org.databene.jdbacl.sql.BetweenExpression var72 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var63, (org.databene.script.Expression)var66, (org.databene.script.Expression)var70);
    org.databene.jdbacl.sql.BetweenExpression var73 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var46, (org.databene.script.Expression)var54, (org.databene.script.Expression)var66);
    org.databene.jdbacl.sql.ColumnExpression var76 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var77 = var76.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var78 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var80 = var78.renderFetchSequenceValue("'hi!'");
    var76.setValue("'hi!'");
    org.databene.jdbacl.sql.BetweenExpression var82 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var36, (org.databene.script.Expression)var66, (org.databene.script.Expression)var76);
    org.databene.script.Expression[] var83 = var36.getTerms();
    org.databene.script.Expression[] var84 = var36.getSourceExpressions();
    java.lang.String var85 = var36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "sequence"+ "'", var43.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sequence"+ "'", var47.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "sequence"+ "'", var55.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "sequence"+ "'", var59.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "sequence"+ "'", var67.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "sequence"+ "'", var71.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "sequence"+ "'", var77.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "call next value for 'hi!'"+ "'", var80.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var85.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test118");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var1 = var0.getForeignKeyConstraints();
    var0.setDoc("drop sequence ");
    var0.setDoc("catalog");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    var8.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var12 = var11.getForeignKeyConstraints();
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var11);
    java.lang.String[] var19 = new java.lang.String[] { ""};
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.join("", "", var19, "hi!", "10", var23);
    org.databene.jdbacl.model.DBUniqueConstraint var25 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var11, "select nextval('')", false, var19);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var26 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var0, "REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')", false, var19);
    java.lang.String var27 = var26.toString();
    var26.addColumnName("select SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi! as 10 on . = 10."+ "'", var24.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "CONSTRAINT \"REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')\" PRIMARY KEY ()"+ "'", var27.equals("CONSTRAINT \"REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')\" PRIMARY KEY ()"));

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test119");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIN();
    var10.mT__137();
    var10.mT__78();
    var10.mDROP_SEQUENCE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test120");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    org.databene.jdbacl.sql.parser.SQLLexer var5 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.mT__104();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test121");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var9 = var0.renderFetchSequenceValue("");
    java.lang.String var13 = var0.regexQuery("drop generator sequence", true, "hi!");
    boolean var15 = var0.isDeterministicPKName("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    java.lang.String var19 = var0.regexQuery("NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ", true, "derby");
    boolean var22 = var0.isDefaultSchema("select next value for drop sequence NOT SIMILAR TO ''jdbc:h2:mem:hi! as 10 on . = 10.-identity-.''", "alter sequence CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (). restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('')"+ "'", var9.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop generator sequence ~ 'hi!'"+ "'", var13.equals("NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "NOT NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  ~ 'derby'"+ "'", var19.equals("NOT NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  ~ 'derby'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test122");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    int var19 = var10.getBacktrackingLevel();
    var10.mALTER_TABLE();
    int var21 = var10.getCharPositionInLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test123");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    java.util.List var38 = var15.getSequences(true);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    org.databene.jdbacl.model.DBDataType var48 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var49 = var48.isAlpha();
    java.lang.String var50 = var48.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var51 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var54 = var51.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var56 = var51.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var57 = var48.equals((java.lang.Object)var56);
    org.databene.jdbacl.model.DefaultDBColumn var60 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var43, var48, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.util.List var61 = var60.getUkConstraints();
    org.databene.jdbacl.dialect.DerbyDialect var65 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var67 = var65.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var68 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var69 = var68.getName();
    java.lang.String var70 = var65.formatValue((java.lang.Object)var68);
    var68.setName("'hi!'");
    java.util.List var73 = var68.getSchemas();
    org.databene.jdbacl.model.DBSchema var74 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var68);
    org.databene.jdbacl.model.DBTrigger var75 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var74);
    java.lang.String var76 = var74.getName();
    java.util.List var78 = var74.getTables(true);
    org.databene.jdbacl.model.DBPackage var79 = new org.databene.jdbacl.model.DBPackage("SELECT * FROM null WHERE  = ''", var74);
    boolean var80 = var60.isEquivalent((org.databene.jdbacl.model.DBObject)var79);
    var15.addPackage(var79);
    java.lang.String var82 = var79.getSubObjectName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "DROP SEQUENCE "+ "'", var50.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var56.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var76.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test124");


    org.databene.jdbacl.sql.parser.SQLParser.ora_storage_opt_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.ora_storage_opt_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test125");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    java.util.Set var16 = var15.getForeignKeyConstraints();
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    var17.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var21 = var20.getForeignKeyConstraints();
    var17.addReferrer((org.databene.jdbacl.model.DBTable)var20);
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String[] var32 = new java.lang.String[] { ""};
    java.lang.String var33 = org.databene.jdbacl.SQLUtil.join("", "", var28, "hi!", "10", var32);
    org.databene.jdbacl.model.DBUniqueConstraint var34 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var20, "select nextval('')", false, var28);
    java.lang.String var35 = var34.toString();
    boolean var36 = var34.isNameDeterministic();
    var34.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var47 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var47.setSchemaName("alter sequence hi! restart with 1");
    boolean var50 = var34.equals((java.lang.Object)var47);
    boolean var51 = var34.isNameDeterministic();
    var15.removeUniqueConstraint(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi! as 10 on . = 10."+ "'", var33.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var35.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test126");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("table");
    org.databene.jdbacl.model.sql.CreateExporter var2 = new org.databene.jdbacl.model.sql.CreateExporter(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test127");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    boolean var2 = var0.isDeterministicFKName("drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'");
    boolean var5 = var0.isDefaultCatalog("call next value for select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'", "DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT");
    boolean var6 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test128");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicPKName("org.firebirdsql.jdbc.FBDriver");
    boolean var6 = var0.isDeterministicFKName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var12 = var11.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    org.databene.jdbacl.model.Database var15 = var13.getDatabase();
    java.lang.String var16 = var13.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    var13.removeSchema(var27);
    org.databene.jdbacl.dialect.DerbyDialect var31 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var33 = var31.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var34 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var35 = var34.getName();
    java.lang.String var36 = var31.formatValue((java.lang.Object)var34);
    var34.setName("'hi!'");
    java.util.List var39 = var34.getSchemas();
    org.databene.jdbacl.model.DBSchema var40 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var34);
    org.databene.jdbacl.model.DBTrigger var41 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var40);
    var41.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var44 = var41.getTriggerBody();
    java.lang.String var45 = var41.getColumnName();
    java.lang.String var46 = var41.getWhenClause();
    var27.addTrigger(var41);
    boolean var48 = var11.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.util.List var49 = var27.getPackages();
    org.databene.jdbacl.model.DBSequence var50 = new org.databene.jdbacl.model.DBSequence("NO_ACTION", var27);
    java.math.BigInteger var51 = var50.getIncrementIfNotDefault();
    java.lang.String var52 = var0.renderCreateSequence(var50);
    boolean var54 = var0.isDeterministicCheckName("DROP SEQUENCE ");
    boolean var57 = var0.isDefaultSchema("drop sequence alter sequence NOT drop generator sequence ~ 'hi!' restart with 10 NOT REGEXP 'jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: '", "org.databene.jdbacl.identity.InvalidIdentityDefinitionError.DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\""+ "'", var52.equals("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test129");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    var0.setDownloadUrl("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var0.setId("CREATE GENERATOR drop sequence ");
    var0.setDefaultPort("CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    var0.setDefaultSchema("DROP SEQUENCE (100,-1)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test130");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    java.util.List var17 = var14.getSequences(false);
    org.databene.jdbacl.model.DBCatalog var18 = var14.getCatalog();
    org.databene.jdbacl.dialect.DerbyDialect var21 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var23 = var21.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var21.formatValue((java.lang.Object)var24);
    var24.setName("'hi!'");
    java.util.List var29 = var24.getSchemas();
    org.databene.jdbacl.model.DBSchema var30 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var24);
    org.databene.jdbacl.model.DBTrigger var31 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var30);
    var31.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var34 = var31.getTriggerType();
    var31.setTriggerType("org.firebirdsql.jdbc.FBDriver");
    var14.addTrigger(var31);
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var38.equals("schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test131");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    org.databene.jdbacl.model.DBTrigger var30 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var29);
    var30.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var33 = var30.getTriggerBody();
    java.lang.String var34 = var30.getColumnName();
    java.lang.String var35 = var30.getWhenClause();
    var16.addTrigger(var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("-1", var16);
    org.databene.jdbacl.dialect.DerbyDialect var41 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var43 = var41.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var44 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var45 = var44.getName();
    java.lang.String var46 = var41.formatValue((java.lang.Object)var44);
    var44.setName("'hi!'");
    java.util.List var49 = var44.getSchemas();
    org.databene.jdbacl.model.DBSchema var50 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var44);
    org.databene.jdbacl.model.DBTrigger var51 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var50);
    java.util.List var52 = var50.getPackages();
    org.databene.jdbacl.model.DBPackage var53 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var50);
    java.lang.String var54 = var53.getStatus();
    var16.addPackage(var53);
    org.databene.jdbacl.model.DBProcedure var56 = new org.databene.jdbacl.model.DBProcedure("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var53);
    var53.setSubObjectName("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')");
    java.lang.String var59 = var53.getStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test132");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.util.List var16 = var15.getComponents();
    var15.setObjectType("-1");
    java.util.List var19 = var15.getComponents();
    var15.setDataObjectId("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    var15.setObjectType("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER SIMILAR TO 'alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test133");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    var0.setDownloadUrl("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    java.lang.String[] var13 = var0.getJars();
    java.lang.String var14 = var0.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test134");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.dialect.DerbyDialect var25 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var27 = var25.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var28 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var29 = var28.getName();
    java.lang.String var30 = var25.formatValue((java.lang.Object)var28);
    var28.setName("'hi!'");
    java.util.List var33 = var28.getSchemas();
    org.databene.jdbacl.model.DBSchema var34 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var28);
    org.databene.jdbacl.model.DBTrigger var35 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var34);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    org.databene.jdbacl.model.DBUniqueConstraint var53 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var39, "select nextval('')", false, var47);
    org.databene.jdbacl.model.DBCatalog var54 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var55 = var54.getName();
    java.util.List var56 = var54.getComponents();
    boolean var57 = var53.isIdentical((org.databene.jdbacl.model.DBObject)var54);
    boolean var58 = var35.equals((java.lang.Object)var57);
    var21.setCellValue("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (java.lang.Object)var58);
    java.lang.String var60 = var21.toString();
    java.lang.String var61 = var21.toString();
    org.databene.jdbacl.sql.parser.SQLLexer var62 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var62.mCREATE_TABLE();
    var62.setBacktrackingLevel(10);
    var62.mALTER_TABLE();
    var62.setBacktrackingLevel(1);
    var62.mCOMMENT_COLUMN();
    var62.mTABLE_DETAILS();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.setPKValue((java.lang.Object)var62);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "null[false]"+ "'", var60.equals("null[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "null[false]"+ "'", var61.equals("null[false]"));

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test135");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.setText("'SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)'");
    var10.skip();
    var10.mT__95();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test136");


    org.databene.jdbacl.model.DBDataType var2 = org.databene.jdbacl.model.DBDataType.getInstance(309, "select gen_id(VALUES (NEXT VALUE FOR call next value for 'hi!') SIMILAR TO 'alter sequence CREATE GENERATOR drop sequence  restart with -1', 1) from RDB$DATABASE;");
    boolean var3 = var2.isAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test137");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__65();
    var10.mPLUS();
    var10.mT__62();
    var10.mDEFAULT();
    var10.mCOMMENT_TABLE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test138");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    var1.seek(14);
    var1.setCharPositionInLine(10);
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.renderValue((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "10"+ "'", var9.equals("10"));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test139");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingIndexes(true);
    var6.setLazy(true);
    var6.setImportingSequences(false);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test140");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_SEQUENCE();
    var0.mCOLUMN_NAME();
    var0.endResync();

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test141");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var39 = new org.databene.jdbacl.model.DefaultDBColumn("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (org.databene.jdbacl.model.DBTable)var5, var31, (java.lang.Integer)3, (java.lang.Integer)69);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    java.util.Set var44 = var40.getUniqueConstraints(false);
    java.lang.String var45 = var40.getDoc();
    var40.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    boolean var48 = var39.isIdentical((org.databene.jdbacl.model.DBObject)var40);
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    org.databene.jdbacl.model.DBUniqueConstraint var68 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var54, "select nextval('')", false, var62);
    java.lang.String var69 = var68.toString();
    boolean var70 = var68.isNameDeterministic();
    var50.addUniqueConstraint(var68);
    var39.setTable((org.databene.jdbacl.model.DBTable)var50);
    java.lang.Integer var73 = var39.getFractionDigits();
    boolean var74 = var39.isVersionColumn();
    org.databene.jdbacl.model.DBDataType var75 = var39.getType();
    org.databene.jdbacl.model.DBColumn[] var76 = new org.databene.jdbacl.model.DBColumn[] { var39};
    java.lang.String var77 = org.databene.jdbacl.SQLUtil.renderColumnNames(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "."+ "'", var45.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var69.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + 69+ "'", var73.equals(69));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: "+ "'", var77.equals("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: "));

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test142");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    var0.mCOMMENT_TABLE();
    var0.mCREATE_SEQUENCE();
    var0.mCOLUMN_SPEC();
    var0.mDROP_TABLE();
    org.databene.jdbacl.sql.parser.SQLLexer var8 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.antlr.runtime.CharStream var9 = var8.getCharStream();
    var8.mTABLE_NAME();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var12.setCharPositionInLine(1);
    int var15 = var12.getCharPositionInLine();
    var12.setCharPositionInLine(69);
    int var19 = var12.LT(3);
    int var21 = var12.LT(10);
    boolean var23 = var8.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var12, 100);
    var0.setCharStream((org.antlr.runtime.CharStream)var12);
    var0.reset();
    var0.mT__123();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test143");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    var13.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var16 = var13.getTriggerBody();
    java.lang.String var17 = var13.getTriggerBody();
    var13.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var13.setTriggerBody("DROP SEQUENCE -1 RESTRICT");
    var13.setTriggerType("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var43 = new java.lang.String[] { ""};
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.join("", "", var43, "hi!", "10", var47);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var43);
    org.databene.jdbacl.model.TableContainer var52 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var53 = var52.getTables();
    org.databene.jdbacl.model.TableContainer var54 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var52);
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var59 = var58.getForeignKeyConstraints();
    var55.addReferrer((org.databene.jdbacl.model.DBTable)var58);
    var52.addTable((org.databene.jdbacl.model.DBTable)var58);
    java.lang.String[] var64 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var64);
    org.databene.jdbacl.model.DBForeignKeyConstraint var66 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var35, var43, (org.databene.jdbacl.model.DBTable)var58, var64);
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    var68.setDoc(".");
    java.util.Set var72 = var68.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var75 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var76 = var75.isAlpha();
    boolean var77 = var75.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var80 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var68, var75, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var82 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT \"select nextval('')\" ", (org.databene.jdbacl.model.DBTable)var35, var75, (java.lang.Integer)10);
    java.util.List var83 = var35.getComponents();
    boolean var84 = var13.isIdentical((org.databene.jdbacl.model.DBObject)var35);
    org.databene.jdbacl.model.DBRow var85 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var86 = var35.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBColumn var89 = new org.databene.jdbacl.model.DefaultDBColumn("select nextval('select next value for SET GENERATOR . TO -1')", (org.databene.jdbacl.model.DBTable)var35, 309, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    java.lang.String[] var90 = var35.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi! as 10 on . = 10."+ "'", var48.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "."+ "'", var49.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var65.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test144");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var13.setName("10");
    java.math.BigInteger var16 = var13.getIncrement();
    java.math.BigInteger var17 = var13.getIncrement();
    var9.setMaxValue(var17);
    java.lang.String var19 = var0.formatValue((java.lang.Object)var9);
    boolean var22 = var0.isDefaultSchema("hi! as 10 on . = 10.", "call next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1");
    boolean var24 = var0.isDeterministicFKName("firebird");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "call next value for 'hi!'"+ "'", var19.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test145");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var3.setCharPositionInLine(1);
    java.lang.String var6 = var3.toString();
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mOR();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "DROP SEQUENCE "+ "'", var6.equals("DROP SEQUENCE "));

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test146");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    java.lang.String var5 = var0.setSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 1L);
    boolean var7 = var0.isDeterministicIndexName("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var10 = var0.setSequenceValue("catalog", 1L);
    boolean var12 = var0.isDeterministicPKName("select alter sequence drop sequence 10 restart with 0.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"+ "'", var5.equals("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence catalog restart with 1"+ "'", var10.equals("alter sequence catalog restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test147");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    java.lang.String var19 = var16.getObjectId();
    java.lang.String var20 = var16.getObjectType();
    var16.setObjectType("SET GENERATOR catalog TO -2");
    java.lang.String var23 = var16.getObjectId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test148");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__126();
    var10.mT__133();
    var10.mDATE();
    var10.endResync();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test149");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("sequence ", "drop generator REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')", "drop sequence SELECT * FROM null WHERE  = ''", "SubNkPkQueryIdentity(-1)", "select nextval('NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ')", "'\u0135'.NOT drop generator sequence ~ 'hi!'");

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test150");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    java.util.List var4 = var0.getSequences();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    org.databene.jdbacl.model.DBTrigger var17 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    java.util.List var24 = var21.getComponents();
    var16.setCatalog(var21);
    var0.removeSchema(var16);
    java.lang.String var27 = var0.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test151");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    java.lang.Object[] var4 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("drop sequence 10");
    java.lang.Object[] var6 = var0.createSubPath(var4, (java.lang.Object)(byte)(-1));
    java.util.Set var7 = var0.keySet();
    java.util.Set var8 = var0.keySet();
    org.databene.jdbacl.identity.IdentityProvider var9 = var0.getIdentityProvider();
    boolean var11 = var0.contains("CONSTRAINT \"REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')\" PRIMARY KEY ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test152");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    boolean var4 = var0.equals((java.lang.Object)(-1.0f));
    org.databene.jdbacl.model.DBCheckConstraint var9 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var10 = var9.getConditionText();
    java.lang.String var11 = var9.getConditionText();
    var0.addCheckConstraint(var9);
    java.lang.String var13 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "\"'hi!'\""+ "'", var10.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "\"'hi!'\""+ "'", var11.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var13.equals("CONSTRAINT columnCHECK \"'hi!'\""));

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test153");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var3 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "sequence");
    org.databene.jdbacl.model.sql.CreateExporter var4 = new org.databene.jdbacl.model.sql.CreateExporter(var1);
    org.databene.jdbacl.model.xml.XMLModelImporter var5 = new org.databene.jdbacl.model.xml.XMLModelImporter(var1);
    org.databene.jdbacl.model.xml.XMLModelImporter var6 = new org.databene.jdbacl.model.xml.XMLModelImporter(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var7 = var6.importDatabase();
      fail("Expected exception of type org.databene.commons.ImportFailedException");
    } catch (org.databene.commons.ImportFailedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test154");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))|null");

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test155");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    java.lang.String var9 = var0.getCharErrorDisplay(100);
    var0.mVALUE_LIST();
    java.lang.String var11 = var0.getSourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "'d'"+ "'", var9.equals("'d'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test156");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    var6.setImportingIndexes(false);
    var6.setIncludeTables("CONSTRAINT \"select nextval('')\" UNIQUE (, sequence)");
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    java.util.List var21 = var20.getTables();
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    org.databene.jdbacl.model.Database var26 = var24.getDatabase();
    java.lang.String var27 = var24.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var29 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var31 = var29.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var32 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var33 = var32.getName();
    java.lang.String var34 = var29.formatValue((java.lang.Object)var32);
    var32.setName("'hi!'");
    java.util.List var37 = var32.getSchemas();
    org.databene.jdbacl.model.DBSchema var38 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var32);
    var24.removeSchema(var38);
    org.databene.jdbacl.dialect.DerbyDialect var42 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var44 = var42.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var45 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var46 = var45.getName();
    java.lang.String var47 = var42.formatValue((java.lang.Object)var45);
    var45.setName("'hi!'");
    java.util.List var50 = var45.getSchemas();
    org.databene.jdbacl.model.DBSchema var51 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var45);
    org.databene.jdbacl.model.DBTrigger var52 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var51);
    var52.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var55 = var52.getTriggerBody();
    java.lang.String var56 = var52.getColumnName();
    java.lang.String var57 = var52.getWhenClause();
    var38.addTrigger(var52);
    org.databene.jdbacl.model.DBTrigger var59 = new org.databene.jdbacl.model.DBTrigger("-1", var38);
    org.databene.jdbacl.model.DBSequence var60 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var38);
    boolean var61 = var20.isIdentical((org.databene.jdbacl.model.DBObject)var38);
    java.util.List var62 = var38.getComponents();
    org.databene.jdbacl.model.DBTrigger var63 = new org.databene.jdbacl.model.DBTrigger("unique constraint", var38);
    org.databene.jdbacl.model.jdbc.LazyTable var66 = new org.databene.jdbacl.model.jdbc.LazyTable(var6, var38, "jdbc:hsqldb:mem:jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "No identity defined for table NOT drop sequence  ~ 'alter sequence  restart with -1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test157");


    org.databene.jdbacl.JDBCDriverInfo var1 = org.databene.jdbacl.JDBCDriverInfo.getInstance("alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10 NOT REGEXP 'sequence'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test158");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIN();
    var10.mT__137();
    var10.mT__78();
    var10.mINVOCATION();
    int var23 = var10.getRuleMemoizationCacheSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test159");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var3 = var0.renderSetSequenceValue("select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE;", 100L);
    boolean var5 = var0.isDeterministicPKName("select nextval('select next value for SET GENERATOR . TO -1')");
    java.lang.String var7 = var0.renderDropSequence("EQUEN");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99"+ "'", var3.equals("SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop generator EQUEN"+ "'", var7.equals("drop generator EQUEN"));

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test160");


    org.databene.jdbacl.identity.NoIdentity var1 = new org.databene.jdbacl.identity.NoIdentity("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    java.lang.String var2 = var1.getDescription();
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    java.lang.String[] var16 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var17 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var16);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    java.lang.String[] var32 = new java.lang.String[] { ""};
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String var37 = org.databene.jdbacl.SQLUtil.join("", "", var32, "hi!", "10", var36);
    org.databene.jdbacl.model.DBUniqueConstraint var38 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var24, "select nextval('')", false, var32);
    var24.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var43 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var43);
    org.databene.jdbacl.model.DBUniqueConstraint var45 = var24.getUniqueConstraint(var43);
    org.databene.jdbacl.identity.UniqueKeyIdentity var46 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var43);
    java.lang.String var47 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var16, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var43);
    org.databene.jdbacl.model.DBUniqueConstraint var48 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var16);
    org.databene.jdbacl.model.DBUniqueIndex var49 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var48);
    java.lang.String[] var50 = var49.getColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var51 = var1.extractPK((java.lang.Object[])var50);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"+ "'", var2.equals("No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi! as 10 on . = 10."+ "'", var37.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var44.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var47.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test161");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var6.setName("10");
    java.math.BigInteger var9 = var6.getIncrement();
    java.lang.Boolean var10 = var6.isCycle();
    java.lang.String var11 = var6.dropDDL();
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.math.BigInteger var19 = var15.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var23.setName("10");
    java.math.BigInteger var26 = var23.getIncrement();
    java.math.BigInteger var27 = var23.getIncrement();
    var15.setLastNumber(var27);
    var6.setIncrement(var27);
    var0.addSequence(var6);
    org.databene.jdbacl.model.DBTable var32 = var0.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    java.util.List var33 = var0.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.dialect.DerbyDialect var41 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var43 = var41.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var44 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var45 = var44.getName();
    java.lang.String var46 = var41.formatValue((java.lang.Object)var44);
    var44.setName("'hi!'");
    java.util.List var49 = var44.getSchemas();
    java.util.List var50 = var39.getTables(false, var49);
    java.util.List var51 = var0.getTables(false, var50);
    java.util.List var52 = var0.getComponents();
    java.util.Collection var53 = var0.getSubContainers();
    org.databene.jdbacl.model.TableContainer var56 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var57 = var56.getTables();
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var56);
    org.databene.jdbacl.DBExecutionResult var60 = new org.databene.jdbacl.DBExecutionResult((java.lang.Object)var58, (java.lang.Boolean)false);
    java.lang.String var61 = var58.getName();
    var0.addSubContainer(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop sequence 10"+ "'", var11.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "SET GENERATOR . TO -1"+ "'", var61.equals("SET GENERATOR . TO -1"));

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test162");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    var0.setDoc("select next value for SET GENERATOR.TO - 1");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    var8.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var12 = var11.getForeignKeyConstraints();
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var11);
    org.databene.jdbacl.model.DBDataType var16 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var17 = var16.isAlpha();
    java.lang.String var18 = var16.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var19 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var22 = var19.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var24 = var19.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var25 = var16.equals((java.lang.Object)var24);
    org.databene.jdbacl.model.DefaultDBColumn var28 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var11, var16, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var29 = var28.getType();
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var41 = new java.lang.String[] { ""};
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.join("", "", var41, "hi!", "10", var45);
    org.databene.jdbacl.model.DBUniqueConstraint var47 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var33, "select nextval('')", false, var41);
    var47.addColumnName("sequence");
    var28.addUkConstraint(var47);
    var28.setNullable(true);
    org.databene.jdbacl.model.DBSequence var56 = new org.databene.jdbacl.model.DBSequence("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "Identity definition by unique key: select next value for 10", "()");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    org.databene.jdbacl.model.DBDataType var67 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var68 = var67.isAlpha();
    java.lang.String var69 = var67.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var70 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var73 = var70.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var75 = var70.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var76 = var67.equals((java.lang.Object)var75);
    org.databene.jdbacl.model.DefaultDBColumn var79 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var62, var67, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var82 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var62, (-1), "hi! identity by primary key");
    boolean var83 = var82.isNullable();
    var82.setNullable(true);
    boolean var86 = var56.isIdentical((org.databene.jdbacl.model.DBObject)var82);
    java.lang.Long var87 = var56.getCache();
    boolean var88 = var28.isIdentical((org.databene.jdbacl.model.DBObject)var56);
    var0.addColumn((org.databene.jdbacl.model.DBColumn)var28);
    java.lang.Integer var90 = var28.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "DROP SEQUENCE "+ "'", var18.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var24.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi! as 10 on . = 10."+ "'", var46.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "DROP SEQUENCE "+ "'", var69.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var75.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + 0+ "'", var90.equals(0));

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test163");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicPKName(".");
    boolean var6 = var0.isDefaultSchema("CREATE GENERATOR CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE;");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test164");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    java.lang.String var38 = var12.getTriggerBody();
    java.lang.String var39 = var12.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var39.equals("CREATE GENERATOR drop sequence "));

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test165");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mARGUMENTS();
    var10.setBacktrackingLevel(69);
    var10.mOR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test166");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mTABLE_DETAILS();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__66();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test167");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getActionType();
    java.lang.String var17 = var12.getActionType();
    java.lang.String var18 = var12.getDescription();
    java.lang.String var19 = var12.getTriggerBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var18.equals("CREATE GENERATOR drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test168");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIN();
    var10.mT__137();
    var10.mT__78();
    var10.mT__127();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test169");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog("DROP SEQUENCE DROP SEQUENCE  RESTRICT");

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test170");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    java.lang.String var10 = var0.renderSequenceValue("drop sequence 10", 0L);
    java.lang.String var14 = var0.regexQuery("CONSTRAINT \"select nextval('')\" ", false, "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var17 = var0.isDefaultCatalog("NO_ACTION", "alter sequence drop sequence 10 restart with 0");
    boolean var20 = var0.isDefaultCatalog("drop sequence 10", "drop sequence 10");
    java.lang.String var22 = var0.renderFetchSequenceValue("CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))");
    boolean var25 = var0.isDefaultSchema("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1", "(\"sequence\")");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var10.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')"+ "'", var14.equals("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "call next value for CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))"+ "'", var22.equals("call next value for CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test171");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    boolean var12 = var5.isQuoted();
    java.lang.String var13 = var5.toString();
    org.databene.jdbacl.identity.xml.IdentityParseContext var14 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var15 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var14.addParser((org.databene.webdecs.xml.XMLElementParser)var15);
    java.lang.Object var18 = var14.get("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    java.lang.Object var19 = var5.evaluate((org.databene.commons.Context)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "\"sequence\""+ "'", var13.equals("\"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "sequence"+ "'", var19.equals("sequence"));

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test172");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    boolean var5 = var0.isDeterministicUKName("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var6 = var0.supportsRegex();
    java.lang.String var10 = var0.regexQuery("alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1", true, "NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "NOT REGEXP_MATCHES(alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1, 'NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')')"+ "'", var10.equals("NOT REGEXP_MATCHES(alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1, 'NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')')"));

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test173");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    java.lang.String var12 = var11.toString();
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var16 = var15.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var17 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var19 = var17.renderFetchSequenceValue("'hi!'");
    var15.setValue("'hi!'");
    java.lang.Object var21 = var15.getValue();
    org.databene.jdbacl.sql.ColumnExpression var24 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var25 = var24.getValue();
    org.databene.jdbacl.sql.BetweenExpression var26 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var11, (org.databene.script.Expression)var15, (org.databene.script.Expression)var24);
    org.databene.script.Expression[] var27 = var11.getSourceExpressions();
    org.databene.jdbacl.sql.ColumnExpression var31 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var34 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var35 = var34.getValue();
    org.databene.jdbacl.sql.ColumnExpression var38 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var39 = var38.getValue();
    org.databene.jdbacl.sql.BetweenExpression var40 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var31, (org.databene.script.Expression)var34, (org.databene.script.Expression)var38);
    org.databene.jdbacl.sql.ColumnExpression var43 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var46 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var47 = var46.getValue();
    org.databene.jdbacl.sql.ColumnExpression var50 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var51 = var50.getValue();
    org.databene.jdbacl.sql.BetweenExpression var52 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var43, (org.databene.script.Expression)var46, (org.databene.script.Expression)var50);
    var40.addTerm((org.databene.script.Expression)var46);
    org.databene.script.Expression[] var54 = new org.databene.script.Expression[] { var40};
    org.databene.jdbacl.sql.FunctionInvocation var55 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var54);
    org.databene.jdbacl.identity.xml.IdentityParseContext var56 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    java.lang.Object var57 = var55.evaluate((org.databene.commons.Context)var56);
    java.lang.Boolean var58 = var11.evaluate((org.databene.commons.Context)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var12.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "sequence"+ "'", var16.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "call next value for 'hi!'"+ "'", var19.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "'hi!'"+ "'", var21.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "sequence"+ "'", var25.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "sequence"+ "'", var35.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "sequence"+ "'", var39.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sequence"+ "'", var47.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "sequence"+ "'", var51.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + true+ "'", var58.equals(true));

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test174");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicPKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL");
    boolean var5 = var0.isDeterministicPKName("select next value for ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test175");


    org.databene.jdbacl.dialect.DerbyDialect var0 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var2 = var0.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var3 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var4 = var3.getName();
    java.lang.String var5 = var0.formatValue((java.lang.Object)var3);
    var3.setName("'hi!'");
    java.util.List var8 = var3.getSchemas();
    org.databene.jdbacl.dialect.PostgreSQLDialect var9 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var12 = var9.isDefaultCatalog("", "");
    java.lang.String var14 = var9.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var15 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var16 = var9.formatValue((java.lang.Object)var15);
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var15);
    org.databene.jdbacl.model.Database var18 = var15.getDatabase();
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    org.databene.jdbacl.model.DBSchema var31 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var25);
    org.databene.jdbacl.model.DBTrigger var32 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var31);
    java.lang.String var33 = var31.getName();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var31);
    var15.addSchema(var31);
    java.util.List var36 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var31);
    org.databene.jdbacl.dialect.DerbyDialect var39 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var41 = var39.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var42 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var43 = var42.getName();
    java.lang.String var44 = var39.formatValue((java.lang.Object)var42);
    var42.setName("'hi!'");
    java.util.List var47 = var42.getSchemas();
    org.databene.jdbacl.model.DBSchema var48 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var42);
    org.databene.jdbacl.model.DBTrigger var49 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var48);
    var49.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var52 = var49.getTriggerBody();
    java.lang.String var53 = var49.getActionType();
    var31.addTrigger(var49);
    var3.addSchema(var31);
    java.util.List var56 = var31.getComponents();
    java.lang.String var57 = var31.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence "+ "'", var14.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "null"+ "'", var17.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var33.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var57.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test176");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    boolean var5 = var1.equals((java.lang.Object)(-1.0f));
    org.databene.jdbacl.model.DBCheckConstraint var10 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var11 = var10.getConditionText();
    java.lang.String var12 = var10.getConditionText();
    var1.addCheckConstraint(var10);
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    java.util.Set var42 = var38.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var45 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var46 = var45.isAlpha();
    boolean var47 = var45.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var50 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var38, var45, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var53 = new org.databene.jdbacl.model.DefaultDBColumn("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (org.databene.jdbacl.model.DBTable)var19, var45, (java.lang.Integer)3, (java.lang.Integer)69);
    java.lang.String var54 = var45.getName();
    org.databene.jdbacl.dialect.MySQLDialect var55 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var57 = var55.isDeterministicFKName("NaturalPkIdentity(hi!)");
    boolean var58 = var55.supportsRegex();
    boolean var59 = var55.supportsRegex();
    boolean var60 = var55.supportsRegex();
    boolean var62 = var55.isDeterministicFKName("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    boolean var63 = var45.equals((java.lang.Object)"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    org.databene.jdbacl.model.DefaultDBColumn var64 = new org.databene.jdbacl.model.DefaultDBColumn("DROP SEQUENCE (100,-1) REGEXP 'DROP SEQUENCE (10,69)'", (org.databene.jdbacl.model.DBTable)var1, var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBNotNullConstraint var68 = new org.databene.jdbacl.model.DBNotNullConstraint((org.databene.jdbacl.model.DBTable)var1, "select gen_id('d', 1) from RDB$DATABASE;", false, "select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- REGEXP 'DROP SEQUENCE CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")' RESTRICT'");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "\"'hi!'\""+ "'", var11.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "\"'hi!'\""+ "'", var12.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "DROP SEQUENCE "+ "'", var54.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test177");


    java.lang.Object[] var1 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test178");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.jdbc.JDBCDBImporter var1 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("Sub identity of ():\nnull");
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test179");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mVARCHAR2();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var18 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    boolean var20 = var10.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var18, 6);
    var10.mT__77();
    var10.mNUMBER();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test180");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    var4.reset();
    org.databene.jdbacl.sql.parser.SQLLexer var9 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.mT__133();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test181");


    java.lang.Object[] var1 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("call next value for 'hi!' identity by primary key");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test182");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.matchRange(100, 0);
    java.lang.String var21 = var10.getSourceName();
    var10.mCREATE_TABLE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test183");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var4 = var1.isDefaultSchema("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)", "alter sequence hi! restart with 1");
    boolean var6 = var1.isDeterministicPKName("jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    boolean var8 = var1.isDeterministicUKName("");
    boolean var10 = var1.isDeterministicPKName("select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual");
    boolean var12 = var1.isDeterministicPKName("alter sequence -1 restart with 1");
    boolean var14 = var1.isDeterministicPKName("select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null)");
    boolean var16 = var1.isDeterministicUKName("CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))");
    boolean var19 = var1.isDefaultSchema("CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MINVALUE 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test184");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    java.lang.String[] var2 = var1.getPKColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test185");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    org.databene.jdbacl.model.DBTrigger var28 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    var28.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var31 = var28.getTriggerBody();
    java.lang.String var32 = var28.getColumnName();
    java.lang.String var33 = var28.getWhenClause();
    var14.addTrigger(var28);
    java.util.List var35 = var14.getComponents();
    org.databene.jdbacl.model.DBTreeModel var36 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var14);
    org.databene.jdbacl.model.DBCatalog var37 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var38 = var37.getName();
    java.util.List var39 = var37.getComponents();
    org.databene.jdbacl.model.DBSchema var41 = var37.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var43 = var37.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var44 = var37.getName();
    java.util.List var45 = var37.getSequences();
    java.util.List var46 = var37.getTables();
    org.databene.jdbacl.model.DBSequence var52 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var53 = var52.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var54 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var55 = var54.getName();
    org.databene.jdbacl.model.Database var56 = var54.getDatabase();
    java.lang.String var57 = var54.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var59 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var61 = var59.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var62 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var63 = var62.getName();
    java.lang.String var64 = var59.formatValue((java.lang.Object)var62);
    var62.setName("'hi!'");
    java.util.List var67 = var62.getSchemas();
    org.databene.jdbacl.model.DBSchema var68 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var62);
    var54.removeSchema(var68);
    org.databene.jdbacl.dialect.DerbyDialect var72 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var74 = var72.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var75 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var76 = var75.getName();
    java.lang.String var77 = var72.formatValue((java.lang.Object)var75);
    var75.setName("'hi!'");
    java.util.List var80 = var75.getSchemas();
    org.databene.jdbacl.model.DBSchema var81 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var75);
    org.databene.jdbacl.model.DBTrigger var82 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var81);
    var82.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var85 = var82.getTriggerBody();
    java.lang.String var86 = var82.getColumnName();
    java.lang.String var87 = var82.getWhenClause();
    var68.addTrigger(var82);
    boolean var89 = var52.isIdentical((org.databene.jdbacl.model.DBObject)var68);
    java.util.List var90 = var68.getPackages();
    org.databene.jdbacl.model.DBSequence var91 = new org.databene.jdbacl.model.DBSequence("NO_ACTION", var68);
    org.databene.jdbacl.model.DBPackage var92 = new org.databene.jdbacl.model.DBPackage("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL", var68);
    int var93 = var36.getIndexOfChild((org.databene.jdbacl.model.DBObject)var37, (org.databene.jdbacl.model.DBObject)var92);
    var92.setSubObjectName("select next value for jdbc:h2:mem:select next value for 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == (-1));

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test186");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("org.databene.jdbacl.SQLScriptException: Error in execution of script line 1: ", "false", "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ", "null[DROP SEQUENCE ]", "drop sequence ", "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER", "select nextval('')", false);
    var8.setImportingPackages(false);
    var8.setCatalogName("REGEXP_LIKE(REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" '), 'left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ')");

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test187");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var4 = var1.isDefaultSchema("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)", "alter sequence hi! restart with 1");
    boolean var5 = var1.isSequenceSupported();
    boolean var7 = var1.isDeterministicPKName("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')");
    boolean var10 = var1.isDefaultCatalog("CONSTRAINT hi! ", "drop generator select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test188");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var4 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", 100);
    org.databene.jdbacl.SQLScriptException var6 = var1.withUri("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.SQLScriptException var8 = var1.withUri("drop generator left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    org.databene.jdbacl.SQLScriptException var11 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var8, 6);
    java.lang.Throwable[] var12 = var11.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test189");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    org.databene.jdbacl.model.DBTrigger var33 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var32);
    java.util.List var34 = var32.getPackages();
    org.databene.jdbacl.model.DBPackage var35 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var32);
    java.util.List var36 = var35.getComponents();
    org.databene.jdbacl.model.DBProcedure var37 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var35);
    var16.addProcedure(var37);
    java.lang.String var39 = var37.getObjectId();
    var37.setOverload("");
    java.lang.String var42 = var37.getSubProgramId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test190");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    java.lang.String[] var30 = var22.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var43 = var42.isAlpha();
    java.lang.String var44 = var42.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var45 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var48 = var45.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var50 = var45.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var51 = var42.equals((java.lang.Object)var50);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var37, var42, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = var54.getType();
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String[] var71 = new java.lang.String[] { ""};
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.join("", "", var67, "hi!", "10", var71);
    org.databene.jdbacl.model.DBUniqueConstraint var73 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var59, "select nextval('')", false, var67);
    var73.addColumnName("sequence");
    var54.addUkConstraint(var73);
    org.databene.jdbacl.model.DBUniqueIndex var77 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var73);
    var22.addIndex((org.databene.jdbacl.model.DBIndex)var77);
    org.databene.jdbacl.version.QueryVersionProvider var80 = new org.databene.jdbacl.version.QueryVersionProvider("SET GENERATOR . TO -1");
    var80.setQuery("10");
    boolean var83 = var77.equals((java.lang.Object)var80);
    java.lang.String var84 = var77.toString();
    boolean var85 = var77.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "DROP SEQUENCE "+ "'", var44.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var50.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi! as 10 on . = 10."+ "'", var72.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique"+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test191");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDefaultPort("CREATE SEQUENCE 10");
    var0.setDriverClass("drop sequence ");
    var0.setId("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var0.setName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    java.lang.String var11 = var0.getId();
    java.lang.String var12 = var0.getDefaultPort();
    java.lang.String var13 = var0.getDefaultPort();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var11.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "CREATE SEQUENCE 10"+ "'", var12.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE 10"+ "'", var13.equals("CREATE SEQUENCE 10"));

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test192");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBIndex var30 = var22.getIndex("");
    java.util.List var31 = var22.getIndexes();
    java.util.Set var32 = var22.getForeignKeyConstraints();
    org.databene.jdbacl.model.DBSchema var33 = var22.getSchema();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test193");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    int var16 = var9.LA(69);
    var9.reset();
    int var18 = var9.index();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test194");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var22 = var21.getType();
    org.databene.jdbacl.model.DBDataType var25 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var26 = var25.isAlpha();
    java.lang.String var27 = var25.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var28 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var31 = var28.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var33 = var28.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var34 = var25.equals((java.lang.Object)var33);
    var21.setType(var25);
    boolean var36 = var25.isAlpha();
    int var37 = var25.getJdbcType();
    boolean var38 = var25.isNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "DROP SEQUENCE "+ "'", var27.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var33.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test195");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.removeTable((org.databene.jdbacl.model.DBTable)var12);
    org.databene.jdbacl.model.DefaultDBTable var14 = new org.databene.jdbacl.model.DefaultDBTable();
    var14.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var18 = var17.getForeignKeyConstraints();
    var14.addReferrer((org.databene.jdbacl.model.DBTable)var17);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    java.util.Set var25 = var21.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var28 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var29 = var28.isAlpha();
    boolean var30 = var28.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var33 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var21, var28, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var17.addColumn((org.databene.jdbacl.model.DBColumn)var33);
    var2.removeTable((org.databene.jdbacl.model.DBTable)var17);
    org.databene.jdbacl.model.DBTable var37 = var2.getTable("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    java.util.Set var44 = var40.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var47 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var48 = var47.isAlpha();
    boolean var49 = var47.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var52 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var40, var47, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var56 = var55.isAlpha();
    java.lang.String var57 = var55.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var58 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var61 = var58.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var63 = var58.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var64 = var55.equals((java.lang.Object)var63);
    boolean var65 = var55.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var66 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var40, var55);
    var2.removeTable((org.databene.jdbacl.model.DBTable)var40);
    int var68 = var40.countProviders();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "DROP SEQUENCE "+ "'", var57.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var63.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test196");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    java.util.Set var6 = var2.getUniqueConstraints(false);
    var2.setDoc("select next value for SET GENERATOR.TO - 1");
    org.databene.jdbacl.model.DBIndex var10 = var2.getIndex("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    org.databene.jdbacl.model.DefaultDBTable var14 = new org.databene.jdbacl.model.DefaultDBTable();
    var14.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var18 = var17.getForeignKeyConstraints();
    var14.addReferrer((org.databene.jdbacl.model.DBTable)var17);
    java.lang.String[] var25 = new java.lang.String[] { ""};
    java.lang.String[] var29 = new java.lang.String[] { ""};
    java.lang.String var30 = org.databene.jdbacl.SQLUtil.join("", "", var25, "hi!", "10", var29);
    org.databene.jdbacl.model.DBUniqueConstraint var31 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var17, "select nextval('')", false, var25);
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String[] var41 = new java.lang.String[] { ""};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.join("", "", var37, "hi!", "10", var41);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var37);
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String[] var54 = new java.lang.String[] { ""};
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.join("", "", var50, "hi!", "10", var54);
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var54);
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var37, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var54);
    org.databene.jdbacl.identity.NaturalPkIdentity var59 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var60 = var59.getName();
    boolean var62 = var59.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    var63.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var67 = var66.getForeignKeyConstraints();
    var63.addReferrer((org.databene.jdbacl.model.DBTable)var66);
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String[] var78 = new java.lang.String[] { ""};
    java.lang.String var79 = org.databene.jdbacl.SQLUtil.join("", "", var74, "hi!", "10", var78);
    org.databene.jdbacl.model.DBUniqueConstraint var80 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var66, "select nextval('')", false, var74);
    java.lang.String var81 = var59.extractNK((java.lang.Object[])var74);
    java.lang.String var82 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var17, var37, (java.lang.Object[])var74);
    org.databene.jdbacl.identity.UniqueKeyIdentity var83 = new org.databene.jdbacl.identity.UniqueKeyIdentity("drop generator sequence", var74);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var84 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var2, "hi! identity by primary key", true, var74);
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var84);
    org.databene.jdbacl.model.DBUniqueIndex var86 = new org.databene.jdbacl.model.DBUniqueIndex("() = CASE WHEN NOT drop generator sequence ~ 'hi!' THEN alter sequence CREATE GENERATOR drop sequence  restart with -1 ELSE SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 END", true, (org.databene.jdbacl.model.DBUniqueConstraint)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi! as 10 on . = 10."+ "'", var30.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi! as 10 on . = 10."+ "'", var42.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "."+ "'", var43.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi! as 10 on . = 10."+ "'", var55.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "."+ "'", var56.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var57.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi! as 10 on . = 10."+ "'", var79.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var82.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" "+ "'", var85.equals("CONSTRAINT \"hi! identity by primary key\" "));

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test197");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    var0.setDoc("select next value for SET GENERATOR.TO - 1");
    org.databene.jdbacl.model.DBIndex var8 = var0.getIndex("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    org.databene.jdbacl.model.DBUniqueConstraint var29 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var15, "select nextval('')", false, var23);
    java.lang.String[] var35 = new java.lang.String[] { ""};
    java.lang.String[] var39 = new java.lang.String[] { ""};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.join("", "", var35, "hi!", "10", var39);
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var35);
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.join("", "", var48, "hi!", "10", var52);
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var35, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var52);
    org.databene.jdbacl.identity.NaturalPkIdentity var57 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var58 = var57.getName();
    boolean var60 = var57.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var72 = new java.lang.String[] { ""};
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String var77 = org.databene.jdbacl.SQLUtil.join("", "", var72, "hi!", "10", var76);
    org.databene.jdbacl.model.DBUniqueConstraint var78 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var64, "select nextval('')", false, var72);
    java.lang.String var79 = var57.extractNK((java.lang.Object[])var72);
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var15, var35, (java.lang.Object[])var72);
    org.databene.jdbacl.identity.UniqueKeyIdentity var81 = new org.databene.jdbacl.identity.UniqueKeyIdentity("drop generator sequence", var72);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var82 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var0, "hi! identity by primary key", true, var72);
    java.lang.String var83 = var82.toString();
    java.lang.String var84 = var82.toString();
    java.lang.String var85 = var82.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi! as 10 on . = 10."+ "'", var40.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "."+ "'", var41.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi! as 10 on . = 10."+ "'", var53.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "."+ "'", var54.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var55.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi! as 10 on . = 10."+ "'", var77.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var80.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()"+ "'", var83.equals("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()"+ "'", var84.equals("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()"+ "'", var85.equals("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()"));

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test198");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    java.lang.String var4 = var0.renderDropSequence("sequence");
    boolean var7 = var0.isDefaultSchema("alter sequence  restart with -1", "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var12 = var11.dropDDL();
    java.math.BigInteger var13 = var11.getMinValueIfNotDefault();
    java.math.BigInteger var14 = var11.getLastNumber();
    org.databene.jdbacl.model.DBSequence var18 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var18.setName("10");
    java.math.BigInteger var21 = var18.getIncrement();
    java.math.BigInteger var22 = var18.getIncrement();
    var11.setStart(var22);
    java.lang.String var24 = var0.renderCreateSequence(var11);
    java.math.BigInteger var25 = var11.getIncrementIfNotDefault();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop generator sequence"+ "'", var4.equals("drop generator sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "drop sequence "+ "'", var12.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "CREATE GENERATOR "+ "'", var24.equals("CREATE GENERATOR "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test199");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    org.databene.jdbacl.model.DBTable var44 = var41.getTable();
    java.lang.String[] var45 = var41.getRefereeColumnNames();
    java.lang.String[] var46 = var41.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test200");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    var4.reset();
    int var9 = var4.getLine();
    java.lang.String var10 = var4.getSourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test201");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__100();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var18 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var19 = var18.mark();
    int var20 = var18.getCharPositionInLine();
    int var21 = var18.getLine();
    var10.consumeUntil((org.antlr.runtime.IntStream)var18, 14);
    org.antlr.runtime.CharStream var24 = var10.getCharStream();
    var10.mT__121();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test202");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var3 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    org.databene.jdbacl.model.xml.XMLModelExporter var5 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    org.databene.jdbacl.model.xml.XMLModelExporter var6 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1);
    org.databene.jdbacl.model.csv.CSVModelExporter var7 = new org.databene.jdbacl.model.csv.CSVModelExporter(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test203");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    var6.setImportingTriggers(true);
    var6.setIncludeTables("SET GENERATOR . TO -1");
    java.lang.String var15 = var6.getDatabaseProductName();
    var6.setCatalogName("SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test204");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    java.util.List var18 = var15.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var15);
    java.util.List var20 = var15.getTables();
    java.util.List var22 = var15.getSequences(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test205");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("CREATE SEQUENCE \"'hi!'\".\"call next value for 'hi!'\" MAXVALUE 1");
    java.util.List var2 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test206");


    org.databene.jdbacl.identity.NaturalPkIdentity var2 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    boolean var4 = var2.equals((java.lang.Object)(short)(-1));
    java.lang.String var5 = var2.toString();
    java.lang.String var6 = var2.getTableName();
    java.lang.String var7 = var2.getDescription();
    var2.addIrrelevantColumn("REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')");
    java.lang.String var10 = var2.getName();
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    java.lang.Object var24 = var14.getValue();
    org.databene.jdbacl.sql.ColumnExpression var27 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var28 = var27.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var29 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var31 = var29.renderFetchSequenceValue("'hi!'");
    var27.setValue("'hi!'");
    boolean var33 = var27.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var36 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var37 = var36.isConstant();
    java.lang.Object var38 = var36.getValue();
    org.databene.jdbacl.sql.BetweenExpression var39 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var27, (org.databene.script.Expression)var36);
    org.databene.script.Expression[] var40 = var39.getSourceExpressions();
    org.databene.jdbacl.sql.FunctionInvocation var41 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", var40);
    java.lang.Object var42 = var2.extractPK((java.lang.Object[])var40);
    org.databene.jdbacl.sql.FunctionInvocation var43 = new org.databene.jdbacl.sql.FunctionInvocation("call next value for alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10", var40);
    java.lang.String var44 = var43.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "NaturalPkIdentity(hi!)"+ "'", var5.equals("NaturalPkIdentity(hi!)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi! identity by primary key"+ "'", var7.equals("hi! identity by primary key"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "sequence"+ "'", var24.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "call next value for 'hi!'"+ "'", var31.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "sequence"+ "'", var38.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(\"sequence\" null \"'hi!'\" null \"sequence\")"+ "'", var44.equals("(\"sequence\" null \"'hi!'\" null \"sequence\")"));

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test207");


    org.databene.jdbacl.sql.parser.SQLParser.name_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.name_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getStop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test208");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("'E'");
    java.util.Set var2 = var1.getForeignKeyConstraints();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test209");


    java.lang.String[] var3 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var7 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var10 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var11 = var10.getValue();
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var15 = var14.getValue();
    org.databene.jdbacl.sql.BetweenExpression var16 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var7, (org.databene.script.Expression)var10, (org.databene.script.Expression)var14);
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var22 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var23 = var22.getValue();
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var27 = var26.getValue();
    org.databene.jdbacl.sql.BetweenExpression var28 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var19, (org.databene.script.Expression)var22, (org.databene.script.Expression)var26);
    org.databene.jdbacl.sql.ColumnExpression var31 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var34 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var35 = var34.getValue();
    org.databene.jdbacl.sql.ColumnExpression var38 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var39 = var38.getValue();
    org.databene.jdbacl.sql.BetweenExpression var40 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var31, (org.databene.script.Expression)var34, (org.databene.script.Expression)var38);
    org.databene.jdbacl.sql.BetweenExpression var41 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var22, (org.databene.script.Expression)var34);
    org.databene.script.Expression[] var42 = new org.databene.script.Expression[] { var14};
    org.databene.jdbacl.sql.FunctionInvocation var43 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var42);
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.renderWhereClause(var3, (java.lang.Object[])var42);
    org.databene.jdbacl.sql.FunctionInvocation var45 = new org.databene.jdbacl.sql.FunctionInvocation("select next value for SET GENERATOR . TO -1", var42);
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String[] var54 = new java.lang.String[] { ""};
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.join("", "", var50, "hi!", "10", var54);
    org.databene.jdbacl.identity.IdentityProvider var56 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var57 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var50, var56);
    org.databene.jdbacl.identity.xml.IdentityParseContext var58 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var56);
    var58.remove("drop sequence 10");
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.join("", "", var66, "hi!", "10", var70);
    org.databene.jdbacl.identity.IdentityProvider var72 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var73 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var66, var72);
    org.databene.jdbacl.identity.xml.IdentityParseContext var74 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var72);
    var58.set("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", (java.lang.Object)var74);
    java.lang.Object var76 = var45.evaluate((org.databene.commons.Context)var74);
    java.lang.String var77 = var45.getFunctionName();
    org.databene.script.Expression[] var78 = var45.getTerms();
    org.databene.jdbacl.sql.FunctionInvocation var79 = new org.databene.jdbacl.sql.FunctionInvocation("select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-", var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "sequence"+ "'", var11.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "sequence"+ "'", var15.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "sequence"+ "'", var27.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "sequence"+ "'", var35.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "sequence"+ "'", var39.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var44.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi! as 10 on . = 10."+ "'", var55.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi! as 10 on . = 10."+ "'", var71.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var77.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test210");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.identity.NaturalPkIdentity var15 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var16 = var15.getName();
    boolean var18 = var15.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    var19.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var23 = var22.getForeignKeyConstraints();
    var19.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    java.lang.String[] var30 = new java.lang.String[] { ""};
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String var35 = org.databene.jdbacl.SQLUtil.join("", "", var30, "hi!", "10", var34);
    org.databene.jdbacl.model.DBUniqueConstraint var36 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var22, "select nextval('')", false, var30);
    java.lang.String var37 = var15.extractNK((java.lang.Object[])var30);
    boolean var38 = var1.equals((java.lang.Object)var15);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var46 = var45.getForeignKeyConstraints();
    var42.addReferrer((org.databene.jdbacl.model.DBTable)var45);
    org.databene.jdbacl.model.DBDataType var50 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var51 = var50.isAlpha();
    java.lang.String var52 = var50.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var53 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var56 = var53.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var58 = var53.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var59 = var50.equals((java.lang.Object)var58);
    org.databene.jdbacl.model.DefaultDBColumn var62 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var45, var50, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var63 = var62.getType();
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var75 = new java.lang.String[] { ""};
    java.lang.String[] var79 = new java.lang.String[] { ""};
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.join("", "", var75, "hi!", "10", var79);
    org.databene.jdbacl.model.DBUniqueConstraint var81 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var67, "select nextval('')", false, var75);
    var81.addColumnName("sequence");
    var62.addUkConstraint(var81);
    org.databene.jdbacl.model.DBUniqueIndex var85 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var81);
    org.databene.jdbacl.model.DBTable var86 = var85.getTable();
    var85.addColumnName("null[DROP SEQUENCE ]");
    var1.addIndex((org.databene.jdbacl.model.DBIndex)var85);
    boolean var90 = var85.isUnique();
    org.databene.jdbacl.model.DBTable var91 = var85.getTable();
    org.databene.jdbacl.model.DBTable var92 = var85.getTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi! as 10 on . = 10."+ "'", var35.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "DROP SEQUENCE "+ "'", var52.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var58.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi! as 10 on . = 10."+ "'", var80.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test211");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var5 = var4.getConditionText();
    java.lang.String var6 = var4.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var11 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var12 = var11.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var17 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var18 = var17.getTableName();
    boolean var19 = var11.isEquivalent(var17);
    boolean var20 = var4.isEquivalent(var17);
    org.databene.jdbacl.model.DBCheckConstraint var25 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    org.databene.jdbacl.model.DBCheckConstraint var30 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var31 = var30.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var36 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var37 = var36.getTableName();
    boolean var38 = var30.isEquivalent(var36);
    boolean var39 = var25.isEquivalent(var30);
    java.lang.String[] var40 = var30.getColumnNames();
    boolean var41 = var4.isEquivalent(var30);
    java.lang.String[] var42 = var4.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "\"'hi!'\""+ "'", var5.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "\"'hi!'\""+ "'", var6.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "\"'hi!'\""+ "'", var12.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var18.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "\"'hi!'\""+ "'", var31.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var37.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test212");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    java.lang.String var10 = var0.renderSequenceValue("drop sequence 10", 0L);
    java.lang.String var13 = var0.renderSequenceValue("CREATE GENERATOR drop sequence ", 10L);
    java.lang.String var17 = var0.regexQuery("catalog", false, "call next value for null[]");
    boolean var20 = var0.isDefaultSchema("SELECT * FROM null WHERE  = ''", "alter sequence select next value for 10 restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var10.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "alter sequence CREATE GENERATOR drop sequence  restart with 10"+ "'", var13.equals("alter sequence CREATE GENERATOR drop sequence  restart with 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "REGEXP_MATCHES(catalog, 'call next value for null[]')"+ "'", var17.equals("REGEXP_MATCHES(catalog, 'call next value for null[]')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test213");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var4 = var0.isDeterministicUKName("jdbc:h2:mem:select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT') SIMILAR TO 'drop sequence select next value for CREATE GENERATOR  NOT REGEXP 'UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join 'Identity definition by NK-PK query: CONSTRAINT \"select nextval('')\" UNIQUE ()' : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')''");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test214");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var23);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var40);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var23, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var40);
    org.databene.jdbacl.identity.NaturalPkIdentity var45 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var46 = var45.getName();
    boolean var48 = var45.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    var49.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var53 = var52.getForeignKeyConstraints();
    var49.addReferrer((org.databene.jdbacl.model.DBTable)var52);
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String[] var64 = new java.lang.String[] { ""};
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.join("", "", var60, "hi!", "10", var64);
    org.databene.jdbacl.model.DBUniqueConstraint var66 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var52, "select nextval('')", false, var60);
    java.lang.String var67 = var45.extractNK((java.lang.Object[])var60);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var3, var23, (java.lang.Object[])var60);
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String[] var78 = new java.lang.String[] { ""};
    java.lang.String var79 = org.databene.jdbacl.SQLUtil.join("", "", var74, "hi!", "10", var78);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var80 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var3, "jdbc:h2:mem:select next value for 10", false, var78);
    java.lang.String[] var87 = new java.lang.String[] { ""};
    java.lang.String[] var91 = new java.lang.String[] { ""};
    java.lang.String var92 = org.databene.jdbacl.SQLUtil.join("", "", var87, "hi!", "10", var91);
    org.databene.jdbacl.identity.IdentityProvider var93 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var94 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var87, var93);
    org.databene.jdbacl.model.DBUniqueConstraint var95 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "hi!", true, var87);
    java.util.List var96 = var3.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "."+ "'", var29.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "."+ "'", var42.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var43.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi! as 10 on . = 10."+ "'", var65.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var68.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi! as 10 on . = 10."+ "'", var79.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "hi! as 10 on . = 10."+ "'", var92.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test215");


    org.databene.jdbacl.dialect.HSQLDialect var0 = new org.databene.jdbacl.dialect.HSQLDialect();
    java.lang.String var3 = var0.renderSequenceValue("foreign key constraint CREATE GENERATOR drop sequence ", 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence foreign key constraint CREATE GENERATOR drop sequence  restart with 1"+ "'", var3.equals("alter sequence foreign key constraint CREATE GENERATOR drop sequence  restart with 1"));

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test216");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.FKChangeRule var1 = org.databene.jdbacl.model.FKChangeRule.valueOf("')'");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test217");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicUKName("call next value for 'hi!'");
    java.lang.String var6 = var0.regexQuery("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0", false, "alter sequence hi! restart with 1");
    boolean var8 = var0.isDeterministicUKName("jdbc:h2:mem:VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    boolean var10 = var0.isDeterministicPKName("10");
    boolean var11 = var0.isSequenceSupported();
    boolean var14 = var0.isDefaultCatalog("REGEXP_MATCHES(catalog, 'call next value for null[]')", "DROP SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"+ "'", var6.equals("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test218");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.model.DBSchema var5 = new org.databene.jdbacl.model.DBSchema("jdbc:hsqldb:mem:CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100", var1);
    var1.setDoc("call next value for alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test219");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    org.antlr.runtime.CharStream var7 = var0.getCharStream();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.setCharPositionInLine(1);
    int var12 = var9.getCharPositionInLine();
    var9.setCharPositionInLine(69);
    var9.setCharPositionInLine(1);
    int var17 = var9.getCharPositionInLine();
    boolean var19 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 79);
    org.databene.jdbacl.sql.parser.SQLLexer var20 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.antlr.runtime.CharStream var21 = var20.getCharStream();
    var20.mTABLE_NAME();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var24 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var24.setCharPositionInLine(1);
    int var27 = var24.getCharPositionInLine();
    var24.setCharPositionInLine(69);
    int var31 = var24.LT(3);
    int var33 = var24.LT(10);
    boolean var35 = var20.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var24, 100);
    var0.setCharStream((org.antlr.runtime.CharStream)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mCOMMENT();
      fail("Expected exception of type org.antlr.runtime.NoViableAltException");
    } catch (org.antlr.runtime.NoViableAltException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test220");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var8.setImportingChecks(true);
    var8.setFaultTolerant(true);
    var8.setIncludeTables("SET GENERATOR drop generator CREATE GENERATOR 10 TO 0");
    var8.setIncludeTables("foreign key constraint CREATE GENERATOR drop sequence ");

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test221");


    boolean var1 = org.databene.jdbacl.DBUtil.existsEnvironment("SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test222");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var6.setImportingUKs(false);
    var6.close();
    var6.setIncludeTables("alter sequence NOT drop generator sequence ~ 'hi!' restart with 10");
    var6.close();
    var6.setLazy(true);
    var6.setImportingPackages(false);
    var6.setImportingChecks(false);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test223");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("NkPkQueryIdentity(DROP SEQUENCE -1 RESTRICT)", "DROP SEQUENCE EQUEN RESTRICT", "select next value for 10");
    var3.setOrder((java.lang.Boolean)true);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test224");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    java.lang.String var5 = var0.setSequenceValue("", (-1L));
    boolean var8 = var0.isDefaultCatalog("sequence", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var11 = var0.isDefaultSchema("alter sequence  restart with -1", "drop sequence alter sequence hi! restart with 1");
    boolean var13 = var0.isDeterministicIndexName("CREATE SEQUENCE 10");
    java.lang.String var17 = var0.regexQuery("select nextval('drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT')", false, "(select next value for 10)");
    boolean var19 = var0.isDeterministicPKName("DROP SEQUENCE (100,-1)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence  restart with -1"+ "'", var5.equals("alter sequence  restart with -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select nextval('drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT') REGEXP '(select next value for 10)'"+ "'", var17.equals("select nextval('drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT') REGEXP '(select next value for 10)'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test225");


    org.databene.jdbacl.model.DBCatalog var3 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var4 = var3.getName();
    org.databene.jdbacl.model.Database var5 = var3.getDatabase();
    java.lang.String var6 = var3.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var8 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var10 = var8.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    java.lang.String var13 = var8.formatValue((java.lang.Object)var11);
    var11.setName("'hi!'");
    java.util.List var16 = var11.getSchemas();
    org.databene.jdbacl.model.DBSchema var17 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var11);
    var3.removeSchema(var17);
    org.databene.jdbacl.dialect.DerbyDialect var21 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var23 = var21.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var21.formatValue((java.lang.Object)var24);
    var24.setName("'hi!'");
    java.util.List var29 = var24.getSchemas();
    org.databene.jdbacl.model.DBSchema var30 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var24);
    org.databene.jdbacl.model.DBTrigger var31 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var30);
    var31.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var34 = var31.getTriggerBody();
    java.lang.String var35 = var31.getColumnName();
    java.lang.String var36 = var31.getWhenClause();
    var17.addTrigger(var31);
    org.databene.jdbacl.model.DBTrigger var38 = new org.databene.jdbacl.model.DBTrigger("-1", var17);
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var17);
    org.databene.jdbacl.model.DBTreeModel var40 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var17);
    org.databene.jdbacl.model.DBSequence var44 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var45 = var44.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var46 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var47 = var46.getName();
    org.databene.jdbacl.model.Database var48 = var46.getDatabase();
    java.lang.String var49 = var46.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var51 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var53 = var51.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var54 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var55 = var54.getName();
    java.lang.String var56 = var51.formatValue((java.lang.Object)var54);
    var54.setName("'hi!'");
    java.util.List var59 = var54.getSchemas();
    org.databene.jdbacl.model.DBSchema var60 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var54);
    var46.removeSchema(var60);
    org.databene.jdbacl.dialect.DerbyDialect var64 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var66 = var64.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var67 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var68 = var67.getName();
    java.lang.String var69 = var64.formatValue((java.lang.Object)var67);
    var67.setName("'hi!'");
    java.util.List var72 = var67.getSchemas();
    org.databene.jdbacl.model.DBSchema var73 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var67);
    org.databene.jdbacl.model.DBTrigger var74 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var73);
    var74.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var77 = var74.getTriggerBody();
    java.lang.String var78 = var74.getColumnName();
    java.lang.String var79 = var74.getWhenClause();
    var60.addTrigger(var74);
    boolean var81 = var44.isIdentical((org.databene.jdbacl.model.DBObject)var60);
    java.util.List var82 = var60.getPackages();
    org.databene.jdbacl.model.DBCatalog var83 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var84 = var83.getName();
    var60.setCatalog(var83);
    int var86 = var40.getChildCount((org.databene.jdbacl.model.DBObject)var60);
    org.databene.jdbacl.model.TableContainer var88 = new org.databene.jdbacl.model.TableContainer("hi! as 10 on . = 10.");
    java.util.List var90 = var88.getTables(false);
    boolean var91 = var60.isIdentical((org.databene.jdbacl.model.DBObject)var88);
    java.util.List var92 = var60.getPackages();
    org.databene.jdbacl.model.DBPackage var93 = new org.databene.jdbacl.model.DBPackage("SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)", var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test226");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var13.setName("10");
    java.math.BigInteger var16 = var13.getIncrement();
    java.math.BigInteger var17 = var13.getIncrement();
    var9.setMaxValue(var17);
    java.lang.String var19 = var0.formatValue((java.lang.Object)var9);
    boolean var21 = var0.isDeterministicFKName("select Identity definition by unique key: select next value for 10.nextval from dual");
    boolean var24 = var0.isDefaultSchema("select next value for CREATE GENERATOR ", "SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1 SIMILAR TO 'DROP SEQUENCE (0,-1)'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "call next value for 'hi!'"+ "'", var19.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test227");


    org.databene.jdbacl.sql.parser.SQLParser.table_mutation_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.table_mutation_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getStart();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test228");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var1.setCharPositionInLine(1);
    int var4 = var1.getCharPositionInLine();
    var1.setCharPositionInLine(69);
    int var8 = var1.LT(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 83);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test229");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    java.lang.String[] var30 = var22.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var43 = var42.isAlpha();
    java.lang.String var44 = var42.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var45 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var48 = var45.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var50 = var45.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var51 = var42.equals((java.lang.Object)var50);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var37, var42, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = var54.getType();
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String[] var71 = new java.lang.String[] { ""};
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.join("", "", var67, "hi!", "10", var71);
    org.databene.jdbacl.model.DBUniqueConstraint var73 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var59, "select nextval('')", false, var67);
    var73.addColumnName("sequence");
    var54.addUkConstraint(var73);
    org.databene.jdbacl.model.DBUniqueIndex var77 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var73);
    var22.addIndex((org.databene.jdbacl.model.DBIndex)var77);
    org.databene.jdbacl.version.QueryVersionProvider var80 = new org.databene.jdbacl.version.QueryVersionProvider("SET GENERATOR . TO -1");
    var80.setQuery("10");
    boolean var83 = var77.equals((java.lang.Object)var80);
    java.lang.String var84 = var77.toString();
    java.lang.String var85 = var77.getObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "DROP SEQUENCE "+ "'", var44.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var50.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi! as 10 on . = 10."+ "'", var72.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique"+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "index"+ "'", var85.equals("index"));

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test230");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    var90.addColumnName("alter sequence -1 restart with 1");
    java.lang.String[] var94 = var90.getColumnNames();
    var90.addColumnName("jdbc:hsqldb:mem:CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test231");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    org.databene.jdbacl.model.TableContainer var3 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var4 = var3.getTables();
    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var3);
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    java.util.List var16 = var5.getTables(false, var15);
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    org.databene.jdbacl.model.Database var21 = var19.getDatabase();
    java.lang.String var22 = var19.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var24 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var26 = var24.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = var24.formatValue((java.lang.Object)var27);
    var27.setName("'hi!'");
    java.util.List var32 = var27.getSchemas();
    org.databene.jdbacl.model.DBSchema var33 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var27);
    var19.removeSchema(var33);
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    org.databene.jdbacl.model.DBTrigger var47 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var46);
    var47.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var50 = var47.getTriggerBody();
    java.lang.String var51 = var47.getColumnName();
    java.lang.String var52 = var47.getWhenClause();
    var33.addTrigger(var47);
    org.databene.jdbacl.model.DBTrigger var54 = new org.databene.jdbacl.model.DBTrigger("-1", var33);
    java.util.List var56 = var33.getSequences(true);
    java.util.List var57 = var5.getSequences(true, var56);
    java.util.List var59 = var5.getSequences(true);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var61 = var60.getForeignKeyConstraints();
    var60.setDoc("drop sequence ");
    var60.setDoc("catalog");
    var5.removeTable((org.databene.jdbacl.model.DBTable)var60);
    var0.addSubContainer(var5);
    java.util.List var69 = var0.getTables(true);
    org.databene.jdbacl.model.DBTable var71 = var0.getTable("drop sequence select gen_id('d', 1) from RDB$DATABASE;: class org.databene.jdbacl.model.FKChangeRule");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test232");


    org.databene.jdbacl.sql.ColumnExpression var3 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var7 = var6.getValue();
    org.databene.jdbacl.sql.ColumnExpression var10 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var11 = var10.getValue();
    org.databene.jdbacl.sql.BetweenExpression var12 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var3, (org.databene.script.Expression)var6, (org.databene.script.Expression)var10);
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var19 = var18.getValue();
    org.databene.jdbacl.sql.ColumnExpression var22 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var23 = var22.getValue();
    org.databene.jdbacl.sql.BetweenExpression var24 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var15, (org.databene.script.Expression)var18, (org.databene.script.Expression)var22);
    org.databene.jdbacl.sql.ColumnExpression var27 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var30 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var31 = var30.getValue();
    org.databene.jdbacl.sql.ColumnExpression var34 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var35 = var34.getValue();
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var27, (org.databene.script.Expression)var30, (org.databene.script.Expression)var34);
    org.databene.jdbacl.sql.BetweenExpression var37 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var10, (org.databene.script.Expression)var18, (org.databene.script.Expression)var30);
    org.databene.script.Expression[] var38 = new org.databene.script.Expression[] { var10};
    org.databene.jdbacl.sql.FunctionInvocation var39 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var38);
    boolean var40 = var39.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "sequence"+ "'", var11.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "sequence"+ "'", var19.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "sequence"+ "'", var31.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "sequence"+ "'", var35.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test233");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    java.util.List var21 = var18.getComponents();
    var13.setCatalog(var18);
    org.databene.jdbacl.model.DBSequence var26 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var26.setCache((java.lang.Long)100L);
    java.lang.String var29 = var26.getObjectType();
    java.math.BigInteger var30 = var26.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var34 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var34.setName("10");
    java.math.BigInteger var37 = var34.getIncrement();
    java.math.BigInteger var38 = var34.getIncrement();
    var26.setLastNumber(var38);
    var13.addSequence(var26);
    org.databene.jdbacl.model.DBPackage var41 = new org.databene.jdbacl.model.DBPackage("alter sequence call next value for 'hi!' restart with 100", var13);
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    var43.setDoc(".");
    java.util.Set var47 = var43.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var50 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var51 = var50.isAlpha();
    boolean var52 = var50.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var55 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var43, var50, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    var55.setTable((org.databene.jdbacl.model.DBTable)var64);
    boolean var69 = var41.isIdentical((org.databene.jdbacl.model.DBObject)var64);
    java.lang.String var70 = var41.getSubObjectName();
    java.lang.String var71 = var41.getObjectType();
    org.databene.jdbacl.model.DBProcedure var72 = new org.databene.jdbacl.model.DBProcedure("VALUES (NEXT VALUE FOR call next value for ''hi!'') SIMILAR TO ''alter sequence CREATE GENERATOR drop sequence  restart with -1''", var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "sequence"+ "'", var29.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test234");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    org.databene.jdbacl.model.DBTrigger var33 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var32);
    java.util.List var34 = var32.getPackages();
    org.databene.jdbacl.model.DBPackage var35 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var32);
    java.util.List var36 = var35.getComponents();
    org.databene.jdbacl.model.DBProcedure var37 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var35);
    var16.addProcedure(var37);
    var16.setDataObjectId("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    java.lang.String var41 = var16.getDataObjectId();
    java.lang.String var42 = var16.getStatus();
    java.util.List var43 = var16.getProcedures();
    java.util.List var44 = var16.getProcedures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var41.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test235");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicIndexName("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var4 = var0.isDeterministicPKName("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var7 = var0.isDefaultCatalog("alter sequence catalog restart with 1", "org.databene.jdbacl.identity.InvalidIdentityDefinitionError");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test236");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getRefereeColumnNames();
    java.lang.String var88 = var86.toString();
    org.databene.jdbacl.model.DBTable var89 = var86.getRefereeTable();
    org.databene.jdbacl.model.FKChangeRule var90 = var86.getUpdateRule();
    var41.setDeleteRule(var90);
    java.lang.String var92 = var90.name();
    int var93 = var90.ordinal();
    java.lang.Class var94 = var90.getDeclaringClass();
    org.databene.jdbacl.ResultSetConverter var95 = new org.databene.jdbacl.ResultSetConverter(var94);
    boolean var96 = var95.isParallelizable();
    java.lang.Class var97 = var95.getSourceType();
    java.lang.String var98 = var95.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var88.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "NO_ACTION"+ "'", var92.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "ResultSetConverter"+ "'", var98.equals("ResultSetConverter"));

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test237");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    var36.setStatus("select next value for jdbc:h2:mem:select next value for 10");
    var36.setReferencingNames("null");
    java.lang.String var41 = var36.getActionType();
    java.lang.String var42 = var36.getTriggerType();
    var36.setBaseObjectType("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1): class org.databene.jdbacl.model.FKChangeRule");
    java.lang.String var45 = var36.getWhenClause();
    java.lang.String var46 = var36.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test238");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mDEFAULT();
    var10.mIDENTIFIER();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test239");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var27.setCache((java.lang.Long)100L);
    java.lang.String var30 = var27.getObjectType();
    java.math.BigInteger var31 = var27.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setName("10");
    java.math.BigInteger var38 = var35.getIncrement();
    java.math.BigInteger var39 = var35.getIncrement();
    var27.setLastNumber(var39);
    var27.setOrder((java.lang.Boolean)false);
    var21.setCellValue("alter sequence  restart with -1", (java.lang.Object)var27);
    org.databene.jdbacl.model.TableContainer var48 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var49 = var48.getTables();
    org.databene.jdbacl.model.TableContainer var50 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    var48.addTable((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    org.databene.jdbacl.model.TableContainer var71 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var72 = var71.getTables();
    org.databene.jdbacl.model.TableContainer var73 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var71);
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    var74.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var77 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var78 = var77.getForeignKeyConstraints();
    var74.addReferrer((org.databene.jdbacl.model.DBTable)var77);
    var71.addTable((org.databene.jdbacl.model.DBTable)var77);
    java.lang.String[] var83 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var83);
    org.databene.jdbacl.model.DBForeignKeyConstraint var85 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var54, var62, (org.databene.jdbacl.model.DBTable)var77, var83);
    java.lang.String[] var86 = var85.getRefereeColumnNames();
    java.lang.String var87 = var85.toString();
    java.lang.String var88 = var85.toString();
    java.lang.String var89 = var85.toString();
    java.lang.Object[] var90 = var21.getFKComponents(var85);
    java.lang.Object[] var91 = var21.getPKValues();
    java.util.Map var92 = var21.getCells();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "."+ "'", var68.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var87.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var88.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var89.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test240");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mGE();
    var10.mT__113();
    var10.mIN();
    var10.mNOT();
    var10.mT__104();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test241");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var3 = var0.isDefaultSchema("select next value for 10", "NaturalPkIdentity(hi!)");
    boolean var5 = var0.isDeterministicPKName("alter sequence -1 restart with 1");
    boolean var7 = var0.isDeterministicFKName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var9 = var0.isDeterministicPKName("call next value for null[]");
    boolean var11 = var0.isDeterministicCheckName("select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual");
    org.databene.jdbacl.dialect.PostgreSQLDialect var12 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var15 = var12.isDefaultCatalog("", "");
    java.lang.String var17 = var12.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var21 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var21.setName("10");
    java.math.BigInteger var24 = var21.getIncrement();
    java.lang.Boolean var25 = var21.isCycle();
    java.lang.String var26 = var21.dropDDL();
    java.lang.String var27 = var12.renderCreateSequence(var21);
    boolean var30 = var12.isDefaultCatalog("catalog", "sequence");
    boolean var32 = var12.isDeterministicIndexName("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2");
    org.databene.jdbacl.model.DBCatalog var33 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var34 = var33.getName();
    org.databene.jdbacl.model.Database var35 = var33.getDatabase();
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var40 = var39.dropDDL();
    java.math.BigInteger var41 = var39.getMinValueIfNotDefault();
    boolean var42 = var33.isIdentical((org.databene.jdbacl.model.DBObject)var39);
    java.lang.String var43 = var12.renderCreateSequence(var39);
    java.math.BigInteger var44 = var39.getMinValueIfNotDefault();
    org.databene.jdbacl.model.DBSequence var48 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var49 = var48.dropDDL();
    java.math.BigInteger var50 = var48.getMinValueIfNotDefault();
    java.lang.String var51 = var48.getSchemaName();
    org.databene.jdbacl.model.DBSequence var55 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var56 = var55.dropDDL();
    java.math.BigInteger var57 = var55.getStart();
    var48.setMinValue(var57);
    var39.setStart(var57);
    java.lang.String var60 = var39.dropDDL();
    java.lang.String var61 = var0.renderCreateSequence(var39);
    boolean var64 = var0.isDefaultCatalog("container", "drop generator sequence.NOT drop generator sequence ~ 'hi!'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "10"+ "'", var17.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "drop sequence 10"+ "'", var26.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "CREATE SEQUENCE 10"+ "'", var27.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "drop sequence "+ "'", var40.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CREATE SEQUENCE "+ "'", var43.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "drop sequence "+ "'", var49.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi! as 10 on . = 10."+ "'", var51.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "drop sequence "+ "'", var56.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "drop sequence "+ "'", var60.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""+ "'", var61.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test242");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var39 = var38.getTables();
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var45 = var44.getForeignKeyConstraints();
    var41.addReferrer((org.databene.jdbacl.model.DBTable)var44);
    var38.addTable((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.join("", "", var52, "hi!", "10", var56);
    java.lang.String var58 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    org.databene.jdbacl.model.TableContainer var61 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var62 = var61.getTables();
    org.databene.jdbacl.model.TableContainer var63 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var61);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    var61.addTable((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var73 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var74 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var73);
    org.databene.jdbacl.model.DBForeignKeyConstraint var75 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var44, var52, (org.databene.jdbacl.model.DBTable)var67, var73);
    org.databene.jdbacl.model.DBTable var76 = var75.getRefereeTable();
    var9.addForeignKey(var75);
    java.lang.String[] var78 = var75.getColumnNames();
    var0.addForeignKey(var75);
    var75.setName("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    org.databene.jdbacl.dialect.PostgreSQLDialect var82 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var85 = var82.isDefaultCatalog("", "");
    java.lang.String var87 = var82.formatValue((java.lang.Object)10);
    boolean var90 = var82.isDefaultCatalog("JDBCDBImporter", "NOT REGEXP_MATCHES(sequence, '')");
    boolean var92 = var82.isDeterministicFKName("NOT REGEXP_MATCHES(sequence, '')");
    boolean var93 = var75.equals((java.lang.Object)var82);
    java.lang.String[] var94 = var75.getColumnNames();
    org.databene.jdbacl.model.FKChangeRule var95 = var75.getUpdateRule();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var96 = org.databene.jdbacl.DBUtil.containsMandatoryColumn((org.databene.jdbacl.model.DBConstraint)var75);
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi! as 10 on . = 10."+ "'", var57.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "."+ "'", var58.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "10"+ "'", var87.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test243");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("jdbc:h2:mem:select gen_id(CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL, 1) from RDB$DATABASE;");

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test244");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var4.setCache((java.lang.Long)100L);
    java.lang.String var7 = var4.getObjectType();
    java.math.BigInteger var8 = var4.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var12.setName("10");
    java.math.BigInteger var15 = var12.getIncrement();
    java.math.BigInteger var16 = var12.getIncrement();
    var4.setLastNumber(var16);
    java.lang.String var18 = var0.renderCreateSequence(var4);
    java.lang.String var22 = var0.regexQuery("select alter sequence drop sequence 10 restart with 0.nextval from dual", true, "CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    java.lang.String var26 = var0.regexQuery("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')", false, "10");
    boolean var28 = var0.isDeterministicPKName("alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10 NOT REGEXP 'sequence'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var18.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '"+ "'", var22.equals("NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ') ~ '10'"+ "'", var26.equals("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ') ~ '10'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test245");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__61();
    var10.mT__67();
    var10.mT__132();
    var10.mT__114();
    var10.mXOR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test246");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.mT__99();
    var10.mT__128();
    var10.mARGUMENTS();
    var10.emitErrorMessage("select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique'");
    var10.mT__117();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test247");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.setBacktrackingLevel(10);
    var10.match("alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10");
    var10.mT__129();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test248");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    java.lang.String var5 = var0.setSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 1L);
    java.lang.String var8 = var0.setSequenceValue("alter sequence CREATE GENERATOR drop sequence  restart with -1", 0L);
    boolean var10 = var0.isDeterministicUKName("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var12 = var0.isDeterministicFKName("drop generator NaturalPkIdentity(hi!)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"+ "'", var5.equals("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"+ "'", var8.equals("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test249");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.model.DBTrigger var25 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var24);
    var25.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    var29.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var33 = var32.getForeignKeyConstraints();
    var29.addReferrer((org.databene.jdbacl.model.DBTable)var32);
    org.databene.jdbacl.model.DBDataType var37 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var38 = var37.isAlpha();
    java.lang.String var39 = var37.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var40 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var43 = var40.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var45 = var40.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var46 = var37.equals((java.lang.Object)var45);
    org.databene.jdbacl.model.DefaultDBColumn var49 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var32, var37, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var50 = var25.isIdentical((org.databene.jdbacl.model.DBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    org.databene.jdbacl.model.DBUniqueConstraint var68 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var54, "select nextval('')", false, var62);
    java.lang.String var69 = var68.toString();
    boolean var70 = var49.isEquivalent((org.databene.jdbacl.model.DBObject)var68);
    boolean var71 = var11.isIdentical((org.databene.jdbacl.model.DBObject)var49);
    org.databene.jdbacl.model.DBTreeModel var72 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var11);
    org.databene.jdbacl.model.DBObject var73 = var72.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "DROP SEQUENCE "+ "'", var39.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var45.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var69.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test250");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var39 = new org.databene.jdbacl.model.DefaultDBColumn("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (org.databene.jdbacl.model.DBTable)var5, var31, (java.lang.Integer)3, (java.lang.Integer)69);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    java.util.Set var44 = var40.getUniqueConstraints(false);
    java.lang.String var45 = var40.getDoc();
    var40.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    boolean var48 = var39.isIdentical((org.databene.jdbacl.model.DBObject)var40);
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    org.databene.jdbacl.model.DBUniqueConstraint var68 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var54, "select nextval('')", false, var62);
    java.lang.String var69 = var68.toString();
    boolean var70 = var68.isNameDeterministic();
    var50.addUniqueConstraint(var68);
    var39.setTable((org.databene.jdbacl.model.DBTable)var50);
    java.lang.Integer var73 = var39.getFractionDigits();
    boolean var74 = var39.isVersionColumn();
    boolean var75 = var39.isVersionColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "."+ "'", var45.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var69.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + 69+ "'", var73.equals(69));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test251");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    var0.setDefaultUser("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique");
    java.lang.String var6 = var0.getName();
    var0.setName("left join DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE  as select null.nextval from dual on ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test252");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    java.lang.String var5 = var0.getDoc();
    var0.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    org.databene.jdbacl.JDBCConnectData var14 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var15 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var16 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    boolean var17 = var0.equals((java.lang.Object)var14);
    org.databene.jdbacl.model.DBSchema var18 = var0.getSchema();
    org.databene.jdbacl.model.TableContainer var24 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var25 = var24.getTables();
    org.databene.jdbacl.model.TableContainer var26 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var24);
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var24.addTable((org.databene.jdbacl.model.DBTable)var30);
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String[] var42 = new java.lang.String[] { ""};
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.join("", "", var38, "hi!", "10", var42);
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var38);
    org.databene.jdbacl.model.TableContainer var47 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var48 = var47.getTables();
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var47);
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    var50.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var53 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var54 = var53.getForeignKeyConstraints();
    var50.addReferrer((org.databene.jdbacl.model.DBTable)var53);
    var47.addTable((org.databene.jdbacl.model.DBTable)var53);
    java.lang.String[] var59 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var59);
    org.databene.jdbacl.model.DBForeignKeyConstraint var61 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var30, var38, (org.databene.jdbacl.model.DBTable)var53, var59);
    java.lang.String[] var62 = var61.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var63 = var61.getTable();
    java.lang.String var64 = var61.toString();
    org.databene.jdbacl.model.CompositeDBObject var65 = var61.getOwner();
    org.databene.jdbacl.model.FKChangeRule var66 = var61.getDeleteRule();
    org.databene.jdbacl.model.DBTable var67 = var61.getRefereeTable();
    org.databene.jdbacl.model.DBTable var68 = var61.getRefereeTable();
    org.databene.jdbacl.model.DBDataType var71 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var72 = var71.isAlpha();
    java.lang.String var73 = var71.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var74 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var77 = var74.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var79 = var74.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var80 = var71.equals((java.lang.Object)var79);
    boolean var81 = var71.isLOB();
    boolean var82 = var71.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var85 = new org.databene.jdbacl.model.DefaultDBColumn("SET GENERATOR postgres TO 9", var68, var71, (java.lang.Integer)32, (java.lang.Integer)76);
    var0.addColumn((org.databene.jdbacl.model.DBColumn)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "."+ "'", var5.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi! as 10 on . = 10."+ "'", var43.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "."+ "'", var44.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var60.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var64.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "DROP SEQUENCE "+ "'", var73.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var79.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test253");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.setBacktrackingLevel(1);
    var0.mT__75();
    var0.mAND();
    var0.mT__124();
    var0.mT__77();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test254");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.math.BigInteger var19 = var17.getMinValueIfNotDefault();
    boolean var20 = var11.isIdentical((org.databene.jdbacl.model.DBObject)var17);
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    org.databene.jdbacl.model.Database var23 = var21.getDatabase();
    java.lang.String var24 = var21.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var26 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var28 = var26.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var26.formatValue((java.lang.Object)var29);
    var29.setName("'hi!'");
    java.util.List var34 = var29.getSchemas();
    org.databene.jdbacl.model.DBSchema var35 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var29);
    var21.removeSchema(var35);
    org.databene.jdbacl.dialect.DerbyDialect var39 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var41 = var39.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var42 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var43 = var42.getName();
    java.lang.String var44 = var39.formatValue((java.lang.Object)var42);
    var42.setName("'hi!'");
    java.util.List var47 = var42.getSchemas();
    org.databene.jdbacl.model.DBSchema var48 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var42);
    org.databene.jdbacl.model.DBTrigger var49 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var48);
    var49.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var52 = var49.getTriggerBody();
    java.lang.String var53 = var49.getColumnName();
    java.lang.String var54 = var49.getWhenClause();
    var35.addTrigger(var49);
    java.util.List var56 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var35);
    java.util.List var57 = var35.getTriggers();
    java.lang.String var58 = var35.getName();
    var11.removeSchema(var35);
    var10.setCatalog(var11);
    java.util.List var62 = var10.getTables(false);
    java.util.List var63 = var10.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var58.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test255");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    java.lang.String var11 = var0.getDefaultPort();
    java.lang.String var12 = var0.getDefaultUser();
    var0.setDownloadUrl("CONSTRAINT \"select nextval('')\" UNIQUE (, sequence, drop generator DROP SEQUENCE catalog RESTRICT)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test256");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    org.databene.jdbacl.model.DBIndex var31 = var23.getIndex("");
    java.util.List var32 = var23.getIndexes();
    org.databene.jdbacl.model.DBDataType var35 = org.databene.jdbacl.model.DBDataType.getInstance(69, "REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')");
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)", (org.databene.jdbacl.model.DBTable)var23, var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test257");


    org.databene.jdbacl.identity.NaturalPkIdentity var2 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    boolean var4 = var2.equals((java.lang.Object)(short)(-1));
    java.lang.String var5 = var2.toString();
    java.lang.String var6 = var2.getTableName();
    java.lang.String var7 = var2.getDescription();
    var2.addIrrelevantColumn("REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')");
    java.lang.String var10 = var2.getName();
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    java.lang.Object var24 = var14.getValue();
    org.databene.jdbacl.sql.ColumnExpression var27 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var28 = var27.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var29 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var31 = var29.renderFetchSequenceValue("'hi!'");
    var27.setValue("'hi!'");
    boolean var33 = var27.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var36 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var37 = var36.isConstant();
    java.lang.Object var38 = var36.getValue();
    org.databene.jdbacl.sql.BetweenExpression var39 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var27, (org.databene.script.Expression)var36);
    org.databene.script.Expression[] var40 = var39.getSourceExpressions();
    org.databene.jdbacl.sql.FunctionInvocation var41 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", var40);
    java.lang.Object var42 = var2.extractPK((java.lang.Object[])var40);
    org.databene.jdbacl.sql.FunctionInvocation var43 = new org.databene.jdbacl.sql.FunctionInvocation("call next value for alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10", var40);
    org.databene.jdbacl.identity.xml.IdentityParseContext var44 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var45 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var44.addParser((org.databene.webdecs.xml.XMLElementParser)var45);
    java.lang.Object[] var48 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("drop sequence 10");
    java.lang.Object[] var50 = var44.createSubPath(var48, (java.lang.Object)(byte)(-1));
    org.databene.jdbacl.identity.IdentityProvider var51 = var44.getIdentityProvider();
    var44.remove("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE ()");
    org.databene.jdbacl.identity.IdentityProvider var54 = var44.getIdentityProvider();
    java.lang.Object var55 = var43.evaluate((org.databene.commons.Context)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "NaturalPkIdentity(hi!)"+ "'", var5.equals("NaturalPkIdentity(hi!)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi! identity by primary key"+ "'", var7.equals("hi! identity by primary key"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "sequence"+ "'", var24.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "call next value for 'hi!'"+ "'", var31.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "sequence"+ "'", var38.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test258");


    org.databene.jdbacl.JDBCConnectData var1 = org.databene.jdbacl.DatabaseTestUtil.getConnectData("VALUES (NEXT VALUE FOR call next value for 'hi!')");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test259");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\"", 1L);
    boolean var4 = var0.supportsRegex();
    java.lang.String var6 = var0.renderDropSequence("select next value for 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1"+ "'", var3.equals("alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "drop sequence select next value for 10"+ "'", var6.equals("drop sequence select next value for 10"));

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test260");


    org.databene.jdbacl.model.DBSchema var1 = new org.databene.jdbacl.model.DBSchema("drop sequence 10");
    org.databene.jdbacl.model.DBSequence var5 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var6 = var5.dropDDL();
    java.math.BigInteger var7 = var5.getMinValueIfNotDefault();
    java.math.BigInteger var8 = var5.getIncrementIfNotDefault();
    var1.addSequence(var5);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.TableContainer var30 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var31 = var30.getTables();
    org.databene.jdbacl.model.TableContainer var32 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var30);
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    var33.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var37 = var36.getForeignKeyConstraints();
    var33.addReferrer((org.databene.jdbacl.model.DBTable)var36);
    var30.addTable((org.databene.jdbacl.model.DBTable)var36);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.removeTable((org.databene.jdbacl.model.DBTable)var40);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var46 = var45.getForeignKeyConstraints();
    var42.addReferrer((org.databene.jdbacl.model.DBTable)var45);
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    var49.setDoc(".");
    java.util.Set var53 = var49.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var56 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var57 = var56.isAlpha();
    boolean var58 = var56.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var61 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var49, var56, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var45.addColumn((org.databene.jdbacl.model.DBColumn)var61);
    var30.removeTable((org.databene.jdbacl.model.DBTable)var45);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    java.util.Set var68 = var64.getUniqueConstraints(false);
    java.lang.String var69 = var64.getDoc();
    var64.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    var30.addTable((org.databene.jdbacl.model.DBTable)var64);
    var24.removeTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String var74 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var64);
    var1.addTable((org.databene.jdbacl.model.DBTable)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "drop sequence "+ "'", var6.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "table null"+ "'", var74.equals("table null"));

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test261");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    org.databene.jdbacl.identity.xml.IdentityParseContext var3 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var4 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var3.addParser((org.databene.webdecs.xml.XMLElementParser)var4);
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var4);
    boolean var8 = var0.contains("drop sequence alter sequence hi! restart with 1");
    org.databene.jdbacl.identity.IdentityProvider var9 = var0.getIdentityProvider();
    java.lang.String[] var14 = new java.lang.String[] { ""};
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String var19 = org.databene.jdbacl.SQLUtil.join("", "", var14, "hi!", "10", var18);
    org.databene.jdbacl.identity.IdentityProvider var20 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var21 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var14, var20);
    java.lang.String var22 = var21.getDescription();
    var21.setSubNkPkQuery("jdbc:hsqldb:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '");
    var9.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var21, "drop sequence drop sequence Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    org.databene.jdbacl.identity.NoIdentity var28 = new org.databene.jdbacl.identity.NoIdentity("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    java.lang.String var29 = var28.getDescription();
    java.lang.String var30 = var28.getDescription();
    java.lang.String var31 = var28.getDescription();
    var9.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var28, "catalog null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi! as 10 on . = 10."+ "'", var19.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Sub identity of ():\nnull"+ "'", var22.equals("Sub identity of ():\nnull"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"+ "'", var29.equals("No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"+ "'", var30.equals("No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"+ "'", var31.equals("No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"));

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test262");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . SIMILAR TO 'Identity definition by unique key: '");
    java.util.List var2 = var1.getSchemas();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test263");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var9 = var0.renderFetchSequenceValue("");
    java.lang.String var13 = var0.regexQuery("drop generator sequence", true, "hi!");
    boolean var15 = var0.isDeterministicPKName("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    java.lang.String var19 = var0.regexQuery("NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ", true, "derby");
    boolean var22 = var0.isDefaultCatalog("call next value for CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ().", "select next value for Sub identity of ():\nalter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    org.databene.jdbacl.dialect.Derby10_6Dialect var23 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var26 = var23.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var28 = var23.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var32 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var32.setName("10");
    java.math.BigInteger var35 = var32.getIncrement();
    java.lang.String var36 = var23.renderCreateSequence(var32);
    java.lang.String var37 = var32.getSchemaName();
    java.lang.String var38 = var0.renderCreateSequence(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('')"+ "'", var9.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop generator sequence ~ 'hi!'"+ "'", var13.equals("NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "NOT NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  ~ 'derby'"+ "'", var19.equals("NOT NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  ~ 'derby'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var28.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var36.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi! as 10 on . = 10."+ "'", var37.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "CREATE SEQUENCE 10"+ "'", var38.equals("CREATE SEQUENCE 10"));

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test264");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var2 = var0.isDeterministicFKName("alter sequence CREATE SEQUENCE 10 restart with 1");
    boolean var4 = var0.isDeterministicUKName("Identity definition by unique key: select next value for 10");
    boolean var7 = var0.isDefaultCatalog("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-. join org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.). on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE .DROP SEQUENCE  = CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)..", "alter sequence drop generator . restart with 10");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var11.setName("10");
    java.lang.String var14 = var11.getObjectType();
    java.math.BigInteger var15 = var11.getIncrementIfNotDefault();
    java.lang.String var16 = var0.renderCreateSequence(var11);
    boolean var19 = var0.isDefaultSchema("null.jdbc:h2:mem:select next value for 10", "No identity defined for table CONSTRAINT \"select nextval('')\" UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "sequence"+ "'", var14.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var16.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test265");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicUKName("call next value for 'hi!'");
    boolean var4 = var0.isDeterministicFKName("jdbc:hsqldb:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '");
    boolean var5 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test266");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingChecks(false);
    var6.setExcludeTables("select nextval('')");
    var6.setExcludeTables("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    var6.setExcludeTables("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    var6.setExcludeTables("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (, DROP SEQUENCE )");

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test267");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    org.antlr.runtime.CharStream var7 = var0.getCharStream();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.setCharPositionInLine(1);
    int var12 = var9.getCharPositionInLine();
    var9.setCharPositionInLine(69);
    var9.setCharPositionInLine(1);
    int var17 = var9.getCharPositionInLine();
    boolean var19 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 79);
    int var20 = var0.getRuleMemoizationCacheSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test268");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var17 = var0.isDeterministicFKName("CREATE SEQUENCE 10");
    boolean var20 = var0.isDefaultCatalog("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'");
    boolean var21 = var0.isSequenceSupported();
    boolean var23 = var0.isDeterministicIndexName("alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test269");


    org.databene.jdbacl.version.QueryVersionProvider var1 = new org.databene.jdbacl.version.QueryVersionProvider("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .");
    java.lang.String var2 = var1.getQuery();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR ."+ "'", var2.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR ."));

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test270");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var4 = var0.isDeterministicPKName("'hi!'");
    boolean var6 = var0.isDeterministicIndexName("NaturalPkIdentity(hi!)");
    java.lang.String var8 = var0.renderFetchSequenceValue("(\"sequence\")");
    boolean var10 = var0.isDeterministicFKName("CONSTRAINT hi! UNIQUE () REGEXP '10'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "select next value for (\"sequence\")"+ "'", var8.equals("select next value for (\"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test271");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    boolean var4 = var1.isDefaultSchema("foreign key constraint", "No identity defined for table CONSTRAINT \"select nextval('')\" UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test272");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.mALTER_TABLE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test273");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var8.setFaultTolerant(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var11 = var8.importDatabase();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test274");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__93();
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    org.databene.jdbacl.model.Database var22 = var20.getDatabase();
    java.lang.String var23 = var20.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var25 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var27 = var25.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var28 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var29 = var28.getName();
    java.lang.String var30 = var25.formatValue((java.lang.Object)var28);
    var28.setName("'hi!'");
    java.util.List var33 = var28.getSchemas();
    org.databene.jdbacl.model.DBSchema var34 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var28);
    var20.removeSchema(var34);
    org.databene.jdbacl.dialect.DerbyDialect var38 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var40 = var38.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    java.lang.String var43 = var38.formatValue((java.lang.Object)var41);
    var41.setName("'hi!'");
    java.util.List var46 = var41.getSchemas();
    org.databene.jdbacl.model.DBSchema var47 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var41);
    org.databene.jdbacl.model.DBTrigger var48 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var47);
    var48.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var51 = var48.getTriggerBody();
    java.lang.String var52 = var48.getColumnName();
    java.lang.String var53 = var48.getWhenClause();
    var34.addTrigger(var48);
    org.databene.jdbacl.model.DBTrigger var55 = new org.databene.jdbacl.model.DBTrigger("-1", var34);
    org.databene.jdbacl.dialect.DerbyDialect var59 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var61 = var59.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var62 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var63 = var62.getName();
    java.lang.String var64 = var59.formatValue((java.lang.Object)var62);
    var62.setName("'hi!'");
    java.util.List var67 = var62.getSchemas();
    org.databene.jdbacl.model.DBSchema var68 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var62);
    org.databene.jdbacl.model.DBTrigger var69 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var68);
    java.util.List var70 = var68.getPackages();
    org.databene.jdbacl.model.DBPackage var71 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var68);
    java.lang.String var72 = var71.getStatus();
    var34.addPackage(var71);
    java.util.List var74 = var34.getTriggers();
    var10.traceOut("'\u0135'", 4, (java.lang.Object)var34);
    var10.endResync();
    var10.mCREATE_INDEX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test275");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mT__97();
    var10.mIS();
    org.databene.jdbacl.sql.parser.SQLLexer var20 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var20.mCREATE_TABLE();
    var20.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var24 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var26 = var24.LT(10);
    var20.setCharStream((org.antlr.runtime.CharStream)var24);
    var24.reset();
    var10.matchAny((org.antlr.runtime.IntStream)var24);
    var10.mPLUS();
    var10.mCREATE_SEQUENCE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 69);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test276");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mALTER_TABLE();
    var10.mT__134();
    java.lang.String[] var20 = var10.getTokenNames();
    var10.mCREATE_INDEX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test277");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var1 = var0.supportsRegex();
    java.lang.String var5 = var0.regexQuery("select next value for SET GENERATOR.TO - 1", true, "hi!");
    boolean var7 = var0.isDeterministicFKName("select alter sequence drop sequence 10 restart with 0.nextval from dual");
    boolean var8 = var0.supportsRegex();
    java.lang.String var12 = var0.regexQuery("alter sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER restart with 1", true, "NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"+ "'", var5.equals("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "alter sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER restart with 1 NOT REGEXP 'NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')'"+ "'", var12.equals("alter sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER restart with 1 NOT REGEXP 'NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')'"));

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test278");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    var0.mALTER_TABLE();
    var0.emitErrorMessage("hi! as 10 on . = 10.");
    boolean var19 = var0.failed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mLE();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test279");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable("NOT REGEXP_MATCHES(sequence, '')");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    java.util.Set var9 = var5.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var12 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var13 = var12.isAlpha();
    boolean var14 = var12.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var17 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var5, var12, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var20 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var21 = var20.isAlpha();
    java.lang.String var22 = var20.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var23 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var26 = var23.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var28 = var23.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var29 = var20.equals((java.lang.Object)var28);
    boolean var30 = var20.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var31 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var5, var20);
    org.databene.jdbacl.model.DefaultDBColumn var33 = new org.databene.jdbacl.model.DefaultDBColumn("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", (org.databene.jdbacl.model.DBTable)var2, var20, (java.lang.Integer)6);
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    java.lang.String[] var36 = var35.getColumnNames();
    org.databene.jdbacl.model.DBUniqueConstraint var37 = var2.getUniqueConstraint(var36);
    org.databene.jdbacl.dialect.DerbyDialect var41 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var43 = var41.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var44 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var45 = var44.getName();
    java.lang.String var46 = var41.formatValue((java.lang.Object)var44);
    var44.setName("'hi!'");
    java.util.List var49 = var44.getSchemas();
    org.databene.jdbacl.model.DBSchema var50 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var44);
    org.databene.jdbacl.model.DBTrigger var51 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var50);
    org.databene.jdbacl.dialect.DerbyDialect var52 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var54 = var52.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var55 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var56 = var55.getName();
    java.lang.String var57 = var52.formatValue((java.lang.Object)var55);
    java.util.List var58 = var55.getComponents();
    var50.setCatalog(var55);
    org.databene.jdbacl.model.DBSequence var63 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var63.setCache((java.lang.Long)100L);
    java.lang.String var66 = var63.getObjectType();
    java.math.BigInteger var67 = var63.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var71 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var71.setName("10");
    java.math.BigInteger var74 = var71.getIncrement();
    java.math.BigInteger var75 = var71.getIncrement();
    var63.setLastNumber(var75);
    var50.addSequence(var63);
    org.databene.jdbacl.model.DBPackage var78 = new org.databene.jdbacl.model.DBPackage("alter sequence call next value for 'hi!' restart with 100", var50);
    java.util.List var79 = var50.getTriggers();
    var2.setSchema(var50);
    org.databene.jdbacl.model.DBCatalog var82 = new org.databene.jdbacl.model.DBCatalog("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    java.util.List var83 = var82.getTables();
    java.lang.String var84 = var82.getName();
    var50.setCatalog(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "DROP SEQUENCE "+ "'", var22.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var28.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "sequence"+ "'", var66.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test280");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var6.setName("10");
    java.math.BigInteger var9 = var6.getIncrement();
    java.lang.Boolean var10 = var6.isCycle();
    java.lang.String var11 = var6.dropDDL();
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.math.BigInteger var19 = var15.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var23.setName("10");
    java.math.BigInteger var26 = var23.getIncrement();
    java.math.BigInteger var27 = var23.getIncrement();
    var15.setLastNumber(var27);
    var6.setIncrement(var27);
    var0.addSequence(var6);
    org.databene.jdbacl.model.DBTable var32 = var0.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    java.util.List var33 = var0.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.dialect.DerbyDialect var41 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var43 = var41.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var44 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var45 = var44.getName();
    java.lang.String var46 = var41.formatValue((java.lang.Object)var44);
    var44.setName("'hi!'");
    java.util.List var49 = var44.getSchemas();
    java.util.List var50 = var39.getTables(false, var49);
    java.util.List var51 = var0.getTables(false, var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var52 = org.databene.jdbacl.SQLUtil.renderColumnNames(var51);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop sequence 10"+ "'", var11.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test281");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var4 = var0.isDeterministicPKName("alter sequence  restart with -1");
    java.lang.String var6 = var0.renderFetchSequenceValue("select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL");
    boolean var8 = var0.isDeterministicPKName("SET GENERATOR catalog TO -2 (REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).'))");
    java.lang.String var12 = var0.regexQuery("jdbc:h2:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '", false, "derby");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "call next value for select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL"+ "'", var6.equals("call next value for select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "REGEXP_MATCHES(jdbc:h2:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence ', 'derby')"+ "'", var12.equals("REGEXP_MATCHES(jdbc:h2:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence ', 'derby')"));

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test282");


    org.databene.jdbacl.sql.parser.SQLParser.check_constraint_return var2 = new org.databene.jdbacl.sql.parser.SQLParser.check_constraint_return();
    org.databene.jdbacl.identity.mem.GlobalRowId var3 = new org.databene.jdbacl.identity.mem.GlobalRowId("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", ".", (java.lang.Object)var2);
    java.lang.Object var4 = var2.getTree();
    java.lang.Object var5 = var2.getTree();
    java.lang.Object var6 = var2.getTree();
    java.lang.Object var7 = var2.getTree();
    java.lang.Object var8 = var2.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test283");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.setBacktrackingLevel(1);
    var0.mIDENTIFIER();
    var0.mCREATE_TABLE();
    var0.mT__66();
    int var20 = var0.getLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test284");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var5 = var4.getConditionText();
    java.lang.String var6 = var4.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var11 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var12 = var11.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var17 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var18 = var17.getTableName();
    boolean var19 = var11.isEquivalent(var17);
    boolean var20 = var4.isEquivalent(var17);
    org.databene.jdbacl.model.DBCheckConstraint var25 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String[] var26 = var25.getColumnNames();
    boolean var27 = var17.isEquivalent(var25);
    org.databene.jdbacl.model.DBCheckConstraint var32 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var33 = var32.getTableName();
    org.databene.jdbacl.model.DBCheckConstraint var38 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    org.databene.jdbacl.model.DBCheckConstraint var43 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var44 = var43.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var49 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var50 = var49.getTableName();
    boolean var51 = var43.isEquivalent(var49);
    boolean var52 = var38.isEquivalent(var43);
    boolean var53 = var32.isEquivalent(var43);
    boolean var54 = var25.isEquivalent(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "\"'hi!'\""+ "'", var5.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "\"'hi!'\""+ "'", var6.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "\"'hi!'\""+ "'", var12.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var18.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var33.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "\"'hi!'\""+ "'", var44.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var50.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test285");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getUrlPattern();
    java.lang.String var2 = var0.getDownloadUrl();
    var0.setDownloadUrl("select NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.').nextval from dual");
    java.lang.String var5 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test286");


    org.databene.jdbacl.sql.parser.SQLParser.check_constraint_return var2 = new org.databene.jdbacl.sql.parser.SQLParser.check_constraint_return();
    org.databene.jdbacl.identity.mem.GlobalRowId var3 = new org.databene.jdbacl.identity.mem.GlobalRowId("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", ".", (java.lang.Object)var2);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var39 = var38.getTables();
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var45 = var44.getForeignKeyConstraints();
    var41.addReferrer((org.databene.jdbacl.model.DBTable)var44);
    var38.addTable((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.join("", "", var52, "hi!", "10", var56);
    java.lang.String var58 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    org.databene.jdbacl.model.TableContainer var61 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var62 = var61.getTables();
    org.databene.jdbacl.model.TableContainer var63 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var61);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    var61.addTable((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var73 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var74 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var73);
    org.databene.jdbacl.model.DBForeignKeyConstraint var75 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var44, var52, (org.databene.jdbacl.model.DBTable)var67, var73);
    org.databene.jdbacl.model.DBTable var76 = var75.getRefereeTable();
    var9.addForeignKey(var75);
    org.databene.jdbacl.model.DBDataType var80 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    org.databene.jdbacl.model.DefaultDBColumn var81 = new org.databene.jdbacl.model.DefaultDBColumn("select next value for SET GENERATOR . TO -1", (org.databene.jdbacl.model.DBTable)var9, var80);
    boolean var82 = var3.equals((java.lang.Object)var80);
    java.lang.String var83 = var3.toString();
    boolean var85 = var3.equals((java.lang.Object)"REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')");
    org.databene.jdbacl.model.DBCatalog var86 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var87 = var86.getName();
    java.lang.String var88 = var86.toString();
    java.lang.String var89 = var86.getDoc();
    java.util.List var90 = var86.getComponents();
    boolean var91 = var3.equals((java.lang.Object)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi! as 10 on . = 10."+ "'", var57.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "."+ "'", var58.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test287");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    java.lang.String var10 = var0.renderSequenceValue("drop sequence 10", 0L);
    java.lang.String var14 = var0.regexQuery("CONSTRAINT \"select nextval('')\" ", false, "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var17 = var0.isDefaultCatalog("NO_ACTION", "alter sequence drop sequence 10 restart with 0");
    java.lang.String var20 = var0.renderSequenceValue("column jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var10.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')"+ "'", var14.equals("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "alter sequence column jdbc:h2:mem:hi! as 10 on . = 10.-identity-. restart with 10"+ "'", var20.equals("alter sequence column jdbc:h2:mem:hi! as 10 on . = 10.-identity-. restart with 10"));

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test288");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("DROP SEQUENCE ");

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test289");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var9 = var0.isDeterministicFKName("jdbc:h2:mem:select next value for 10");
    boolean var12 = var0.isDefaultCatalog("drop generator drop generator .", "select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;");
    java.lang.String var14 = var0.renderFetchSequenceValue("(NOT drop generator sequence ~ 'hi!')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "select nextval('(NOT drop generator sequence ~ 'hi!')')"+ "'", var14.equals("select nextval('(NOT drop generator sequence ~ 'hi!')')"));

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test290");


    org.databene.jdbacl.model.DBSchema var2 = new org.databene.jdbacl.model.DBSchema("drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable("select gen_id(select next value for SET GENERATOR . TO -1, 1) from RDB$DATABASE;", var2);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test291");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.model.DBColumn[] var23 = new org.databene.jdbacl.model.DBColumn[] { var21};
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnNames(var23);
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.renderColumnNames(var23);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnNames(var23);
    java.lang.String var27 = org.databene.jdbacl.SQLUtil.renderColumnNames(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var24.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var25.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var26.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var27.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test292");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicFKName("NaturalPkIdentity(hi!)");
    boolean var5 = var0.isDefaultSchema("alter sequence -1 restart with 1", "(\"sequence\")");
    boolean var8 = var0.isDefaultCatalog("SELECT * FROM null WHERE  = ''", "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')");
    boolean var11 = var0.isDefaultSchema("CREATE GENERATOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", "CREATE GENERATOR VALUES (NEXT VALUE FOR CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test293");


    org.databene.jdbacl.sql.parser.SQLParser.drop_sequence_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.drop_sequence_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test294");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    java.util.List var17 = var15.getProcedures();
    org.databene.jdbacl.JDBCConnectData var24 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var25 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var24);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var26 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var24);
    org.databene.jdbacl.model.DBCatalog var28 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var29 = var28.getName();
    org.databene.jdbacl.model.Database var30 = var28.getDatabase();
    java.lang.String var31 = var28.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var33 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var35 = var33.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var36 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var37 = var36.getName();
    java.lang.String var38 = var33.formatValue((java.lang.Object)var36);
    var36.setName("'hi!'");
    java.util.List var41 = var36.getSchemas();
    org.databene.jdbacl.model.DBSchema var42 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var36);
    var28.removeSchema(var42);
    java.util.List var45 = var42.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var42);
    org.databene.jdbacl.model.jdbc.LazyTable var49 = new org.databene.jdbacl.model.jdbc.LazyTable(var26, var42, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.getObjectType();
    java.lang.String var52 = var49.getDoc();
    java.lang.String var53 = var49.toString();
    org.databene.jdbacl.model.DBCatalog var54 = var49.getCatalog();
    java.lang.String var55 = var54.getName();
    org.databene.jdbacl.model.DBCatalog var57 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var58 = var57.getName();
    org.databene.jdbacl.model.Database var59 = var57.getDatabase();
    java.lang.String var60 = var57.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var62 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var64 = var62.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var65 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var66 = var65.getName();
    java.lang.String var67 = var62.formatValue((java.lang.Object)var65);
    var65.setName("'hi!'");
    java.util.List var70 = var65.getSchemas();
    org.databene.jdbacl.model.DBSchema var71 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var65);
    var57.removeSchema(var71);
    java.util.List var74 = var71.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var71);
    var54.addSchema(var71);
    boolean var77 = var15.isIdentical((org.databene.jdbacl.model.DBObject)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var50.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "table"+ "'", var51.equals("table"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var52.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var53.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "'hi!'"+ "'", var55.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test295");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var32 = var31.toString();
    java.lang.String var33 = var31.getObjectType();
    java.lang.String var34 = var31.getDoc();
    java.lang.String var35 = var31.toString();
    org.databene.jdbacl.model.DBCatalog var36 = var31.getCatalog();
    java.lang.String var37 = var36.getDoc();
    var36.setDoc("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)");
    java.util.List var40 = var36.getComponents();
    org.databene.jdbacl.dialect.DerbyDialect var43 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var45 = var43.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var46 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var47 = var46.getName();
    java.lang.String var48 = var43.formatValue((java.lang.Object)var46);
    var46.setName("'hi!'");
    java.util.List var51 = var46.getSchemas();
    org.databene.jdbacl.model.DBSchema var52 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var46);
    org.databene.jdbacl.model.DBTrigger var53 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var52);
    org.databene.jdbacl.dialect.DerbyDialect var54 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var56 = var54.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var57 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var58 = var57.getName();
    java.lang.String var59 = var54.formatValue((java.lang.Object)var57);
    java.util.List var60 = var57.getComponents();
    var52.setCatalog(var57);
    boolean var62 = var36.isIdentical((org.databene.jdbacl.model.DBObject)var52);
    java.util.List var63 = var52.getTriggers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var32.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "table"+ "'", var33.equals("table"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var34.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var35.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test296");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    boolean var5 = var0.isDeterministicPKName("CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var7 = var0.isDeterministicIndexName("select Identity definition by unique key: select next value for 10.nextval from dual");
    boolean var9 = var0.isDeterministicFKName("drop generator DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test297");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var17 = var0.isDeterministicFKName("CREATE SEQUENCE 10");
    boolean var18 = var0.supportsRegex();
    org.databene.jdbacl.model.DBSequence var22 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    org.databene.jdbacl.model.DBSequence var26 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var26.setName("10");
    java.math.BigInteger var29 = var26.getIncrement();
    java.math.BigInteger var30 = var26.getIncrement();
    var22.setMaxValue(var30);
    java.lang.String var32 = var0.renderCreateSequence(var22);
    boolean var34 = var0.isDeterministicIndexName("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1"+ "'", var32.equals("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test298");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    java.lang.String var11 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "JDBCDBImporter"+ "'", var11.equals("JDBCDBImporter"));

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test299");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    org.databene.jdbacl.identity.IdentityModel var14 = var10.getIdentity("SELECT * FROM null WHERE  = ''", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.identity.IdentityModel var16 = var10.getIdentity("CREATE GENERATOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test300");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    java.util.List var3 = var1.getComponents();
    org.databene.jdbacl.model.DBSchema var5 = var1.getSchema("alter sequence hi! restart with 1");
    java.lang.String var6 = var1.getObjectType();
    org.databene.jdbacl.model.DBSchema var7 = new org.databene.jdbacl.model.DBSchema("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", var1);
    java.util.List var8 = var1.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "catalog"+ "'", var6.equals("catalog"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test301");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    boolean var92 = var90.isUnique();
    boolean var93 = var90.isUnique();
    boolean var94 = var90.isUnique();
    boolean var95 = var90.isUnique();
    boolean var96 = var90.isNameDeterministic();
    boolean var97 = var90.isNameDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test302");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("select next value for SET GENERATOR . TO -1", "VALUES (NEXT VALUE FOR -1)", "select next value for SET GENERATOR . TO -1");

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test303");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("hi! as 10 on . = 10.");
    java.util.List var3 = var1.getSequences(true);
    org.databene.jdbacl.model.DBTable var5 = var1.getTable("jdbc:h2:mem:select next value for 10");
    java.util.List var7 = var1.getTables(false);
    org.databene.jdbacl.dialect.DerbyDialect var10 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var12 = var10.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    java.lang.String var15 = var10.formatValue((java.lang.Object)var13);
    var13.setName("'hi!'");
    java.util.List var18 = var13.getSchemas();
    org.databene.jdbacl.model.DBSchema var19 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var13);
    org.databene.jdbacl.model.DBTrigger var20 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var19);
    var20.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var23 = var20.getTriggerBody();
    java.lang.String var24 = var20.getTriggerBody();
    var20.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var20.setTriggerBody("DROP SEQUENCE -1 RESTRICT");
    var20.setTriggerType("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    org.databene.jdbacl.model.TableContainer var36 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var37 = var36.getTables();
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var36);
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    var39.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var43 = var42.getForeignKeyConstraints();
    var39.addReferrer((org.databene.jdbacl.model.DBTable)var42);
    var36.addTable((org.databene.jdbacl.model.DBTable)var42);
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String[] var54 = new java.lang.String[] { ""};
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.join("", "", var50, "hi!", "10", var54);
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var50);
    org.databene.jdbacl.model.TableContainer var59 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var60 = var59.getTables();
    org.databene.jdbacl.model.TableContainer var61 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var59);
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    var62.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var66 = var65.getForeignKeyConstraints();
    var62.addReferrer((org.databene.jdbacl.model.DBTable)var65);
    var59.addTable((org.databene.jdbacl.model.DBTable)var65);
    java.lang.String[] var71 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var71);
    org.databene.jdbacl.model.DBForeignKeyConstraint var73 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var42, var50, (org.databene.jdbacl.model.DBTable)var65, var71);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    java.util.Set var79 = var75.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var82 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var83 = var82.isAlpha();
    boolean var84 = var82.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var87 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var75, var82, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var89 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT \"select nextval('')\" ", (org.databene.jdbacl.model.DBTable)var42, var82, (java.lang.Integer)10);
    java.util.List var90 = var42.getComponents();
    boolean var91 = var20.isIdentical((org.databene.jdbacl.model.DBObject)var42);
    org.databene.jdbacl.model.DBRow var92 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var42);
    var1.removeTable((org.databene.jdbacl.model.DBTable)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi! as 10 on . = 10."+ "'", var55.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "."+ "'", var56.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var72.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test304");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("alter sequence NOT drop generator sequence ~ 'hi!' restart with 10", "SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'", "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    org.databene.jdbacl.JDBCDriverInfo var4 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var5 = var4.getUrlPattern();
    var4.setDefaultUser("-1");
    java.lang.String var8 = var4.getUrlPattern();
    var4.setDefaultPort("alter sequence  restart with -1");
    boolean var11 = var3.equals((java.lang.Object)var4);
    java.lang.String var12 = var4.getId();
    java.lang.String var13 = var4.getDefaultDatabase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test305");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getDriverClass();
    java.lang.String var2 = var0.getId();
    var0.setDriverClass("DROP SEQUENCE (100,-1)");
    java.lang.String var5 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test306");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var2 = var1.getTables();
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    boolean var7 = var3.equals((java.lang.Object)(-1.0f));
    var1.removeTable((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String var9 = var3.getDoc();
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    var10.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var14 = var13.getForeignKeyConstraints();
    var10.addReferrer((org.databene.jdbacl.model.DBTable)var13);
    java.lang.String[] var21 = new java.lang.String[] { ""};
    java.lang.String[] var25 = new java.lang.String[] { ""};
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.join("", "", var21, "hi!", "10", var25);
    org.databene.jdbacl.model.DBUniqueConstraint var27 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var13, "select nextval('')", false, var21);
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.join("", "", var33, "hi!", "10", var37);
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var33);
    java.lang.String[] var46 = new java.lang.String[] { ""};
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.join("", "", var46, "hi!", "10", var50);
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var50);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var33, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var50);
    org.databene.jdbacl.identity.NaturalPkIdentity var55 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var56 = var55.getName();
    boolean var58 = var55.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String var75 = org.databene.jdbacl.SQLUtil.join("", "", var70, "hi!", "10", var74);
    org.databene.jdbacl.model.DBUniqueConstraint var76 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var62, "select nextval('')", false, var70);
    java.lang.String var77 = var55.extractNK((java.lang.Object[])var70);
    java.lang.String var78 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var13, var33, (java.lang.Object[])var70);
    java.lang.String[] var84 = new java.lang.String[] { ""};
    java.lang.String[] var88 = new java.lang.String[] { ""};
    java.lang.String var89 = org.databene.jdbacl.SQLUtil.join("", "", var84, "hi!", "10", var88);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var90 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var13, "jdbc:h2:mem:select next value for 10", false, var88);
    var3.setPrimaryKey(var90);
    java.lang.String var92 = var90.toString();
    java.lang.String var93 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "."+ "'", var9.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi! as 10 on . = 10."+ "'", var26.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi! as 10 on . = 10."+ "'", var38.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "."+ "'", var39.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi! as 10 on . = 10."+ "'", var51.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "."+ "'", var52.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var53.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi! as 10 on . = 10."+ "'", var75.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var78.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi! as 10 on . = 10."+ "'", var89.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "CONSTRAINT \"jdbc:h2:mem:select next value for 10\" PRIMARY KEY ()"+ "'", var92.equals("CONSTRAINT \"jdbc:h2:mem:select next value for 10\" PRIMARY KEY ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "CONSTRAINT \"jdbc:h2:mem:select next value for 10\" "+ "'", var93.equals("CONSTRAINT \"jdbc:h2:mem:select next value for 10\" "));

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test307");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("DROP SEQUENCE -1 RESTRICT", "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var3.setDefaultDatabase("DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    java.lang.String var6 = var3.getDefaultPort();
    java.lang.String var7 = var3.getDbSystem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var7.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test308");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    var36.setBaseObjectType("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var36.setBaseObjectType("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    java.lang.String var41 = var36.getTriggerType();
    var36.setStatus("DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test309");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    var10.addTrigger(var23);
    var23.setStatus("alter sequence drop generator sequence restart with 100");
    java.lang.String var27 = var23.getReferencingNames();
    java.lang.String var28 = var23.getActionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test310");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__111();
    var10.mSIZE();
    var10.mT__107();
    java.lang.String var19 = var10.getText();
    var10.mNULL();
    var10.mT__124();
    var10.beginResync();
    var10.mT__80();
    var10.mT__127();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var19.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test311");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var34 = var33.getTables();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var33);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    var33.addTable((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var47);
    org.databene.jdbacl.model.TableContainer var56 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var57 = var56.getTables();
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var56);
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    var56.addTable((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var68 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var68);
    org.databene.jdbacl.model.DBForeignKeyConstraint var70 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var39, var47, (org.databene.jdbacl.model.DBTable)var62, var68);
    org.databene.jdbacl.model.DBTable var71 = var70.getRefereeTable();
    var4.addForeignKey(var70);
    org.databene.jdbacl.model.FKChangeRule var73 = var70.getDeleteRule();
    java.lang.String var74 = var73.toString();
    int var75 = var73.ordinal();
    java.lang.String var76 = var73.name();
    java.lang.String var77 = var73.name();
    java.lang.String var78 = var73.name();
    org.databene.jdbacl.JDBCDriverInfo var82 = new org.databene.jdbacl.JDBCDriverInfo("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1 SIMILAR TO 'DROP SEQUENCE (0,-1)'", "hi! as 10 on . = 10.", "DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE ");
    java.lang.String var83 = var82.getDownloadUrl();
    boolean var84 = var73.equals((java.lang.Object)var82);
    java.lang.String var85 = var82.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "."+ "'", var53.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var69.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "NO_ACTION"+ "'", var74.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "NO_ACTION"+ "'", var78.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi! as 10 on . = 10."+ "'", var85.equals("hi! as 10 on . = 10."));

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test312");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var3 = var0.isSequenceSupported();
    java.lang.String var7 = var0.regexQuery("CONSTRAINT hi! UNIQUE ()", false, "10");
    boolean var9 = var0.isDeterministicPKName("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ().");
    java.lang.String var12 = var0.setSequenceValue("drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER", (-1L));
    boolean var15 = var0.isDefaultSchema("drop generator sequence", "drop generator sequence.NOT drop generator sequence ~ 'hi!'");
    org.databene.jdbacl.sql.parser.SQLLexer var16 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var16.mCREATE_TABLE();
    var16.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var20 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var22 = var20.LT(10);
    var16.setCharStream((org.antlr.runtime.CharStream)var20);
    int var25 = var20.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var26 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var20);
    var26.setText("select next value for SET GENERATOR.TO - 1");
    var26.setBacktrackingLevel(1);
    var26.mT__92();
    var26.mDROP_TABLE();
    var26.mT__124();
    var26.mDROP_TABLE();
    int var35 = var26.getBacktrackingLevel();
    var26.mCOMMENT_COLUMN();
    var26.mT__122();
    java.lang.String var38 = var0.formatValue((java.lang.Object)var26);
    var26.mT__114();
    var26.mT__89();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "CONSTRAINT hi! UNIQUE () REGEXP '10'"+ "'", var7.equals("CONSTRAINT hi! UNIQUE () REGEXP '10'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1"+ "'", var12.equals("alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test313");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.JDBCDriverInfo var23 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var24 = var23.getUrlPattern();
    org.databene.jdbacl.sql.ColumnExpression var28 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var31 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var32 = var31.getValue();
    org.databene.jdbacl.sql.ColumnExpression var35 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var36 = var35.getValue();
    org.databene.jdbacl.sql.BetweenExpression var37 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var28, (org.databene.script.Expression)var31, (org.databene.script.Expression)var35);
    org.databene.jdbacl.sql.ColumnExpression var40 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var43 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var44 = var43.getValue();
    org.databene.jdbacl.sql.ColumnExpression var47 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var48 = var47.getValue();
    org.databene.jdbacl.sql.BetweenExpression var49 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var40, (org.databene.script.Expression)var43, (org.databene.script.Expression)var47);
    var37.addTerm((org.databene.script.Expression)var43);
    org.databene.script.Expression[] var51 = new org.databene.script.Expression[] { var37};
    org.databene.jdbacl.sql.FunctionInvocation var52 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var51);
    boolean var53 = var23.equals((java.lang.Object)var52);
    java.lang.String var54 = var23.getDefaultPort();
    java.lang.String var55 = var23.toString();
    boolean var56 = var21.equals((java.lang.Object)var23);
    java.lang.String var57 = var23.getId();
    java.lang.String var58 = var23.getDefaultPort();
    java.lang.String var59 = var23.getDefaultPort();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "sequence"+ "'", var32.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "sequence"+ "'", var36.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "sequence"+ "'", var44.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "sequence"+ "'", var48.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test314");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.util.List var16 = var15.getComponents();
    var15.setObjectType("-1");
    java.util.List var19 = var15.getComponents();
    java.lang.String var20 = var15.getObjectType();
    var15.setStatus("h2");
    org.databene.jdbacl.dialect.DerbyDialect var27 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var29 = var27.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    java.lang.String var32 = var27.formatValue((java.lang.Object)var30);
    var30.setName("'hi!'");
    java.util.List var35 = var30.getSchemas();
    org.databene.jdbacl.model.DBSchema var36 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var36);
    java.util.List var38 = var36.getPackages();
    org.databene.jdbacl.model.DBPackage var39 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var36);
    java.util.List var40 = var39.getComponents();
    org.databene.jdbacl.model.DBProcedure var41 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var39);
    java.lang.String var42 = var41.getSubProgramId();
    var41.setSubProgramId("jdbc:h2:mem:select next value for 10");
    var41.setSubProgramId("NOT drop sequence  ~ 'alter sequence  restart with -1'");
    var41.setSubProgramId("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    java.lang.String var49 = var41.getOverload();
    var41.setSubProgramId("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    var15.addProcedure(var41);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.renderValue((java.lang.Object)var41);
    var41.setSubProgramId("jdbc:h2:mem:DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "-1"+ "'", var20.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var53.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test315");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIN();
    var10.mT__137();
    var10.mBYTE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test317");


    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    org.databene.jdbacl.model.DBTrigger var15 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var14);
    java.util.List var16 = var14.getPackages();
    org.databene.jdbacl.model.DBPackage var17 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var14);
    java.util.List var18 = var17.getComponents();
    org.databene.jdbacl.model.DBProcedure var19 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var17);
    java.lang.String var20 = var19.getSubProgramId();
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    java.util.Set var26 = var22.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var29 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var30 = var29.isAlpha();
    boolean var31 = var29.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var34 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var22, var29, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    var37.addTable((org.databene.jdbacl.model.DBTable)var43);
    var34.setTable((org.databene.jdbacl.model.DBTable)var43);
    boolean var48 = var19.isIdentical((org.databene.jdbacl.model.DBObject)var43);
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    var50.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var53 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var54 = var53.getForeignKeyConstraints();
    var50.addReferrer((org.databene.jdbacl.model.DBTable)var53);
    org.databene.jdbacl.model.DBDataType var58 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var59 = var58.isAlpha();
    java.lang.String var60 = var58.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var61 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var64 = var61.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var66 = var61.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var67 = var58.equals((java.lang.Object)var66);
    org.databene.jdbacl.model.DefaultDBColumn var70 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var53, var58, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var73 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var74 = var73.isTemporal();
    boolean var75 = var58.equals((java.lang.Object)var73);
    org.databene.jdbacl.model.DefaultDBColumn var76 = new org.databene.jdbacl.model.DefaultDBColumn("SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'", (org.databene.jdbacl.model.DBTable)var43, var73);
    var76.setVersionColumn(true);
    java.lang.String var79 = var76.getName();
    boolean var80 = var76.isNullable();
    org.databene.jdbacl.model.DBColumn[] var81 = new org.databene.jdbacl.model.DBColumn[] { var76};
    java.lang.String var82 = org.databene.jdbacl.SQLUtil.renderColumnNames(var81);
    java.lang.String var83 = org.databene.jdbacl.SQLUtil.renderColumnNames(var81);
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.renderColumnNames(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "DROP SEQUENCE "+ "'", var60.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var66.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"+ "'", var79.equals("SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"+ "'", var82.equals("SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"+ "'", var83.equals("SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"+ "'", var84.equals("SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"));

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test318");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.setBacktrackingLevel(1);
    var0.mT__75();
    var0.beginResync();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test319");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    java.lang.Object var4 = var0.get("drop generator DROP SEQUENCE catalog RESTRICT");
    boolean var6 = var0.contains("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    var0.remove("jdbc:h2:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '");
    var0.remove("column jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var16 = var15.dropDDL();
    java.math.BigInteger var17 = var15.getIncrementIfNotDefault();
    java.math.BigInteger var18 = var15.getMinValue();
    java.math.BigInteger var19 = var15.getMinValue();
    java.lang.Boolean var20 = var15.isOrder();
    org.databene.jdbacl.model.DBSequence var24 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var25 = var24.dropDDL();
    java.math.BigInteger var26 = var24.getIncrementIfNotDefault();
    java.math.BigInteger var27 = var24.getMinValue();
    java.math.BigInteger var28 = var24.getMinValue();
    java.lang.Boolean var29 = var24.isOrder();
    java.math.BigInteger var30 = var24.getIncrementIfNotDefault();
    var24.setCycle((java.lang.Boolean)true);
    java.lang.String var33 = var24.getCatalogName();
    java.math.BigInteger var34 = var24.getIncrement();
    var15.setLastNumber(var34);
    var0.set("drop sequence VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", (java.lang.Object)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "drop sequence "+ "'", var16.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "drop sequence "+ "'", var25.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "drop sequence "+ "'", var33.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test320");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    java.lang.String var15 = var9.getSourceName();
    org.databene.jdbacl.sql.parser.SQLLexer var16 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var16.mT__61();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test321");


    org.databene.jdbacl.identity.IdentityProvider var0 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.NaturalPkIdentity var2 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var3 = var2.getName();
    var0.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var2, "SET GENERATOR . TO -1");
    java.lang.String[] var10 = new java.lang.String[] { ""};
    java.lang.String[] var14 = new java.lang.String[] { ""};
    java.lang.String var15 = org.databene.jdbacl.SQLUtil.join("", "", var10, "hi!", "10", var14);
    org.databene.jdbacl.identity.IdentityProvider var16 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var17 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var10, var16);
    java.lang.String var18 = var17.getDescription();
    java.lang.String var19 = var17.getDescription();
    var0.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var17, "select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE;");
    var17.addIrrelevantColumn("alter sequence SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!' restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi! as 10 on . = 10."+ "'", var15.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Sub identity of ():\nnull"+ "'", var18.equals("Sub identity of ():\nnull"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Sub identity of ():\nnull"+ "'", var19.equals("Sub identity of ():\nnull"));

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test322");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "Identity definition by unique key: select next value for 10", "()");
    var3.setOrder((java.lang.Boolean)true);
    java.math.BigInteger var6 = var3.getLastNumber();
    org.databene.jdbacl.dialect.FirebirdDialect var7 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var10 = var7.renderSetSequenceValue(".", 0L);
    boolean var13 = var7.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var18 = var17.getMaxValue();
    java.lang.String var19 = var17.toString();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var24 = var23.dropDDL();
    java.math.BigInteger var25 = var23.getMinValueIfNotDefault();
    java.math.BigInteger var26 = var23.getLastNumber();
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var30.setName("10");
    java.math.BigInteger var33 = var30.getIncrement();
    java.math.BigInteger var34 = var30.getIncrement();
    var23.setStart(var34);
    var17.setIncrement(var34);
    java.lang.String var37 = var7.renderCreateSequence(var17);
    org.databene.jdbacl.model.DBSequence var41 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var41.setName("10");
    java.math.BigInteger var44 = var41.getIncrement();
    java.math.BigInteger var45 = var41.getIncrement();
    org.databene.jdbacl.model.DBSequence var49 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var50 = var49.dropDDL();
    java.math.BigInteger var51 = var49.getMinValueIfNotDefault();
    java.math.BigInteger var52 = var49.getLastNumber();
    var41.setStart(var52);
    java.lang.Boolean var54 = var41.isOrder();
    org.databene.jdbacl.model.DBSequence var58 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var58.setName("10");
    java.math.BigInteger var61 = var58.getIncrement();
    java.math.BigInteger var62 = var58.getIncrement();
    var41.setLastNumber(var62);
    var17.setLastNumber(var62);
    java.math.BigInteger var65 = var17.getMaxValue();
    java.math.BigInteger var66 = var17.getLastNumber();
    var3.setLastNumber(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SET GENERATOR . TO -1"+ "'", var10.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "drop sequence "+ "'", var24.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "CREATE GENERATOR "+ "'", var37.equals("CREATE GENERATOR "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "drop sequence "+ "'", var50.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test323");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;");
    org.databene.jdbacl.model.xml.XMLModelExporter var3 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, " ");
    org.databene.jdbacl.model.xml.XMLModelImporter var4 = new org.databene.jdbacl.model.xml.XMLModelImporter(var1);
    org.databene.jdbacl.model.xml.XMLModelExporter var6 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    org.databene.jdbacl.model.xml.XMLModelExporter var8 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "REGEXP_LIKE(REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" '), 'left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ')");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test324");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var5, (-1), "hi! identity by primary key");
    boolean var26 = var25.isNullable();
    var25.setNullable(true);
    java.lang.String var29 = var25.getDefaultValue();
    org.databene.jdbacl.dialect.DerbyDialect var30 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var32 = var30.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var33 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var34 = var33.getName();
    java.lang.String var35 = var30.formatValue((java.lang.Object)var33);
    java.lang.String var36 = var33.getObjectType();
    boolean var37 = var25.isIdentical((org.databene.jdbacl.model.DBObject)var33);
    org.databene.jdbacl.model.Database var38 = var33.getDatabase();
    org.databene.jdbacl.dialect.PostgreSQLDialect var39 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var42 = var39.isDefaultCatalog("", "");
    java.lang.String var44 = var39.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var45 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var46 = var39.formatValue((java.lang.Object)var45);
    java.lang.String var47 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var45);
    org.databene.jdbacl.model.Database var48 = var45.getDatabase();
    org.databene.jdbacl.dialect.DerbyDialect var52 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var54 = var52.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var55 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var56 = var55.getName();
    java.lang.String var57 = var52.formatValue((java.lang.Object)var55);
    var55.setName("'hi!'");
    java.util.List var60 = var55.getSchemas();
    org.databene.jdbacl.model.DBSchema var61 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var55);
    org.databene.jdbacl.model.DBTrigger var62 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var61);
    java.lang.String var63 = var61.getName();
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var61);
    var45.addSchema(var61);
    java.util.List var66 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var61);
    java.util.List var68 = var61.getSequences(false);
    var33.addSchema(var61);
    java.lang.String var70 = var33.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "catalog"+ "'", var36.equals("catalog"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "drop sequence "+ "'", var44.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "null"+ "'", var47.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var63.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test325");


    org.databene.jdbacl.sql.parser.SQLParser.check_constraint_return var2 = new org.databene.jdbacl.sql.parser.SQLParser.check_constraint_return();
    org.databene.jdbacl.identity.mem.GlobalRowId var3 = new org.databene.jdbacl.identity.mem.GlobalRowId("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", ".", (java.lang.Object)var2);
    java.lang.String var4 = var3.toString();

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test326");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Statement var3 = org.databene.jdbacl.dialect.HSQLUtil.shutdown("CREATE SEQUENCE 10", ".", "drop sequence \"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test327");


    org.databene.jdbacl.identity.NkPkQueryIdentity var2 = new org.databene.jdbacl.identity.NkPkQueryIdentity("()", "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    java.lang.String var3 = var2.getDescription();
    var2.setNkPkQuery("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE : class org.databene.jdbacl.model.FKChangeRule");
    var2.setNkPkQuery("-1.DROP SEQUENCE ");
    var2.setNkPkQuery("left join select next value for (\"sequence\") as (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1) on EQUEN.DROP SEQUENCE  = (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1).DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Identity definition by NK-PK query: alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"+ "'", var3.equals("Identity definition by NK-PK query: alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"));

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test328");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("alter sequence NOT drop generator sequence ~ 'hi!' restart with 10", "SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'", "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    var3.setDefaultPort("CREATE GENERATOR drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1");

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test329");


    org.databene.jdbacl.identity.NKBuilder var0 = new org.databene.jdbacl.identity.NKBuilder();
    org.databene.jdbacl.sql.ColumnExpression var4 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var7 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var8 = var7.getValue();
    org.databene.jdbacl.sql.ColumnExpression var11 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var12 = var11.getValue();
    org.databene.jdbacl.sql.BetweenExpression var13 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var4, (org.databene.script.Expression)var7, (org.databene.script.Expression)var11);
    org.databene.jdbacl.sql.ColumnExpression var16 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var20 = var19.getValue();
    org.databene.jdbacl.sql.ColumnExpression var23 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var24 = var23.getValue();
    org.databene.jdbacl.sql.BetweenExpression var25 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var16, (org.databene.script.Expression)var19, (org.databene.script.Expression)var23);
    var13.addTerm((org.databene.script.Expression)var19);
    org.databene.script.Expression[] var27 = new org.databene.script.Expression[] { var13};
    org.databene.jdbacl.sql.FunctionInvocation var28 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var27);
    java.lang.String var29 = var28.getFunctionName();
    java.lang.String var30 = var28.toString();
    var0.addComponent((java.lang.Object)var28);
    java.lang.String var32 = var0.toString();
    org.databene.jdbacl.sql.parser.SQLLexer var33 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var33.mCREATE_TABLE();
    var33.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var37 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var39 = var37.LT(10);
    var33.setCharStream((org.antlr.runtime.CharStream)var37);
    int var42 = var37.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var43 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var37);
    var43.setText("select next value for SET GENERATOR.TO - 1");
    var43.setBacktrackingLevel(1);
    var43.mT__91();
    var43.mT__99();
    var0.addComponent((java.lang.Object)var43);
    var43.mIDENTIFIER();
    int var52 = var43.getBacktrackingLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "sequence"+ "'", var8.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "sequence"+ "'", var20.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "sequence"+ "'", var24.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var29.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var30.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var32.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test330");


    org.databene.jdbacl.sql.ColumnExpression var3 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var7 = var6.getValue();
    org.databene.jdbacl.sql.ColumnExpression var10 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var11 = var10.getValue();
    org.databene.jdbacl.sql.BetweenExpression var12 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var3, (org.databene.script.Expression)var6, (org.databene.script.Expression)var10);
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var19 = var18.getValue();
    org.databene.jdbacl.sql.ColumnExpression var22 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var23 = var22.getValue();
    org.databene.jdbacl.sql.BetweenExpression var24 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var15, (org.databene.script.Expression)var18, (org.databene.script.Expression)var22);
    org.databene.jdbacl.sql.ColumnExpression var27 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var30 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var31 = var30.getValue();
    org.databene.jdbacl.sql.ColumnExpression var34 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var35 = var34.getValue();
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var27, (org.databene.script.Expression)var30, (org.databene.script.Expression)var34);
    org.databene.jdbacl.sql.BetweenExpression var37 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var10, (org.databene.script.Expression)var18, (org.databene.script.Expression)var30);
    org.databene.jdbacl.sql.ColumnExpression var40 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var43 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var44 = var43.getValue();
    org.databene.jdbacl.sql.ColumnExpression var47 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var48 = var47.getValue();
    org.databene.jdbacl.sql.BetweenExpression var49 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var40, (org.databene.script.Expression)var43, (org.databene.script.Expression)var47);
    org.databene.jdbacl.sql.ColumnExpression var52 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var55 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var56 = var55.getValue();
    org.databene.jdbacl.sql.ColumnExpression var59 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var60 = var59.getValue();
    org.databene.jdbacl.sql.BetweenExpression var61 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var52, (org.databene.script.Expression)var55, (org.databene.script.Expression)var59);
    org.databene.jdbacl.sql.ColumnExpression var64 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var67 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var68 = var67.getValue();
    org.databene.jdbacl.sql.ColumnExpression var71 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var72 = var71.getValue();
    org.databene.jdbacl.sql.BetweenExpression var73 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var64, (org.databene.script.Expression)var67, (org.databene.script.Expression)var71);
    org.databene.jdbacl.sql.BetweenExpression var74 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var47, (org.databene.script.Expression)var55, (org.databene.script.Expression)var67);
    org.databene.jdbacl.sql.ColumnExpression var77 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var78 = var77.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var79 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var81 = var79.renderFetchSequenceValue("'hi!'");
    var77.setValue("'hi!'");
    org.databene.jdbacl.sql.BetweenExpression var83 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var37, (org.databene.script.Expression)var67, (org.databene.script.Expression)var77);
    org.databene.script.Expression[] var84 = var37.getTerms();
    org.databene.jdbacl.sql.FunctionInvocation var85 = new org.databene.jdbacl.sql.FunctionInvocation("Identity definition by unique key: select next value for 10", var84);
    java.lang.String var86 = var85.getFunctionName();
    java.lang.String var87 = var85.getFunctionName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "sequence"+ "'", var11.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "sequence"+ "'", var19.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "sequence"+ "'", var31.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "sequence"+ "'", var35.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "sequence"+ "'", var44.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "sequence"+ "'", var48.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "sequence"+ "'", var56.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "sequence"+ "'", var60.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "sequence"+ "'", var68.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "sequence"+ "'", var72.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "sequence"+ "'", var78.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "call next value for 'hi!'"+ "'", var81.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "Identity definition by unique key: select next value for 10"+ "'", var86.equals("Identity definition by unique key: select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "Identity definition by unique key: select next value for 10"+ "'", var87.equals("Identity definition by unique key: select next value for 10"));

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test331");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("call next value for 'hi!'");
    java.lang.String var2 = var1.getName();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "NaturalPkIdentity(call next value for 'hi!')"+ "'", var3.equals("NaturalPkIdentity(call next value for 'hi!')"));

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test332");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var3 = var0.renderSetSequenceValue(".", 0L);
    boolean var4 = var0.isSequenceBoundarySupported();
    java.lang.String var6 = var0.renderDropSequence("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    java.lang.String var7 = var0.getJDBCDriverClass();
    java.lang.String var9 = var0.renderFetchSequenceValue("select next value for SET GENERATOR . TO -1");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var13 = var0.regexQuery("'NOT drop generator sequence ~ ''hi!'''", true, "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR . TO -1"+ "'", var3.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var6.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.firebirdsql.jdbc.FBDriver"+ "'", var7.equals("org.firebirdsql.jdbc.FBDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select gen_id(select next value for SET GENERATOR . TO -1, 1) from RDB$DATABASE;"+ "'", var9.equals("select gen_id(select next value for SET GENERATOR . TO -1, 1) from RDB$DATABASE;"));

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test333");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getUrlPattern();
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var8 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var9 = var8.getValue();
    org.databene.jdbacl.sql.ColumnExpression var12 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var13 = var12.getValue();
    org.databene.jdbacl.sql.BetweenExpression var14 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var5, (org.databene.script.Expression)var8, (org.databene.script.Expression)var12);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var20 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var21 = var20.getValue();
    org.databene.jdbacl.sql.ColumnExpression var24 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var25 = var24.getValue();
    org.databene.jdbacl.sql.BetweenExpression var26 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var17, (org.databene.script.Expression)var20, (org.databene.script.Expression)var24);
    var14.addTerm((org.databene.script.Expression)var20);
    org.databene.script.Expression[] var28 = new org.databene.script.Expression[] { var14};
    org.databene.jdbacl.sql.FunctionInvocation var29 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var28);
    boolean var30 = var0.equals((java.lang.Object)var29);
    java.lang.String var31 = var0.getDefaultPort();
    java.lang.String var32 = var0.toString();
    java.lang.String var33 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "sequence"+ "'", var9.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "sequence"+ "'", var13.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "sequence"+ "'", var21.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "sequence"+ "'", var25.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test334");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var32 = var31.getDoc();
    java.lang.String var33 = var31.getDoc();
    org.databene.jdbacl.model.DBCatalog var34 = var31.getCatalog();
    java.util.List var35 = var34.getComponents();
    var34.setDoc("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var32.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var33.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test335");


    org.databene.jdbacl.sql.parser.SQLParser.drop_pk_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.drop_pk_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test336");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    var12.setColumnName("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var12.setTriggerType("REGEXP_MATCHES(catalog, 'call next value for null[]')");
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    org.databene.jdbacl.model.DBSchema var31 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var25);
    org.databene.jdbacl.model.DBTrigger var32 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var31);
    java.util.List var33 = var31.getPackages();
    org.databene.jdbacl.model.DBPackage var34 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var31);
    java.util.List var35 = var34.getComponents();
    var34.setObjectType("-1");
    java.util.List var38 = var34.getComponents();
    java.lang.String var39 = var34.getObjectType();
    var34.setStatus("h2");
    java.util.List var42 = var34.getProcedures();
    boolean var43 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var34);
    java.lang.String var44 = var34.getObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "-1"+ "'", var39.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "-1"+ "'", var44.equals("-1"));

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test337");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mARGUMENTS();
    var10.mAND();
    var10.mT__105();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test338");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicIndexName("DROP SEQUENCE (100)");
    boolean var7 = var0.isDefaultSchema("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ", "column jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var12 = var11.dropDDL();
    java.lang.String var13 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var11);
    java.lang.String var14 = var0.renderCreateSequence(var11);
    boolean var16 = var0.isDeterministicFKName("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "drop sequence "+ "'", var12.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""+ "'", var14.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test339");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    var10.addTrigger(var23);
    var23.setStatus("alter sequence drop generator sequence restart with 100");
    java.lang.String var27 = var23.getColumnName();
    var23.setWhenClause("DROP SEQUENCE -1 RESTRICT");
    java.lang.String var30 = var23.getStatus();
    var23.setTriggerBody("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    var23.setTableOwner("hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1");
    var23.setColumnName("NOT . ~ 'CREATE GENERATOR drop sequence '");
    var23.setColumnName("alter sequence column jdbc:h2:mem:hi! as 10 on . = 10.-identity-. restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var30.equals("alter sequence drop generator sequence restart with 100"));

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test340");


    java.lang.String[] var6 = new java.lang.String[] { ""};
    java.lang.String[] var10 = new java.lang.String[] { ""};
    java.lang.String var11 = org.databene.jdbacl.SQLUtil.join("", "", var6, "hi!", "10", var10);
    java.lang.String var12 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var6);
    java.lang.String[] var19 = new java.lang.String[] { ""};
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.join("", "", var19, "hi!", "10", var23);
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var23);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var6, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var23);
    java.lang.String var27 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("Identity definition by unique key: select next value for 10", var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi! as 10 on . = 10."+ "'", var11.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "."+ "'", var12.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi! as 10 on . = 10."+ "'", var24.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "."+ "'", var25.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var26.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Identity definition by unique key: select next value for 10."+ "'", var27.equals("Identity definition by unique key: select next value for 10."));

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test341");


    org.databene.jdbacl.sql.parser.SQLParser.multiplicative_expression_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.multiplicative_expression_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    java.lang.Object var7 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test342");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mALTER_TABLE();
    var10.mT__134();
    var10.mT__111();
    java.lang.String var21 = var10.getText();
    var10.mT__61();
    var10.mT__95();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var21.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test343");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var1.setCharPositionInLine(1);
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    var1.release(79);
    org.databene.jdbacl.dialect.PostgreSQLDialect var8 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var11 = var8.isDefaultCatalog("", "");
    java.lang.String var13 = var8.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var17.setName("10");
    java.math.BigInteger var20 = var17.getIncrement();
    java.lang.Boolean var21 = var17.isCycle();
    java.lang.String var22 = var17.dropDDL();
    java.lang.String var23 = var8.renderCreateSequence(var17);
    boolean var26 = var8.isDefaultCatalog("catalog", "sequence");
    boolean var28 = var8.isDeterministicIndexName("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    org.databene.jdbacl.model.Database var31 = var29.getDatabase();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var36 = var35.dropDDL();
    java.math.BigInteger var37 = var35.getMinValueIfNotDefault();
    boolean var38 = var29.isIdentical((org.databene.jdbacl.model.DBObject)var35);
    java.lang.String var39 = var8.renderCreateSequence(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var40 = org.databene.jdbacl.sql.SQLParserUtil.parse((org.antlr.runtime.CharStream)var1, (org.databene.jdbacl.DatabaseDialect)var8);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "DROP SEQUENCE "+ "'", var4.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DROP SEQUENCE "+ "'", var5.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "10"+ "'", var13.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "drop sequence 10"+ "'", var22.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "CREATE SEQUENCE 10"+ "'", var23.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "drop sequence "+ "'", var36.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "CREATE SEQUENCE "+ "'", var39.equals("CREATE SEQUENCE "));

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test344");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.dialect.PostgreSQLDialect var23 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var26 = var23.isDefaultCatalog("", "");
    java.lang.String var28 = var23.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var23.formatValue((java.lang.Object)var29);
    java.lang.String var31 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var29);
    org.databene.jdbacl.model.Database var32 = var29.getDatabase();
    org.databene.jdbacl.dialect.DerbyDialect var36 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var38 = var36.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var39 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var40 = var39.getName();
    java.lang.String var41 = var36.formatValue((java.lang.Object)var39);
    var39.setName("'hi!'");
    java.util.List var44 = var39.getSchemas();
    org.databene.jdbacl.model.DBSchema var45 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var39);
    org.databene.jdbacl.model.DBTrigger var46 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var45);
    java.lang.String var47 = var45.getName();
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var45);
    var29.addSchema(var45);
    boolean var50 = var21.equals((java.lang.Object)var29);
    java.lang.String var51 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "drop sequence "+ "'", var28.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "null"+ "'", var31.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var47.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var51.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test345");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    java.util.List var5 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var9 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var10 = var9.getTables();
    org.databene.jdbacl.model.TableContainer var11 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var9);
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    var9.addTable((org.databene.jdbacl.model.DBTable)var15);
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.removeTable((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    var28.setDoc(".");
    java.util.Set var32 = var28.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var35 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var36 = var35.isAlpha();
    boolean var37 = var35.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var40 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var28, var35, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var24.addColumn((org.databene.jdbacl.model.DBColumn)var40);
    var9.removeTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    var43.setDoc(".");
    java.util.Set var47 = var43.getUniqueConstraints(false);
    java.lang.String var48 = var43.getDoc();
    var43.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    var9.addTable((org.databene.jdbacl.model.DBTable)var43);
    java.util.List var52 = var9.getComponents();
    java.util.List var53 = var2.getTables(true, var52);
    org.databene.jdbacl.model.DBTable var55 = var2.getTable("'NOT drop generator sequence ~ ''hi!'''");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "."+ "'", var48.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test346");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    java.lang.String var16 = var10.getSourceName();
    var10.mSTAR();
    var10.mGE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test347");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var30 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var29);
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var37.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var56 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var58 = var37.getUniqueConstraint(var56);
    org.databene.jdbacl.identity.UniqueKeyIdentity var59 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var56);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var29, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var61 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var18, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var29);
    org.databene.jdbacl.model.DBUniqueIndex var62 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var61);
    var62.addColumnName("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    var15.addIndex((org.databene.jdbacl.model.DBIndex)var62);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var66 = var15.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var67 = var15.getPrimaryKeyConstraint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var60.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test348");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    java.lang.String var19 = var18.getSubProgramId();
    var18.setSubProgramId("jdbc:h2:mem:select next value for 10");
    java.lang.String var22 = var18.getSubProgramId();
    java.lang.String var23 = var18.getSubProgramId();
    java.lang.String var24 = var18.getObjectId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:select next value for 10"+ "'", var22.equals("jdbc:h2:mem:select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "jdbc:h2:mem:select next value for 10"+ "'", var23.equals("jdbc:h2:mem:select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test349");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var43 = var41.getTable();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.CompositeDBObject var45 = var41.getOwner();
    org.databene.jdbacl.model.FKChangeRule var46 = var41.getDeleteRule();
    java.lang.String var47 = var46.name();
    java.lang.String var48 = var46.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NO_ACTION"+ "'", var47.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "NO_ACTION"+ "'", var48.equals("NO_ACTION"));

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test350");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    java.util.Set var6 = var2.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    boolean var11 = var9.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var14 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var2, var9, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var17 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var18 = var17.isAlpha();
    java.lang.String var19 = var17.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var20 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var23 = var20.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var25 = var20.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var26 = var17.equals((java.lang.Object)var25);
    boolean var27 = var17.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var28 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var2, var17);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    var29.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var33 = var32.getForeignKeyConstraints();
    var29.addReferrer((org.databene.jdbacl.model.DBTable)var32);
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String[] var44 = new java.lang.String[] { ""};
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.join("", "", var40, "hi!", "10", var44);
    org.databene.jdbacl.model.DBUniqueConstraint var46 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var32, "select nextval('')", false, var40);
    java.lang.String var47 = var46.toString();
    boolean var48 = var46.isNameDeterministic();
    var46.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    var2.addUniqueConstraint(var46);
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "DROP SEQUENCE "+ "'", var19.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var25.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi! as 10 on . = 10."+ "'", var45.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var47.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "null.select nextval('')"+ "'", var52.equals("null.select nextval('')"));

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test351");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBIndex var30 = var22.getIndex("");
    java.util.List var31 = var22.getIndexes();
    java.util.Set var32 = var22.getForeignKeyConstraints();
    java.util.List var33 = var22.getCheckConstraints();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var34 = var22.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    org.databene.jdbacl.model.Database var37 = var35.getDatabase();
    java.lang.String var38 = var35.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var40 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var42 = var40.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var43 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var44 = var43.getName();
    java.lang.String var45 = var40.formatValue((java.lang.Object)var43);
    var43.setName("'hi!'");
    java.util.List var48 = var43.getSchemas();
    org.databene.jdbacl.model.DBSchema var49 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var43);
    var35.removeSchema(var49);
    java.util.List var52 = var49.getSequences(false);
    boolean var53 = var22.equals((java.lang.Object)var49);
    java.lang.String var54 = var22.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "."+ "'", var54.equals("."));

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test352");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    var0.setDownloadUrl("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    java.lang.String var13 = var0.getDownloadUrl();
    java.lang.String var14 = var0.getDriverClass();
    java.lang.String var15 = var0.getId();
    var0.setDefaultDatabase("firebird");
    var0.setDefaultDatabase("REGEXP_MATCHES(jdbc:h2:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence ', 'derby')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var13.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test353");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mALTER_TABLE();
    var10.mT__134();
    java.lang.String[] var20 = var10.getTokenNames();
    int var21 = var10.getBacktrackingLevel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.mINT();
      fail("Expected exception of type org.antlr.runtime.EarlyExitException");
    } catch (org.antlr.runtime.EarlyExitException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test354");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getBacktrackingLevel();
    var0.mALTER_TABLE();
    org.databene.jdbacl.sql.parser.SQLLexer var9 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var9.mCREATE_TABLE();
    var9.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var13 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var15 = var13.LT(10);
    var9.setCharStream((org.antlr.runtime.CharStream)var13);
    int var18 = var13.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var19 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var13);
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var21 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var23 = var21.LT(10);
    boolean var25 = var19.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var21, 69);
    int var26 = var21.size();
    var0.setCharStream((org.antlr.runtime.CharStream)var21);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var36 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var36.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var40 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var36, "hi! as 10 on . = 10.");
    var36.setImportingIndexes(false);
    var36.setLazy(false);
    java.lang.String var45 = var36.toString();
    var36.setImportingPackages(true);
    var36.setExcludeTables("REGEXP_LIKE(CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT, 'DROP SEQUENCE (100)')");
    var0.traceOut("left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ", 68, (java.lang.Object)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "JDBCDBImporter"+ "'", var45.equals("JDBCDBImporter"));

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test355");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var29 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var30 = var29.getValue();
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.BetweenExpression var35 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var26, (org.databene.script.Expression)var29, (org.databene.script.Expression)var33);
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var17, (org.databene.script.Expression)var29);
    org.databene.jdbacl.sql.ColumnExpression var39 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var42 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var43 = var42.getValue();
    org.databene.jdbacl.sql.ColumnExpression var46 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var47 = var46.getValue();
    org.databene.jdbacl.sql.BetweenExpression var48 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var39, (org.databene.script.Expression)var42, (org.databene.script.Expression)var46);
    org.databene.jdbacl.sql.ColumnExpression var51 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var54 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var55 = var54.getValue();
    org.databene.jdbacl.sql.ColumnExpression var58 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var59 = var58.getValue();
    org.databene.jdbacl.sql.BetweenExpression var60 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var51, (org.databene.script.Expression)var54, (org.databene.script.Expression)var58);
    org.databene.jdbacl.sql.ColumnExpression var63 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var66 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var67 = var66.getValue();
    org.databene.jdbacl.sql.ColumnExpression var70 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var71 = var70.getValue();
    org.databene.jdbacl.sql.BetweenExpression var72 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var63, (org.databene.script.Expression)var66, (org.databene.script.Expression)var70);
    org.databene.jdbacl.sql.BetweenExpression var73 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var46, (org.databene.script.Expression)var54, (org.databene.script.Expression)var66);
    org.databene.jdbacl.sql.ColumnExpression var76 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var77 = var76.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var78 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var80 = var78.renderFetchSequenceValue("'hi!'");
    var76.setValue("'hi!'");
    org.databene.jdbacl.sql.BetweenExpression var82 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var36, (org.databene.script.Expression)var66, (org.databene.script.Expression)var76);
    org.databene.script.Expression[] var83 = var82.getSourceExpressions();
    org.databene.script.Expression[] var84 = var82.getSourceExpressions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "sequence"+ "'", var43.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sequence"+ "'", var47.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "sequence"+ "'", var55.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "sequence"+ "'", var59.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "sequence"+ "'", var67.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "sequence"+ "'", var71.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "sequence"+ "'", var77.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "call next value for 'hi!'"+ "'", var80.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test356");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test357");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__65();
    var10.mT__130();
    var10.mT__108();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test358");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    java.lang.Object var4 = var0.get("drop generator DROP SEQUENCE catalog RESTRICT");
    boolean var6 = var0.contains("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    var0.remove("jdbc:h2:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '");
    java.lang.Object var10 = var0.get("-1.DROP SEQUENCE -identity-alter sequence NOT drop generator sequence ~ 'hi!' restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test359");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var3 = var0.renderSetSequenceValue(".", 0L);
    boolean var6 = var0.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    boolean var9 = var0.isDefaultCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var14 = var13.dropDDL();
    java.math.BigInteger var15 = var13.getIncrementIfNotDefault();
    java.lang.String var16 = var0.renderCreateSequence(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR . TO -1"+ "'", var3.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence "+ "'", var14.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "CREATE GENERATOR "+ "'", var16.equals("CREATE GENERATOR "));

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test360");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var35 = var34.getTables();
    org.databene.jdbacl.model.TableContainer var36 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var34);
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var41 = var40.getForeignKeyConstraints();
    var37.addReferrer((org.databene.jdbacl.model.DBTable)var40);
    var34.addTable((org.databene.jdbacl.model.DBTable)var40);
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.join("", "", var48, "hi!", "10", var52);
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var48);
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var58 = var57.getTables();
    org.databene.jdbacl.model.TableContainer var59 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var57);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    var60.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var64 = var63.getForeignKeyConstraints();
    var60.addReferrer((org.databene.jdbacl.model.DBTable)var63);
    var57.addTable((org.databene.jdbacl.model.DBTable)var63);
    java.lang.String[] var69 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var70 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var69);
    org.databene.jdbacl.model.DBForeignKeyConstraint var71 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var40, var48, (org.databene.jdbacl.model.DBTable)var63, var69);
    org.databene.jdbacl.model.DBTable var72 = var71.getRefereeTable();
    var5.addForeignKey(var71);
    org.databene.jdbacl.model.DBDataType var76 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    org.databene.jdbacl.model.DefaultDBColumn var77 = new org.databene.jdbacl.model.DefaultDBColumn("select next value for SET GENERATOR . TO -1", (org.databene.jdbacl.model.DBTable)var5, var76);
    java.lang.String var78 = var5.getDoc();
    java.lang.String var79 = var5.getDoc();
    java.util.Set var81 = var5.getUniqueConstraints(true);
    java.util.List var82 = var5.getCheckConstraints();
    int var83 = var5.countProviders();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBColumn var85 = var5.getColumn("unique constraint NOT REGEXP 'left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .'");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi! as 10 on . = 10."+ "'", var53.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "."+ "'", var54.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var70.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test361");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicPKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL");
    boolean var5 = var0.isDeterministicIndexName("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    java.lang.String var7 = var0.renderCreateSequence("left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR.");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "CREATE GENERATOR left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR."+ "'", var7.equals("CREATE GENERATOR left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR."));

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test362");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var3 = var2.getValue();
    java.lang.String var4 = var2.toString();
    boolean var5 = var2.isQuoted();
    java.lang.String var6 = var2.getColumnName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "sequence"+ "'", var3.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "\"sequence\""+ "'", var4.equals("\"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test363");


    org.databene.jdbacl.identity.NoIdentity var1 = new org.databene.jdbacl.identity.NoIdentity("select null.nextval from dual");
    java.lang.String var2 = var1.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "No identity defined for table select null.nextval from dual"+ "'", var2.equals("No identity defined for table select null.nextval from dual"));

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test364");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "Identity definition by unique key: select next value for 10", "()");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var29 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var9, (-1), "hi! identity by primary key");
    boolean var30 = var29.isNullable();
    var29.setNullable(true);
    boolean var33 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var29);
    var29.setFractionDigits((java.lang.Integer)0);
    boolean var36 = var29.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test365");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mALTER_TABLE();
    var10.mT__134();
    java.lang.String var20 = var10.getGrammarFileName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.mWS();
      fail("Expected exception of type org.antlr.runtime.MismatchedSetException");
    } catch (org.antlr.runtime.MismatchedSetException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"+ "'", var20.equals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"));

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test366");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.join("", "", var12, "hi!", "10", var16);
    org.databene.jdbacl.model.DBUniqueConstraint var18 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var4, "select nextval('')", false, var12);
    org.databene.jdbacl.model.DBDataType var21 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var22 = var21.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var4, var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var27 = var26.isConstant();
    java.lang.Object var28 = var26.getValue();
    boolean var29 = var23.equals((java.lang.Object)var26);
    org.databene.jdbacl.model.DBNotNullConstraint var30 = var23.getNotNullConstraint();
    java.lang.String var31 = org.databene.jdbacl.SQLUtil.renderColumnTypeWithSize((org.databene.jdbacl.model.DBColumn)var23);
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    var33.setDoc(".");
    java.util.Set var37 = var33.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var40 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var41 = var40.isAlpha();
    boolean var42 = var40.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var45 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var33, var40, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var48 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var49 = var48.getTables();
    org.databene.jdbacl.model.TableContainer var50 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    var48.addTable((org.databene.jdbacl.model.DBTable)var54);
    var45.setTable((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String var59 = org.databene.jdbacl.SQLUtil.renderColumn((org.databene.jdbacl.model.DBColumn)var45);
    org.databene.jdbacl.model.DBDataType var60 = var45.getType();
    var23.setType(var60);
    boolean var62 = var60.isTemporal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi! as 10 on . = 10."+ "'", var17.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "DROP SEQUENCE "+ "'", var31.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "NOT drop generator sequence ~ 'hi!' DROP SEQUENCE (100,-1) NULL"+ "'", var59.equals("NOT drop generator sequence ~ 'hi!' DROP SEQUENCE (100,-1) NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test367");


    org.databene.jdbacl.sql.ColumnExpression var4 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var7 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var8 = var7.getValue();
    org.databene.jdbacl.sql.ColumnExpression var11 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var12 = var11.getValue();
    org.databene.jdbacl.sql.BetweenExpression var13 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var4, (org.databene.script.Expression)var7, (org.databene.script.Expression)var11);
    java.lang.Object var14 = var4.getValue();
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var19 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var21 = var19.renderFetchSequenceValue("'hi!'");
    var17.setValue("'hi!'");
    boolean var23 = var17.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var27 = var26.isConstant();
    java.lang.Object var28 = var26.getValue();
    org.databene.jdbacl.sql.BetweenExpression var29 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var4, (org.databene.script.Expression)var17, (org.databene.script.Expression)var26);
    org.databene.script.Expression[] var30 = var29.getSourceExpressions();
    org.databene.jdbacl.sql.FunctionInvocation var31 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", var30);
    java.lang.String var32 = var31.getFunctionName();
    org.databene.script.Expression[] var33 = new org.databene.script.Expression[] { var31};
    org.databene.jdbacl.sql.FunctionInvocation var34 = new org.databene.jdbacl.sql.FunctionInvocation("container", var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "sequence"+ "'", var8.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "sequence"+ "'", var14.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "call next value for 'hi!'"+ "'", var21.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"+ "'", var32.equals("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test368");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    org.databene.jdbacl.dialect.DerbyDialect var28 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var30 = var28.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var31 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var32 = var31.getName();
    java.lang.String var33 = var28.formatValue((java.lang.Object)var31);
    var31.setName("'hi!'");
    java.util.List var36 = var31.getSchemas();
    org.databene.jdbacl.model.DBSchema var37 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var31);
    org.databene.jdbacl.model.DBTrigger var38 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var37);
    var38.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var41 = var38.getTriggerBody();
    java.lang.String var42 = var38.getColumnName();
    java.lang.String var43 = var38.getWhenClause();
    var24.addTrigger(var38);
    java.util.List var45 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var24);
    java.util.List var46 = var24.getTriggers();
    java.lang.String var47 = var24.getName();
    var0.removeSchema(var24);
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    org.databene.jdbacl.model.DBUniqueConstraint var69 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var55, "select nextval('')", false, var63);
    var55.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var74 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var75 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var74);
    org.databene.jdbacl.model.DBUniqueConstraint var76 = var55.getUniqueConstraint(var74);
    var51.addTable((org.databene.jdbacl.model.DBTable)var55);
    org.databene.jdbacl.model.DBDataType var80 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var81 = var80.isAlpha();
    java.lang.String var82 = var80.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var83 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var86 = var83.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var88 = var83.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var89 = var80.equals((java.lang.Object)var88);
    org.databene.jdbacl.model.DefaultDBColumn var90 = new org.databene.jdbacl.model.DefaultDBColumn("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '", (org.databene.jdbacl.model.DBTable)var55, var80);
    var24.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.util.List var92 = var55.getCheckConstraints();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var47.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var75.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "DROP SEQUENCE "+ "'", var82.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var88.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test369");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    java.util.List var36 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var15);
    java.util.List var37 = var15.getTriggers();
    java.lang.String var38 = var15.getName();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("select nextval for ') from REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", (org.databene.jdbacl.model.CompositeDBObject)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var38.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test370");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getForeignKeyColumnNames();
    java.lang.String var43 = var41.toString();
    org.databene.jdbacl.dialect.MySQLDialect var44 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var46 = var44.isDeterministicUKName("call next value for 'hi!'");
    java.lang.String var50 = var44.regexQuery("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0", false, "alter sequence hi! restart with 1");
    boolean var53 = var44.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    boolean var54 = var41.equals((java.lang.Object)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"+ "'", var50.equals("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test371");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicIndexName("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var4 = var0.isDeterministicPKName("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var6 = var0.isDeterministicPKName("unique constraint");
    boolean var8 = var0.isDeterministicPKName("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    boolean var10 = var0.isDeterministicUKName("select next value for (\"sequence\")");
    boolean var13 = var0.isDefaultSchema("alter sequence drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 0", "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''') SIMILAR TO ''E''");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test372");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.emitErrorMessage("call next value for 'hi!'");
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var7 = var6.getTables();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var6);
    org.databene.jdbacl.dialect.DerbyDialect var10 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var12 = var10.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    java.lang.String var15 = var10.formatValue((java.lang.Object)var13);
    var13.setName("'hi!'");
    java.util.List var18 = var13.getSchemas();
    java.util.List var19 = var8.getTables(false, var18);
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    org.databene.jdbacl.model.Database var24 = var22.getDatabase();
    java.lang.String var25 = var22.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var27 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var29 = var27.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    java.lang.String var32 = var27.formatValue((java.lang.Object)var30);
    var30.setName("'hi!'");
    java.util.List var35 = var30.getSchemas();
    org.databene.jdbacl.model.DBSchema var36 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var30);
    var22.removeSchema(var36);
    org.databene.jdbacl.dialect.DerbyDialect var40 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var42 = var40.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var43 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var44 = var43.getName();
    java.lang.String var45 = var40.formatValue((java.lang.Object)var43);
    var43.setName("'hi!'");
    java.util.List var48 = var43.getSchemas();
    org.databene.jdbacl.model.DBSchema var49 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var43);
    org.databene.jdbacl.model.DBTrigger var50 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var49);
    var50.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var53 = var50.getTriggerBody();
    java.lang.String var54 = var50.getColumnName();
    java.lang.String var55 = var50.getWhenClause();
    var36.addTrigger(var50);
    org.databene.jdbacl.model.DBTrigger var57 = new org.databene.jdbacl.model.DBTrigger("-1", var36);
    java.util.List var59 = var36.getSequences(true);
    java.util.List var60 = var8.getSequences(true, var59);
    java.util.List var62 = var8.getSequences(true);
    org.databene.jdbacl.model.DBSchema var63 = var8.getSchema();
    org.databene.jdbacl.sql.parser.SQLLexer var65 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var65.mCREATE_SEQUENCE();
    org.databene.jdbacl.dialect.DerbyDialect var69 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var71 = var69.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var72 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var73 = var72.getName();
    java.lang.String var74 = var69.formatValue((java.lang.Object)var72);
    var72.setName("'hi!'");
    java.util.List var77 = var72.getSchemas();
    org.databene.jdbacl.model.DBSchema var78 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var72);
    org.databene.jdbacl.model.DBTrigger var79 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var78);
    java.util.List var80 = var78.getPackages();
    java.util.List var81 = var65.toStrings(var80);
    java.util.List var82 = var8.getTables(true, var81);
    java.util.List var83 = var0.toStrings(var82);
    var0.mCOMMENT_TABLE();
    boolean var85 = var0.failed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test373");


    org.databene.jdbacl.sql.parser.SQLParser.drop_sequence_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.drop_sequence_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getStop();
    java.lang.Object var3 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test374");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var9 = var0.isDeterministicFKName("jdbc:h2:mem:select next value for 10");
    java.lang.String var13 = var0.regexQuery("drop sequence ", true, "alter sequence  restart with -1");
    boolean var15 = var0.isDeterministicUKName("select next value for SET GENERATOR . TO -1");
    java.lang.String var17 = var0.renderFetchSequenceValue("select next value for SET GENERATOR . TO -1");
    boolean var19 = var0.isDeterministicUKName("SET GENERATOR NOT drop sequence  ~ 'alter sequence  restart with -1' TO 99");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop sequence  ~ 'alter sequence  restart with -1'"+ "'", var13.equals("NOT drop sequence  ~ 'alter sequence  restart with -1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select nextval('select next value for SET GENERATOR . TO -1')"+ "'", var17.equals("select nextval('select next value for SET GENERATOR . TO -1')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test375");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.NameSpec var1 = org.databene.jdbacl.NameSpec.valueOf("NO_ACTION");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test376");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.lang.String var17 = var16.getStatus();
    java.util.List var18 = var16.getProcedures();
    var16.setObjectType("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    org.databene.jdbacl.model.Database var23 = var21.getDatabase();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var28 = var27.dropDDL();
    java.math.BigInteger var29 = var27.getMinValueIfNotDefault();
    boolean var30 = var21.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    org.databene.jdbacl.model.DBCatalog var31 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var32 = var31.getName();
    org.databene.jdbacl.model.Database var33 = var31.getDatabase();
    java.lang.String var34 = var31.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var36 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var38 = var36.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var39 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var40 = var39.getName();
    java.lang.String var41 = var36.formatValue((java.lang.Object)var39);
    var39.setName("'hi!'");
    java.util.List var44 = var39.getSchemas();
    org.databene.jdbacl.model.DBSchema var45 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var39);
    var31.removeSchema(var45);
    org.databene.jdbacl.dialect.DerbyDialect var49 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var51 = var49.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var52 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var53 = var52.getName();
    java.lang.String var54 = var49.formatValue((java.lang.Object)var52);
    var52.setName("'hi!'");
    java.util.List var57 = var52.getSchemas();
    org.databene.jdbacl.model.DBSchema var58 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var52);
    org.databene.jdbacl.model.DBTrigger var59 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var58);
    var59.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var62 = var59.getTriggerBody();
    java.lang.String var63 = var59.getColumnName();
    java.lang.String var64 = var59.getWhenClause();
    var45.addTrigger(var59);
    java.util.List var66 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var45);
    java.util.List var67 = var45.getTriggers();
    java.lang.String var68 = var45.getName();
    var21.removeSchema(var45);
    boolean var70 = var16.isIdentical((org.databene.jdbacl.model.DBObject)var21);
    org.databene.jdbacl.model.DBSchema var71 = new org.databene.jdbacl.model.DBSchema("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ", var21);
    var21.setName("CREATE SEQUENCE CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "drop sequence "+ "'", var28.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var68.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test377");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var3.setCharPositionInLine(1);
    java.lang.String var6 = var3.toString();
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    var0.mCOLUMN_SPEC();
    java.lang.String var10 = var0.getCharErrorDisplay(309);
    var0.mALTER_TABLE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "DROP SEQUENCE "+ "'", var6.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "'\u0135'"+ "'", var10.equals("'\u0135'"));

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test378");


    org.databene.jdbacl.dialect.DerbyDialect var0 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var2 = var0.isDeterministicIndexName(".");
    boolean var4 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE 10 restart with 1");
    java.lang.String var5 = var0.getSystem();
    boolean var8 = var0.isDefaultCatalog("select gen_id('d', 1) from RDB$DATABASE;", "alter sequence NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.') restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "derby"+ "'", var5.equals("derby"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test379");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.join("", "", var12, "hi!", "10", var16);
    org.databene.jdbacl.model.DBUniqueConstraint var18 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var4, "select nextval('')", false, var12);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    java.lang.String var30 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var24);
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String[] var41 = new java.lang.String[] { ""};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.join("", "", var37, "hi!", "10", var41);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var41);
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var24, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var41);
    org.databene.jdbacl.identity.NaturalPkIdentity var46 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var47 = var46.getName();
    boolean var49 = var46.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    var50.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var53 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var54 = var53.getForeignKeyConstraints();
    var50.addReferrer((org.databene.jdbacl.model.DBTable)var53);
    java.lang.String[] var61 = new java.lang.String[] { ""};
    java.lang.String[] var65 = new java.lang.String[] { ""};
    java.lang.String var66 = org.databene.jdbacl.SQLUtil.join("", "", var61, "hi!", "10", var65);
    org.databene.jdbacl.model.DBUniqueConstraint var67 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var53, "select nextval('')", false, var61);
    java.lang.String var68 = var46.extractNK((java.lang.Object[])var61);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var4, var24, (java.lang.Object[])var61);
    org.databene.jdbacl.identity.UniqueKeyIdentity var70 = new org.databene.jdbacl.identity.UniqueKeyIdentity("drop generator sequence", var61);
    java.lang.String var71 = var70.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi! as 10 on . = 10."+ "'", var17.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "."+ "'", var30.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi! as 10 on . = 10."+ "'", var42.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "."+ "'", var43.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var44.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi! as 10 on . = 10."+ "'", var66.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var69.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "drop generator sequence"+ "'", var71.equals("drop generator sequence"));

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test380");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.sql.parser.SQLLexer var32 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var34 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var34.release((-1));
    boolean var38 = var32.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var34, 0);
    int var39 = var32.getRuleMemoizationCacheSize();
    boolean var40 = var31.equals((java.lang.Object)var39);
    java.lang.String var41 = var31.toString();
    java.lang.String var42 = var31.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var41.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var42.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test381");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var4 = var0.getSystem();
    boolean var6 = var0.isDeterministicUKName("select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual");
    org.databene.jdbacl.dialect.Derby10_6Dialect var7 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var10 = var7.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var12 = var7.renderDropSequence("NOT drop generator sequence ~ 'hi!'");
    java.lang.String var14 = var7.renderFetchSequenceValue("-1");
    java.lang.String var16 = var7.renderDropSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    org.databene.jdbacl.model.DBSequence var20 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var21 = var20.dropDDL();
    java.lang.String var22 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var20);
    var20.setName("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL");
    var20.setCache((java.lang.Long)100L);
    java.lang.String var27 = var7.renderCreateSequence(var20);
    java.lang.String var28 = var0.renderCreateSequence(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "derby"+ "'", var4.equals("derby"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"+ "'", var12.equals("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "VALUES (NEXT VALUE FOR -1)"+ "'", var14.equals("VALUES (NEXT VALUE FOR -1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. RESTRICT"+ "'", var16.equals("DROP SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "drop sequence "+ "'", var21.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL AS BIGINT"+ "'", var27.equals("CREATE SEQUENCE hi! as 10 on . = 10..CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL AS BIGINT"+ "'", var28.equals("CREATE SEQUENCE hi! as 10 on . = 10..CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL AS BIGINT"));

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test382");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    java.lang.String[] var43 = new java.lang.String[] { ""};
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.join("", "", var43, "hi!", "10", var47);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var43);
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("", "", var56, "hi!", "10", var60);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var60);
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var43, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var60);
    boolean var64 = var36.equals((java.lang.Object)"drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    var66.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var69 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var70 = var69.getForeignKeyConstraints();
    var66.addReferrer((org.databene.jdbacl.model.DBTable)var69);
    java.lang.String[] var77 = new java.lang.String[] { ""};
    java.lang.String[] var81 = new java.lang.String[] { ""};
    java.lang.String var82 = org.databene.jdbacl.SQLUtil.join("", "", var77, "hi!", "10", var81);
    org.databene.jdbacl.model.DBUniqueConstraint var83 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var69, "select nextval('')", false, var77);
    org.databene.jdbacl.model.DBDataType var86 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var87 = var86.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var88 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var69, var86);
    java.lang.String var89 = var86.getName();
    var36.setType(var86);
    var36.setVersionColumn(false);
    boolean var93 = var36.isVersionColumn();
    java.lang.String var94 = org.databene.jdbacl.SQLUtil.renderColumn((org.databene.jdbacl.model.DBColumn)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi! as 10 on . = 10."+ "'", var48.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "."+ "'", var49.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "."+ "'", var62.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var63.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi! as 10 on . = 10."+ "'", var82.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "DROP SEQUENCE "+ "'", var89.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL"+ "'", var94.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL"));

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test383");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    java.util.List var17 = var15.getProcedures();
    var15.setObjectType("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    org.databene.jdbacl.model.Database var22 = var20.getDatabase();
    org.databene.jdbacl.model.DBSequence var26 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var27 = var26.dropDDL();
    java.math.BigInteger var28 = var26.getMinValueIfNotDefault();
    boolean var29 = var20.isIdentical((org.databene.jdbacl.model.DBObject)var26);
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    org.databene.jdbacl.model.Database var32 = var30.getDatabase();
    java.lang.String var33 = var30.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    org.databene.jdbacl.model.DBSchema var44 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var38);
    var30.removeSchema(var44);
    org.databene.jdbacl.dialect.DerbyDialect var48 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var50 = var48.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var51 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var52 = var51.getName();
    java.lang.String var53 = var48.formatValue((java.lang.Object)var51);
    var51.setName("'hi!'");
    java.util.List var56 = var51.getSchemas();
    org.databene.jdbacl.model.DBSchema var57 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var51);
    org.databene.jdbacl.model.DBTrigger var58 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var57);
    var58.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var61 = var58.getTriggerBody();
    java.lang.String var62 = var58.getColumnName();
    java.lang.String var63 = var58.getWhenClause();
    var44.addTrigger(var58);
    java.util.List var65 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var44);
    java.util.List var66 = var44.getTriggers();
    java.lang.String var67 = var44.getName();
    var20.removeSchema(var44);
    boolean var69 = var15.isIdentical((org.databene.jdbacl.model.DBObject)var20);
    java.lang.String var70 = var15.getObjectId();
    var15.setStatus("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    java.lang.String var73 = var15.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "drop sequence "+ "'", var27.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var67.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var73.equals("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test384");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    int var3 = var1.LT(14);
    int var4 = var1.size();
    var1.seek(32);
    var1.setCharPositionInLine(76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 85);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test385");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    java.math.BigInteger var6 = var3.getIncrement();
    java.math.BigInteger var7 = var3.getStartIfNotDefault();
    java.lang.String var8 = var3.getCatalogName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence "+ "'", var8.equals("drop sequence "));

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test386");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    org.databene.jdbacl.model.DBTrigger var30 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var29);
    var30.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var33 = var30.getTriggerBody();
    java.lang.String var34 = var30.getColumnName();
    java.lang.String var35 = var30.getWhenClause();
    var16.addTrigger(var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("-1", var16);
    java.util.List var39 = var16.getSequences(false);
    org.databene.jdbacl.dialect.DerbyDialect var43 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var45 = var43.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var46 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var47 = var46.getName();
    java.lang.String var48 = var43.formatValue((java.lang.Object)var46);
    var46.setName("'hi!'");
    java.util.List var51 = var46.getSchemas();
    org.databene.jdbacl.model.DBSchema var52 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var46);
    org.databene.jdbacl.model.DBTrigger var53 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var52);
    java.util.List var54 = var52.getPackages();
    org.databene.jdbacl.model.DBPackage var55 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var52);
    var16.addPackage(var55);
    org.databene.jdbacl.model.DBProcedure var57 = new org.databene.jdbacl.model.DBProcedure("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ", var55);
    var57.setOverload("table as NOT REGEXP_MATCHES(sequence, '') on select next value for (\"sequence\"). = NOT REGEXP_MATCHES(sequence, '').DROP SEQUENCE ");
    java.lang.String var60 = var57.getObjectId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test387");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    var0.mCREATE_SEQUENCE();
    var0.mCREATE_SEQUENCE();
    var0.skip();
    var0.endResync();
    org.databene.jdbacl.model.TableContainerSupport var11 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var13 = var11.getTables(false);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var17.setName("10");
    java.math.BigInteger var20 = var17.getIncrement();
    java.lang.Boolean var21 = var17.isCycle();
    java.lang.String var22 = var17.dropDDL();
    org.databene.jdbacl.model.DBSequence var26 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var26.setCache((java.lang.Long)100L);
    java.lang.String var29 = var26.getObjectType();
    java.math.BigInteger var30 = var26.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var34 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var34.setName("10");
    java.math.BigInteger var37 = var34.getIncrement();
    java.math.BigInteger var38 = var34.getIncrement();
    var26.setLastNumber(var38);
    var17.setIncrement(var38);
    var11.addSequence(var17);
    org.databene.jdbacl.model.DBTable var43 = var11.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    org.databene.jdbacl.model.TableContainer var45 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var46 = var45.getTables();
    java.util.List var48 = var45.getTables(false);
    var11.addSubContainer(var45);
    java.util.List var51 = var45.getSequences(true);
    java.util.List var52 = var0.toStrings(var51);
    var0.skip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "drop sequence 10"+ "'", var22.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "sequence"+ "'", var29.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test388");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var5, (-1), "hi! identity by primary key");
    java.util.Set var26 = var5.getForeignKeyConstraints();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test389");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var22 = var21.getType();
    org.databene.jdbacl.model.DBDataType var25 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var26 = var25.isAlpha();
    java.lang.String var27 = var25.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var28 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var31 = var28.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var33 = var28.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var34 = var25.equals((java.lang.Object)var33);
    var21.setType(var25);
    org.databene.jdbacl.model.DBDataType var38 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var39 = var38.isAlpha();
    java.lang.String var40 = var38.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var41 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var44 = var41.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var46 = var41.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var47 = var38.equals((java.lang.Object)var46);
    boolean var48 = var38.isLOB();
    var21.setType(var38);
    boolean var50 = var38.isLOB();
    java.lang.String var51 = var38.getName();
    int var52 = var38.getJdbcType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "DROP SEQUENCE "+ "'", var27.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var33.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "DROP SEQUENCE "+ "'", var40.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var46.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "DROP SEQUENCE "+ "'", var51.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test390");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var80 = new org.databene.jdbacl.ResultSetConverter(var78);
    org.databene.jdbacl.ResultSetConverter var82 = new org.databene.jdbacl.ResultSetConverter(var78, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var84 = java.lang.Enum.<java.lang.Enum>valueOf(var78, "schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test391");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    java.lang.String var4 = var0.renderFetchSequenceValue("Identity definition by unique key: select next value for 10");
    boolean var6 = var0.isDeterministicPKName("drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    boolean var8 = var0.isDeterministicUKName("jdbc:h2:mem:NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ");
    boolean var10 = var0.isDeterministicCheckName("call next value for select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL");
    java.lang.String var12 = var0.renderFetchSequenceValue("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "select Identity definition by unique key: select next value for 10.nextval from dual"+ "'", var4.equals("select Identity definition by unique key: select next value for 10.nextval from dual"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "select jdbc:h2:mem:hi! as 10 on . = 10.-identity-..nextval from dual"+ "'", var12.equals("select jdbc:h2:mem:hi! as 10 on . = 10.-identity-..nextval from dual"));

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test392");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String var18 = var17.toString();
    boolean var19 = var17.isNameDeterministic();
    var17.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var30 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var30.setSchemaName("alter sequence hi! restart with 1");
    boolean var33 = var17.equals((java.lang.Object)var30);
    boolean var34 = var17.isNameDeterministic();
    java.lang.String[] var35 = var17.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var18.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test393");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    java.math.BigInteger var6 = var3.getIncrement();
    java.lang.Boolean var7 = var3.isCycle();
    java.lang.String var8 = var3.dropDDL();
    java.math.BigInteger var9 = var3.getMaxValueIfNotDefault();
    org.databene.jdbacl.dialect.Derby10_6Dialect var10 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var13 = var10.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var15 = var10.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var19 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var19.setName("10");
    java.math.BigInteger var22 = var19.getIncrement();
    java.math.BigInteger var23 = var19.getIncrement();
    java.lang.String var24 = var10.renderCreateSequence(var19);
    java.math.BigInteger var25 = var19.getMaxValue();
    java.lang.String var26 = var19.getCatalogName();
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var30.setName("10");
    java.math.BigInteger var33 = var30.getIncrement();
    java.math.BigInteger var34 = var30.getStartIfNotDefault();
    java.lang.Boolean var35 = var30.isCycle();
    java.math.BigInteger var36 = var30.getStart();
    var19.setIncrement(var36);
    org.databene.jdbacl.dialect.OracleDialect var38 = new org.databene.jdbacl.dialect.OracleDialect();
    org.databene.jdbacl.model.DBSequence var42 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var42.setCache((java.lang.Long)100L);
    java.lang.String var45 = var42.getObjectType();
    java.math.BigInteger var46 = var42.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var50 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var50.setName("10");
    java.math.BigInteger var53 = var50.getIncrement();
    java.math.BigInteger var54 = var50.getIncrement();
    var42.setLastNumber(var54);
    var42.setOrder((java.lang.Boolean)false);
    java.lang.String var58 = var38.renderCreateSequence(var42);
    org.databene.jdbacl.model.DBSequence var62 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var62.setName("10");
    java.math.BigInteger var65 = var62.getIncrement();
    org.databene.jdbacl.model.DBSequence var69 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var69.setName("10");
    java.math.BigInteger var72 = var69.getIncrement();
    java.math.BigInteger var73 = var69.getIncrement();
    var62.setStart(var73);
    var42.setMinValue(var73);
    var19.setLastNumber(var73);
    var3.setStart(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence 10"+ "'", var8.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var15.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var24.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "drop sequence "+ "'", var26.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "sequence"+ "'", var45.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"+ "'", var58.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test394");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var4 = var1.isDefaultSchema("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)", "alter sequence hi! restart with 1");
    boolean var5 = var1.isSequenceSupported();
    boolean var8 = var1.isDefaultSchema("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'", "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')");
    boolean var10 = var1.isDeterministicPKName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MINVALUE 1");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var12 = var1.renderFetchSequenceValue("drop sequence Identity definition by NK-PK query: NOT drop generator sequence ~ 'hi!'");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test395");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.setBacktrackingLevel(1);
    var0.mT__75();
    java.lang.String var19 = var0.getCharErrorDisplay(41);
    var0.mT__131();
    var0.mCOLUMN_SPEC();
    var0.mT__136();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "')'"+ "'", var19.equals("')'"));

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test396");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.util.List var16 = var15.getComponents();
    var15.setObjectType("-1");
    java.util.List var19 = var15.getComponents();
    java.lang.String var20 = var15.getStatus();
    var15.setObjectType("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    org.databene.jdbacl.dialect.DerbyDialect var27 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var29 = var27.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    java.lang.String var32 = var27.formatValue((java.lang.Object)var30);
    var30.setName("'hi!'");
    java.util.List var35 = var30.getSchemas();
    org.databene.jdbacl.model.DBSchema var36 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var36);
    java.util.List var38 = var36.getPackages();
    org.databene.jdbacl.model.DBPackage var39 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var36);
    java.util.List var40 = var39.getComponents();
    org.databene.jdbacl.model.DBProcedure var41 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var39);
    java.lang.String var42 = var41.getSubProgramId();
    var41.setSubProgramId("jdbc:h2:mem:select next value for 10");
    var41.setSubProgramId("NOT drop sequence  ~ 'alter sequence  restart with -1'");
    java.lang.String var47 = var41.getSubProgramId();
    java.lang.String var48 = var41.getObjectId();
    var15.addProcedure(var41);
    java.lang.String var50 = var41.getOverload();
    java.lang.String var51 = var41.getObjectId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NOT drop sequence  ~ 'alter sequence  restart with -1'"+ "'", var47.equals("NOT drop sequence  ~ 'alter sequence  restart with -1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test397");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var32 = var31.toString();
    org.databene.jdbacl.model.DBCatalog var33 = var31.getCatalog();
    java.lang.String var34 = var31.getDoc();
    org.databene.jdbacl.model.DBSchema var35 = var31.getSchema();
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var39.setName("10");
    var39.setCycle((java.lang.Boolean)false);
    var35.addSequence(var39);
    org.databene.jdbacl.model.DBCatalog var45 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var46 = var45.getName();
    org.databene.jdbacl.model.Database var47 = var45.getDatabase();
    java.lang.String var48 = var45.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var50 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var52 = var50.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var53 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var54 = var53.getName();
    java.lang.String var55 = var50.formatValue((java.lang.Object)var53);
    var53.setName("'hi!'");
    java.util.List var58 = var53.getSchemas();
    org.databene.jdbacl.model.DBSchema var59 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var53);
    var45.removeSchema(var59);
    java.util.List var62 = var59.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var66 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var68 = var66.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var69 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var70 = var69.getName();
    java.lang.String var71 = var66.formatValue((java.lang.Object)var69);
    var69.setName("'hi!'");
    java.util.List var74 = var69.getSchemas();
    org.databene.jdbacl.model.DBSchema var75 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var69);
    org.databene.jdbacl.model.DBTrigger var76 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var75);
    java.util.List var77 = var75.getPackages();
    org.databene.jdbacl.model.DBPackage var78 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var75);
    java.util.List var79 = var78.getComponents();
    var59.addPackage(var78);
    java.lang.String var81 = var78.getStatus();
    var35.addPackage(var78);
    var78.setStatus("select   REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'.nextval from dual");
    java.util.List var85 = var78.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var32.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var34.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test398");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    java.util.List var17 = var15.getProcedures();
    var15.setObjectType("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    org.databene.jdbacl.model.Database var22 = var20.getDatabase();
    org.databene.jdbacl.model.DBSequence var26 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var27 = var26.dropDDL();
    java.math.BigInteger var28 = var26.getMinValueIfNotDefault();
    boolean var29 = var20.isIdentical((org.databene.jdbacl.model.DBObject)var26);
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    org.databene.jdbacl.model.Database var32 = var30.getDatabase();
    java.lang.String var33 = var30.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    org.databene.jdbacl.model.DBSchema var44 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var38);
    var30.removeSchema(var44);
    org.databene.jdbacl.dialect.DerbyDialect var48 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var50 = var48.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var51 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var52 = var51.getName();
    java.lang.String var53 = var48.formatValue((java.lang.Object)var51);
    var51.setName("'hi!'");
    java.util.List var56 = var51.getSchemas();
    org.databene.jdbacl.model.DBSchema var57 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var51);
    org.databene.jdbacl.model.DBTrigger var58 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var57);
    var58.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var61 = var58.getTriggerBody();
    java.lang.String var62 = var58.getColumnName();
    java.lang.String var63 = var58.getWhenClause();
    var44.addTrigger(var58);
    java.util.List var65 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var44);
    java.util.List var66 = var44.getTriggers();
    java.lang.String var67 = var44.getName();
    var20.removeSchema(var44);
    boolean var69 = var15.isIdentical((org.databene.jdbacl.model.DBObject)var20);
    java.util.List var70 = var20.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "drop sequence "+ "'", var27.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var67.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test399");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    org.databene.jdbacl.model.DBTable var44 = var41.getRefereeTable();
    java.lang.String[] var45 = var41.getForeignKeyColumnNames();
    org.databene.jdbacl.dialect.PostgreSQLDialect var46 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var49 = var46.isDefaultCatalog("", "");
    java.lang.String var51 = var46.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var52 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var53 = var46.formatValue((java.lang.Object)var52);
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var52);
    org.databene.jdbacl.model.Database var55 = var52.getDatabase();
    org.databene.jdbacl.dialect.DerbyDialect var59 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var61 = var59.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var62 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var63 = var62.getName();
    java.lang.String var64 = var59.formatValue((java.lang.Object)var62);
    var62.setName("'hi!'");
    java.util.List var67 = var62.getSchemas();
    org.databene.jdbacl.model.DBSchema var68 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var62);
    org.databene.jdbacl.model.DBTrigger var69 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var68);
    java.lang.String var70 = var68.getName();
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var68);
    var52.addSchema(var68);
    java.util.List var73 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var68);
    org.databene.jdbacl.dialect.DerbyDialect var76 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var78 = var76.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var79 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var80 = var79.getName();
    java.lang.String var81 = var76.formatValue((java.lang.Object)var79);
    var79.setName("'hi!'");
    java.util.List var84 = var79.getSchemas();
    org.databene.jdbacl.model.DBSchema var85 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var79);
    org.databene.jdbacl.model.DBTrigger var86 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var85);
    var86.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var89 = var86.getTriggerBody();
    java.lang.String var90 = var86.getActionType();
    var68.addTrigger(var86);
    boolean var92 = var41.isIdentical((org.databene.jdbacl.model.DBObject)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "drop sequence "+ "'", var51.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "null"+ "'", var54.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var70.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test400");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var3 = var1.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var6 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", (-1));
    org.databene.jdbacl.SQLScriptException var9 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var6, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 69);
    org.databene.jdbacl.SQLScriptException var11 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var14 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var11, "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", 100);
    var9.addSuppressed((java.lang.Throwable)var14);
    org.databene.jdbacl.SQLScriptException var17 = var9.withUri("DROP SEQUENCE (-1,1)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test401");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.emitErrorMessage("call next value for 'hi!'");
    var0.mCOLUMN_SPEC();
    java.lang.String var6 = var0.getCharErrorDisplay(69);
    var0.mDROP_SEQUENCE();
    java.util.List var8 = var0.getRuleInvocationStack();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var10 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var12 = var10.LA(10);
    java.lang.String var13 = var10.getText();
    var0.setCharStream((org.antlr.runtime.CharStream)var10);
    java.lang.String var15 = var0.getSourceName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__62();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "'E'"+ "'", var6.equals("'E'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test402");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var2 = org.databene.jdbacl.DBUtil.connect("REGEXP_LIKE(select next value for SET GENERATOR.TO - 1, 'NOT drop sequence  ~ 'alter sequence  restart with -1'')", true);
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test403");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    var10.mT__78();
    var10.mT__124();
    org.databene.jdbacl.sql.parser.SQLLexer var21 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var21.mCREATE_TABLE();
    var21.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var25 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var27 = var25.LT(10);
    var21.setCharStream((org.antlr.runtime.CharStream)var25);
    int var30 = var25.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var31 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var25);
    var25.release(0);
    int var34 = var25.getLine();
    java.lang.String var35 = var25.toString();
    var10.matchAny((org.antlr.runtime.IntStream)var25);
    var10.mGE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "DROP SEQUENCE "+ "'", var35.equals("DROP SEQUENCE "));

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test404");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.emitErrorMessage("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")");
    var10.mBEFORE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test405");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var0.consumeUntil((org.antlr.runtime.IntStream)var9, 100);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    var0.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var22);
    var0.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var25 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var25.mCREATE_TABLE();
    var25.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var29 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var31 = var29.LT(10);
    var25.setCharStream((org.antlr.runtime.CharStream)var29);
    var0.consumeUntil((org.antlr.runtime.IntStream)var29, 1);
    org.databene.jdbacl.sql.parser.SQLLexer var35 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var29);
    var35.mORA_CONFIGS();
    java.lang.String var37 = var35.getSourceName();
    int var38 = var35.getNumberOfSyntaxErrors();
    int var39 = var35.getLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test406");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var3 = var1.isDeterministicUKName("EQUEN");
    boolean var5 = var1.isDeterministicFKName("DROP SEQUENCE ");
    boolean var7 = var1.isDeterministicPKName("org.databene.jdbacl.SQLScriptException: Error in execution of script line 0: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    boolean var9 = var1.isDeterministicUKName("  REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test407");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var3 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, 1);
    java.lang.Throwable[] var4 = var3.getSuppressed();
    java.util.List var6 = org.antlr.runtime.BaseRecognizer.getRuleInvocationStack((java.lang.Throwable)var3, "org.databene.jdbacl.SQLScriptException: Error in execution of script line 0: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    org.databene.jdbacl.SQLScriptException var9 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var3, "SET GENERATOR catalog TO -2 ()", 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test408");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setTableOwner("call next value for 'hi!'");
    java.lang.String var15 = var12.getDescription();
    java.lang.String var16 = var12.getActionType();
    java.lang.String var17 = var12.getBaseObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test409");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var3 = var2.getForeignKeyConstraints();
    java.util.List var4 = var2.getColumns();
    org.databene.jdbacl.model.DefaultDBColumn var7 = new org.databene.jdbacl.model.DefaultDBColumn("call next value for 'hi!'", (org.databene.jdbacl.model.DBTable)var2, 100, "select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    org.databene.jdbacl.model.TableContainer var9 = new org.databene.jdbacl.model.TableContainer("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    var10.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var14 = var13.getForeignKeyConstraints();
    var10.addReferrer((org.databene.jdbacl.model.DBTable)var13);
    java.lang.String[] var21 = new java.lang.String[] { ""};
    java.lang.String[] var25 = new java.lang.String[] { ""};
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.join("", "", var21, "hi!", "10", var25);
    org.databene.jdbacl.model.DBUniqueConstraint var27 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var13, "select nextval('')", false, var21);
    var13.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var32 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var33 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var32);
    org.databene.jdbacl.model.DBUniqueConstraint var34 = var13.getUniqueConstraint(var32);
    var9.addTable((org.databene.jdbacl.model.DBTable)var13);
    java.util.List var36 = var9.getComponents();
    org.databene.jdbacl.model.DBTable var38 = var9.getTable("select nextval('select next value for SET GENERATOR . TO -1')");
    var2.setOwner((org.databene.jdbacl.model.CompositeDBObject)var9);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    java.lang.String[] var45 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var49 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var52 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var53 = var52.getValue();
    org.databene.jdbacl.sql.ColumnExpression var56 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var57 = var56.getValue();
    org.databene.jdbacl.sql.BetweenExpression var58 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var49, (org.databene.script.Expression)var52, (org.databene.script.Expression)var56);
    org.databene.jdbacl.sql.ColumnExpression var61 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var64 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var65 = var64.getValue();
    org.databene.jdbacl.sql.ColumnExpression var68 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var69 = var68.getValue();
    org.databene.jdbacl.sql.BetweenExpression var70 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var61, (org.databene.script.Expression)var64, (org.databene.script.Expression)var68);
    org.databene.jdbacl.sql.ColumnExpression var73 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var76 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var77 = var76.getValue();
    org.databene.jdbacl.sql.ColumnExpression var80 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var81 = var80.getValue();
    org.databene.jdbacl.sql.BetweenExpression var82 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var73, (org.databene.script.Expression)var76, (org.databene.script.Expression)var80);
    org.databene.jdbacl.sql.BetweenExpression var83 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var56, (org.databene.script.Expression)var64, (org.databene.script.Expression)var76);
    org.databene.script.Expression[] var84 = new org.databene.script.Expression[] { var56};
    org.databene.jdbacl.sql.FunctionInvocation var85 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var84);
    java.lang.String var86 = org.databene.jdbacl.SQLUtil.renderWhereClause(var45, (java.lang.Object[])var84);
    org.databene.jdbacl.sql.FunctionInvocation var87 = new org.databene.jdbacl.sql.FunctionInvocation("select next value for SET GENERATOR . TO -1", var84);
    boolean var88 = var42.equals((java.lang.Object)"select next value for SET GENERATOR . TO -1");
    boolean var89 = var42.isLOB();
    java.lang.String var90 = var42.toString();
    org.databene.jdbacl.model.DefaultDBColumn var93 = new org.databene.jdbacl.model.DefaultDBColumn("'\\n'", (org.databene.jdbacl.model.DBTable)var2, var42, (java.lang.Integer)79, (java.lang.Integer)69);
    java.util.Set var94 = var2.getForeignKeyConstraints();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi! as 10 on . = 10."+ "'", var26.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var33.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "sequence"+ "'", var53.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "sequence"+ "'", var57.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "sequence"+ "'", var65.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "sequence"+ "'", var69.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "sequence"+ "'", var77.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "sequence"+ "'", var81.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var86.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "DROP SEQUENCE "+ "'", var90.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test410");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    org.databene.jdbacl.model.TableContainer var10 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var11 = var10.getTables();
    org.databene.jdbacl.model.TableContainer var12 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var10);
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    var10.addTable((org.databene.jdbacl.model.DBTable)var16);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    java.lang.String var30 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var24);
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var34 = var33.getTables();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var33);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    var33.addTable((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var45 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var45);
    org.databene.jdbacl.model.DBForeignKeyConstraint var47 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var16, var24, (org.databene.jdbacl.model.DBTable)var39, var45);
    java.lang.String[] var48 = var47.getRefereeColumnNames();
    var0.traceOut("NOT REGEXP_MATCHES(sequence, '')", 6, (java.lang.Object)var48);
    org.databene.jdbacl.sql.ColumnExpression var52 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var55 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var56 = var55.getValue();
    org.databene.jdbacl.sql.ColumnExpression var59 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var60 = var59.getValue();
    org.databene.jdbacl.sql.BetweenExpression var61 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var52, (org.databene.script.Expression)var55, (org.databene.script.Expression)var59);
    org.databene.script.Expression[] var62 = var61.getSourceExpressions();
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.renderWhereClause(var48, (java.lang.Object[])var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "."+ "'", var30.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var46.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "sequence"+ "'", var56.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "sequence"+ "'", var60.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "DROP SEQUENCE  = \"sequence\""+ "'", var63.equals("DROP SEQUENCE  = \"sequence\""));

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test411");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    java.lang.String var4 = var0.renderFetchSequenceValue("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0");
    boolean var6 = var0.isDeterministicPKName("alter sequence drop generator sequence restart with 100");
    boolean var7 = var0.supportsRegex();
    boolean var8 = var0.isSequenceBoundarySupported();
    boolean var9 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "select next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0"+ "'", var4.equals("select next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test412");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var1 = var0.getForeignKeyConstraints();
    var0.setDoc("drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.DBSchema var33 = var26.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var41 = var40.getForeignKeyConstraints();
    var37.addReferrer((org.databene.jdbacl.model.DBTable)var40);
    org.databene.jdbacl.model.DBDataType var45 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var46 = var45.isAlpha();
    java.lang.String var47 = var45.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var48 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var51 = var48.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var53 = var48.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var54 = var45.equals((java.lang.Object)var53);
    org.databene.jdbacl.model.DefaultDBColumn var57 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var40, var45, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var58 = var57.getType();
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String var75 = org.databene.jdbacl.SQLUtil.join("", "", var70, "hi!", "10", var74);
    org.databene.jdbacl.model.DBUniqueConstraint var76 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var62, "select nextval('')", false, var70);
    var76.addColumnName("sequence");
    var57.addUkConstraint(var76);
    java.lang.String[] var80 = var76.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var81 = new org.databene.jdbacl.model.DBUniqueIndex("select nextval('')", false, var76);
    var26.removeIndex((org.databene.jdbacl.model.DBIndex)var81);
    java.util.Set var84 = var26.getUniqueConstraints(false);
    java.util.Set var85 = var26.getForeignKeyConstraints();
    java.lang.String[] var90 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var91 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var90);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var92 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var26, "drop sequence 10", true, var90);
    var0.setPrimaryKey(var92);
    java.util.List var94 = var0.getColumns();
    var0.setDoc("DROP SEQUENCE select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; RESTRICT");
    java.util.Set var98 = var0.getUniqueConstraints(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "DROP SEQUENCE "+ "'", var47.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var53.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi! as 10 on . = 10."+ "'", var75.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test413");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var5 = var4.toString();
    java.lang.String[] var6 = var4.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var5.equals("CONSTRAINT columnCHECK \"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test414");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var6.setSchemaName("drop generator .");
    var6.setLazy(false);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test415");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    var0.mCREATE_INDEX();
    var0.matchRange(14, 85);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__116();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test417");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var3 = var0.renderSetSequenceValue(".", 0L);
    boolean var6 = var0.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    boolean var9 = var0.isDefaultCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    boolean var12 = var0.isDefaultSchema("alter sequence drop sequence 10 restart with 0", "DROP SEQUENCE ");
    java.lang.String var13 = var0.getJDBCDriverClass();
    boolean var14 = var0.isSequenceSupported();
    boolean var16 = var0.isDeterministicFKName("org.databene.jdbacl.SQLScriptException: Error in execution of script line 69: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR . TO -1"+ "'", var3.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "org.firebirdsql.jdbc.FBDriver"+ "'", var13.equals("org.firebirdsql.jdbc.FBDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test418");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mVARCHAR2();
    var10.mT__77();
    var10.mT__130();
    var10.mT__72();
    boolean var20 = var10.failed();
    var10.mT__62();
    var10.setText("DROP SEQUENCE (100)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test419");


    org.databene.jdbacl.JDBCConnectData var4 = new org.databene.jdbacl.JDBCConnectData("CREATE SEQUENCE ", "null[DROP SEQUENCE ]", "alter sequence NOT drop generator sequence ~ 'hi!' restart with 10", "CREATE SEQUENCE ");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var5 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var4);
    var5.setImportingPackages(false);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test420");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var40.addColumnName("sequence");
    var21.addUkConstraint(var40);
    java.lang.Integer var44 = var21.getFractionDigits();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1)+ "'", var44.equals((-1)));

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test421");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var29 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var30 = var29.getValue();
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.BetweenExpression var35 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var26, (org.databene.script.Expression)var29, (org.databene.script.Expression)var33);
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var17, (org.databene.script.Expression)var29);
    boolean var37 = var9.isConstant();
    java.lang.Object var38 = var9.getValue();
    org.databene.jdbacl.identity.xml.IdentityParseContext var39 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var40 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var39.addParser((org.databene.webdecs.xml.XMLElementParser)var40);
    java.lang.Object[] var43 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("drop sequence 10");
    java.lang.Object[] var45 = var39.createSubPath(var43, (java.lang.Object)(byte)(-1));
    java.util.Set var46 = var39.entrySet();
    java.lang.Object var47 = var9.evaluate((org.databene.commons.Context)var39);
    java.lang.String var48 = var9.getColumnName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "sequence"+ "'", var38.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sequence"+ "'", var47.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "sequence"+ "'", var48.equals("sequence"));

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test422");


    org.databene.jdbacl.identity.NkPkQueryIdentity var2 = new org.databene.jdbacl.identity.NkPkQueryIdentity("select nextval('drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT') REGEXP '(select next value for 10)'", "'\u0135'");
    java.lang.String var3 = var2.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Identity definition by NK-PK query: '\u0135'"+ "'", var3.equals("Identity definition by NK-PK query: '\u0135'"));

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test423");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test424");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var40.addColumnName("sequence");
    var21.addUkConstraint(var40);
    org.databene.jdbacl.model.DBDataType var44 = var21.getType();
    boolean var45 = var21.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test425");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.dialect.Derby10_6Dialect var6 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var9 = var6.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var11 = var6.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.lang.String var19 = var6.renderCreateSequence(var15);
    java.lang.String var20 = var15.getSchemaName();
    java.lang.String var21 = var0.renderCreateSequence(var15);
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var26 = var25.dropDDL();
    java.math.BigInteger var27 = var25.getMinValueIfNotDefault();
    java.lang.String var28 = var0.renderCreateSequence(var25);
    org.databene.jdbacl.dialect.OracleDialect var29 = new org.databene.jdbacl.dialect.OracleDialect();
    org.databene.jdbacl.model.DBSequence var33 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var33.setCache((java.lang.Long)100L);
    java.lang.String var36 = var33.getObjectType();
    java.math.BigInteger var37 = var33.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var41 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var41.setName("10");
    java.math.BigInteger var44 = var41.getIncrement();
    java.math.BigInteger var45 = var41.getIncrement();
    var33.setLastNumber(var45);
    var33.setOrder((java.lang.Boolean)false);
    java.lang.String var49 = var29.renderCreateSequence(var33);
    org.databene.jdbacl.model.DBSequence var53 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var53.setName("10");
    java.math.BigInteger var56 = var53.getIncrement();
    org.databene.jdbacl.model.DBSequence var60 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var60.setName("10");
    java.math.BigInteger var63 = var60.getIncrement();
    java.math.BigInteger var64 = var60.getIncrement();
    var53.setStart(var64);
    var33.setMinValue(var64);
    var25.setMinValue(var64);
    var25.setCycle((java.lang.Boolean)false);
    java.lang.Boolean var70 = var25.isOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi! as 10 on . = 10."+ "'", var20.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var21.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "drop sequence "+ "'", var26.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "CREATE SEQUENCE "+ "'", var28.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "sequence"+ "'", var36.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"+ "'", var49.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test426");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    boolean var7 = var0.isDeterministicUKName("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var10 = var0.isDefaultCatalog("select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')", "NaturalPkIdentity(hi!)");
    boolean var13 = var0.isDefaultCatalog("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "alter sequence hi! restart with 1");
    boolean var16 = var0.isDefaultSchema("CONSTRAINT \"select nextval('')\" ", "null [ false ]");
    boolean var18 = var0.isDeterministicPKName("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'");
    boolean var20 = var0.isDeterministicFKName("select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test427");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getDriverClass();
    java.lang.String var2 = var0.getDriverClass();
    java.lang.String[] var3 = var0.getJars();
    java.lang.String var4 = var0.getUrlPattern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test428");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__111();
    org.databene.jdbacl.sql.parser.SQLLexer var17 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var19 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var19.release((-1));
    boolean var23 = var17.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var19, 0);
    int var24 = var17.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var26 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var26.release((-1));
    var17.consumeUntil((org.antlr.runtime.IntStream)var26, 14);
    boolean var32 = var10.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var26, 3);
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var34 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    java.lang.String var35 = var34.getSourceName();
    int var36 = var34.index();
    var10.matchAny((org.antlr.runtime.IntStream)var34);
    var10.mNOT();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test429");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    java.lang.String var11 = var0.getDefaultPort();
    var0.setDriverClass("hi!");
    org.databene.jdbacl.dialect.FirebirdDialect var14 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var17 = var14.renderSetSequenceValue(".", 0L);
    boolean var19 = var14.isDeterministicUKName("hi! identity by primary key");
    boolean var20 = var14.isSequenceBoundarySupported();
    java.lang.String var22 = var14.renderDropSequence(".");
    boolean var23 = var0.equals((java.lang.Object)".");
    java.lang.String var24 = var0.getId();
    java.lang.String var25 = var0.getDriverClass();
    java.lang.String var26 = var0.getDefaultDatabase();
    var0.setDefaultSchema("alter sequence CREATE SEQUENCE 10 restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "SET GENERATOR . TO -1"+ "'", var17.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "drop generator ."+ "'", var22.equals("drop generator ."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test430");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mGE();
    boolean var19 = var10.failed();
    var10.mT__82();
    java.lang.String var21 = var10.getGrammarFileName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"+ "'", var21.equals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"));

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test431");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingChecks(false);
    var6.setExcludeTables("select nextval('')");
    var6.setExcludeTables("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    var6.setExcludeTables("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    var6.setFaultTolerant(false);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test432");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(65);
    org.databene.jdbacl.SQLScriptException var3 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, 100);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test433");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var32 = var31.toString();
    org.databene.jdbacl.model.DBCatalog var33 = var31.getCatalog();
    org.databene.jdbacl.model.DBCatalog var34 = var31.getCatalog();
    org.databene.jdbacl.model.DBRow var35 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var32.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test434");


    org.databene.jdbacl.identity.IdentityProvider var0 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.NaturalPkIdentity var2 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var3 = var2.getName();
    var0.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var2, "SET GENERATOR . TO -1");
    org.databene.jdbacl.identity.IdentityModel var8 = var0.getIdentity("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT", false);
    org.databene.jdbacl.identity.NaturalPkIdentity var10 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    java.lang.String var13 = var10.toString();
    var10.addIrrelevantColumn("org.firebirdsql.jdbc.FBDriver");
    java.lang.String var16 = var10.getName();
    java.lang.String var17 = var10.getTableName();
    java.lang.String var18 = var10.getDescription();
    var0.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var10, "DROP SEQUENCE catalog RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NaturalPkIdentity(hi!)"+ "'", var13.equals("NaturalPkIdentity(hi!)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! identity by primary key"+ "'", var18.equals("hi! identity by primary key"));

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test435");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    java.lang.String[] var30 = var22.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var43 = var42.isAlpha();
    java.lang.String var44 = var42.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var45 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var48 = var45.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var50 = var45.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var51 = var42.equals((java.lang.Object)var50);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var37, var42, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = var54.getType();
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String[] var71 = new java.lang.String[] { ""};
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.join("", "", var67, "hi!", "10", var71);
    org.databene.jdbacl.model.DBUniqueConstraint var73 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var59, "select nextval('')", false, var67);
    var73.addColumnName("sequence");
    var54.addUkConstraint(var73);
    org.databene.jdbacl.model.DBUniqueIndex var77 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var73);
    var22.addIndex((org.databene.jdbacl.model.DBIndex)var77);
    boolean var79 = var77.isUnique();
    java.lang.String var80 = var77.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "DROP SEQUENCE "+ "'", var44.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var50.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi! as 10 on . = 10."+ "'", var72.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var80.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test436");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("Sub identity of ():\nSET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99", "drop sequence CONSTRAINT \"select nextval('')\" UNIQUE (, sequence)");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test437");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var8 = var4.index();
    java.lang.String var9 = var4.toString();
    java.lang.String var10 = var4.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "DROP SEQUENCE "+ "'", var9.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "DROP SEQUENCE "+ "'", var10.equals("DROP SEQUENCE "));

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test438");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.emitErrorMessage("call next value for 'hi!'");
    var0.mCOLUMN_SPEC();
    java.lang.String var6 = var0.getCharErrorDisplay(69);
    var0.mDROP_SEQUENCE();
    java.util.List var8 = var0.getRuleInvocationStack();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var10 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var12 = var10.LA(10);
    java.lang.String var13 = var10.getText();
    var0.setCharStream((org.antlr.runtime.CharStream)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mSTAR();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "'E'"+ "'", var6.equals("'E'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test439");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var3 = var2.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var4 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var6 = var4.renderFetchSequenceValue("'hi!'");
    var2.setValue("'hi!'");
    boolean var8 = var2.isConstant();
    boolean var9 = var2.isQuoted();
    java.lang.String[] var14 = new java.lang.String[] { ""};
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String var19 = org.databene.jdbacl.SQLUtil.join("", "", var14, "hi!", "10", var18);
    org.databene.jdbacl.identity.IdentityProvider var20 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var21 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var14, var20);
    org.databene.jdbacl.identity.xml.IdentityParseContext var22 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var20);
    java.util.Set var23 = var22.keySet();
    java.lang.Object var24 = var2.evaluate((org.databene.commons.Context)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "sequence"+ "'", var3.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "call next value for 'hi!'"+ "'", var6.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi! as 10 on . = 10."+ "'", var19.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "'hi!'"+ "'", var24.equals("'hi!'"));

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test440");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    java.lang.String[] var30 = var22.getPKColumnNames();
    org.databene.jdbacl.model.DBCatalog var33 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var34 = var33.getName();
    org.databene.jdbacl.model.Database var35 = var33.getDatabase();
    java.lang.String var36 = var33.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var38 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var40 = var38.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    java.lang.String var43 = var38.formatValue((java.lang.Object)var41);
    var41.setName("'hi!'");
    java.util.List var46 = var41.getSchemas();
    org.databene.jdbacl.model.DBSchema var47 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var41);
    var33.removeSchema(var47);
    org.databene.jdbacl.dialect.DerbyDialect var51 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var53 = var51.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var54 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var55 = var54.getName();
    java.lang.String var56 = var51.formatValue((java.lang.Object)var54);
    var54.setName("'hi!'");
    java.util.List var59 = var54.getSchemas();
    org.databene.jdbacl.model.DBSchema var60 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var54);
    org.databene.jdbacl.model.DBTrigger var61 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var60);
    var61.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var64 = var61.getTriggerBody();
    java.lang.String var65 = var61.getColumnName();
    java.lang.String var66 = var61.getWhenClause();
    var47.addTrigger(var61);
    org.databene.jdbacl.model.DBTrigger var68 = new org.databene.jdbacl.model.DBTrigger("-1", var47);
    org.databene.jdbacl.model.DBSequence var69 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var47);
    var22.setSchema(var47);
    java.util.List var71 = var22.getColumns();
    org.databene.jdbacl.model.TableContainer var73 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var74 = var73.getTables();
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    boolean var79 = var75.equals((java.lang.Object)(-1.0f));
    var73.removeTable((org.databene.jdbacl.model.DBTable)var75);
    java.lang.String var81 = var75.getDoc();
    org.databene.jdbacl.model.DBIndex var83 = var75.getIndex("drop generator foreign key constraint CREATE GENERATOR drop sequence ");
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "."+ "'", var81.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test441");


    boolean var1 = org.databene.jdbacl.SQLUtil.isDDL("alter sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test442");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var23);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var40);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var23, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var40);
    org.databene.jdbacl.identity.NaturalPkIdentity var45 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var46 = var45.getName();
    boolean var48 = var45.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    var49.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var53 = var52.getForeignKeyConstraints();
    var49.addReferrer((org.databene.jdbacl.model.DBTable)var52);
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String[] var64 = new java.lang.String[] { ""};
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.join("", "", var60, "hi!", "10", var64);
    org.databene.jdbacl.model.DBUniqueConstraint var66 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var52, "select nextval('')", false, var60);
    java.lang.String var67 = var45.extractNK((java.lang.Object[])var60);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var3, var23, (java.lang.Object[])var60);
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String[] var78 = new java.lang.String[] { ""};
    java.lang.String var79 = org.databene.jdbacl.SQLUtil.join("", "", var74, "hi!", "10", var78);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var80 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var3, "jdbc:h2:mem:select next value for 10", false, var78);
    var3.setDoc("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var84 = var3.requiresProvider(6);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "."+ "'", var29.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "."+ "'", var42.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var43.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi! as 10 on . = 10."+ "'", var65.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var68.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi! as 10 on . = 10."+ "'", var79.equals("hi! as 10 on . = 10."));

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test443");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    boolean var8 = var0.isSequenceSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test444");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    org.databene.jdbacl.model.DBCheckConstraint var9 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var10 = var9.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var15 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var16 = var15.getTableName();
    boolean var17 = var9.isEquivalent(var15);
    boolean var18 = var4.isEquivalent(var9);
    org.databene.jdbacl.JDBCConnectData var25 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var26 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var25);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var27 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var25);
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    org.databene.jdbacl.model.Database var31 = var29.getDatabase();
    java.lang.String var32 = var29.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var34 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var36 = var34.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var37 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var38 = var37.getName();
    java.lang.String var39 = var34.formatValue((java.lang.Object)var37);
    var37.setName("'hi!'");
    java.util.List var42 = var37.getSchemas();
    org.databene.jdbacl.model.DBSchema var43 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var37);
    var29.removeSchema(var43);
    java.util.List var46 = var43.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var47 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var43);
    org.databene.jdbacl.model.jdbc.LazyTable var50 = new org.databene.jdbacl.model.jdbc.LazyTable(var27, var43, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var51 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var52 = var51.getName();
    org.databene.jdbacl.model.Database var53 = var51.getDatabase();
    java.lang.String var54 = var51.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var56 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var58 = var56.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var59 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var60 = var59.getName();
    java.lang.String var61 = var56.formatValue((java.lang.Object)var59);
    var59.setName("'hi!'");
    java.util.List var64 = var59.getSchemas();
    org.databene.jdbacl.model.DBSchema var65 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var59);
    var51.removeSchema(var65);
    java.util.List var68 = var65.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var72 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var74 = var72.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var75 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var76 = var75.getName();
    java.lang.String var77 = var72.formatValue((java.lang.Object)var75);
    var75.setName("'hi!'");
    java.util.List var80 = var75.getSchemas();
    org.databene.jdbacl.model.DBSchema var81 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var75);
    org.databene.jdbacl.model.DBTrigger var82 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var81);
    java.util.List var83 = var81.getPackages();
    org.databene.jdbacl.model.DBPackage var84 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var81);
    java.util.List var85 = var84.getComponents();
    var65.addPackage(var84);
    java.lang.String var87 = var84.getSubObjectName();
    var43.addPackage(var84);
    boolean var89 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var43);
    java.util.List var90 = var43.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "\"'hi!'\""+ "'", var10.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var16.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test445");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var4 = var3.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    org.databene.jdbacl.model.Database var7 = var5.getDatabase();
    java.lang.String var8 = var5.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var10 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var12 = var10.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    java.lang.String var15 = var10.formatValue((java.lang.Object)var13);
    var13.setName("'hi!'");
    java.util.List var18 = var13.getSchemas();
    org.databene.jdbacl.model.DBSchema var19 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var13);
    var5.removeSchema(var19);
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    org.databene.jdbacl.model.DBTrigger var33 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var32);
    var33.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var36 = var33.getTriggerBody();
    java.lang.String var37 = var33.getColumnName();
    java.lang.String var38 = var33.getWhenClause();
    var19.addTrigger(var33);
    boolean var40 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var19);
    java.util.List var42 = var19.getSequences(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test446");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var6 = var0.isSequenceSupported();
    boolean var7 = var0.supportsRegex();
    java.lang.String var9 = var0.renderDropSequence("catalog");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var14 = var13.dropDDL();
    java.lang.String var15 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var13);
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    var17.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var21 = var20.getForeignKeyConstraints();
    var17.addReferrer((org.databene.jdbacl.model.DBTable)var20);
    org.databene.jdbacl.model.DBDataType var25 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var26 = var25.isAlpha();
    java.lang.String var27 = var25.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var28 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var31 = var28.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var33 = var28.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var34 = var25.equals((java.lang.Object)var33);
    org.databene.jdbacl.model.DefaultDBColumn var37 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var20, var25, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var38 = var37.getType();
    org.databene.jdbacl.model.DBDataType var41 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var42 = var41.isAlpha();
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var44 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var47 = var44.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var49 = var44.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var50 = var41.equals((java.lang.Object)var49);
    var37.setType(var41);
    boolean var52 = var13.isIdentical((org.databene.jdbacl.model.DBObject)var37);
    java.lang.String var53 = var0.renderCreateSequence(var13);
    var13.setCache((java.lang.Long)10L);
    org.databene.jdbacl.dialect.DerbyDialect var57 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var59 = var57.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var60 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var61 = var60.getName();
    java.lang.String var62 = var57.formatValue((java.lang.Object)var60);
    var60.setName("'hi!'");
    java.util.List var65 = var60.getSchemas();
    org.databene.jdbacl.model.DBSchema var66 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var60);
    org.databene.jdbacl.dialect.DerbyDialect var69 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var71 = var69.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var72 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var73 = var72.getName();
    java.lang.String var74 = var69.formatValue((java.lang.Object)var72);
    var72.setName("'hi!'");
    java.util.List var77 = var72.getSchemas();
    org.databene.jdbacl.model.DBSchema var78 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var72);
    org.databene.jdbacl.model.DBTrigger var79 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var78);
    var66.addTrigger(var79);
    boolean var81 = var13.isIdentical((org.databene.jdbacl.model.DBObject)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "DROP SEQUENCE catalog RESTRICT"+ "'", var9.equals("DROP SEQUENCE catalog RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence "+ "'", var14.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "DROP SEQUENCE "+ "'", var27.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var33.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "DROP SEQUENCE "+ "'", var43.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var49.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var53.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test447");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var9 = var0.isDeterministicFKName("jdbc:h2:mem:select next value for 10");
    java.lang.String var13 = var0.regexQuery("drop sequence ", true, "alter sequence  restart with -1");
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.math.BigInteger var19 = var17.getIncrementIfNotDefault();
    java.math.BigInteger var20 = var17.getMinValue();
    java.math.BigInteger var21 = var17.getMinValue();
    java.lang.Boolean var22 = var17.isOrder();
    java.math.BigInteger var23 = var17.getIncrementIfNotDefault();
    var17.setCycle((java.lang.Boolean)true);
    java.lang.String var26 = var0.renderCreateSequence(var17);
    var17.setCache((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop sequence  ~ 'alter sequence  restart with -1'"+ "'", var13.equals("NOT drop sequence  ~ 'alter sequence  restart with -1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "CREATE SEQUENCE  CYCLE"+ "'", var26.equals("CREATE SEQUENCE  CYCLE"));

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test448");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    java.lang.String var4 = var0.regexQuery("drop sequence alter sequence hi! restart with 1", true, "CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var6 = var0.isDeterministicFKName("\"sequence\"");
    java.lang.String var10 = var0.regexQuery("select alter sequence drop sequence 10 restart with 0.nextval from dual", false, "CONSTRAINT \"hi! identity by primary key\" ");
    boolean var12 = var0.isDeterministicPKName("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1");
    boolean var15 = var0.isDefaultSchema("select next value for SET GENERATOR . TO -1", "CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\"");
    boolean var16 = var0.isSequenceSupported();
    boolean var19 = var0.isDefaultCatalog("null.(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", "schema");
    boolean var21 = var0.isDeterministicPKName("jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')"+ "'", var4.equals("NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')"+ "'", var10.equals("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test449");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    java.util.List var2 = var0.getComponents();
    org.databene.jdbacl.model.DBSchema var4 = var0.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var6 = var0.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var7 = var0.getName();
    java.util.List var8 = var0.getSequences();
    java.util.List var9 = var0.getSequences();
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var26 = var24.getTables();
    org.databene.jdbacl.model.Database var27 = var24.getDatabase();
    var0.removeSchema(var24);
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var34 = var33.getTables();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var33);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    var33.addTable((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var47);
    org.databene.jdbacl.model.TableContainer var56 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var57 = var56.getTables();
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var56);
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    var56.addTable((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var68 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var68);
    org.databene.jdbacl.model.DBForeignKeyConstraint var70 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var39, var47, (org.databene.jdbacl.model.DBTable)var62, var68);
    org.databene.jdbacl.model.DBTable var71 = var70.getRefereeTable();
    var24.addTable(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "."+ "'", var53.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var69.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test450");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIS();
    org.antlr.runtime.CharStream var20 = var10.getCharStream();
    var10.mT__125();
    var10.mVARCHAR2();
    java.lang.String var23 = var10.getGrammarFileName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"+ "'", var23.equals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test451");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var5 = var4.getConditionText();
    java.lang.String var6 = var4.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var11 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var12 = var11.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var17 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var18 = var17.getTableName();
    boolean var19 = var11.isEquivalent(var17);
    boolean var20 = var4.isEquivalent(var17);
    java.lang.String var21 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "\"'hi!'\""+ "'", var5.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "\"'hi!'\""+ "'", var6.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "\"'hi!'\""+ "'", var12.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var18.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var21.equals("CONSTRAINT columnCHECK \"'hi!'\""));

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test452");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var29 = var4.getPrimaryKeyConstraint();
    int var30 = var4.countProviders();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test453");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    org.databene.jdbacl.model.DBIndex var35 = var27.getIndex("");
    java.util.List var36 = var27.getIndexes();
    java.util.Set var37 = var27.getForeignKeyConstraints();
    java.util.List var38 = var27.getCheckConstraints();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var39 = var27.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    org.databene.jdbacl.model.Database var42 = var40.getDatabase();
    java.lang.String var43 = var40.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var45 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var47 = var45.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var48 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var49 = var48.getName();
    java.lang.String var50 = var45.formatValue((java.lang.Object)var48);
    var48.setName("'hi!'");
    java.util.List var53 = var48.getSchemas();
    org.databene.jdbacl.model.DBSchema var54 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var48);
    var40.removeSchema(var54);
    java.util.List var57 = var54.getSequences(false);
    boolean var58 = var27.equals((java.lang.Object)var54);
    boolean var59 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.lang.String var60 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var60.equals("CONSTRAINT columnCHECK \"'hi!'\""));

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test454");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.lang.String var19 = var0.renderCreateSequence(var17);
    java.lang.String var21 = var0.renderFetchSequenceValue("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var24 = var0.isDefaultSchema("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    java.lang.String var26 = var0.renderDropSequence("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    java.lang.String var28 = var0.renderFetchSequenceValue("CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    java.lang.String var30 = var0.renderDropSequence("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"+ "'", var21.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT"+ "'", var26.equals("DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "VALUES (NEXT VALUE FOR CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT)"+ "'", var28.equals("VALUES (NEXT VALUE FOR CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "DROP SEQUENCE null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-. RESTRICT"+ "'", var30.equals("DROP SEQUENCE null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-. RESTRICT"));

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test455");


    org.databene.jdbacl.SQLScriptException var2 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var4 = var2.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var6 = new org.databene.jdbacl.SQLScriptException(1);
    var4.addSuppressed((java.lang.Throwable)var6);
    org.databene.jdbacl.SQLScriptException var10 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var4, "drop sequence ", (-1));
    java.util.List var12 = org.antlr.runtime.BaseRecognizer.getRuleInvocationStack((java.lang.Throwable)var4, "DROP SEQUENCE ");
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var13 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence, SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!') unique", (java.lang.Throwable)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test456");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var2 = var1.getTables();
    java.util.List var4 = var1.getSequences(false);
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    org.databene.jdbacl.model.Database var8 = var6.getDatabase();
    java.lang.String var9 = var6.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var11 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var13 = var11.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var14 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var15 = var14.getName();
    java.lang.String var16 = var11.formatValue((java.lang.Object)var14);
    var14.setName("'hi!'");
    java.util.List var19 = var14.getSchemas();
    org.databene.jdbacl.model.DBSchema var20 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var14);
    var6.removeSchema(var20);
    java.util.List var22 = var20.getTables();
    java.util.List var23 = var20.getComponents();
    java.util.List var24 = var1.getTables(false, var23);
    java.util.List var25 = var1.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test457");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var8.setFaultTolerant(true);
    org.databene.jdbacl.model.cache.CachingDBImporter var12 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var8, "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    var8.setCatalogName("SET GENERATOR catalog TO -2");

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test458");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    var10.addTrigger(var23);
    java.lang.String var25 = var23.getTableOwner();
    var23.setReferencingNames("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    java.lang.String var28 = var23.toString();
    var23.setWhenClause("alter sequence -1 restart with 1");
    var23.setTriggerBody("drop sequence alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var28.equals("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test459");


    org.databene.jdbacl.sql.parser.SQLParser.ora_key_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.ora_key_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test460");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var17 = var0.isDeterministicFKName("CREATE SEQUENCE 10");
    boolean var20 = var0.isDefaultCatalog("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'");
    boolean var21 = var0.isSequenceSupported();
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var25.setName("10");
    java.math.BigInteger var28 = var25.getIncrement();
    java.lang.Boolean var29 = var25.isCycle();
    java.lang.String var30 = var25.dropDDL();
    org.databene.jdbacl.model.DBSequence var34 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var34.setCache((java.lang.Long)100L);
    java.lang.String var37 = var34.getObjectType();
    java.math.BigInteger var38 = var34.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var42 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var42.setName("10");
    java.math.BigInteger var45 = var42.getIncrement();
    java.math.BigInteger var46 = var42.getIncrement();
    var34.setLastNumber(var46);
    var25.setIncrement(var46);
    org.databene.jdbacl.model.DBSequence var52 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var52.setName("10");
    java.math.BigInteger var55 = var52.getIncrement();
    java.math.BigInteger var56 = var52.getIncrement();
    java.math.BigInteger var57 = var52.getStart();
    var25.setIncrement(var57);
    java.lang.Long var59 = var25.getCache();
    java.lang.String var60 = var0.renderCreateSequence(var25);
    var25.setOrder((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "drop sequence 10"+ "'", var30.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "sequence"+ "'", var37.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "CREATE SEQUENCE 10"+ "'", var60.equals("CREATE SEQUENCE 10"));

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test461");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    var21.setFractionDigits((java.lang.Integer)4);
    var21.setNullable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test462");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.mT__137();
    var10.mOR();
    var10.mSIZE();
    var10.mT__78();
    java.util.List var20 = var10.getRuleInvocationStack();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test463");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    org.databene.jdbacl.model.DBUniqueConstraint var30 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var16, "select nextval('')", false, var24);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var36);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var53);
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var36, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var53);
    org.databene.jdbacl.identity.NaturalPkIdentity var58 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var59 = var58.getName();
    boolean var61 = var58.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    var62.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var66 = var65.getForeignKeyConstraints();
    var62.addReferrer((org.databene.jdbacl.model.DBTable)var65);
    java.lang.String[] var73 = new java.lang.String[] { ""};
    java.lang.String[] var77 = new java.lang.String[] { ""};
    java.lang.String var78 = org.databene.jdbacl.SQLUtil.join("", "", var73, "hi!", "10", var77);
    org.databene.jdbacl.model.DBUniqueConstraint var79 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var65, "select nextval('')", false, var73);
    java.lang.String var80 = var58.extractNK((java.lang.Object[])var73);
    java.lang.String var81 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var16, var36, (java.lang.Object[])var73);
    java.lang.String[] var87 = new java.lang.String[] { ""};
    java.lang.String[] var91 = new java.lang.String[] { ""};
    java.lang.String var92 = org.databene.jdbacl.SQLUtil.join("", "", var87, "hi!", "10", var91);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var93 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var16, "jdbc:h2:mem:select next value for 10", false, var91);
    var16.setDoc("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    org.databene.jdbacl.model.TableContainer var96 = new org.databene.jdbacl.model.TableContainer("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .", (org.databene.jdbacl.model.CompositeDBObject)var16);
    boolean var97 = var8.isIdentical((org.databene.jdbacl.model.DBObject)var96);
    java.util.List var98 = var96.getTables();
    java.util.List var99 = var96.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "."+ "'", var42.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var56.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi! as 10 on . = 10."+ "'", var78.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var81.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "hi! as 10 on . = 10."+ "'", var92.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test464");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var5, var22);
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    org.databene.jdbacl.model.DBDataType var34 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var35 = var34.isAlpha();
    java.lang.String var36 = var34.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var37 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var40 = var37.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var42 = var37.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var43 = var34.equals((java.lang.Object)var42);
    org.databene.jdbacl.model.DefaultDBColumn var46 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var29, var34, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isTemporal();
    boolean var51 = var34.equals((java.lang.Object)var49);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.", (org.databene.jdbacl.model.DBTable)var5, var34, (java.lang.Integer)1, (java.lang.Integer)(-1));
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnTypeWithSize((org.databene.jdbacl.model.DBColumn)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "DROP SEQUENCE "+ "'", var36.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var42.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "DROP SEQUENCE (1,-1)"+ "'", var55.equals("DROP SEQUENCE (1,-1)"));

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test465");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var14 = var12.LT(10);
    boolean var16 = var10.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var12, 69);
    var10.mT__123();
    int var18 = var10.getLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test466");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.identity.NaturalPkIdentity var15 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var16 = var15.getName();
    boolean var18 = var15.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    var19.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var23 = var22.getForeignKeyConstraints();
    var19.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    java.lang.String[] var30 = new java.lang.String[] { ""};
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String var35 = org.databene.jdbacl.SQLUtil.join("", "", var30, "hi!", "10", var34);
    org.databene.jdbacl.model.DBUniqueConstraint var36 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var22, "select nextval('')", false, var30);
    java.lang.String var37 = var15.extractNK((java.lang.Object[])var30);
    boolean var38 = var1.equals((java.lang.Object)var15);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var46 = var45.getForeignKeyConstraints();
    var42.addReferrer((org.databene.jdbacl.model.DBTable)var45);
    org.databene.jdbacl.model.DBDataType var50 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var51 = var50.isAlpha();
    java.lang.String var52 = var50.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var53 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var56 = var53.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var58 = var53.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var59 = var50.equals((java.lang.Object)var58);
    org.databene.jdbacl.model.DefaultDBColumn var62 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var45, var50, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var63 = var62.getType();
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var75 = new java.lang.String[] { ""};
    java.lang.String[] var79 = new java.lang.String[] { ""};
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.join("", "", var75, "hi!", "10", var79);
    org.databene.jdbacl.model.DBUniqueConstraint var81 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var67, "select nextval('')", false, var75);
    var81.addColumnName("sequence");
    var62.addUkConstraint(var81);
    org.databene.jdbacl.model.DBUniqueIndex var85 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var81);
    org.databene.jdbacl.model.DBTable var86 = var85.getTable();
    var85.addColumnName("null[DROP SEQUENCE ]");
    var1.addIndex((org.databene.jdbacl.model.DBIndex)var85);
    org.databene.jdbacl.model.DBTable var90 = var85.getTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi! as 10 on . = 10."+ "'", var35.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "DROP SEQUENCE "+ "'", var52.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var58.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi! as 10 on . = 10."+ "'", var80.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test467");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    var6.setImportingTriggers(true);
    org.databene.jdbacl.model.cache.CachingDBImporter var14 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var15 = var14.importDatabase();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test468");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mOR();
    java.lang.String var16 = var10.getText();
    var10.mROWID();
    org.databene.jdbacl.identity.NkPkQueryIdentity var22 = new org.databene.jdbacl.identity.NkPkQueryIdentity("jdbc:hsqldb:mem:call next value for 'hi!' identity by primary key", "call next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1");
    var10.traceOut("DROP SEQUENCE (0,-1)", 6, (java.lang.Object)var22);
    var10.mIN();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var16.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test469");


    org.databene.jdbacl.model.DBDataType var2 = org.databene.jdbacl.model.DBDataType.getInstance(82, "alter sequence drop sequence 10 restart with 0 REGEXP 'left join select next value for (\"sequence\") as (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1) on EQUEN.DROP SEQUENCE  = (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1).DROP SEQUENCE '");
    java.lang.String var3 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ALTER SEQUENCE DROP SEQUENCE 10 RESTART WITH 0 REGEXP 'LEFT JOIN SELECT NEXT VALUE FOR (\"SEQUENCE\") AS (NOT DROP GENERATOR SEQUENCE ~ 'HI!', ALTER SEQUENCE CREATE GENERATOR DROP SEQUENCE  RESTART WITH -1) ON EQUEN.DROP SEQUENCE  = (NOT DROP GENERATOR SEQUENCE ~ 'HI!', ALTER SEQUENCE CREATE GENERATOR DROP SEQUENCE  RESTART WITH -1).DROP SEQUENCE '"+ "'", var3.equals("ALTER SEQUENCE DROP SEQUENCE 10 RESTART WITH 0 REGEXP 'LEFT JOIN SELECT NEXT VALUE FOR (\"SEQUENCE\") AS (NOT DROP GENERATOR SEQUENCE ~ 'HI!', ALTER SEQUENCE CREATE GENERATOR DROP SEQUENCE  RESTART WITH -1) ON EQUEN.DROP SEQUENCE  = (NOT DROP GENERATOR SEQUENCE ~ 'HI!', ALTER SEQUENCE CREATE GENERATOR DROP SEQUENCE  RESTART WITH -1).DROP SEQUENCE '"));

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test470");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DBRow var6 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var0);
    java.lang.Object[] var7 = var6.getPKValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test471");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    java.lang.Object var4 = var0.get("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    java.util.Set var5 = var0.entrySet();
    var0.remove("CREATE SEQUENCE 10");
    org.databene.jdbacl.dialect.DerbyDialect var12 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var14 = var12.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var15 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var16 = var15.getName();
    java.lang.String var17 = var12.formatValue((java.lang.Object)var15);
    var15.setName("'hi!'");
    java.util.List var20 = var15.getSchemas();
    org.databene.jdbacl.model.DBSchema var21 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var15);
    org.databene.jdbacl.model.DBTrigger var22 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var21);
    var22.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var25 = var22.getTriggerBody();
    java.lang.String var26 = var22.getTriggerBody();
    var22.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var22.setTriggerBody("DROP SEQUENCE -1 RESTRICT");
    var22.setTriggerType("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var39 = var38.getTables();
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var45 = var44.getForeignKeyConstraints();
    var41.addReferrer((org.databene.jdbacl.model.DBTable)var44);
    var38.addTable((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.join("", "", var52, "hi!", "10", var56);
    java.lang.String var58 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    org.databene.jdbacl.model.TableContainer var61 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var62 = var61.getTables();
    org.databene.jdbacl.model.TableContainer var63 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var61);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    var61.addTable((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var73 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var74 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var73);
    org.databene.jdbacl.model.DBForeignKeyConstraint var75 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var44, var52, (org.databene.jdbacl.model.DBTable)var67, var73);
    org.databene.jdbacl.model.DefaultDBTable var77 = new org.databene.jdbacl.model.DefaultDBTable();
    var77.setDoc(".");
    java.util.Set var81 = var77.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var84 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var85 = var84.isAlpha();
    boolean var86 = var84.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var89 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var77, var84, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var91 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT \"select nextval('')\" ", (org.databene.jdbacl.model.DBTable)var44, var84, (java.lang.Integer)10);
    java.util.List var92 = var44.getComponents();
    boolean var93 = var22.isIdentical((org.databene.jdbacl.model.DBObject)var44);
    org.databene.jdbacl.model.DBRow var94 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var95 = var44.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBColumn var98 = new org.databene.jdbacl.model.DefaultDBColumn("select nextval('select next value for SET GENERATOR . TO -1')", (org.databene.jdbacl.model.DBTable)var44, 309, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    var0.set("foreign key constraint CREATE GENERATOR drop sequence ", (java.lang.Object)"CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi! as 10 on . = 10."+ "'", var57.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "."+ "'", var58.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test472");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("drop sequence ", "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "alter sequence drop sequence 10 restart with 0", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT", ".", "alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.util.List var10 = var8.getComponents();
    org.databene.jdbacl.model.DBSchema var12 = var8.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var14 = var8.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var15 = var8.getName();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", var8);
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    org.databene.jdbacl.model.Database var19 = var17.getDatabase();
    java.lang.String var20 = var17.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    org.databene.jdbacl.model.DBSchema var31 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var25);
    var17.removeSchema(var31);
    java.util.List var34 = var31.getSequences(false);
    var8.removeSchema(var31);
    org.databene.jdbacl.model.jdbc.LazyTable var38 = new org.databene.jdbacl.model.jdbc.LazyTable(var6, var31, "CONSTRAINT \"CREATE GENERATOR drop sequence \" ", "select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    java.lang.String var39 = var38.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" "+ "'", var39.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" "));

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test473");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var4 = var0.isDeterministicIndexName("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL");
    java.lang.String var7 = var0.renderSequenceValue("No identity defined for table alter sequence drop generator sequence restart with 100", 0L);
    java.lang.String var9 = var0.renderDropSequence("derby");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "alter sequence No identity defined for table alter sequence drop generator sequence restart with 100 restart with 0"+ "'", var7.equals("alter sequence No identity defined for table alter sequence drop generator sequence restart with 100 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "drop sequence derby"+ "'", var9.equals("drop sequence derby"));

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test474");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getTriggerBody();
    var12.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var12.setTriggerBody("DROP SEQUENCE -1 RESTRICT");
    var12.setTriggerType("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.String var23 = var12.getDescription();
    var12.setReferencingNames("CREATE SEQUENCE  MINVALUE 0");
    java.lang.String var26 = var12.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var23.equals("CREATE GENERATOR drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var26.equals("CREATE GENERATOR drop sequence "));

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test475");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mGE();
    var10.match("left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR.");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.mINT();
      fail("Expected exception of type org.antlr.runtime.EarlyExitException");
    } catch (org.antlr.runtime.EarlyExitException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test476");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    java.lang.String var4 = var0.renderDropSequence("Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    java.lang.String var6 = var0.renderDropSequence("select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')");
    java.lang.String var7 = var0.getSystem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE "+ "'", var4.equals("drop sequence Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "drop sequence select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')"+ "'", var6.equals("drop sequence select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "h2"+ "'", var7.equals("h2"));

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test477");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mALTER_TABLE();
    var10.mT__134();
    java.lang.String[] var20 = var10.getTokenNames();
    var10.mDEFAULT();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test478");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    java.lang.String var13 = var11.getName();
    java.util.List var15 = var11.getTables(false);
    org.databene.jdbacl.model.Database var16 = var11.getDatabase();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var13.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test479");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    var6.setImportingTriggers(true);
    var6.setCatalogName("10");
    var6.setImportingIndexes(true);
    var6.setImportingIndexes(true);
    var6.setFaultTolerant(false);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test480");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    var6.setImportingIndexes(false);
    var6.setLazy(false);
    java.lang.String var15 = var6.toString();
    java.lang.String var16 = var6.getDatabaseProductName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "JDBCDBImporter"+ "'", var15.equals("JDBCDBImporter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test481");


    java.lang.String[] var2 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.ColumnExpression var13 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var14 = var13.getValue();
    org.databene.jdbacl.sql.BetweenExpression var15 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var6, (org.databene.script.Expression)var9, (org.databene.script.Expression)var13);
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.ColumnExpression var25 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var26 = var25.getValue();
    org.databene.jdbacl.sql.BetweenExpression var27 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var18, (org.databene.script.Expression)var21, (org.databene.script.Expression)var25);
    org.databene.jdbacl.sql.ColumnExpression var30 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.ColumnExpression var37 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var38 = var37.getValue();
    org.databene.jdbacl.sql.BetweenExpression var39 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var30, (org.databene.script.Expression)var33, (org.databene.script.Expression)var37);
    org.databene.jdbacl.sql.BetweenExpression var40 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var13, (org.databene.script.Expression)var21, (org.databene.script.Expression)var33);
    org.databene.script.Expression[] var41 = new org.databene.script.Expression[] { var13};
    org.databene.jdbacl.sql.FunctionInvocation var42 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.renderWhereClause(var2, (java.lang.Object[])var41);
    org.databene.jdbacl.sql.FunctionInvocation var44 = new org.databene.jdbacl.sql.FunctionInvocation("select next value for SET GENERATOR . TO -1", var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    org.databene.jdbacl.identity.IdentityProvider var55 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var56 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var49, var55);
    org.databene.jdbacl.identity.xml.IdentityParseContext var57 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var55);
    var57.remove("drop sequence 10");
    java.lang.String[] var65 = new java.lang.String[] { ""};
    java.lang.String[] var69 = new java.lang.String[] { ""};
    java.lang.String var70 = org.databene.jdbacl.SQLUtil.join("", "", var65, "hi!", "10", var69);
    org.databene.jdbacl.identity.IdentityProvider var71 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var72 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var65, var71);
    org.databene.jdbacl.identity.xml.IdentityParseContext var73 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var71);
    var57.set("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", (java.lang.Object)var73);
    java.lang.Object var75 = var44.evaluate((org.databene.commons.Context)var73);
    org.databene.jdbacl.identity.NoIdentity var77 = new org.databene.jdbacl.identity.NoIdentity("jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.identity.xml.IdentityParseContext var78 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    boolean var79 = var77.equals((java.lang.Object)var78);
    org.databene.jdbacl.identity.IdentityProvider var80 = var78.getIdentityProvider();
    var78.remove("CREATE GENERATOR drop sequence ");
    java.lang.Object var83 = var44.evaluate((org.databene.commons.Context)var78);
    java.lang.String var84 = var44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "sequence"+ "'", var14.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "sequence"+ "'", var26.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "sequence"+ "'", var38.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var43.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi! as 10 on . = 10."+ "'", var70.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(\"sequence\")"+ "'", var84.equals("(\"sequence\")"));

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test482");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    java.lang.String var4 = var0.renderFetchSequenceValue("Identity definition by unique key: select next value for 10");
    boolean var6 = var0.isDeterministicIndexName("NOT drop generator sequence ~ 'hi!' DROP SEQUENCE (100,-1) NULL");
    boolean var8 = var0.isDeterministicPKName("NOT SELECT * FROM null WHERE  = '' ~ 'alter sequence select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual restart with 10'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "select Identity definition by unique key: select next value for 10.nextval from dual"+ "'", var4.equals("select Identity definition by unique key: select next value for 10.nextval from dual"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test483");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicIndexName("DROP SEQUENCE (100)");
    org.databene.jdbacl.model.DBSequence var8 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var9 = var8.getMaxValue();
    java.lang.String var10 = var8.toString();
    org.databene.jdbacl.model.DBSequence var14 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var15 = var14.dropDDL();
    java.math.BigInteger var16 = var14.getMinValueIfNotDefault();
    java.math.BigInteger var17 = var14.getLastNumber();
    org.databene.jdbacl.model.DBSequence var21 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var21.setName("10");
    java.math.BigInteger var24 = var21.getIncrement();
    java.math.BigInteger var25 = var21.getIncrement();
    var14.setStart(var25);
    var8.setIncrement(var25);
    java.lang.String var28 = var0.renderCreateSequence(var8);
    boolean var31 = var0.isDefaultCatalog("call next value for JDBCDBImporter", "drop generator REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "drop sequence "+ "'", var15.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""+ "'", var28.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test484");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__92();
    var10.match(4);
    var10.mLE();
    var10.mT__95();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test485");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    var25.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var29 = var28.getForeignKeyConstraints();
    var25.addReferrer((org.databene.jdbacl.model.DBTable)var28);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var42 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var28, "select nextval('')", false, var36);
    var28.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var47 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var47);
    org.databene.jdbacl.model.DBUniqueConstraint var49 = var28.getUniqueConstraint(var47);
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("", "", var56, "hi!", "10", var60);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var56);
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "CREATE SEQUENCE 10", var47, "select next value for SET GENERATOR . TO -1", "select next value for SET GENERATOR . TO -1", var56);
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    var65.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var69 = var68.getForeignKeyConstraints();
    var65.addReferrer((org.databene.jdbacl.model.DBTable)var68);
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String[] var80 = new java.lang.String[] { ""};
    java.lang.String var81 = org.databene.jdbacl.SQLUtil.join("", "", var76, "hi!", "10", var80);
    org.databene.jdbacl.model.DBUniqueConstraint var82 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var68, "select nextval('')", false, var76);
    var68.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var87 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var88 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var87);
    org.databene.jdbacl.model.DBUniqueConstraint var89 = var68.getUniqueConstraint(var87);
    org.databene.jdbacl.identity.UniqueKeyIdentity var90 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var87);
    var21.setCellValues(var47, (java.lang.Object[])var87);
    java.lang.String var92 = var21.toString();
    java.lang.Object[] var93 = var21.getPKValues();
    org.databene.jdbacl.model.DBTable var94 = var21.getTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var48.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "."+ "'", var62.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var63.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi! as 10 on . = 10."+ "'", var81.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var88.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "null[DROP SEQUENCE ]"+ "'", var92.equals("null[DROP SEQUENCE ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test486");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    var0.mALTER_TABLE();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__124();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test487");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    var0.mINDEX_NAME();
    org.antlr.runtime.CharStream var3 = var0.getCharStream();
    var0.mCOMMENT_TABLE();
    var0.beginResync();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var7 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var9 = var7.LA(10);
    java.lang.String var10 = var7.getText();
    var7.setLine(69);
    boolean var14 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var7, 14);
    int var16 = var7.LA(10);
    int var17 = var7.index();
    var7.consume();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "DROP SEQUENCE "+ "'", var10.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test488");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getUrlPattern();
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var8 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var9 = var8.getValue();
    org.databene.jdbacl.sql.ColumnExpression var12 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var13 = var12.getValue();
    org.databene.jdbacl.sql.BetweenExpression var14 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var5, (org.databene.script.Expression)var8, (org.databene.script.Expression)var12);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var20 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var21 = var20.getValue();
    org.databene.jdbacl.sql.ColumnExpression var24 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var25 = var24.getValue();
    org.databene.jdbacl.sql.BetweenExpression var26 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var17, (org.databene.script.Expression)var20, (org.databene.script.Expression)var24);
    var14.addTerm((org.databene.script.Expression)var20);
    org.databene.script.Expression[] var28 = new org.databene.script.Expression[] { var14};
    org.databene.jdbacl.sql.FunctionInvocation var29 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var28);
    boolean var30 = var0.equals((java.lang.Object)var29);
    java.lang.String var31 = var0.getDefaultDatabase();
    var0.setId("null[false]");
    java.lang.String var34 = var0.getDbSystem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "sequence"+ "'", var9.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "sequence"+ "'", var13.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "sequence"+ "'", var21.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "sequence"+ "'", var25.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test489");


    org.databene.jdbacl.sql.parser.SQLParser.name_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.name_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    java.lang.Object var7 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test490");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var6, (-1), "hi! identity by primary key");
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var27 = var6.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    org.databene.jdbacl.model.DBDataType var38 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var39 = var38.isAlpha();
    java.lang.String var40 = var38.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var41 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var44 = var41.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var46 = var41.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var47 = var38.equals((java.lang.Object)var46);
    org.databene.jdbacl.model.DefaultDBColumn var50 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var33, var38, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    java.util.Set var56 = var52.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var59 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var60 = var59.isAlpha();
    boolean var61 = var59.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var64 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var52, var59, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var67 = new org.databene.jdbacl.model.DefaultDBColumn("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (org.databene.jdbacl.model.DBTable)var33, var59, (java.lang.Integer)3, (java.lang.Integer)69);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    org.databene.jdbacl.model.DBSchema var70 = new org.databene.jdbacl.model.DBSchema("drop sequence 10");
    org.databene.jdbacl.model.DBCatalog var73 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var74 = var73.getName();
    java.util.List var75 = var73.getComponents();
    org.databene.jdbacl.model.DBSchema var77 = var73.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var79 = var73.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var80 = var73.getName();
    org.databene.jdbacl.model.DBSchema var81 = new org.databene.jdbacl.model.DBSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", var73);
    org.databene.jdbacl.model.DefaultDBTable var82 = new org.databene.jdbacl.model.DefaultDBTable("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1", var81);
    var70.removeTable((org.databene.jdbacl.model.DBTable)var82);
    var33.addReferrer((org.databene.jdbacl.model.DBTable)var82);
    org.databene.jdbacl.model.TableContainer var85 = new org.databene.jdbacl.model.TableContainer("drop generator REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')", (org.databene.jdbacl.model.CompositeDBObject)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "DROP SEQUENCE "+ "'", var40.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var46.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test491");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    java.math.BigInteger var6 = var3.getIncrement();
    java.lang.Boolean var7 = var3.isCycle();
    java.lang.String var8 = var3.dropDDL();
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var12.setCache((java.lang.Long)100L);
    java.lang.String var15 = var12.getObjectType();
    java.math.BigInteger var16 = var12.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var20 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var20.setName("10");
    java.math.BigInteger var23 = var20.getIncrement();
    java.math.BigInteger var24 = var20.getIncrement();
    var12.setLastNumber(var24);
    var3.setIncrement(var24);
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var30.setName("10");
    java.math.BigInteger var33 = var30.getIncrement();
    java.math.BigInteger var34 = var30.getIncrement();
    java.math.BigInteger var35 = var30.getStart();
    var3.setIncrement(var35);
    java.lang.Long var37 = var3.getCache();
    java.math.BigInteger var38 = var3.getIncrement();
    java.math.BigInteger var39 = var3.getMaxValueIfNotDefault();
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var44 = var43.dropDDL();
    var43.setCycle((java.lang.Boolean)true);
    java.math.BigInteger var47 = var43.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var51 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var51.setName("10");
    java.math.BigInteger var54 = var51.getIncrement();
    java.lang.Boolean var55 = var51.isCycle();
    java.lang.String var56 = var51.dropDDL();
    org.databene.jdbacl.model.DefaultDBTable var57 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var58 = var57.getForeignKeyConstraints();
    var57.setDoc("drop sequence ");
    boolean var61 = var51.equals((java.lang.Object)"drop sequence ");
    java.lang.String var62 = var51.getCatalogName();
    org.databene.jdbacl.model.DBSequence var66 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var67 = var66.getMaxValue();
    java.lang.String var68 = var66.toString();
    org.databene.jdbacl.model.DBSequence var72 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var73 = var72.dropDDL();
    java.math.BigInteger var74 = var72.getMinValueIfNotDefault();
    java.math.BigInteger var75 = var72.getLastNumber();
    org.databene.jdbacl.model.DBSequence var79 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var79.setName("10");
    java.math.BigInteger var82 = var79.getIncrement();
    java.math.BigInteger var83 = var79.getIncrement();
    var72.setStart(var83);
    var66.setIncrement(var83);
    var51.setIncrement(var83);
    java.math.BigInteger var87 = var51.getStart();
    var43.setLastNumber(var87);
    var3.setIncrement(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence 10"+ "'", var8.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "sequence"+ "'", var15.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "drop sequence "+ "'", var44.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "drop sequence 10"+ "'", var56.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "drop sequence "+ "'", var62.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "drop sequence "+ "'", var73.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test492");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("DROP SEQUENCE CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")' RESTRICT");

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test493");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog("SET GENERATOR SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 TO 9");
    java.lang.String var2 = var1.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test494");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var2 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1);
    org.databene.jdbacl.model.sql.CreateExporter var3 = new org.databene.jdbacl.model.sql.CreateExporter(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test495");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var5 = org.databene.jdbacl.DBUtil.connect("CONSTRAINT \"jdbc:h2:mem:select next value for 10\" PRIMARY KEY ()", "select nextval for ') from REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "DROP SEQUENCE (100,-1)", "CONSTRAINT \"jdbc:h2:mem:select next value for 10\" PRIMARY KEY ()", true);
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test496");


    org.databene.jdbacl.SQLScriptException var2 = new org.databene.jdbacl.SQLScriptException(100);
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var3 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("CREATE GENERATOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", (java.lang.Throwable)var2);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test497");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("call next value for 'hi!'");
    java.lang.String[] var7 = new java.lang.String[] { ""};
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String var12 = org.databene.jdbacl.SQLUtil.join("", "", var7, "hi!", "10", var11);
    java.lang.String var13 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var7);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var24);
    java.lang.String var27 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var7, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var24);
    java.lang.String var28 = var1.extractNK((java.lang.Object[])var7);
    java.lang.String var29 = var1.getDescription();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var37.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var56 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var58 = var37.getUniqueConstraint(var56);
    java.lang.String[] var65 = new java.lang.String[] { ""};
    java.lang.String[] var69 = new java.lang.String[] { ""};
    java.lang.String var70 = org.databene.jdbacl.SQLUtil.join("", "", var65, "hi!", "10", var69);
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var65);
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.join("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "CREATE SEQUENCE 10", var56, "select next value for SET GENERATOR . TO -1", "select next value for SET GENERATOR . TO -1", var65);
    java.lang.String[] var76 = new java.lang.String[] { "NOT drop generator sequence ~ 'hi!'"};
    java.lang.String var77 = org.databene.jdbacl.SQLUtil.innerJoin("CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.", var65, "drop generator sequence", "catalog", var76);
    java.lang.String var78 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("drop generator sequence", var76);
    java.lang.String var79 = var1.extractNK((java.lang.Object[])var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi! as 10 on . = 10."+ "'", var12.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "."+ "'", var13.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "."+ "'", var26.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var27.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "call next value for 'hi!' identity by primary key"+ "'", var29.equals("call next value for 'hi!' identity by primary key"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi! as 10 on . = 10."+ "'", var70.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "."+ "'", var71.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var72.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'"+ "'", var77.equals("drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "drop generator sequence.NOT drop generator sequence ~ 'hi!'"+ "'", var78.equals("drop generator sequence.NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NOT drop generator sequence ~ 'hi!'"+ "'", var79.equals("NOT drop generator sequence ~ 'hi!'"));

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test498");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.emitErrorMessage("call next value for 'hi!'");
    var0.mCOLUMN_SPEC();
    java.lang.String var6 = var0.getCharErrorDisplay(69);
    var0.mDROP_TABLE();
    boolean var8 = var0.failed();
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    org.databene.jdbacl.model.DBDataType var20 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var21 = var20.isAlpha();
    java.lang.String var22 = var20.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var23 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var26 = var23.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var28 = var23.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var29 = var20.equals((java.lang.Object)var28);
    org.databene.jdbacl.model.DefaultDBColumn var32 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var15, var20, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var33 = var32.getType();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var51.addColumnName("sequence");
    var32.addUkConstraint(var51);
    var32.setNullable(true);
    var0.traceIn("trigger", 3, (java.lang.Object)var32);
    boolean var58 = var32.isVersionColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "'E'"+ "'", var6.equals("'E'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "DROP SEQUENCE "+ "'", var22.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var28.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test499");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__134();
    var10.mT__115();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest8.test500");


    org.databene.jdbacl.SQLScriptException var2 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var5 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var2, "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", 100);
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var6 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("NOT drop sequence  ~ 'alter sequence  restart with -1'", (java.lang.Throwable)var2);
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var7 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError((java.lang.Throwable)var2);
    org.databene.jdbacl.SQLScriptException var10 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var2, "\"sequence\"", 32);

  }

}
