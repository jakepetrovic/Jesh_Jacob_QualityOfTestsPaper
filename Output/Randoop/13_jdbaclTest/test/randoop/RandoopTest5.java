package randoop;

import junit.framework.*;

public class RandoopTest5 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test1");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    java.util.List var17 = var15.getProcedures();
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    org.databene.jdbacl.model.DBSchema var31 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var25);
    org.databene.jdbacl.model.DBTrigger var32 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var31);
    java.util.List var33 = var31.getPackages();
    org.databene.jdbacl.model.DBPackage var34 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var31);
    java.util.List var35 = var34.getComponents();
    org.databene.jdbacl.model.DBProcedure var36 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var34);
    java.lang.String var37 = var36.getSubProgramId();
    var36.setSubProgramId("jdbc:h2:mem:select next value for 10");
    java.lang.String var40 = var36.getSubProgramId();
    var15.addProcedure(var36);
    var15.setSubObjectName("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2");
    org.databene.jdbacl.model.DBCatalog var47 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var48 = var47.getName();
    org.databene.jdbacl.model.Database var49 = var47.getDatabase();
    java.lang.String var50 = var47.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var52 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var54 = var52.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var55 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var56 = var55.getName();
    java.lang.String var57 = var52.formatValue((java.lang.Object)var55);
    var55.setName("'hi!'");
    java.util.List var60 = var55.getSchemas();
    org.databene.jdbacl.model.DBSchema var61 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var55);
    var47.removeSchema(var61);
    var47.setName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSchema var65 = new org.databene.jdbacl.model.DBSchema("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1", var47);
    org.databene.jdbacl.model.DBTrigger var66 = new org.databene.jdbacl.model.DBTrigger("drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;", var65);
    org.databene.jdbacl.model.DBCatalog var68 = new org.databene.jdbacl.model.DBCatalog("drop sequence alter sequence hi! restart with 1");
    var65.setCatalog(var68);
    org.databene.jdbacl.model.DBTrigger var70 = new org.databene.jdbacl.model.DBTrigger("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL", var65);
    org.databene.jdbacl.dialect.DerbyDialect var74 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var76 = var74.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var77 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var78 = var77.getName();
    java.lang.String var79 = var74.formatValue((java.lang.Object)var77);
    var77.setName("'hi!'");
    java.util.List var82 = var77.getSchemas();
    org.databene.jdbacl.model.DBSchema var83 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var77);
    org.databene.jdbacl.model.DBTrigger var84 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var83);
    java.util.List var85 = var83.getPackages();
    org.databene.jdbacl.model.DBPackage var86 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var83);
    java.util.List var87 = var86.getComponents();
    var86.setStatus("select next value for (\"sequence\")");
    var86.setObjectType("catalog null");
    var65.addPackage(var86);
    boolean var93 = var15.isIdentical((org.databene.jdbacl.model.DBObject)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "jdbc:h2:mem:select next value for 10"+ "'", var40.equals("jdbc:h2:mem:select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test2");


    org.databene.jdbacl.JDBCConnectData var4 = new org.databene.jdbacl.JDBCConnectData("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "SET GENERATOR Sub identity of ():\nnull TO -1", "CONSTRAINT hi! UNIQUE ()", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)");

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test3");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    var2.reset();
    var2.setLine(79);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var2);
    org.databene.jdbacl.sql.parser.SQLLexer var11 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var11.mCREATE_TABLE();
    var11.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var15 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var17 = var15.LT(10);
    var11.setCharStream((org.antlr.runtime.CharStream)var15);
    int var20 = var15.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var21 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var15);
    var21.setText("select next value for SET GENERATOR.TO - 1");
    var21.setBacktrackingLevel(1);
    var21.mLE();
    var21.mT__99();
    var21.mT__110();
    org.antlr.runtime.Token var29 = var21.emit();
    var10.emit(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test4");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    java.lang.String var15 = var9.getSourceName();
    org.databene.jdbacl.sql.parser.SQLLexer var16 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var9);
    var16.mT__123();
    var16.mWS();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test5");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setCache((java.lang.Long)100L);
    java.lang.String var6 = var3.getObjectType();
    java.lang.String var7 = var3.dropDDL();
    java.math.BigInteger var8 = var3.getMinValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test6");


    java.lang.Boolean var1 = org.databene.jdbacl.SQLUtil.mutatesStructure("NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + false+ "'", var1.equals(false));

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test7");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getForeignKeyColumnNames();
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var41);
    org.databene.jdbacl.JDBCDriverInfo var44 = new org.databene.jdbacl.JDBCDriverInfo();
    var44.setDriverClass("hi!");
    var44.setDefaultPort("CREATE SEQUENCE 10");
    var44.setDriverClass("drop sequence ");
    var44.setId("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    boolean var53 = var41.equals((java.lang.Object)var44);
    java.lang.String var54 = var44.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" "+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test8");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDefaultPort("CREATE SEQUENCE 10");
    var0.setDriverClass("drop sequence ");
    var0.setId("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var0.setName("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    java.lang.String var11 = var0.getName();
    var0.setDefaultSchema("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    java.lang.String var14 = var0.getDefaultPort();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var11.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "CREATE SEQUENCE 10"+ "'", var14.equals("CREATE SEQUENCE 10"));

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test9");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var4 = var0.isDeterministicIndexName("drop generator .");
    boolean var6 = var0.isDeterministicUKName("alter sequence  restart with -1");
    boolean var8 = var0.isDeterministicUKName("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT");
    boolean var10 = var0.isDeterministicFKName("alter sequence drop generator sequence restart with 100");
    boolean var12 = var0.isDeterministicFKName("call next value for 'hi!'");
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var21 = var20.getTables();
    org.databene.jdbacl.model.TableContainer var22 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var20);
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var20.addTable((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var34);
    org.databene.jdbacl.model.TableContainer var43 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var44 = var43.getTables();
    org.databene.jdbacl.model.TableContainer var45 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var43);
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    var46.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var50 = var49.getForeignKeyConstraints();
    var46.addReferrer((org.databene.jdbacl.model.DBTable)var49);
    var43.addTable((org.databene.jdbacl.model.DBTable)var49);
    java.lang.String[] var55 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var55);
    org.databene.jdbacl.model.DBForeignKeyConstraint var57 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var26, var34, (org.databene.jdbacl.model.DBTable)var49, var55);
    org.databene.jdbacl.identity.IdentityProvider var58 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.NaturalPkIdentity var60 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var61 = var60.getName();
    var58.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var60, "SET GENERATOR . TO -1");
    java.lang.String[] var66 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var67 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var66);
    boolean var69 = var67.equals((java.lang.Object)"alter sequence hi! restart with 1");
    var58.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var67, "hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1");
    org.databene.jdbacl.identity.xml.IdentityParseContext var72 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var58);
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var73 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("select Identity definition by unique key: select next value for 10.nextval from dual", var55, var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var74 = var0.renderCase("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ().", "org.databene.jdbacl.SQLScriptException: Error in execution of script CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT line -1: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", var55);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "."+ "'", var40.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var56.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test10");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    org.databene.jdbacl.sql.parser.SQLLexer var5 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var1);
    int var6 = var5.getCharPositionInLine();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.mT__106();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test11");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__93();
    var10.mCREATE_SEQUENCE();
    var10.mT__117();
    var10.mCREATE_TABLE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test12");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    var2.setName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSchema var20 = new org.databene.jdbacl.model.DBSchema("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1", var2);
    org.databene.jdbacl.model.DBTrigger var21 = new org.databene.jdbacl.model.DBTrigger("drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;", var20);
    var21.setBaseObjectType("select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    java.lang.String var24 = var21.getTableName();
    var21.setActionType("jdbc:hsqldb:mem:VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test13");


    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    var37.addTable((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.join("", "", var51, "hi!", "10", var55);
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var51);
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var61 = var60.getTables();
    org.databene.jdbacl.model.TableContainer var62 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var60);
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    var63.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var67 = var66.getForeignKeyConstraints();
    var63.addReferrer((org.databene.jdbacl.model.DBTable)var66);
    var60.addTable((org.databene.jdbacl.model.DBTable)var66);
    java.lang.String[] var72 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var72);
    org.databene.jdbacl.model.DBForeignKeyConstraint var74 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var43, var51, (org.databene.jdbacl.model.DBTable)var66, var72);
    org.databene.jdbacl.model.DBTable var75 = var74.getRefereeTable();
    var8.addForeignKey(var74);
    org.databene.jdbacl.model.FKChangeRule var77 = var74.getDeleteRule();
    java.lang.String var78 = var77.toString();
    java.lang.String var79 = var77.toString();
    java.lang.Class var80 = var77.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var81 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var80);
    org.databene.jdbacl.ColumnInfo var82 = new org.databene.jdbacl.ColumnInfo("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", 32, var80);
    org.databene.jdbacl.ResultSetConverter var84 = new org.databene.jdbacl.ResultSetConverter(var80, false);
    java.lang.Class var85 = var84.getTargetType();
    org.databene.jdbacl.ResultSetConverter var86 = new org.databene.jdbacl.ResultSetConverter(var85);
    boolean var87 = var86.isThreadSafe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi! as 10 on . = 10."+ "'", var56.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "."+ "'", var57.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var73.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "NO_ACTION"+ "'", var78.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NO_ACTION"+ "'", var79.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test14");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var13.setName("10");
    java.math.BigInteger var16 = var13.getIncrement();
    java.math.BigInteger var17 = var13.getIncrement();
    var9.setMaxValue(var17);
    java.lang.String var19 = var0.formatValue((java.lang.Object)var9);
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var39 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var40 = var39.isAlpha();
    java.lang.String var41 = var39.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var42 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var45 = var42.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var47 = var42.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var48 = var39.equals((java.lang.Object)var47);
    boolean var49 = var39.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var50 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var24, var39);
    java.lang.String[] var51 = var24.getColumnNames();
    java.lang.String var52 = var0.renderCase("()", "SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", var51);
    boolean var55 = var0.isDefaultCatalog("CREATE GENERATOR ", "DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT");
    java.lang.String[] var61 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var62 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var61);
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    var66.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var69 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var70 = var69.getForeignKeyConstraints();
    var66.addReferrer((org.databene.jdbacl.model.DBTable)var69);
    java.lang.String[] var77 = new java.lang.String[] { ""};
    java.lang.String[] var81 = new java.lang.String[] { ""};
    java.lang.String var82 = org.databene.jdbacl.SQLUtil.join("", "", var77, "hi!", "10", var81);
    org.databene.jdbacl.model.DBUniqueConstraint var83 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var69, "select nextval('')", false, var77);
    var69.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var88 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var89 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var88);
    org.databene.jdbacl.model.DBUniqueConstraint var90 = var69.getUniqueConstraint(var88);
    org.databene.jdbacl.identity.UniqueKeyIdentity var91 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var88);
    java.lang.String var92 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var61, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var93 = var0.renderCase("hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1-identity-CREATE SEQUENCE ", "drop sequence hi!", var61);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "call next value for 'hi!'"+ "'", var19.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "DROP SEQUENCE "+ "'", var41.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var47.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "() = CASE WHEN NOT drop generator sequence ~ 'hi!' THEN alter sequence CREATE GENERATOR drop sequence  restart with -1 ELSE SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 END"+ "'", var52.equals("() = CASE WHEN NOT drop generator sequence ~ 'hi!' THEN alter sequence CREATE GENERATOR drop sequence  restart with -1 ELSE SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 END"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi! as 10 on . = 10."+ "'", var82.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var89.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var92.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test15");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var4 = var0.isDeterministicPKName("alter sequence  restart with -1");
    java.lang.String var8 = var0.regexQuery("CREATE SEQUENCE  CACHE 100", false, "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").");
    java.lang.String var10 = var0.renderFetchSequenceValue("CONSTRAINT \"hi! identity by primary key\" ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')"+ "'", var8.equals("REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "call next value for CONSTRAINT \"hi! identity by primary key\" "+ "'", var10.equals("call next value for CONSTRAINT \"hi! identity by primary key\" "));

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test16");


    org.databene.jdbacl.sql.parser.SQLParser.expression_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.expression_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getStop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test17");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var2 = var1.getForeignKeyConstraints();
    java.util.List var3 = var1.getColumns();
    org.databene.jdbacl.model.DefaultDBColumn var6 = new org.databene.jdbacl.model.DefaultDBColumn("call next value for 'hi!'", (org.databene.jdbacl.model.DBTable)var1, 100, "select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    boolean var7 = var6.isVersionColumn();
    java.lang.String var8 = var6.getDefaultValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test18");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var3 = var2.isConstant();
    java.lang.Object var4 = var2.getValue();
    org.databene.jdbacl.identity.xml.IdentityParseContext var5 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var6 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var5.addParser((org.databene.webdecs.xml.XMLElementParser)var6);
    java.lang.Object var9 = var5.get("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    java.util.Set var10 = var5.entrySet();
    var5.remove("CREATE SEQUENCE 10");
    org.databene.jdbacl.identity.xml.IdentityParseContext var14 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var15 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var14.addParser((org.databene.webdecs.xml.XMLElementParser)var15);
    org.databene.jdbacl.identity.xml.IdentityParseContext var17 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var18 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var17.addParser((org.databene.webdecs.xml.XMLElementParser)var18);
    var14.addParser((org.databene.webdecs.xml.XMLElementParser)var18);
    var5.set("select next value for (\"sequence\")", (java.lang.Object)var14);
    java.lang.Object var22 = var2.evaluate((org.databene.commons.Context)var5);
    java.lang.Object var23 = var2.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "sequence"+ "'", var4.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test19");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String var18 = var17.toString();
    boolean var19 = var17.isNameDeterministic();
    var17.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var30 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var30.setSchemaName("alter sequence hi! restart with 1");
    boolean var33 = var17.equals((java.lang.Object)var30);
    org.databene.jdbacl.model.cache.CachingDBImporter var35 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var30, "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    var35.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var18.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test20");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.Collection var1 = var0.getSubContainers();
    org.databene.jdbacl.sql.parser.SQLLexer var3 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var5 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var5.release((-1));
    boolean var9 = var3.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var5, 0);
    int var10 = var3.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var3.consumeUntil((org.antlr.runtime.IntStream)var12, 100);
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    var3.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var25);
    java.util.List var27 = var0.getSequences(false, var25);
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var32 = var31.getTables();
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var31);
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    java.util.List var44 = var33.getTables(false, var43);
    org.databene.jdbacl.model.DBCatalog var47 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var48 = var47.getName();
    org.databene.jdbacl.model.Database var49 = var47.getDatabase();
    java.lang.String var50 = var47.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var52 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var54 = var52.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var55 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var56 = var55.getName();
    java.lang.String var57 = var52.formatValue((java.lang.Object)var55);
    var55.setName("'hi!'");
    java.util.List var60 = var55.getSchemas();
    org.databene.jdbacl.model.DBSchema var61 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var55);
    var47.removeSchema(var61);
    org.databene.jdbacl.dialect.DerbyDialect var65 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var67 = var65.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var68 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var69 = var68.getName();
    java.lang.String var70 = var65.formatValue((java.lang.Object)var68);
    var68.setName("'hi!'");
    java.util.List var73 = var68.getSchemas();
    org.databene.jdbacl.model.DBSchema var74 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var68);
    org.databene.jdbacl.model.DBTrigger var75 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var74);
    var75.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var78 = var75.getTriggerBody();
    java.lang.String var79 = var75.getColumnName();
    java.lang.String var80 = var75.getWhenClause();
    var61.addTrigger(var75);
    org.databene.jdbacl.model.DBTrigger var82 = new org.databene.jdbacl.model.DBTrigger("-1", var61);
    java.util.List var84 = var61.getSequences(true);
    java.util.List var85 = var33.getSequences(true, var84);
    java.util.List var87 = var33.getSequences(true);
    java.util.List var88 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var33);
    java.util.List var89 = var0.getTables(false, var88);
    java.util.List var90 = var0.getTables();
    org.databene.jdbacl.model.TableContainer var92 = new org.databene.jdbacl.model.TableContainer("");
    var0.addSubContainer(var92);
    java.util.List var94 = var0.getTables();
    org.databene.jdbacl.model.TableContainer var96 = new org.databene.jdbacl.model.TableContainer("hi! as 10 on . = 10.");
    java.util.List var97 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var96);
    var0.addSubContainer(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test21");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getIncrementIfNotDefault();
    java.math.BigInteger var6 = var3.getMinValue();
    java.lang.String var7 = var3.getSchemaName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi! as 10 on . = 10."+ "'", var7.equals("hi! as 10 on . = 10."));

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test22");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!''", "foreign key constraint.DROP SEQUENCE ");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test23");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    java.lang.String var6 = var0.renderSequenceValue("drop generator .", 10L);
    boolean var9 = var0.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "\"'hi!'\"");
    java.lang.String var11 = var0.renderFetchSequenceValue("alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "alter sequence drop generator . restart with 10"+ "'", var6.equals("alter sequence drop generator . restart with 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "call next value for alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10"+ "'", var11.equals("call next value for alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10"));

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test24");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    java.util.Map var23 = var21.getCells();
    org.databene.jdbacl.sql.parser.SQLLexer var24 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var26 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var26.release((-1));
    boolean var30 = var24.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var26, 0);
    org.databene.jdbacl.sql.parser.SQLLexer var31 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var31.mCREATE_TABLE();
    var31.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var35 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var37 = var35.LT(10);
    var31.setCharStream((org.antlr.runtime.CharStream)var35);
    boolean var40 = var24.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var35, 69);
    var24.beginResync();
    int var42 = var24.getNumberOfSyntaxErrors();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.setPKValue((java.lang.Object)var24);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test25");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var22 = var21.getType();
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var40.addColumnName("sequence");
    var21.addUkConstraint(var40);
    org.databene.jdbacl.model.DBColumn[] var44 = new org.databene.jdbacl.model.DBColumn[] { var21};
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.renderColumnNames(var44);
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.renderColumnNames(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var45.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var46.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test26");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setCache((java.lang.Long)100L);
    java.lang.String var12 = var9.getObjectType();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    java.lang.String var14 = var9.getSchemaName();
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    org.databene.jdbacl.model.DBSchema var26 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var20);
    org.databene.jdbacl.model.DBTrigger var27 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var26);
    var27.setTableName("sequence");
    boolean var30 = var9.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.lang.String var31 = var27.getDescription();
    java.lang.String var32 = var27.getStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi! as 10 on . = 10."+ "'", var14.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test27");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    var36.setBaseObjectType("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var36.setBaseObjectType("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    java.lang.String var41 = var36.getTriggerType();
    var36.setTriggerBody("null[DROP SEQUENCE ]");
    java.lang.String var44 = var36.getStatus();
    java.lang.String var45 = var36.getTableOwner();
    java.lang.String var46 = var36.getTableOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test28");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    boolean var11 = var6.isImportingIndexes();
    var6.setExcludeTables("'hi!'");
    var6.setImportingPackages(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var16 = var6.getConnection();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test29");


    org.databene.jdbacl.DBUtil.checkReadOnly("alter sequence CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'' restart with 10", false);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test30");


    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var1 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("select gen_id(CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL, 1) from RDB$DATABASE;");

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test31");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var43 = var41.getTable();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.CompositeDBObject var45 = var41.getOwner();
    org.databene.jdbacl.model.FKChangeRule var46 = var41.getDeleteRule();
    java.lang.String var47 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NO_ACTION"+ "'", var47.equals("NO_ACTION"));

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test32");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var40.addColumnName("sequence");
    var21.addUkConstraint(var40);
    org.databene.jdbacl.model.DBDataType var46 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var47 = var46.isAlpha();
    var21.setType(var46);
    org.databene.jdbacl.model.DBForeignKeyConstraint var49 = var21.getForeignKeyConstraint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test33");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    java.math.BigInteger var6 = var3.getIncrement();
    java.lang.Boolean var7 = var3.isCycle();
    java.lang.String var8 = var3.dropDDL();
    java.math.BigInteger var9 = var3.getMaxValueIfNotDefault();
    org.databene.jdbacl.dialect.PostgreSQLDialect var10 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var13 = var10.isDefaultCatalog("", "");
    java.lang.String var15 = var10.formatValue((java.lang.Object)10);
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var21 = var16.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var25.setCache((java.lang.Long)100L);
    java.lang.String var28 = var25.getObjectType();
    java.lang.String var29 = var16.renderCreateSequence(var25);
    java.lang.String var30 = var25.getSchemaName();
    java.lang.String var31 = var10.renderCreateSequence(var25);
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var36 = var35.dropDDL();
    java.math.BigInteger var37 = var35.getMinValueIfNotDefault();
    java.lang.String var38 = var10.renderCreateSequence(var35);
    org.databene.jdbacl.dialect.OracleDialect var39 = new org.databene.jdbacl.dialect.OracleDialect();
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var43.setCache((java.lang.Long)100L);
    java.lang.String var46 = var43.getObjectType();
    java.math.BigInteger var47 = var43.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var51 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var51.setName("10");
    java.math.BigInteger var54 = var51.getIncrement();
    java.math.BigInteger var55 = var51.getIncrement();
    var43.setLastNumber(var55);
    var43.setOrder((java.lang.Boolean)false);
    java.lang.String var59 = var39.renderCreateSequence(var43);
    org.databene.jdbacl.model.DBSequence var63 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var63.setName("10");
    java.math.BigInteger var66 = var63.getIncrement();
    org.databene.jdbacl.model.DBSequence var70 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var70.setName("10");
    java.math.BigInteger var73 = var70.getIncrement();
    java.math.BigInteger var74 = var70.getIncrement();
    var63.setStart(var74);
    var43.setMinValue(var74);
    var35.setMinValue(var74);
    var3.setLastNumber(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence 10"+ "'", var8.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "10"+ "'", var15.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var29.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi! as 10 on . = 10."+ "'", var30.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var31.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "drop sequence "+ "'", var36.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "CREATE SEQUENCE "+ "'", var38.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "sequence"+ "'", var46.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"+ "'", var59.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test34");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    java.util.List var17 = var15.getProcedures();
    var15.setObjectType("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    var15.setStatus("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    java.util.List var22 = var15.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test35");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerType();
    var12.setTriggerType("org.firebirdsql.jdbc.FBDriver");
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var12);
    var12.setWhenClause("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    var12.setColumnName("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var18.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test36");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    java.lang.String var33 = var31.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var34 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var37 = var34.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var39 = var34.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var40 = var31.equals((java.lang.Object)var39);
    org.databene.jdbacl.model.DefaultDBColumn var43 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var26, var31, (java.lang.Integer)0, (java.lang.Integer)(-1));
    var43.setDefaultValue(".");
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var43);
    java.lang.Integer var47 = var43.getSize();
    org.databene.jdbacl.model.DBCatalog var48 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var49 = var48.getName();
    org.databene.jdbacl.model.Database var50 = var48.getDatabase();
    org.databene.jdbacl.model.DBSequence var54 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var55 = var54.dropDDL();
    java.math.BigInteger var56 = var54.getMinValueIfNotDefault();
    boolean var57 = var48.isIdentical((org.databene.jdbacl.model.DBObject)var54);
    org.databene.jdbacl.model.DBTreeModel var58 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.dialect.DerbyDialect var61 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var63 = var61.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var64 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var65 = var64.getName();
    java.lang.String var66 = var61.formatValue((java.lang.Object)var64);
    var64.setName("'hi!'");
    java.util.List var69 = var64.getSchemas();
    org.databene.jdbacl.model.DBSchema var70 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var64);
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable("select next value for 10", var70);
    org.databene.jdbacl.model.DBCatalog var73 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    int var74 = var58.getIndexOfChild((org.databene.jdbacl.model.DBObject)var71, (org.databene.jdbacl.model.DBObject)var73);
    var43.setOwner((org.databene.jdbacl.model.CompositeDBObject)var73);
    var73.setName("container");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "DROP SEQUENCE "+ "'", var33.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var39.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 0+ "'", var47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "drop sequence "+ "'", var55.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test37");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getForeignKeyColumnNames();
    org.databene.jdbacl.model.TableContainer var47 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var48 = var47.getTables();
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var47);
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    var50.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var53 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var54 = var53.getForeignKeyConstraints();
    var50.addReferrer((org.databene.jdbacl.model.DBTable)var53);
    var47.addTable((org.databene.jdbacl.model.DBTable)var53);
    java.lang.String[] var61 = new java.lang.String[] { ""};
    java.lang.String[] var65 = new java.lang.String[] { ""};
    java.lang.String var66 = org.databene.jdbacl.SQLUtil.join("", "", var61, "hi!", "10", var65);
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var61);
    org.databene.jdbacl.model.TableContainer var70 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var71 = var70.getTables();
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var70);
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    var73.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var76 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var77 = var76.getForeignKeyConstraints();
    var73.addReferrer((org.databene.jdbacl.model.DBTable)var76);
    var70.addTable((org.databene.jdbacl.model.DBTable)var76);
    java.lang.String[] var82 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var83 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var82);
    org.databene.jdbacl.model.DBForeignKeyConstraint var84 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var53, var61, (org.databene.jdbacl.model.DBTable)var76, var82);
    java.lang.String[][] var85 = new java.lang.String[][] { var82};
    org.databene.jdbacl.ResultsWithMetadata var86 = new org.databene.jdbacl.ResultsWithMetadata(var42, var85);
    java.lang.String[][] var87 = var86.getResults();
    java.lang.String[] var88 = var86.getColumnLabels();
    java.lang.String[] var89 = var86.getColumnLabels();
    java.lang.String[] var90 = var86.getColumnLabels();
    java.lang.String[] var91 = var86.getColumnLabels();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi! as 10 on . = 10."+ "'", var66.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "."+ "'", var67.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var83.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test38");


    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var7 = var6.getTables();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var6);
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var13 = var12.getForeignKeyConstraints();
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var12);
    var6.addTable((org.databene.jdbacl.model.DBTable)var12);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var20);
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var41 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var41);
    org.databene.jdbacl.model.DBForeignKeyConstraint var43 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var12, var20, (org.databene.jdbacl.model.DBTable)var35, var41);
    java.lang.String[] var44 = var43.getRefereeColumnNames();
    java.lang.String[] var45 = var43.getForeignKeyColumnNames();
    org.databene.jdbacl.identity.UniqueKeyIdentity var46 = new org.databene.jdbacl.identity.UniqueKeyIdentity("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'", var45);
    java.lang.String var47 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("drop sequence", var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "."+ "'", var26.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var42.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "drop sequence."+ "'", var47.equals("drop sequence."));

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test39");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", false);
    boolean var3 = var2.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test40");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var27.setCache((java.lang.Long)100L);
    java.lang.String var30 = var27.getObjectType();
    java.math.BigInteger var31 = var27.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setName("10");
    java.math.BigInteger var38 = var35.getIncrement();
    java.math.BigInteger var39 = var35.getIncrement();
    var27.setLastNumber(var39);
    var27.setOrder((java.lang.Boolean)false);
    var21.setCellValue("alter sequence  restart with -1", (java.lang.Object)var27);
    org.databene.jdbacl.model.TableContainer var48 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var49 = var48.getTables();
    org.databene.jdbacl.model.TableContainer var50 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    var48.addTable((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    org.databene.jdbacl.model.TableContainer var71 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var72 = var71.getTables();
    org.databene.jdbacl.model.TableContainer var73 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var71);
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    var74.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var77 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var78 = var77.getForeignKeyConstraints();
    var74.addReferrer((org.databene.jdbacl.model.DBTable)var77);
    var71.addTable((org.databene.jdbacl.model.DBTable)var77);
    java.lang.String[] var83 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var83);
    org.databene.jdbacl.model.DBForeignKeyConstraint var85 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var54, var62, (org.databene.jdbacl.model.DBTable)var77, var83);
    boolean var86 = var85.isNameDeterministic();
    java.lang.Object[] var87 = var21.getFKComponents(var85);
    java.lang.String var88 = var21.toString();
    java.util.Map var89 = var21.getCells();
    org.databene.jdbacl.model.DBTable var90 = var21.getTable();
    java.lang.String var91 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "."+ "'", var68.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "null[]"+ "'", var88.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "null[]"+ "'", var91.equals("null[]"));

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test41");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    boolean var92 = var90.isUnique();
    boolean var93 = var90.isUnique();
    java.lang.String[] var94 = var90.getColumnNames();
    var90.addColumnName("drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test42");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    org.databene.jdbacl.model.DBSequence var18 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var18.setCache((java.lang.Long)100L);
    java.lang.String var21 = var18.getObjectType();
    java.math.BigInteger var22 = var18.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var26 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var26.setName("10");
    java.math.BigInteger var29 = var26.getIncrement();
    java.math.BigInteger var30 = var26.getIncrement();
    var18.setLastNumber(var30);
    var9.setIncrement(var30);
    var3.setIncrement(var30);
    var3.setOrder((java.lang.Boolean)false);
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    org.databene.jdbacl.model.DBUniqueConstraint var55 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var41, "select nextval('')", false, var49);
    var41.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var60 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var60);
    org.databene.jdbacl.model.DBUniqueConstraint var62 = var41.getUniqueConstraint(var60);
    var37.addTable((org.databene.jdbacl.model.DBTable)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setOwner((org.databene.jdbacl.model.CompositeDBObject)var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "sequence"+ "'", var21.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var61.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test43");


    org.databene.jdbacl.model.DBDataType var2 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    java.lang.String[] var5 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var12 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var13 = var12.getValue();
    org.databene.jdbacl.sql.ColumnExpression var16 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var17 = var16.getValue();
    org.databene.jdbacl.sql.BetweenExpression var18 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var12, (org.databene.script.Expression)var16);
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var24 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var25 = var24.getValue();
    org.databene.jdbacl.sql.ColumnExpression var28 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var29 = var28.getValue();
    org.databene.jdbacl.sql.BetweenExpression var30 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var21, (org.databene.script.Expression)var24, (org.databene.script.Expression)var28);
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var36 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var37 = var36.getValue();
    org.databene.jdbacl.sql.ColumnExpression var40 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var41 = var40.getValue();
    org.databene.jdbacl.sql.BetweenExpression var42 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var33, (org.databene.script.Expression)var36, (org.databene.script.Expression)var40);
    org.databene.jdbacl.sql.BetweenExpression var43 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var16, (org.databene.script.Expression)var24, (org.databene.script.Expression)var36);
    org.databene.script.Expression[] var44 = new org.databene.script.Expression[] { var16};
    org.databene.jdbacl.sql.FunctionInvocation var45 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var44);
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.renderWhereClause(var5, (java.lang.Object[])var44);
    org.databene.jdbacl.sql.FunctionInvocation var47 = new org.databene.jdbacl.sql.FunctionInvocation("select next value for SET GENERATOR . TO -1", var44);
    boolean var48 = var2.equals((java.lang.Object)"select next value for SET GENERATOR . TO -1");
    boolean var49 = var2.isLOB();
    boolean var50 = var2.isTemporal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "sequence"+ "'", var13.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "sequence"+ "'", var17.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "sequence"+ "'", var25.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "sequence"+ "'", var29.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "sequence"+ "'", var37.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "sequence"+ "'", var41.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var46.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test44");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var39 = var38.getTables();
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var45 = var44.getForeignKeyConstraints();
    var41.addReferrer((org.databene.jdbacl.model.DBTable)var44);
    var38.addTable((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.join("", "", var52, "hi!", "10", var56);
    java.lang.String var58 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    org.databene.jdbacl.model.TableContainer var61 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var62 = var61.getTables();
    org.databene.jdbacl.model.TableContainer var63 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var61);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    var61.addTable((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var73 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var74 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var73);
    org.databene.jdbacl.model.DBForeignKeyConstraint var75 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var44, var52, (org.databene.jdbacl.model.DBTable)var67, var73);
    org.databene.jdbacl.model.DBTable var76 = var75.getRefereeTable();
    var9.addForeignKey(var75);
    java.lang.String[] var78 = var75.getColumnNames();
    var0.addForeignKey(var75);
    var75.setName("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    org.databene.jdbacl.model.DBTable var82 = var75.getTable();
    org.databene.jdbacl.model.DBRow var83 = new org.databene.jdbacl.model.DBRow(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi! as 10 on . = 10."+ "'", var57.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "."+ "'", var58.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test45");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mPLUS();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test46");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var3 = var1.LA(10);
    java.lang.String var4 = var1.getText();
    var1.release(0);
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "DROP SEQUENCE "+ "'", var4.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "DROP SEQUENCE "+ "'", var7.equals("DROP SEQUENCE "));

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test47");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var80 = new org.databene.jdbacl.ResultSetConverter(var78);
    boolean var81 = var80.isParallelizable();
    java.lang.String var82 = var80.toString();
    java.lang.Class var83 = var80.getSourceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "ResultSetConverter"+ "'", var82.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test48");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    var0.setDefaultUser("hi! as 10 on . = 10.");
    java.lang.String var6 = var0.getDefaultSchema();
    var0.setDefaultDatabase("DROP SEQUENCE NOT REGEXP_MATCHES(sequence, '') RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test49");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    java.lang.String var4 = var0.regexQuery("drop sequence alter sequence hi! restart with 1", true, "CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var6 = var0.isDeterministicFKName("\"sequence\"");
    java.lang.String var10 = var0.regexQuery("select alter sequence drop sequence 10 restart with 0.nextval from dual", false, "CONSTRAINT \"hi! identity by primary key\" ");
    boolean var12 = var0.isDeterministicPKName("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1");
    boolean var14 = var0.isDeterministicCheckName("hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1");
    boolean var15 = var0.supportsRegex();
    java.lang.String var17 = var0.renderFetchSequenceValue("select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')"+ "'", var4.equals("NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')"+ "'", var10.equals("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;.nextval from dual"+ "'", var17.equals("select select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;.nextval from dual"));

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test50");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    var36.setStatus("select next value for jdbc:h2:mem:select next value for 10");
    var36.setReferencingNames("null");
    java.lang.String var41 = var36.getWhenClause();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test51");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getTriggerBody();
    var12.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var12.setTriggerBody("DROP SEQUENCE -1 RESTRICT");
    var12.setTriggerType("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.String var23 = var12.getDescription();
    java.lang.String var24 = var12.getStatus();
    var12.setBaseObjectType("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var12.setTriggerType("()");
    java.lang.String var29 = var12.getTableOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var23.equals("CREATE GENERATOR drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test52");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("alter sequence CREATE GENERATOR drop sequence  restart with -1 DROP SEQUENCE  NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test53");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBTreeModel var10 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var0);
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    org.databene.jdbacl.model.DBDataType var20 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var21 = var20.isAlpha();
    java.lang.String var22 = var20.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var23 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var26 = var23.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var28 = var23.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var29 = var20.equals((java.lang.Object)var28);
    org.databene.jdbacl.model.DefaultDBColumn var32 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var15, var20, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.dialect.DerbyDialect var33 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var35 = var33.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var36 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var37 = var36.getName();
    java.lang.String var38 = var33.formatValue((java.lang.Object)var36);
    var36.setName("'hi!'");
    java.util.List var41 = var36.getSchemas();
    boolean var42 = var32.isEquivalent((org.databene.jdbacl.model.DBObject)var36);
    org.databene.jdbacl.model.DBTable var45 = var36.getTable("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100", false);
    var36.setDoc("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')");
    int var48 = var10.getChildCount((org.databene.jdbacl.model.DBObject)var36);
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var52 = var51.getTables();
    org.databene.jdbacl.model.TableContainer var53 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var51);
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    var54.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var57 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var58 = var57.getForeignKeyConstraints();
    var54.addReferrer((org.databene.jdbacl.model.DBTable)var57);
    java.lang.String[] var65 = new java.lang.String[] { ""};
    java.lang.String[] var69 = new java.lang.String[] { ""};
    java.lang.String var70 = org.databene.jdbacl.SQLUtil.join("", "", var65, "hi!", "10", var69);
    org.databene.jdbacl.model.DBUniqueConstraint var71 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var57, "select nextval('')", false, var65);
    var57.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var51.addTable((org.databene.jdbacl.model.DBTable)var57);
    org.databene.jdbacl.model.DBTable var76 = var51.getTable("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.model.DBCatalog var78 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var79 = var78.getName();
    org.databene.jdbacl.model.Database var80 = var78.getDatabase();
    java.lang.String var81 = var78.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var83 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var85 = var83.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var86 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var87 = var86.getName();
    java.lang.String var88 = var83.formatValue((java.lang.Object)var86);
    var86.setName("'hi!'");
    java.util.List var91 = var86.getSchemas();
    org.databene.jdbacl.model.DBSchema var92 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var86);
    var78.removeSchema(var92);
    java.util.List var95 = var92.getTables(false);
    java.util.List var96 = var51.getSequences(true, var95);
    java.util.List var98 = var51.getSequences(true);
    org.databene.jdbacl.model.DBObject var99 = var10.getParent((org.databene.jdbacl.model.DBObject)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "DROP SEQUENCE "+ "'", var22.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var28.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi! as 10 on . = 10."+ "'", var70.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test54");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "trigger", "NOT drop sequence  ~ 'alter sequence  restart with -1'");

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test55");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var9 = var0.renderFetchSequenceValue("");
    java.lang.String var13 = var0.regexQuery("drop generator sequence", true, "hi!");
    boolean var15 = var0.isDeterministicPKName("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    org.databene.jdbacl.model.DBSequence var19 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var20 = var19.dropDDL();
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var19);
    var19.setName("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL");
    java.lang.String var24 = var0.renderCreateSequence(var19);
    boolean var25 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('')"+ "'", var9.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop generator sequence ~ 'hi!'"+ "'", var13.equals("NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "drop sequence "+ "'", var20.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "CREATE SEQUENCE CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL"+ "'", var24.equals("CREATE SEQUENCE CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test56");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.dialect.DerbyDialect var25 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var27 = var25.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var28 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var29 = var28.getName();
    java.lang.String var30 = var25.formatValue((java.lang.Object)var28);
    var28.setName("'hi!'");
    java.util.List var33 = var28.getSchemas();
    org.databene.jdbacl.model.DBSchema var34 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var28);
    org.databene.jdbacl.model.DBTrigger var35 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var34);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    org.databene.jdbacl.model.DBUniqueConstraint var53 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var39, "select nextval('')", false, var47);
    org.databene.jdbacl.model.DBCatalog var54 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var55 = var54.getName();
    java.util.List var56 = var54.getComponents();
    boolean var57 = var53.isIdentical((org.databene.jdbacl.model.DBObject)var54);
    boolean var58 = var35.equals((java.lang.Object)var57);
    var21.setCellValue("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (java.lang.Object)var58);
    java.lang.Object var61 = var21.getCellValue("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (, DROP SEQUENCE )");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test57");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.Collection var1 = var0.getSubContainers();
    org.databene.jdbacl.sql.parser.SQLLexer var3 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var5 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var5.release((-1));
    boolean var9 = var3.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var5, 0);
    int var10 = var3.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var3.consumeUntil((org.antlr.runtime.IntStream)var12, 100);
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    var3.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var25);
    java.util.List var27 = var0.getSequences(false, var25);
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var32 = var31.getTables();
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var31);
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    java.util.List var44 = var33.getTables(false, var43);
    org.databene.jdbacl.model.DBCatalog var47 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var48 = var47.getName();
    org.databene.jdbacl.model.Database var49 = var47.getDatabase();
    java.lang.String var50 = var47.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var52 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var54 = var52.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var55 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var56 = var55.getName();
    java.lang.String var57 = var52.formatValue((java.lang.Object)var55);
    var55.setName("'hi!'");
    java.util.List var60 = var55.getSchemas();
    org.databene.jdbacl.model.DBSchema var61 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var55);
    var47.removeSchema(var61);
    org.databene.jdbacl.dialect.DerbyDialect var65 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var67 = var65.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var68 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var69 = var68.getName();
    java.lang.String var70 = var65.formatValue((java.lang.Object)var68);
    var68.setName("'hi!'");
    java.util.List var73 = var68.getSchemas();
    org.databene.jdbacl.model.DBSchema var74 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var68);
    org.databene.jdbacl.model.DBTrigger var75 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var74);
    var75.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var78 = var75.getTriggerBody();
    java.lang.String var79 = var75.getColumnName();
    java.lang.String var80 = var75.getWhenClause();
    var61.addTrigger(var75);
    org.databene.jdbacl.model.DBTrigger var82 = new org.databene.jdbacl.model.DBTrigger("-1", var61);
    java.util.List var84 = var61.getSequences(true);
    java.util.List var85 = var33.getSequences(true, var84);
    java.util.List var87 = var33.getSequences(true);
    java.util.List var88 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var33);
    java.util.List var89 = var0.getTables(false, var88);
    java.util.List var90 = var0.getTables();
    org.databene.jdbacl.model.TableContainer var92 = new org.databene.jdbacl.model.TableContainer("");
    var0.addSubContainer(var92);
    java.util.List var94 = var0.getTables();
    java.util.List var95 = var0.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test58");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.join("", "", var16, "hi!", "10", var20);
    org.databene.jdbacl.model.DBUniqueConstraint var22 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var8, "select nextval('')", false, var16);
    var8.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    java.util.List var26 = var8.getComponents();
    org.databene.jdbacl.model.DBIndex var28 = var8.getIndex("drop sequence trigger");
    java.util.List var29 = var8.getCheckConstraints();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi! as 10 on . = 10."+ "'", var21.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test59");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var13.setName("10");
    java.math.BigInteger var16 = var13.getIncrement();
    java.math.BigInteger var17 = var13.getIncrement();
    var9.setMaxValue(var17);
    java.lang.String var19 = var0.formatValue((java.lang.Object)var9);
    java.math.BigInteger var20 = var9.getIncrement();
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "call next value for 'hi!'"+ "'", var19.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "sequence call next value for 'hi!'"+ "'", var21.equals("sequence call next value for 'hi!'"));

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test60");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    var10.mSLASH();
    var10.mT__113();
    var10.mT__109();
    var10.mVALUE_LIST();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test61");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    var8.setIncludeTables("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.cache.CachingDBImporter var35 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var8, "alter sequence hi! restart with 1");
    var35.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var37 = var35.importDatabase();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test62");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    boolean var6 = var0.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var9 = var0.renderSequenceValue("drop generator sequence", 100L);
    boolean var10 = var0.isSequenceSupported();
    boolean var13 = var0.isDefaultCatalog("Identity definition by unique key: select next value for 10", "alter sequence drop sequence 10 restart with 0");
    boolean var14 = var0.isSequenceSupported();
    boolean var15 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var9.equals("alter sequence drop generator sequence restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test63");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var40.addColumnName("sequence");
    var21.addUkConstraint(var40);
    org.databene.jdbacl.model.DBDataType var46 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var47 = var46.isAlpha();
    var21.setType(var46);
    var21.setSize((java.lang.Integer)14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test64");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    java.lang.Object[] var4 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("drop sequence 10");
    java.lang.Object[] var6 = var0.createSubPath(var4, (java.lang.Object)(byte)(-1));
    org.databene.jdbacl.identity.IdentityProvider var7 = var0.getIdentityProvider();
    var0.remove("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE ()");
    org.databene.jdbacl.identity.xml.IdentityParseContext var10 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var11 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var10.addParser((org.databene.webdecs.xml.XMLElementParser)var11);
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test65");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "Identity definition by unique key: select next value for 10", "()");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var29 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var9, (-1), "hi! identity by primary key");
    boolean var30 = var29.isNullable();
    var29.setNullable(true);
    boolean var33 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var29);
    var29.setSize((java.lang.Integer)3);
    java.lang.String var36 = org.databene.jdbacl.SQLUtil.renderColumn((org.databene.jdbacl.model.DBColumn)var29);
    org.databene.jdbacl.model.DBSequence var40 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var41 = var40.dropDDL();
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var40);
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    var44.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var47 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var48 = var47.getForeignKeyConstraints();
    var44.addReferrer((org.databene.jdbacl.model.DBTable)var47);
    org.databene.jdbacl.model.DBDataType var52 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var53 = var52.isAlpha();
    java.lang.String var54 = var52.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var55 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var58 = var55.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var60 = var55.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var61 = var52.equals((java.lang.Object)var60);
    org.databene.jdbacl.model.DefaultDBColumn var64 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var47, var52, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var65 = var64.getType();
    org.databene.jdbacl.model.DBDataType var68 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var69 = var68.isAlpha();
    java.lang.String var70 = var68.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var71 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var74 = var71.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var76 = var71.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var77 = var68.equals((java.lang.Object)var76);
    var64.setType(var68);
    boolean var79 = var40.isIdentical((org.databene.jdbacl.model.DBObject)var64);
    boolean var80 = var64.isUnique();
    var64.setNullable(false);
    boolean var83 = var29.isIdentical((org.databene.jdbacl.model.DBObject)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "NOT REGEXP_MATCHES(sequence, '') HI! IDENTITY BY PRIMARY KEY(3) NULL"+ "'", var36.equals("NOT REGEXP_MATCHES(sequence, '') HI! IDENTITY BY PRIMARY KEY(3) NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "drop sequence "+ "'", var41.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "DROP SEQUENCE "+ "'", var54.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var60.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "DROP SEQUENCE "+ "'", var70.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var76.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test66");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("jdbc:hsqldb:mem:jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var4 = var0.isDeterministicFKName("CREATE GENERATOR 'd'");
    boolean var6 = var0.isDeterministicPKName("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test67");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var5 = var0.isDefaultCatalog("10", "hi! identity by primary key");
    boolean var7 = var0.isDeterministicPKName("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var10 = var0.isDefaultCatalog("drop generator drop sequence ", "select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')-identity-select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-.select next value for 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test68");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    var36.setBaseObjectType("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var36.setBaseObjectType("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    var36.setTableName("alter sequence -1 restart with 1");
    java.lang.String var43 = var36.getTriggerBody();
    var36.setTriggerBody("foreign key constraint");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test69");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    org.databene.jdbacl.model.DBTrigger var33 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var32);
    java.util.List var34 = var32.getPackages();
    org.databene.jdbacl.model.DBPackage var35 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var32);
    java.util.List var36 = var35.getComponents();
    org.databene.jdbacl.model.DBProcedure var37 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var35);
    var16.addProcedure(var37);
    java.util.List var39 = var16.getProcedures();
    var16.setObjectId("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var16.setSubObjectName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test70");


    java.lang.String var1 = org.databene.jdbacl.dialect.HSQLUtil.getInMemoryURL("select next value for CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "jdbc:hsqldb:mem:select next value for CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0"+ "'", var1.equals("jdbc:hsqldb:mem:select next value for CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0"));

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test71");


    java.lang.String[] var2 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var3 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var2);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var10 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var10.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var13 = var3.equals((java.lang.Object)"jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var14 = var3.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Identity definition by unique key: select next value for 10"+ "'", var14.equals("Identity definition by unique key: select next value for 10"));

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test72");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var30 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var29);
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var37.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var56 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var58 = var37.getUniqueConstraint(var56);
    org.databene.jdbacl.identity.UniqueKeyIdentity var59 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var56);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var29, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var61 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var18, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var29);
    org.databene.jdbacl.model.DBUniqueIndex var62 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var61);
    var62.addColumnName("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    var15.addIndex((org.databene.jdbacl.model.DBIndex)var62);
    java.lang.String[] var66 = var62.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var60.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test73");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    java.lang.String[] var30 = var22.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var43 = var42.isAlpha();
    java.lang.String var44 = var42.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var45 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var48 = var45.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var50 = var45.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var51 = var42.equals((java.lang.Object)var50);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var37, var42, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = var54.getType();
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String[] var71 = new java.lang.String[] { ""};
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.join("", "", var67, "hi!", "10", var71);
    org.databene.jdbacl.model.DBUniqueConstraint var73 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var59, "select nextval('')", false, var67);
    var73.addColumnName("sequence");
    var54.addUkConstraint(var73);
    org.databene.jdbacl.model.DBUniqueIndex var77 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var73);
    var22.addIndex((org.databene.jdbacl.model.DBIndex)var77);
    org.databene.jdbacl.model.DBTable var79 = var77.getTable();
    org.databene.jdbacl.identity.NaturalPkIdentity var81 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    boolean var83 = var81.equals((java.lang.Object)(short)(-1));
    java.lang.String var84 = var81.toString();
    java.lang.String var85 = var81.getTableName();
    boolean var86 = var77.equals((java.lang.Object)var81);
    org.databene.jdbacl.model.DBTable var87 = var77.getTable();
    org.databene.jdbacl.model.DBSequence var91 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    java.math.BigInteger var92 = var91.getIncrement();
    boolean var93 = var77.isIdentical((org.databene.jdbacl.model.DBObject)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "DROP SEQUENCE "+ "'", var44.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var50.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi! as 10 on . = 10."+ "'", var72.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "NaturalPkIdentity(hi!)"+ "'", var84.equals("NaturalPkIdentity(hi!)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test74");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicPKName("org.firebirdsql.jdbc.FBDriver");
    boolean var6 = var0.isDeterministicFKName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var12 = var11.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    org.databene.jdbacl.model.Database var15 = var13.getDatabase();
    java.lang.String var16 = var13.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    var13.removeSchema(var27);
    org.databene.jdbacl.dialect.DerbyDialect var31 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var33 = var31.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var34 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var35 = var34.getName();
    java.lang.String var36 = var31.formatValue((java.lang.Object)var34);
    var34.setName("'hi!'");
    java.util.List var39 = var34.getSchemas();
    org.databene.jdbacl.model.DBSchema var40 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var34);
    org.databene.jdbacl.model.DBTrigger var41 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var40);
    var41.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var44 = var41.getTriggerBody();
    java.lang.String var45 = var41.getColumnName();
    java.lang.String var46 = var41.getWhenClause();
    var27.addTrigger(var41);
    boolean var48 = var11.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.util.List var49 = var27.getPackages();
    org.databene.jdbacl.model.DBSequence var50 = new org.databene.jdbacl.model.DBSequence("NO_ACTION", var27);
    java.math.BigInteger var51 = var50.getIncrementIfNotDefault();
    java.lang.String var52 = var0.renderCreateSequence(var50);
    boolean var54 = var0.isDeterministicCheckName("DROP SEQUENCE ");
    org.databene.jdbacl.dialect.PostgreSQLDialect var55 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var58 = var55.isDefaultCatalog("", "");
    java.lang.String var60 = var55.formatValue((java.lang.Object)10);
    org.databene.jdbacl.dialect.Derby10_6Dialect var61 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var64 = var61.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var66 = var61.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var70 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var70.setCache((java.lang.Long)100L);
    java.lang.String var73 = var70.getObjectType();
    java.lang.String var74 = var61.renderCreateSequence(var70);
    java.lang.String var75 = var70.getSchemaName();
    java.lang.String var76 = var55.renderCreateSequence(var70);
    org.databene.jdbacl.model.DBSequence var80 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var81 = var80.dropDDL();
    java.math.BigInteger var82 = var80.getMinValueIfNotDefault();
    java.lang.String var83 = var55.renderCreateSequence(var80);
    java.lang.Long var84 = var80.getCache();
    java.lang.String var85 = var0.renderCreateSequence(var80);
    java.lang.String var89 = var0.regexQuery("\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'", false, "JDBCDBImporter");
    boolean var91 = var0.isDeterministicPKName("alter sequence drop generator sequence restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\""+ "'", var52.equals("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "10"+ "'", var60.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "sequence"+ "'", var73.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi! as 10 on . = 10."+ "'", var75.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var76.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "drop sequence "+ "'", var81.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CREATE SEQUENCE "+ "'", var83.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""+ "'", var85.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "REGEXP_LIKE(\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10', 'JDBCDBImporter')"+ "'", var89.equals("REGEXP_LIKE(\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10', 'JDBCDBImporter')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test75");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("NOT REGEXP_MATCHES(DROP SEQUENCE EQUEN RESTRICT, 'DROP SEQUENCE CREATE GENERATOR  RESTRICT')", "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'", "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with 10 restart with 0");

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test76");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var1.reset();
    var1.consume();
    int var4 = var1.mark();
    var1.rewind();
    java.lang.String var6 = var1.getSourceName();
    var1.setLine(85);
    int var10 = var1.LT(41);
    int var11 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 14);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test77");


    org.databene.jdbacl.sql.ColumnExpression var3 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var7 = var6.getValue();
    org.databene.jdbacl.sql.ColumnExpression var10 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var11 = var10.getValue();
    org.databene.jdbacl.sql.BetweenExpression var12 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var3, (org.databene.script.Expression)var6, (org.databene.script.Expression)var10);
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var19 = var18.getValue();
    org.databene.jdbacl.sql.ColumnExpression var22 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var23 = var22.getValue();
    org.databene.jdbacl.sql.BetweenExpression var24 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var15, (org.databene.script.Expression)var18, (org.databene.script.Expression)var22);
    var12.addTerm((org.databene.script.Expression)var18);
    org.databene.script.Expression[] var26 = new org.databene.script.Expression[] { var12};
    org.databene.jdbacl.sql.FunctionInvocation var27 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var26);
    org.databene.jdbacl.identity.xml.IdentityParseContext var28 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var29 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var28.addParser((org.databene.webdecs.xml.XMLElementParser)var29);
    java.lang.Object var32 = var28.get("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    java.util.Set var33 = var28.entrySet();
    java.lang.Object var34 = var27.evaluate((org.databene.commons.Context)var28);
    boolean var35 = var27.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "sequence"+ "'", var11.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "sequence"+ "'", var19.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test78");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.lang.String var19 = var0.renderCreateSequence(var17);
    boolean var22 = var0.isDefaultSchema("VALUES (NEXT VALUE FOR call next value for 'hi!')", "catalog null");
    boolean var24 = var0.isDeterministicFKName("Identity definition by NK-PK query: NOT drop generator sequence ~ 'hi!'");
    boolean var27 = var0.isDefaultSchema("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1", "call next value for CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\"");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test79");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getTriggerBody();
    var12.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var12.setTriggerBody("DROP SEQUENCE -1 RESTRICT");
    var12.setTriggerType("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.String var23 = var12.getDescription();
    java.lang.String var24 = var12.getStatus();
    var12.setBaseObjectType("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var12.setTableName("select alter sequence drop sequence 10 restart with 0.nextval from dual");
    java.lang.String var29 = var12.getWhenClause();
    var12.setReferencingNames("sequence 10 ~ 'REGEXP_MATCHES(catalog, 'call next value for null[]')'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var23.equals("CREATE GENERATOR drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test80");


    org.databene.jdbacl.JDBCDriverInfo var1 = org.databene.jdbacl.JDBCDriverInfo.getInstance("CONSTRAINT hi! UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test81");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    var18.setObjectId("select alter sequence drop sequence 10 restart with 0.nextval from dual");
    java.lang.String var21 = var18.getObjectId();
    java.lang.String var22 = var18.getOverload();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "select alter sequence drop sequence 10 restart with 0.nextval from dual"+ "'", var21.equals("select alter sequence drop sequence 10 restart with 0.nextval from dual"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test82");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var10.getText();
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test83");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.identity.mem.MapperState var1 = org.databene.jdbacl.identity.mem.MapperState.valueOf("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test84");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    java.util.List var3 = var0.getRuleInvocationStack();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var5 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var5.setCharPositionInLine(1);
    int var8 = var5.getCharPositionInLine();
    var5.setCharPositionInLine(69);
    var5.setCharPositionInLine(1);
    var0.setCharStream((org.antlr.runtime.CharStream)var5);
    java.lang.String[] var14 = var0.getTokenNames();
    var0.mT__123();
    java.util.List var16 = var0.getRuleInvocationStack();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__134();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test85");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    org.databene.jdbacl.model.DBTrigger var28 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    var28.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var31 = var28.getTriggerBody();
    java.lang.String var32 = var28.getColumnName();
    java.lang.String var33 = var28.getWhenClause();
    var14.addTrigger(var28);
    java.util.List var35 = var14.getComponents();
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    org.databene.jdbacl.dialect.DerbyDialect var49 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var51 = var49.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var52 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var53 = var52.getName();
    java.lang.String var54 = var49.formatValue((java.lang.Object)var52);
    var52.setName("'hi!'");
    java.util.List var57 = var52.getSchemas();
    org.databene.jdbacl.model.DBSchema var58 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var52);
    org.databene.jdbacl.model.DBTrigger var59 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var58);
    var46.addTrigger(var59);
    boolean var61 = var14.isIdentical((org.databene.jdbacl.model.DBObject)var59);
    var59.setActionType("alter sequence CREATE SEQUENCE 10 restart with 1");
    java.lang.String var64 = var59.getBaseObjectType();
    var59.setWhenClause("drop generator NaturalPkIdentity(hi!)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test86");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    var0.mALTER_TABLE();
    var0.emitErrorMessage("hi! as 10 on . = 10.");
    var0.reset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__83();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test87");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.join("", "", var12, "hi!", "10", var16);
    org.databene.jdbacl.model.DBUniqueConstraint var18 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var4, "select nextval('')", false, var12);
    org.databene.jdbacl.model.DBDataType var21 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var22 = var21.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var4, var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var27 = var26.isConstant();
    java.lang.Object var28 = var26.getValue();
    boolean var29 = var23.equals((java.lang.Object)var26);
    org.databene.jdbacl.identity.xml.IdentityParseContext var30 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var31 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var30.addParser((org.databene.webdecs.xml.XMLElementParser)var31);
    java.lang.Object[] var34 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("drop sequence 10");
    java.lang.Object[] var36 = var30.createSubPath(var34, (java.lang.Object)(byte)(-1));
    boolean var38 = var30.contains("drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'");
    java.lang.Object var39 = var26.evaluate((org.databene.commons.Context)var30);
    java.lang.Object var40 = var26.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi! as 10 on . = 10."+ "'", var17.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "sequence"+ "'", var39.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "sequence"+ "'", var40.equals("sequence"));

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test88");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    boolean var17 = var0.failed();
    org.databene.jdbacl.sql.parser.SQLLexer var18 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var18.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var21 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var23 = var21.LT(10);
    var18.setCharStream((org.antlr.runtime.CharStream)var21);
    org.databene.jdbacl.sql.parser.SQLLexer var25 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var27 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var27.release((-1));
    boolean var31 = var25.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var27, 0);
    var18.setCharStream((org.antlr.runtime.CharStream)var27);
    var0.matchAny((org.antlr.runtime.IntStream)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mQUOTED_NAME();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test89");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var5 = var4.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var10 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var11 = var10.getTableName();
    boolean var12 = var4.isEquivalent(var10);
    java.lang.String var13 = var4.toString();
    java.lang.String[] var14 = var4.getColumnNames();
    java.lang.String var15 = var4.getTableName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "\"'hi!'\""+ "'", var5.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var11.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var13.equals("CONSTRAINT columnCHECK \"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var15.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test90");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getDriverClass();
    java.lang.String var2 = var0.getDriverClass();
    java.lang.String[] var3 = var0.getJars();
    var0.setDefaultUser("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    java.lang.String[] var6 = var0.getJars();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test91");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    java.lang.String var45 = var41.toString();
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    org.databene.jdbacl.model.DBDataType var59 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var60 = var59.isAlpha();
    java.lang.String var61 = var59.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var62 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var65 = var62.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var67 = var62.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var68 = var59.equals((java.lang.Object)var67);
    org.databene.jdbacl.model.DefaultDBColumn var71 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var54, var59, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var72 = var71.getType();
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    var73.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var76 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var77 = var76.getForeignKeyConstraints();
    var73.addReferrer((org.databene.jdbacl.model.DBTable)var76);
    java.lang.String[] var84 = new java.lang.String[] { ""};
    java.lang.String[] var88 = new java.lang.String[] { ""};
    java.lang.String var89 = org.databene.jdbacl.SQLUtil.join("", "", var84, "hi!", "10", var88);
    org.databene.jdbacl.model.DBUniqueConstraint var90 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var76, "select nextval('')", false, var84);
    var90.addColumnName("sequence");
    var71.addUkConstraint(var90);
    org.databene.jdbacl.model.DBUniqueIndex var94 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var90);
    org.databene.jdbacl.model.DBUniqueIndex var95 = new org.databene.jdbacl.model.DBUniqueIndex("\"'hi!'\"", false, var90);
    boolean var96 = var41.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var45.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "DROP SEQUENCE "+ "'", var61.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var67.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi! as 10 on . = 10."+ "'", var89.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test92");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var3 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "sequence");
    org.databene.jdbacl.model.sql.CreateExporter var4 = new org.databene.jdbacl.model.sql.CreateExporter(var1);
    org.databene.jdbacl.model.xml.XMLModelImporter var5 = new org.databene.jdbacl.model.xml.XMLModelImporter(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var6 = var5.importDatabase();
      fail("Expected exception of type org.databene.commons.ImportFailedException");
    } catch (org.databene.commons.ImportFailedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test93");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingIndexes(true);
    var6.close();
    var6.setExcludeTables("alter sequence hi! restart with 1");
    java.lang.String var12 = var6.toString();
    org.databene.jdbacl.model.cache.CachingDBImporter var14 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "select nextval for ') from REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.cache.CachingDBImporter var16 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "select NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.').nextval from dual");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var17 = var6.importDatabase();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "JDBCDBImporter"+ "'", var12.equals("JDBCDBImporter"));

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test94");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    org.databene.jdbacl.dialect.DerbyDialect var28 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var30 = var28.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var31 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var32 = var31.getName();
    java.lang.String var33 = var28.formatValue((java.lang.Object)var31);
    var31.setName("'hi!'");
    java.util.List var36 = var31.getSchemas();
    org.databene.jdbacl.model.DBSchema var37 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var31);
    org.databene.jdbacl.model.DBTrigger var38 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var37);
    var25.addTrigger(var38);
    var12.addTrigger(var38);
    java.util.List var41 = var12.getComponents();
    org.databene.jdbacl.model.DBPackage var42 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var12);
    var42.setSubObjectName("null[false]");
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    var46.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var50 = var49.getForeignKeyConstraints();
    var46.addReferrer((org.databene.jdbacl.model.DBTable)var49);
    java.lang.String[] var57 = new java.lang.String[] { ""};
    java.lang.String[] var61 = new java.lang.String[] { ""};
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.join("", "", var57, "hi!", "10", var61);
    org.databene.jdbacl.model.DBUniqueConstraint var63 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var49, "select nextval('')", false, var57);
    org.databene.jdbacl.model.DBDataType var66 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var67 = var66.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var68 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var49, var66);
    org.databene.jdbacl.model.DBDataType var69 = var68.getType();
    boolean var70 = var42.isIdentical((org.databene.jdbacl.model.DBObject)var68);
    var68.setFractionDigits((java.lang.Integer)69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi! as 10 on . = 10."+ "'", var62.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test95");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var4 = var3.getMaxValue();
    java.lang.String var5 = var3.toString();
    java.lang.String var6 = var3.dropDDL();
    java.lang.Boolean var7 = var3.isOrder();
    java.lang.String var8 = var3.getSchemaName();
    java.lang.Long var9 = var3.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "drop sequence "+ "'", var6.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi! as 10 on . = 10."+ "'", var8.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test96");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__92();
    var10.mT__124();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test97");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var2 = var0.isDeterministicFKName("CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.");
    boolean var4 = var0.isDeterministicFKName("null.jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.");
    java.lang.String var6 = var0.renderFetchSequenceValue("Identity definition by unique key: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "VALUES (NEXT VALUE FOR Identity definition by unique key: )"+ "'", var6.equals("VALUES (NEXT VALUE FOR Identity definition by unique key: )"));

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test98");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getIncrementIfNotDefault();
    java.math.BigInteger var6 = var3.getMinValue();
    java.math.BigInteger var7 = var3.getMinValue();
    java.lang.Boolean var8 = var3.isOrder();
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var13 = var12.dropDDL();
    java.math.BigInteger var14 = var12.getIncrementIfNotDefault();
    java.math.BigInteger var15 = var12.getMinValue();
    java.math.BigInteger var16 = var12.getMinValue();
    java.lang.Boolean var17 = var12.isOrder();
    java.math.BigInteger var18 = var12.getIncrementIfNotDefault();
    var12.setCycle((java.lang.Boolean)true);
    java.lang.String var21 = var12.getCatalogName();
    java.math.BigInteger var22 = var12.getIncrement();
    var3.setLastNumber(var22);
    java.lang.Boolean var24 = var3.isOrder();
    java.lang.String var25 = var3.dropDDL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "drop sequence "+ "'", var13.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "drop sequence "+ "'", var21.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "drop sequence "+ "'", var25.equals("drop sequence "));

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test99");


    java.util.Locale var0 = javax.swing.JComponent.getDefaultLocale();
    javax.swing.JComponent.setDefaultLocale(var0);
    javax.swing.JComponent.setDefaultLocale(var0);
    javax.swing.JComponent.setDefaultLocale(var0);
    javax.swing.JComponent.setDefaultLocale(var0);
    javax.swing.JComponent.setDefaultLocale(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test100");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.join("", "", var12, "hi!", "10", var16);
    org.databene.jdbacl.model.DBUniqueConstraint var18 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var4, "select nextval('')", false, var12);
    org.databene.jdbacl.model.DBDataType var21 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var22 = var21.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var4, var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var27 = var26.isConstant();
    java.lang.Object var28 = var26.getValue();
    boolean var29 = var23.equals((java.lang.Object)var26);
    var23.setDefaultValue("jdbc:h2:mem:select next value for 10");
    boolean var32 = var23.isNullable();
    org.databene.jdbacl.model.DBDataType var33 = var23.getType();
    org.databene.jdbacl.dialect.FirebirdDialect var34 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var36 = var34.isDeterministicUKName("10");
    boolean var37 = var34.isSequenceSupported();
    java.lang.String var39 = var34.renderDropSequence("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    java.lang.String var40 = var34.getJDBCDriverClass();
    boolean var41 = var23.equals((java.lang.Object)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi! as 10 on . = 10."+ "'", var17.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var39.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "org.firebirdsql.jdbc.FBDriver"+ "'", var40.equals("org.firebirdsql.jdbc.FBDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test101");


    java.lang.String var1 = org.databene.jdbacl.DBUtil.escape("VALUES (NEXT VALUE FOR call next value for 'hi!') SIMILAR TO 'alter sequence CREATE GENERATOR drop sequence  restart with -1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "VALUES (NEXT VALUE FOR call next value for ''hi!'') SIMILAR TO ''alter sequence CREATE GENERATOR drop sequence  restart with -1''"+ "'", var1.equals("VALUES (NEXT VALUE FOR call next value for ''hi!'') SIMILAR TO ''alter sequence CREATE GENERATOR drop sequence  restart with -1''"));

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test102");


    org.databene.jdbacl.sql.parser.SQLParser.between_expression_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.between_expression_return();
    java.lang.Object var1 = var0.getStop();
    java.lang.Object var2 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test103");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var3 = var0.renderSetSequenceValue("select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE;", 100L);
    boolean var4 = var0.supportsRegex();
    boolean var5 = var0.supportsRegex();
    java.lang.String var7 = var0.renderDropSequence("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99"+ "'", var3.equals("SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop generator (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var7.equals("drop generator (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test104");


    java.lang.String[] var2 = new java.lang.String[] { "drop sequence select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')"};
    org.databene.jdbacl.model.TableContainer var9 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var10 = var9.getTables();
    org.databene.jdbacl.model.TableContainer var11 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var9);
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    var9.addTable((org.databene.jdbacl.model.DBTable)var15);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var23);
    org.databene.jdbacl.model.TableContainer var32 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var33 = var32.getTables();
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var32);
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    var35.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var39 = var38.getForeignKeyConstraints();
    var35.addReferrer((org.databene.jdbacl.model.DBTable)var38);
    var32.addTable((org.databene.jdbacl.model.DBTable)var38);
    java.lang.String[] var44 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var44);
    org.databene.jdbacl.model.DBForeignKeyConstraint var46 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var15, var23, (org.databene.jdbacl.model.DBTable)var38, var44);
    java.lang.String[] var47 = var46.getRefereeColumnNames();
    java.lang.String var48 = var46.toString();
    org.databene.jdbacl.model.DBTable var49 = var46.getRefereeTable();
    java.lang.String[] var50 = var46.getForeignKeyColumnNames();
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.innerJoin("drop sequence DROP SEQUENCE (0,-1)", var2, "table", "null.jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.", var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "."+ "'", var29.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var45.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var48.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "table as null.jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -. on drop sequence DROP SEQUENCE (0,-1).drop sequence select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'') = null.jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.."+ "'", var51.equals("table as null.jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -. on drop sequence DROP SEQUENCE (0,-1).drop sequence select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'') = null.jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.."));

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test105");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    var6.setImportingTriggers(true);
    org.databene.jdbacl.DBExecutionResult var14 = new org.databene.jdbacl.DBExecutionResult((java.lang.Object)var6, (java.lang.Boolean)true);
    var6.setCatalogName("drop sequence alter sequence NOT drop generator sequence ~ 'hi!' restart with 10 NOT REGEXP 'jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: '");

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test106");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    var10.addTrigger(var23);
    java.lang.String var25 = var23.getTableOwner();
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    var28.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var32 = var31.getForeignKeyConstraints();
    var28.addReferrer((org.databene.jdbacl.model.DBTable)var31);
    java.lang.String[] var39 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var40 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var39);
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    var44.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var47 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var48 = var47.getForeignKeyConstraints();
    var44.addReferrer((org.databene.jdbacl.model.DBTable)var47);
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String[] var59 = new java.lang.String[] { ""};
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.join("", "", var55, "hi!", "10", var59);
    org.databene.jdbacl.model.DBUniqueConstraint var61 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var47, "select nextval('')", false, var55);
    var47.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var66 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var66);
    org.databene.jdbacl.model.DBUniqueConstraint var68 = var47.getUniqueConstraint(var66);
    org.databene.jdbacl.identity.UniqueKeyIdentity var69 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var66);
    java.lang.String var70 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var39, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var66);
    org.databene.jdbacl.model.DBUniqueConstraint var71 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var28, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var39);
    org.databene.jdbacl.model.DBUniqueIndex var72 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var71);
    boolean var73 = var23.isIdentical((org.databene.jdbacl.model.DBObject)var71);
    var23.setColumnName("CONSTRAINT \"jdbc:h2:mem:select next value for 10\" PRIMARY KEY ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi! as 10 on . = 10."+ "'", var60.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var67.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var70.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test107");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__111();
    org.databene.jdbacl.sql.parser.SQLLexer var17 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var19 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var19.release((-1));
    boolean var23 = var17.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var19, 0);
    int var24 = var17.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var26 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var26.release((-1));
    var17.consumeUntil((org.antlr.runtime.IntStream)var26, 14);
    boolean var32 = var10.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var26, 3);
    var10.mT__69();
    var10.mT__82();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test108");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingIndexes(true);
    var6.setCatalogName("null[false]");
    var6.setImportingUKs(true);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test109");


    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    org.databene.jdbacl.model.DBDataType var15 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var16 = var15.isAlpha();
    java.lang.String var17 = var15.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var18 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var21 = var18.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var23 = var18.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var24 = var15.equals((java.lang.Object)var23);
    org.databene.jdbacl.model.DefaultDBColumn var27 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var10, var15, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    var28.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var32 = var31.getForeignKeyConstraints();
    var28.addReferrer((org.databene.jdbacl.model.DBTable)var31);
    var10.addReferrer((org.databene.jdbacl.model.DBTable)var28);
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var40 = var39.getTables();
    org.databene.jdbacl.model.TableContainer var41 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var39);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var46 = var45.getForeignKeyConstraints();
    var42.addReferrer((org.databene.jdbacl.model.DBTable)var45);
    var39.addTable((org.databene.jdbacl.model.DBTable)var45);
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String[] var57 = new java.lang.String[] { ""};
    java.lang.String var58 = org.databene.jdbacl.SQLUtil.join("", "", var53, "hi!", "10", var57);
    java.lang.String var59 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var53);
    org.databene.jdbacl.model.TableContainer var62 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var63 = var62.getTables();
    org.databene.jdbacl.model.TableContainer var64 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var62);
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    var65.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var69 = var68.getForeignKeyConstraints();
    var65.addReferrer((org.databene.jdbacl.model.DBTable)var68);
    var62.addTable((org.databene.jdbacl.model.DBTable)var68);
    java.lang.String[] var74 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var75 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var74);
    org.databene.jdbacl.model.DBForeignKeyConstraint var76 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var45, var53, (org.databene.jdbacl.model.DBTable)var68, var74);
    org.databene.jdbacl.model.DBTable var77 = var76.getRefereeTable();
    var10.addForeignKey(var76);
    org.databene.jdbacl.model.FKChangeRule var79 = var76.getDeleteRule();
    java.lang.String var80 = var79.toString();
    java.lang.String var81 = var79.toString();
    java.lang.Class var82 = var79.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var83 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var82);
    org.databene.jdbacl.ColumnInfo var84 = new org.databene.jdbacl.ColumnInfo("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", 32, var82);
    org.databene.jdbacl.ColumnInfo var85 = new org.databene.jdbacl.ColumnInfo("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", 69, var82);
    java.lang.String var86 = var85.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "DROP SEQUENCE "+ "'", var17.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var23.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi! as 10 on . = 10."+ "'", var58.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "."+ "'", var59.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var75.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "NO_ACTION"+ "'", var80.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "NO_ACTION"+ "'", var81.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\"): class org.databene.jdbacl.model.FKChangeRule"+ "'", var86.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\"): class org.databene.jdbacl.model.FKChangeRule"));

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test110");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    java.lang.String var19 = var18.getSubProgramId();
    var18.setSubProgramId("jdbc:h2:mem:select next value for 10");
    var18.setSubProgramId("NOT drop sequence  ~ 'alter sequence  restart with -1'");
    var18.setSubProgramId("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    java.lang.String var26 = var18.getOverload();
    var18.setSubProgramId("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0");
    var18.setOverload("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (32,-1) NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test111");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.emitErrorMessage("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\"");
    var0.matchAny();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mGT();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test112");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingIndexes(true);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! identity by primary key");
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    org.databene.jdbacl.model.jdbc.LazyTable var26 = new org.databene.jdbacl.model.jdbc.LazyTable(var6, var22, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT");
    java.lang.String var27 = var26.getName();
    org.databene.jdbacl.model.DBTreeModel var28 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var26);
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable("NOT REGEXP_MATCHES(sequence, '')");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    java.util.Set var38 = var34.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var41 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var42 = var41.isAlpha();
    boolean var43 = var41.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var46 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var34, var41, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isAlpha();
    java.lang.String var51 = var49.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var52 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var55 = var52.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var57 = var52.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var58 = var49.equals((java.lang.Object)var57);
    boolean var59 = var49.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var60 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var34, var49);
    org.databene.jdbacl.model.DefaultDBColumn var62 = new org.databene.jdbacl.model.DefaultDBColumn("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", (org.databene.jdbacl.model.DBTable)var31, var49, (java.lang.Integer)6);
    java.lang.String[] var63 = var31.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    var65.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var69 = var68.getForeignKeyConstraints();
    var65.addReferrer((org.databene.jdbacl.model.DBTable)var68);
    org.databene.jdbacl.model.DBDataType var73 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var74 = var73.isAlpha();
    java.lang.String var75 = var73.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var76 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var79 = var76.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var81 = var76.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var82 = var73.equals((java.lang.Object)var81);
    org.databene.jdbacl.model.DefaultDBColumn var85 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var68, var73, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var86 = new org.databene.jdbacl.model.DefaultDBTable();
    var86.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var89 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var90 = var89.getForeignKeyConstraints();
    var86.addReferrer((org.databene.jdbacl.model.DBTable)var89);
    var68.addReferrer((org.databene.jdbacl.model.DBTable)var86);
    org.databene.jdbacl.model.DBSchema var93 = var86.getSchema();
    java.lang.String[] var94 = var86.getPKColumnNames();
    java.lang.String var95 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var26, var63, (java.lang.Object[])var94);
    org.databene.jdbacl.model.DBSchema var96 = var26.getSchema();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var27.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "DROP SEQUENCE "+ "'", var51.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var57.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "DROP SEQUENCE "+ "'", var75.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var81.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "SELECT * FROM VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" WHERE "+ "'", var95.equals("SELECT * FROM VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" WHERE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test113");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBTreeModel var10 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var0);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    org.databene.jdbacl.model.DBSchema var23 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var17);
    org.databene.jdbacl.model.DBTrigger var24 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var23);
    java.util.List var25 = var23.getPackages();
    org.databene.jdbacl.model.DBPackage var26 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var23);
    java.lang.String var27 = var26.getStatus();
    java.util.List var28 = var26.getProcedures();
    java.lang.String var29 = var26.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var34 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var36 = var34.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var37 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var38 = var37.getName();
    java.lang.String var39 = var34.formatValue((java.lang.Object)var37);
    var37.setName("'hi!'");
    java.util.List var42 = var37.getSchemas();
    org.databene.jdbacl.model.DBSchema var43 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var37);
    org.databene.jdbacl.model.DBTrigger var44 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var43);
    java.util.List var45 = var43.getPackages();
    org.databene.jdbacl.model.DBPackage var46 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var43);
    java.util.List var47 = var46.getComponents();
    org.databene.jdbacl.model.DBProcedure var48 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var46);
    var48.setSubProgramId("alter sequence catalog restart with 1");
    var26.addProcedure(var48);
    java.util.List var52 = var26.getProcedures();
    int var53 = var10.getChildCount((org.databene.jdbacl.model.DBObject)var26);
    java.lang.String var54 = var26.getDataObjectId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test114");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    org.databene.jdbacl.model.DBIndex var35 = var27.getIndex("");
    java.util.List var36 = var27.getIndexes();
    java.util.Set var37 = var27.getForeignKeyConstraints();
    java.util.List var38 = var27.getCheckConstraints();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var39 = var27.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    org.databene.jdbacl.model.Database var42 = var40.getDatabase();
    java.lang.String var43 = var40.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var45 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var47 = var45.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var48 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var49 = var48.getName();
    java.lang.String var50 = var45.formatValue((java.lang.Object)var48);
    var48.setName("'hi!'");
    java.util.List var53 = var48.getSchemas();
    org.databene.jdbacl.model.DBSchema var54 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var48);
    var40.removeSchema(var54);
    java.util.List var57 = var54.getSequences(false);
    boolean var58 = var27.equals((java.lang.Object)var54);
    boolean var59 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.lang.String var60 = var4.getConditionText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "\"'hi!'\""+ "'", var60.equals("\"'hi!'\""));

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test115");


    org.databene.jdbacl.sql.parser.SQLParser.create_sequence_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.create_sequence_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getStart();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test116");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    var18.setObjectId("select alter sequence drop sequence 10 restart with 0.nextval from dual");
    java.lang.String var21 = var18.getObjectId();
    java.lang.String var22 = var18.getSubProgramId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "select alter sequence drop sequence 10 restart with 0.nextval from dual"+ "'", var21.equals("select alter sequence drop sequence 10 restart with 0.nextval from dual"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test117");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.DBExecutionResult var6 = new org.databene.jdbacl.DBExecutionResult((java.lang.Object)var4, (java.lang.Boolean)false);
    java.lang.String var7 = var4.getName();
    java.util.List var9 = var4.getTables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SET GENERATOR . TO -1"+ "'", var7.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test118");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    var0.mORA_CONFIGS();
    var0.mCREATE_INDEX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test119");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var7 = var6.getTables();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var6);
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var13 = var12.getForeignKeyConstraints();
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var12);
    var6.addTable((org.databene.jdbacl.model.DBTable)var12);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var20);
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var41 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var41);
    org.databene.jdbacl.model.DBForeignKeyConstraint var43 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var12, var20, (org.databene.jdbacl.model.DBTable)var35, var41);
    java.lang.String[] var44 = var43.getRefereeColumnNames();
    java.lang.String var45 = var43.toString();
    org.databene.jdbacl.model.DBTable var46 = var43.getRefereeTable();
    org.databene.jdbacl.model.FKChangeRule var47 = var43.getUpdateRule();
    java.lang.String[] var48 = var43.getForeignKeyColumnNames();
    var1.removeForeignKeyConstraint(var43);
    org.databene.jdbacl.model.DBRow var50 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "."+ "'", var26.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var42.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var45.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test120");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    java.util.List var15 = var4.getTables(false, var14);
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    org.databene.jdbacl.model.Database var20 = var18.getDatabase();
    java.lang.String var21 = var18.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    var18.removeSchema(var32);
    org.databene.jdbacl.dialect.DerbyDialect var36 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var38 = var36.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var39 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var40 = var39.getName();
    java.lang.String var41 = var36.formatValue((java.lang.Object)var39);
    var39.setName("'hi!'");
    java.util.List var44 = var39.getSchemas();
    org.databene.jdbacl.model.DBSchema var45 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var39);
    org.databene.jdbacl.model.DBTrigger var46 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var45);
    var46.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var49 = var46.getTriggerBody();
    java.lang.String var50 = var46.getColumnName();
    java.lang.String var51 = var46.getWhenClause();
    var32.addTrigger(var46);
    org.databene.jdbacl.model.DBTrigger var53 = new org.databene.jdbacl.model.DBTrigger("-1", var32);
    java.util.List var55 = var32.getSequences(true);
    java.util.List var56 = var4.getSequences(true, var55);
    java.util.List var58 = var4.getSequences(true);
    org.databene.jdbacl.model.DBSchema var59 = var4.getSchema();
    org.databene.jdbacl.model.DBTable var61 = var4.getTable("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test121");


    org.databene.jdbacl.JDBCDriverInfo var1 = org.databene.jdbacl.JDBCDriverInfo.getInstance(".");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test122");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    java.util.List var13 = var11.getPackages();
    org.databene.jdbacl.model.DBCatalog var14 = var11.getCatalog();
    org.databene.jdbacl.model.DBSchema var16 = var14.getSchema("DROP SEQUENCE (0,-1)");
    java.util.List var17 = var14.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test123");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicFKName("false");
    org.databene.jdbacl.dialect.Derby10_6Dialect var5 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var8 = var5.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var10 = var5.isDeterministicIndexName("select nextval('')");
    java.lang.String var12 = var5.renderDropSequence("jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    var20.setDoc(".");
    java.util.Set var24 = var20.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var27 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var28 = var27.isAlpha();
    boolean var29 = var27.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var32 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var20, var27, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var16.addColumn((org.databene.jdbacl.model.DBColumn)var32);
    org.databene.jdbacl.model.DBRow var34 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var16);
    java.lang.Object[] var35 = var34.getPKValues();
    org.databene.jdbacl.model.DBSequence var40 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var40.setCache((java.lang.Long)100L);
    java.lang.String var43 = var40.getObjectType();
    java.math.BigInteger var44 = var40.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var48 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var48.setName("10");
    java.math.BigInteger var51 = var48.getIncrement();
    java.math.BigInteger var52 = var48.getIncrement();
    var40.setLastNumber(var52);
    var40.setOrder((java.lang.Boolean)false);
    var34.setCellValue("alter sequence  restart with -1", (java.lang.Object)var40);
    java.lang.String var57 = var5.renderCreateSequence(var40);
    var40.setCycle((java.lang.Boolean)true);
    java.lang.String var60 = var0.renderCreateSequence(var40);
    java.lang.String var61 = var0.getSystem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"+ "'", var12.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "sequence"+ "'", var43.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER"+ "'", var60.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "oracle"+ "'", var61.equals("oracle"));

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test124");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    java.lang.String var5 = var0.setSequenceValue("", (-1L));
    boolean var8 = var0.isDefaultCatalog("sequence", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var10 = var0.isDeterministicIndexName("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ");
    boolean var12 = var0.isDeterministicFKName("alter sequence drop generator CREATE SEQUENCE hi ! as 10 on.= 10..10 AS BIGINT restart with 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence  restart with -1"+ "'", var5.equals("alter sequence  restart with -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test125");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    java.lang.String var6 = var0.renderSequenceValue("CREATE SEQUENCE 10", 1L);
    boolean var8 = var0.isDeterministicIndexName("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')");
    boolean var9 = var0.supportsRegex();
    boolean var12 = var0.isDefaultCatalog("select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;", "null [ false ]");
    boolean var15 = var0.isDefaultSchema("'\u0000'", "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . SIMILAR TO 'Identity definition by unique key: '");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "alter sequence CREATE SEQUENCE 10 restart with 1"+ "'", var6.equals("alter sequence CREATE SEQUENCE 10 restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test126");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var3 = var1.LA(10);
    java.lang.String var4 = var1.getText();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.script.Expression var5 = org.databene.jdbacl.sql.SQLParserUtil.parseExpression((org.antlr.runtime.CharStream)var1);
      fail("Expected exception of type org.databene.commons.SyntaxError");
    } catch (org.databene.commons.SyntaxError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "DROP SEQUENCE "+ "'", var4.equals("DROP SEQUENCE "));

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test127");


    org.databene.jdbacl.identity.NkPkQueryIdentity var2 = new org.databene.jdbacl.identity.NkPkQueryIdentity("()", "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    var2.setNkPkQuery("-1.DROP SEQUENCE -identity-alter sequence NOT drop generator sequence ~ 'hi!' restart with 10");

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test128");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    var10.addTrigger(var23);
    var23.setStatus("alter sequence drop generator sequence restart with 100");
    java.lang.String var27 = var23.getColumnName();
    var23.setWhenClause("DROP SEQUENCE -1 RESTRICT");
    java.lang.String var30 = var23.getStatus();
    var23.setWhenClause("drop generator drop generator .");
    java.lang.String var33 = var23.getTriggerType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var30.equals("alter sequence drop generator sequence restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test129");


    org.databene.jdbacl.version.QueryVersionProvider var1 = new org.databene.jdbacl.version.QueryVersionProvider("org.databene.jdbacl.identity.InvalidIdentityDefinitionError.DROP SEQUENCE ");

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test130");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getMinValueIfNotDefault();
    java.math.BigInteger var6 = var3.getStartIfNotDefault();
    java.lang.Boolean var7 = var3.isOrder();
    java.math.BigInteger var8 = var3.getStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test131");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var3 = var0.renderSetSequenceValue("select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE;", 100L);
    boolean var5 = var0.isDeterministicIndexName("VALUES (NEXT VALUE FOR call next value for 'hi!') SIMILAR TO 'alter sequence CREATE GENERATOR drop sequence  restart with -1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99"+ "'", var3.equals("SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test132");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    var12.setColumnName("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.String var17 = var12.getTableName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test133");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var5, var22);
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var43 = new java.lang.String[] { ""};
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.join("", "", var43, "hi!", "10", var47);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var43);
    org.databene.jdbacl.model.TableContainer var52 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var53 = var52.getTables();
    org.databene.jdbacl.model.TableContainer var54 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var52);
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var59 = var58.getForeignKeyConstraints();
    var55.addReferrer((org.databene.jdbacl.model.DBTable)var58);
    var52.addTable((org.databene.jdbacl.model.DBTable)var58);
    java.lang.String[] var64 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var64);
    org.databene.jdbacl.model.DBForeignKeyConstraint var66 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var35, var43, (org.databene.jdbacl.model.DBTable)var58, var64);
    java.lang.String[] var67 = var66.getRefereeColumnNames();
    java.lang.String var68 = var66.toString();
    var5.removeForeignKeyConstraint(var66);
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable();
    var71.setDoc(".");
    org.databene.jdbacl.model.DBDataType var76 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var77 = var76.isTemporal();
    boolean var78 = var76.isTemporal();
    org.databene.jdbacl.model.DefaultDBColumn var81 = new org.databene.jdbacl.model.DefaultDBColumn("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", (org.databene.jdbacl.model.DBTable)var71, var76, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean var82 = var76.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var84 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 0", (org.databene.jdbacl.model.DBTable)var5, var76, (java.lang.Integer)10);
    int var85 = var76.getJdbcType();
    int var86 = var76.getJdbcType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi! as 10 on . = 10."+ "'", var48.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "."+ "'", var49.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var65.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var68.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test134");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var3 = var0.isSequenceSupported();
    boolean var5 = var0.isDeterministicIndexName("call next value for null[]");
    boolean var6 = var0.isSequenceBoundarySupported();
    java.lang.String var8 = var0.renderDropSequence("\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence \"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'"+ "'", var8.equals("drop sequence \"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'"));

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test135");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    boolean var5 = var0.isDeterministicFKName("DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    java.lang.String var7 = var0.renderFetchSequenceValue("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1");
    boolean var9 = var0.isDeterministicUKName("foreign key constraint");
    boolean var11 = var0.isDeterministicUKName("Identity definition by unique key: , sequence");
    java.lang.String var13 = var0.renderFetchSequenceValue("left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual.");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "select nextval for CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 from sysibm.sysdummy1"+ "'", var7.equals("select nextval for CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 from sysibm.sysdummy1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "select nextval for  from left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual"+ "'", var13.equals("select nextval for  from left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual"));

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test136");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var1 = var0.supportsRegex();
    boolean var4 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", "DROP SEQUENCE EQUEN RESTRICT");
    java.lang.String var5 = var0.getJDBCDriverClass();
    java.lang.String var7 = var0.renderFetchSequenceValue("select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')-identity-select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-.select next value for 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.firebirdsql.jdbc.FBDriver"+ "'", var5.equals("org.firebirdsql.jdbc.FBDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "select gen_id(select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')-identity-select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-.select next value for 10, 1) from RDB$DATABASE;"+ "'", var7.equals("select gen_id(select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')-identity-select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-.select next value for 10, 1) from RDB$DATABASE;"));

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test137");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var6.setName("10");
    java.math.BigInteger var9 = var6.getIncrement();
    java.lang.Boolean var10 = var6.isCycle();
    java.lang.String var11 = var6.dropDDL();
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.math.BigInteger var19 = var15.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var23.setName("10");
    java.math.BigInteger var26 = var23.getIncrement();
    java.math.BigInteger var27 = var23.getIncrement();
    var15.setLastNumber(var27);
    var6.setIncrement(var27);
    var0.addSequence(var6);
    org.databene.jdbacl.model.DBTable var32 = var0.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    org.databene.jdbacl.model.DBCatalog var34 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var35 = var34.getName();
    java.util.List var36 = var34.getComponents();
    java.util.List var37 = var0.getSequences(true, var36);
    org.databene.jdbacl.model.DBTable var39 = var0.getTable("select null.nextval from dual");
    java.util.List var40 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var0);
    org.databene.jdbacl.model.DBTable var42 = var0.getTable("(\"sequence\")");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop sequence 10"+ "'", var11.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test138");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.lang.String var19 = var0.renderCreateSequence(var17);
    java.lang.String var20 = var17.getCatalogName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "drop sequence "+ "'", var20.equals("drop sequence "));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test139");


    org.databene.jdbacl.model.DBDataType var2 = org.databene.jdbacl.model.DBDataType.getInstance(10, "drop generator select next value for jdbc:h2:mem:select next value for 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test140");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var3 = var2.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var4 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var6 = var4.renderFetchSequenceValue("'hi!'");
    var2.setValue("'hi!'");
    java.lang.Object var8 = var2.getValue();
    org.databene.jdbacl.identity.xml.IdentityParseContext var9 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var10 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var9.addParser((org.databene.webdecs.xml.XMLElementParser)var10);
    org.databene.jdbacl.identity.xml.IdentityParseContext var12 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var13 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var12.addParser((org.databene.webdecs.xml.XMLElementParser)var13);
    var9.addParser((org.databene.webdecs.xml.XMLElementParser)var13);
    java.lang.Object var16 = var2.evaluate((org.databene.commons.Context)var9);
    var9.remove("DROP SEQUENCE (100)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "sequence"+ "'", var3.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "call next value for 'hi!'"+ "'", var6.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "'hi!'"+ "'", var8.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "'hi!'"+ "'", var16.equals("'hi!'"));

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test141");


    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var7 = var6.getTables();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var6);
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var13 = var12.getForeignKeyConstraints();
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var12);
    var6.addTable((org.databene.jdbacl.model.DBTable)var12);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var20);
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var41 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var41);
    org.databene.jdbacl.model.DBForeignKeyConstraint var43 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var12, var20, (org.databene.jdbacl.model.DBTable)var35, var41);
    java.lang.String[] var44 = var43.getRefereeColumnNames();
    java.lang.String var45 = var43.toString();
    org.databene.jdbacl.model.DBTable var46 = var43.getTable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBCheckConstraint var48 = new org.databene.jdbacl.model.DBCheckConstraint("alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10", false, var46, "SET GENERATOR Sub identity of ():\nnull TO -1");
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "."+ "'", var26.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var42.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var45.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test142");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    org.databene.jdbacl.model.DBSchema var26 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var20);
    org.databene.jdbacl.model.DBTrigger var27 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var26);
    var27.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var30 = var27.getTriggerBody();
    java.lang.String var31 = var27.getTriggerBody();
    var27.setReferencingNames("NOT REGEXP_MATCHES(sequence, '')");
    var12.addTrigger(var27);
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-", var12);
    java.math.BigInteger var36 = var35.getIncrement();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test143");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    java.lang.String var4 = var0.renderDropSequence("sequence");
    boolean var7 = var0.isDefaultSchema("alter sequence  restart with -1", "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var12 = var11.dropDDL();
    java.math.BigInteger var13 = var11.getMinValueIfNotDefault();
    java.math.BigInteger var14 = var11.getLastNumber();
    org.databene.jdbacl.model.DBSequence var18 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var18.setName("10");
    java.math.BigInteger var21 = var18.getIncrement();
    java.math.BigInteger var22 = var18.getIncrement();
    var11.setStart(var22);
    java.lang.String var24 = var0.renderCreateSequence(var11);
    boolean var27 = var0.isDefaultSchema("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1", "alter sequence drop generator . restart with 10");
    java.lang.String var29 = var0.renderFetchSequenceValue("select next value for 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop generator sequence"+ "'", var4.equals("drop generator sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "drop sequence "+ "'", var12.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "CREATE GENERATOR "+ "'", var24.equals("CREATE GENERATOR "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "select gen_id(select next value for 10, 1) from RDB$DATABASE;"+ "'", var29.equals("select gen_id(select next value for 10, 1) from RDB$DATABASE;"));

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test144");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var3 = var1.isDeterministicUKName("EQUEN");
    boolean var6 = var1.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ", "CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    boolean var9 = var1.isDefaultCatalog("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE ()", "No identity defined for table NOT drop sequence  ~ 'alter sequence  restart with -1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test145");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    var33.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var37 = var36.getForeignKeyConstraints();
    var33.addReferrer((org.databene.jdbacl.model.DBTable)var36);
    org.databene.jdbacl.model.DBDataType var41 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var42 = var41.isAlpha();
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var44 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var47 = var44.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var49 = var44.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var50 = var41.equals((java.lang.Object)var49);
    org.databene.jdbacl.model.DefaultDBColumn var53 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var36, var41, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var54 = var53.getType();
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var59 = var58.getForeignKeyConstraints();
    var55.addReferrer((org.databene.jdbacl.model.DBTable)var58);
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.join("", "", var66, "hi!", "10", var70);
    org.databene.jdbacl.model.DBUniqueConstraint var72 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var58, "select nextval('')", false, var66);
    var72.addColumnName("sequence");
    var53.addUkConstraint(var72);
    java.lang.String[] var76 = var72.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var77 = new org.databene.jdbacl.model.DBUniqueIndex("select nextval('')", false, var72);
    var22.removeIndex((org.databene.jdbacl.model.DBIndex)var77);
    java.util.Set var80 = var22.getUniqueConstraints(false);
    java.util.Set var81 = var22.getForeignKeyConstraints();
    java.lang.String var82 = var22.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "DROP SEQUENCE "+ "'", var43.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var49.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi! as 10 on . = 10."+ "'", var71.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test146");


    boolean var1 = org.databene.jdbacl.SQLUtil.isQuery("CONSTRAINT hi! UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test148");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var5, var22);
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var43 = new java.lang.String[] { ""};
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.join("", "", var43, "hi!", "10", var47);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var43);
    org.databene.jdbacl.model.TableContainer var52 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var53 = var52.getTables();
    org.databene.jdbacl.model.TableContainer var54 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var52);
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var59 = var58.getForeignKeyConstraints();
    var55.addReferrer((org.databene.jdbacl.model.DBTable)var58);
    var52.addTable((org.databene.jdbacl.model.DBTable)var58);
    java.lang.String[] var64 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var64);
    org.databene.jdbacl.model.DBForeignKeyConstraint var66 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var35, var43, (org.databene.jdbacl.model.DBTable)var58, var64);
    java.lang.String[] var67 = var66.getRefereeColumnNames();
    java.lang.String var68 = var66.toString();
    var5.removeForeignKeyConstraint(var66);
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable();
    var71.setDoc(".");
    org.databene.jdbacl.model.DBDataType var76 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var77 = var76.isTemporal();
    boolean var78 = var76.isTemporal();
    org.databene.jdbacl.model.DefaultDBColumn var81 = new org.databene.jdbacl.model.DefaultDBColumn("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", (org.databene.jdbacl.model.DBTable)var71, var76, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean var82 = var76.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var84 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 0", (org.databene.jdbacl.model.DBTable)var5, var76, (java.lang.Integer)10);
    org.databene.jdbacl.model.DBDataType var85 = var84.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi! as 10 on . = 10."+ "'", var48.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "."+ "'", var49.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var65.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var68.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test149");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var6.setName("10");
    java.math.BigInteger var9 = var6.getIncrement();
    java.lang.Boolean var10 = var6.isCycle();
    java.lang.String var11 = var6.dropDDL();
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.math.BigInteger var19 = var15.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var23.setName("10");
    java.math.BigInteger var26 = var23.getIncrement();
    java.math.BigInteger var27 = var23.getIncrement();
    var15.setLastNumber(var27);
    var6.setIncrement(var27);
    var0.addSequence(var6);
    org.databene.jdbacl.model.DBTable var32 = var0.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    org.databene.jdbacl.model.DBCatalog var34 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var35 = var34.getName();
    java.util.List var36 = var34.getComponents();
    java.util.List var37 = var0.getSequences(true, var36);
    java.util.List var38 = var0.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop sequence 10"+ "'", var11.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test150");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    org.databene.jdbacl.model.DBTrigger var30 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var29);
    var30.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var33 = var30.getTriggerBody();
    java.lang.String var34 = var30.getColumnName();
    java.lang.String var35 = var30.getWhenClause();
    var16.addTrigger(var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("-1", var16);
    java.util.List var39 = var16.getSequences(false);
    org.databene.jdbacl.dialect.DerbyDialect var43 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var45 = var43.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var46 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var47 = var46.getName();
    java.lang.String var48 = var43.formatValue((java.lang.Object)var46);
    var46.setName("'hi!'");
    java.util.List var51 = var46.getSchemas();
    org.databene.jdbacl.model.DBSchema var52 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var46);
    org.databene.jdbacl.model.DBTrigger var53 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var52);
    java.util.List var54 = var52.getPackages();
    org.databene.jdbacl.model.DBPackage var55 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var52);
    var16.addPackage(var55);
    var55.setStatus("column jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBProcedure var59 = new org.databene.jdbacl.model.DBProcedure("null[DROP SEQUENCE ]", var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test151");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    java.math.BigInteger var6 = var3.getIncrement();
    java.math.BigInteger var7 = var3.getIncrement();
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var12 = var11.dropDDL();
    java.math.BigInteger var13 = var11.getMinValueIfNotDefault();
    java.math.BigInteger var14 = var11.getLastNumber();
    var3.setStart(var14);
    java.lang.Boolean var16 = var3.isOrder();
    org.databene.jdbacl.model.DBSequence var20 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var20.setName("10");
    java.math.BigInteger var23 = var20.getIncrement();
    java.math.BigInteger var24 = var20.getIncrement();
    var3.setLastNumber(var24);
    org.databene.jdbacl.model.TableContainer var30 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var31 = var30.getTables();
    org.databene.jdbacl.model.TableContainer var32 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var30);
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    var33.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var37 = var36.getForeignKeyConstraints();
    var33.addReferrer((org.databene.jdbacl.model.DBTable)var36);
    var30.addTable((org.databene.jdbacl.model.DBTable)var36);
    java.lang.String[] var44 = new java.lang.String[] { ""};
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.join("", "", var44, "hi!", "10", var48);
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var44);
    org.databene.jdbacl.model.TableContainer var53 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var54 = var53.getTables();
    org.databene.jdbacl.model.TableContainer var55 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var53);
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    var53.addTable((org.databene.jdbacl.model.DBTable)var59);
    java.lang.String[] var65 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var66 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var65);
    org.databene.jdbacl.model.DBForeignKeyConstraint var67 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var36, var44, (org.databene.jdbacl.model.DBTable)var59, var65);
    java.lang.String[] var68 = var67.getRefereeColumnNames();
    java.lang.String var69 = var67.toString();
    org.databene.jdbacl.model.DBTable var70 = var67.getRefereeTable();
    org.databene.jdbacl.model.FKChangeRule var71 = var67.getUpdateRule();
    boolean var72 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var67);
    java.lang.String[] var73 = var67.getForeignKeyColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "drop sequence "+ "'", var12.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi! as 10 on . = 10."+ "'", var49.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "."+ "'", var50.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var66.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var69.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test152");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var3 = var1.LA(10);
    java.lang.String var4 = var1.getText();
    var1.setLine(69);
    int var8 = var1.LA(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "DROP SEQUENCE "+ "'", var4.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 68);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test153");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    boolean var92 = var90.isUnique();
    var90.addColumnName("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT");
    java.lang.String var95 = var90.toString();
    org.databene.jdbacl.SQLScriptException var97 = new org.databene.jdbacl.SQLScriptException(79);
    boolean var98 = var90.equals((java.lang.Object)79);
    boolean var99 = var90.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)"+ "'", var95.equals("SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test154");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var3 = var0.isSequenceSupported();
    boolean var5 = var0.isDeterministicUKName("select nextval('drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test155");


    org.databene.jdbacl.identity.NKBuilder var0 = new org.databene.jdbacl.identity.NKBuilder();
    org.databene.jdbacl.sql.ColumnExpression var4 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var7 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var8 = var7.getValue();
    org.databene.jdbacl.sql.ColumnExpression var11 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var12 = var11.getValue();
    org.databene.jdbacl.sql.BetweenExpression var13 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var4, (org.databene.script.Expression)var7, (org.databene.script.Expression)var11);
    org.databene.jdbacl.sql.ColumnExpression var16 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var20 = var19.getValue();
    org.databene.jdbacl.sql.ColumnExpression var23 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var24 = var23.getValue();
    org.databene.jdbacl.sql.BetweenExpression var25 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var16, (org.databene.script.Expression)var19, (org.databene.script.Expression)var23);
    var13.addTerm((org.databene.script.Expression)var19);
    org.databene.script.Expression[] var27 = new org.databene.script.Expression[] { var13};
    org.databene.jdbacl.sql.FunctionInvocation var28 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var27);
    java.lang.String var29 = var28.getFunctionName();
    java.lang.String var30 = var28.toString();
    var0.addComponent((java.lang.Object)var28);
    java.lang.String var32 = var0.toString();
    java.lang.String var33 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "sequence"+ "'", var8.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "sequence"+ "'", var20.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "sequence"+ "'", var24.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var29.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var30.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var32.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var33.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test156");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getForeignKeyColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = org.databene.jdbacl.DBUtil.containsMandatoryColumn((org.databene.jdbacl.model.DBConstraint)var41);
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test157");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var5 = var0.supportsRegex();
    boolean var6 = var0.isSequenceBoundarySupported();
    boolean var7 = var0.supportsRegex();
    boolean var8 = var0.supportsRegex();
    boolean var9 = var0.supportsRegex();
    boolean var10 = var0.supportsRegex();
    boolean var11 = var0.supportsRegex();
    boolean var12 = var0.isSequenceBoundarySupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test158");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var5, var22);
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    org.databene.jdbacl.model.DBDataType var34 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var35 = var34.isAlpha();
    java.lang.String var36 = var34.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var37 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var40 = var37.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var42 = var37.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var43 = var34.equals((java.lang.Object)var42);
    org.databene.jdbacl.model.DefaultDBColumn var46 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var29, var34, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isTemporal();
    boolean var51 = var34.equals((java.lang.Object)var49);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.", (org.databene.jdbacl.model.DBTable)var5, var34, (java.lang.Integer)1, (java.lang.Integer)(-1));
    var54.setDefaultValue("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnTypeWithSize((org.databene.jdbacl.model.DBColumn)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "DROP SEQUENCE "+ "'", var36.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var42.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "DROP SEQUENCE (1,-1)"+ "'", var57.equals("DROP SEQUENCE (1,-1)"));

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test159");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getDataObjectId();
    var15.setObjectType("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test160");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var1 = var0.getForeignKeyConstraints();
    var0.setDoc("drop sequence ");
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String var13 = org.databene.jdbacl.SQLUtil.join("", "", var8, "hi!", "10", var12);
    java.lang.String var14 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var12);
    java.lang.Object[] var16 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("CREATE GENERATOR ");
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var0, var12, var16);
    int var18 = var0.countProviders();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBColumn var20 = var0.getColumn("drop sequence trigger");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi! as 10 on . = 10."+ "'", var13.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "."+ "'", var14.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "SELECT * FROM null WHERE  = 'CREATE GENERATOR '"+ "'", var17.equals("SELECT * FROM null WHERE  = 'CREATE GENERATOR '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test161");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    java.math.BigInteger var6 = var3.getIncrement();
    java.lang.Boolean var7 = var3.isCycle();
    java.lang.String var8 = var3.dropDDL();
    java.math.BigInteger var9 = var3.getMaxValueIfNotDefault();
    org.databene.jdbacl.JDBCConnectData var16 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var17 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var16);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var18 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var16);
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    org.databene.jdbacl.model.Database var22 = var20.getDatabase();
    java.lang.String var23 = var20.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var25 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var27 = var25.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var28 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var29 = var28.getName();
    java.lang.String var30 = var25.formatValue((java.lang.Object)var28);
    var28.setName("'hi!'");
    java.util.List var33 = var28.getSchemas();
    org.databene.jdbacl.model.DBSchema var34 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var28);
    var20.removeSchema(var34);
    java.util.List var37 = var34.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var34);
    org.databene.jdbacl.model.jdbc.LazyTable var41 = new org.databene.jdbacl.model.jdbc.LazyTable(var18, var34, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var42 = var41.toString();
    org.databene.jdbacl.model.DBCatalog var43 = var41.getCatalog();
    java.lang.String var44 = var41.getDoc();
    org.databene.jdbacl.model.DBSchema var45 = var41.getSchema();
    org.databene.jdbacl.model.DBSequence var49 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var49.setName("10");
    var49.setCycle((java.lang.Boolean)false);
    var45.addSequence(var49);
    org.databene.jdbacl.model.DBSequence var58 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var59 = var58.dropDDL();
    java.math.BigInteger var60 = var58.getMinValueIfNotDefault();
    java.lang.String var61 = var58.getSchemaName();
    org.databene.jdbacl.model.DBSequence var65 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var66 = var65.dropDDL();
    java.math.BigInteger var67 = var65.getStart();
    var58.setMinValue(var67);
    var49.setIncrement(var67);
    var3.setIncrement(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence 10"+ "'", var8.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var42.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var44.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "drop sequence "+ "'", var59.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "drop sequence "+ "'", var66.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test162");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)");

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test163");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with 10 restart with 0");

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test164");


    java.lang.String var2 = org.databene.jdbacl.SQLUtil.normalize("EQUEN", true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "EQUEN"+ "'", var2.equals("EQUEN"));

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test165");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mLT();
    int var18 = var10.getCharPositionInLine();
    var10.mT__88();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test166");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    var12.setColumnName("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.String var17 = var12.getReferencingNames();
    java.lang.String var18 = var12.getColumnName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var18.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test167");


    org.databene.jdbacl.JDBCConnectData var4 = new org.databene.jdbacl.JDBCConnectData("select next value for 10", "CONSTRAINT \"select nextval('')\" UNIQUE (, sequence)", "alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1", "CONSTRAINT columnCHECK \"'hi!'\"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var6 = org.databene.jdbacl.DBUtil.connect(var4, false);
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test168");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    boolean var32 = var22.isEquivalent((org.databene.jdbacl.model.DBObject)var26);
    org.databene.jdbacl.model.DBSchema var34 = var26.getSchema("");
    var26.setName("column");
    org.databene.jdbacl.model.DBSchema var37 = new org.databene.jdbacl.model.DBSchema("jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test169");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    boolean var6 = var0.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var9 = var0.renderSequenceValue("drop generator sequence", 100L);
    boolean var10 = var0.isSequenceSupported();
    boolean var13 = var0.isDefaultCatalog("Identity definition by unique key: select next value for 10", "alter sequence drop sequence 10 restart with 0");
    boolean var16 = var0.isDefaultSchema("Sub identity of ():\nnull", "NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')");
    boolean var17 = var0.supportsRegex();
    java.lang.String var21 = var0.regexQuery("drop sequence trigger", false, "select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var9.equals("alter sequence drop generator sequence restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "REGEXP_MATCHES(drop sequence trigger, 'select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-')"+ "'", var21.equals("REGEXP_MATCHES(drop sequence trigger, 'select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-')"));

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test170");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    var12.setDescription("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'");
    var12.setReferencingNames("EQUEN");
    java.lang.String var42 = var12.getColumnName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test171");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("drop sequence ", "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "alter sequence drop sequence 10 restart with 0", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT", ".", "alter sequence hi! restart with 1");
    var6.setExcludeTables("call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    var6.setImportingUKs(true);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test172");


    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var5 = var4.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    org.databene.jdbacl.model.Database var8 = var6.getDatabase();
    java.lang.String var9 = var6.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var11 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var13 = var11.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var14 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var15 = var14.getName();
    java.lang.String var16 = var11.formatValue((java.lang.Object)var14);
    var14.setName("'hi!'");
    java.util.List var19 = var14.getSchemas();
    org.databene.jdbacl.model.DBSchema var20 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var14);
    var6.removeSchema(var20);
    org.databene.jdbacl.dialect.DerbyDialect var24 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var26 = var24.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = var24.formatValue((java.lang.Object)var27);
    var27.setName("'hi!'");
    java.util.List var32 = var27.getSchemas();
    org.databene.jdbacl.model.DBSchema var33 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var27);
    org.databene.jdbacl.model.DBTrigger var34 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var33);
    var34.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var37 = var34.getTriggerBody();
    java.lang.String var38 = var34.getColumnName();
    java.lang.String var39 = var34.getWhenClause();
    var20.addTrigger(var34);
    boolean var41 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var20);
    java.util.List var42 = var20.getComponents();
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL", var20);
    java.lang.Long var44 = var43.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test173");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    java.util.Set var6 = var2.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    boolean var11 = var9.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var14 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var2, var9, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var17 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var18 = var17.isAlpha();
    java.lang.String var19 = var17.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var20 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var23 = var20.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var25 = var20.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var26 = var17.equals((java.lang.Object)var25);
    boolean var27 = var17.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var28 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var2, var17);
    java.lang.String var29 = var17.toString();
    org.databene.jdbacl.DBExecutionResult var31 = new org.databene.jdbacl.DBExecutionResult((java.lang.Object)var29, (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "DROP SEQUENCE "+ "'", var19.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var25.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "DROP SEQUENCE "+ "'", var29.equals("DROP SEQUENCE "));

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test174");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var34 = var33.getTables();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var33);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    var33.addTable((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var47);
    org.databene.jdbacl.model.TableContainer var56 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var57 = var56.getTables();
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var56);
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    var56.addTable((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var68 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var68);
    org.databene.jdbacl.model.DBForeignKeyConstraint var70 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var39, var47, (org.databene.jdbacl.model.DBTable)var62, var68);
    org.databene.jdbacl.model.DBTable var71 = var70.getRefereeTable();
    var4.addForeignKey(var70);
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var70);
    java.lang.String[] var74 = var70.getForeignKeyColumnNames();
    org.databene.jdbacl.dialect.DerbyDialect var78 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var80 = var78.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var81 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var82 = var81.getName();
    java.lang.String var83 = var78.formatValue((java.lang.Object)var81);
    var81.setName("'hi!'");
    java.util.List var86 = var81.getSchemas();
    org.databene.jdbacl.model.DBSchema var87 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var81);
    org.databene.jdbacl.model.DBTrigger var88 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var87);
    java.util.List var89 = var87.getPackages();
    org.databene.jdbacl.model.DBPackage var90 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var87);
    java.util.List var91 = var90.getComponents();
    var90.setObjectType("-1");
    java.util.List var94 = var90.getComponents();
    java.lang.String var95 = var90.getObjectType();
    var90.setStatus("h2");
    boolean var98 = var70.isIdentical((org.databene.jdbacl.model.DBObject)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "."+ "'", var53.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var69.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" "+ "'", var73.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "-1"+ "'", var95.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test175");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getBacktrackingLevel();
    var0.mALTER_TABLE();
    org.databene.jdbacl.sql.parser.SQLLexer var9 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var9.mCREATE_TABLE();
    var9.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var13 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var15 = var13.LT(10);
    var9.setCharStream((org.antlr.runtime.CharStream)var13);
    int var18 = var13.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var19 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var13);
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var21 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var23 = var21.LT(10);
    boolean var25 = var19.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var21, 69);
    int var26 = var21.size();
    var0.setCharStream((org.antlr.runtime.CharStream)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mNULL();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 14);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test176");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBTreeModel var10 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var0);
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    org.databene.jdbacl.model.DBUniqueConstraint var30 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var16, "select nextval('')", false, var24);
    java.lang.String var31 = var30.toString();
    boolean var32 = var30.isNameDeterministic();
    org.databene.jdbacl.model.DBUniqueIndex var33 = new org.databene.jdbacl.model.DBUniqueIndex("select next value for SET GENERATOR . TO -1", false, var30);
    java.lang.String var34 = var30.toString();
    boolean var35 = var10.isLeaf((org.databene.jdbacl.model.DBObject)var30);
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var40 = var39.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    org.databene.jdbacl.model.Database var43 = var41.getDatabase();
    java.lang.String var44 = var41.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var46 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var48 = var46.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var49 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var50 = var49.getName();
    java.lang.String var51 = var46.formatValue((java.lang.Object)var49);
    var49.setName("'hi!'");
    java.util.List var54 = var49.getSchemas();
    org.databene.jdbacl.model.DBSchema var55 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var49);
    var41.removeSchema(var55);
    org.databene.jdbacl.dialect.DerbyDialect var59 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var61 = var59.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var62 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var63 = var62.getName();
    java.lang.String var64 = var59.formatValue((java.lang.Object)var62);
    var62.setName("'hi!'");
    java.util.List var67 = var62.getSchemas();
    org.databene.jdbacl.model.DBSchema var68 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var62);
    org.databene.jdbacl.model.DBTrigger var69 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var68);
    var69.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var72 = var69.getTriggerBody();
    java.lang.String var73 = var69.getColumnName();
    java.lang.String var74 = var69.getWhenClause();
    var55.addTrigger(var69);
    boolean var76 = var39.isIdentical((org.databene.jdbacl.model.DBObject)var55);
    java.util.List var77 = var55.getComponents();
    int var78 = var10.getChildCount((org.databene.jdbacl.model.DBObject)var55);
    org.databene.jdbacl.model.DefaultDBTable var80 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var81 = var80.getForeignKeyConstraints();
    java.util.List var82 = var80.getColumns();
    org.databene.jdbacl.model.DefaultDBColumn var85 = new org.databene.jdbacl.model.DefaultDBColumn("call next value for 'hi!'", (org.databene.jdbacl.model.DBTable)var80, 100, "select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    java.lang.String var86 = org.databene.jdbacl.SQLUtil.renderColumnTypeWithSize((org.databene.jdbacl.model.DBColumn)var85);
    org.databene.jdbacl.model.DBDataType var87 = var85.getType();
    boolean var88 = var10.isLeaf((org.databene.jdbacl.model.DBObject)var85);
    var85.setFractionDigits((java.lang.Integer)32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var31.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var34.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"+ "'", var86.equals("SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test177");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var30 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var29);
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var37.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var56 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var58 = var37.getUniqueConstraint(var56);
    org.databene.jdbacl.identity.UniqueKeyIdentity var59 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var56);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var29, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var61 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var18, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var29);
    org.databene.jdbacl.model.DBUniqueIndex var62 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var61);
    var62.addColumnName("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    var15.addIndex((org.databene.jdbacl.model.DBIndex)var62);
    java.lang.String var66 = var62.toString();
    org.databene.jdbacl.model.DBTable var67 = var62.getTable();
    boolean var68 = var62.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var60.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique"+ "'", var66.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test178");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicFKName("NaturalPkIdentity(hi!)");
    boolean var3 = var0.supportsRegex();
    boolean var4 = var0.supportsRegex();
    boolean var6 = var0.isDeterministicPKName("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    boolean var7 = var0.supportsRegex();
    boolean var8 = var0.supportsRegex();
    boolean var10 = var0.isDeterministicUKName("select next value for CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test179");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String var18 = var17.toString();
    boolean var19 = var17.isNameDeterministic();
    var17.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var30 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var30.setSchemaName("alter sequence hi! restart with 1");
    boolean var33 = var17.equals((java.lang.Object)var30);
    org.databene.jdbacl.model.cache.CachingDBImporter var35 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var30, "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    var30.setCatalogName("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)");
    var30.setImportingPackages(false);
    var30.setIncludeTables("org.databene.jdbacl.SQLScriptException: Error in execution of script line 0: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var18.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test180");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    var6.setIncludeTables("select next value for SET GENERATOR.TO - 1");
    var6.setFaultTolerant(false);
    var6.setFaultTolerant(true);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test181");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var39 = new org.databene.jdbacl.model.DefaultDBColumn("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (org.databene.jdbacl.model.DBTable)var5, var31, (java.lang.Integer)3, (java.lang.Integer)69);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    java.util.Set var44 = var40.getUniqueConstraints(false);
    java.lang.String var45 = var40.getDoc();
    var40.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    boolean var48 = var39.isIdentical((org.databene.jdbacl.model.DBObject)var40);
    java.lang.String[] var49 = var40.getPKColumnNames();
    java.lang.String[] var50 = var40.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "."+ "'", var45.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test182");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    org.databene.jdbacl.model.DBTrigger var28 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    var28.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var31 = var28.getTriggerBody();
    java.lang.String var32 = var28.getColumnName();
    java.lang.String var33 = var28.getWhenClause();
    var14.addTrigger(var28);
    java.util.List var35 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var14);
    java.util.List var36 = var14.getTriggers();
    java.util.List var37 = var14.getTriggers();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var38 = org.databene.jdbacl.SQLUtil.renderColumnNames(var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test183");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("select   REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'.nextval from dual", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0", "null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-. join org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.). on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE .DROP SEQUENCE  = CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)..", "select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-", "index");
    var6.setImportingTriggers(false);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test184");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    var3.setCycle((java.lang.Boolean)true);
    java.math.BigInteger var7 = var3.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var11.setName("10");
    java.math.BigInteger var14 = var11.getIncrement();
    java.lang.Boolean var15 = var11.isCycle();
    java.lang.String var16 = var11.dropDDL();
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var18 = var17.getForeignKeyConstraints();
    var17.setDoc("drop sequence ");
    boolean var21 = var11.equals((java.lang.Object)"drop sequence ");
    java.lang.String var22 = var11.getCatalogName();
    org.databene.jdbacl.model.DBSequence var26 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var27 = var26.getMaxValue();
    java.lang.String var28 = var26.toString();
    org.databene.jdbacl.model.DBSequence var32 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var33 = var32.dropDDL();
    java.math.BigInteger var34 = var32.getMinValueIfNotDefault();
    java.math.BigInteger var35 = var32.getLastNumber();
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var39.setName("10");
    java.math.BigInteger var42 = var39.getIncrement();
    java.math.BigInteger var43 = var39.getIncrement();
    var32.setStart(var43);
    var26.setIncrement(var43);
    var11.setIncrement(var43);
    java.math.BigInteger var47 = var11.getStart();
    var3.setLastNumber(var47);
    var3.setOrder((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "drop sequence 10"+ "'", var16.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "drop sequence "+ "'", var22.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "drop sequence "+ "'", var33.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test185");


    org.databene.jdbacl.model.DBDataType var2 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    java.lang.String[] var5 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var12 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var13 = var12.getValue();
    org.databene.jdbacl.sql.ColumnExpression var16 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var17 = var16.getValue();
    org.databene.jdbacl.sql.BetweenExpression var18 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var12, (org.databene.script.Expression)var16);
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var24 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var25 = var24.getValue();
    org.databene.jdbacl.sql.ColumnExpression var28 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var29 = var28.getValue();
    org.databene.jdbacl.sql.BetweenExpression var30 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var21, (org.databene.script.Expression)var24, (org.databene.script.Expression)var28);
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var36 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var37 = var36.getValue();
    org.databene.jdbacl.sql.ColumnExpression var40 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var41 = var40.getValue();
    org.databene.jdbacl.sql.BetweenExpression var42 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var33, (org.databene.script.Expression)var36, (org.databene.script.Expression)var40);
    org.databene.jdbacl.sql.BetweenExpression var43 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var16, (org.databene.script.Expression)var24, (org.databene.script.Expression)var36);
    org.databene.script.Expression[] var44 = new org.databene.script.Expression[] { var16};
    org.databene.jdbacl.sql.FunctionInvocation var45 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var44);
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.renderWhereClause(var5, (java.lang.Object[])var44);
    org.databene.jdbacl.sql.FunctionInvocation var47 = new org.databene.jdbacl.sql.FunctionInvocation("select next value for SET GENERATOR . TO -1", var44);
    boolean var48 = var2.equals((java.lang.Object)"select next value for SET GENERATOR . TO -1");
    boolean var49 = var2.isLOB();
    java.lang.String var50 = var2.toString();
    java.lang.String var51 = var2.getName();
    boolean var52 = var2.isLOB();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "sequence"+ "'", var13.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "sequence"+ "'", var17.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "sequence"+ "'", var25.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "sequence"+ "'", var29.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "sequence"+ "'", var37.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "sequence"+ "'", var41.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var46.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "DROP SEQUENCE "+ "'", var50.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "DROP SEQUENCE "+ "'", var51.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test186");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var9 = var0.isDeterministicFKName("jdbc:h2:mem:select next value for 10");
    java.lang.String var13 = var0.regexQuery("drop sequence ", true, "alter sequence  restart with -1");
    boolean var15 = var0.isDeterministicUKName("select next value for SET GENERATOR . TO -1");
    java.lang.String var17 = var0.renderFetchSequenceValue("select next value for SET GENERATOR . TO -1");
    boolean var18 = var0.supportsRegex();
    boolean var19 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop sequence  ~ 'alter sequence  restart with -1'"+ "'", var13.equals("NOT drop sequence  ~ 'alter sequence  restart with -1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select nextval('select next value for SET GENERATOR . TO -1')"+ "'", var17.equals("select nextval('select next value for SET GENERATOR . TO -1')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test187");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var7.mCREATE_TABLE();
    var7.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var11 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var13 = var11.LT(10);
    var7.setCharStream((org.antlr.runtime.CharStream)var11);
    boolean var16 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var11, 69);
    var0.beginResync();
    var0.emitErrorMessage("Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    java.lang.String var21 = var0.getCharErrorDisplay(0);
    boolean var22 = var0.failed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "'\u0000'"+ "'", var21.equals("'\u0000'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test188");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getMinValueIfNotDefault();
    java.lang.String var6 = var3.getSchemaName();
    java.lang.Long var7 = var3.getCache();
    java.math.BigInteger var8 = var3.getLastNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi! as 10 on . = 10."+ "'", var6.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test189");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "Identity definition by unique key: select next value for 10", "()");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var29 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var9, (-1), "hi! identity by primary key");
    boolean var30 = var29.isNullable();
    var29.setNullable(true);
    boolean var33 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    var35.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var39 = var38.getForeignKeyConstraints();
    var35.addReferrer((org.databene.jdbacl.model.DBTable)var38);
    java.lang.String[] var46 = new java.lang.String[] { ""};
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.join("", "", var46, "hi!", "10", var50);
    org.databene.jdbacl.model.DBUniqueConstraint var52 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var38, "select nextval('')", false, var46);
    org.databene.jdbacl.model.DBDataType var55 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var56 = var55.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var57 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var38, var55);
    java.lang.String var58 = var55.getName();
    var29.setType(var55);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.renderColumnTypeWithSize((org.databene.jdbacl.model.DBColumn)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi! as 10 on . = 10."+ "'", var51.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "DROP SEQUENCE "+ "'", var58.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "DROP SEQUENCE "+ "'", var60.equals("DROP SEQUENCE "));

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test190");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var4 = var1.isDefaultSchema("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)", "alter sequence hi! restart with 1");
    boolean var5 = var1.isSequenceSupported();
    boolean var8 = var1.isDefaultSchema("h2", "alter sequence CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (). restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test191");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    var0.mCOMMENT_TABLE();
    var0.mCREATE_SEQUENCE();
    var0.mCOLUMN_SPEC();
    var0.mDROP_TABLE();
    org.databene.jdbacl.sql.parser.SQLLexer var8 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.antlr.runtime.CharStream var9 = var8.getCharStream();
    var8.mTABLE_NAME();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var12.setCharPositionInLine(1);
    int var15 = var12.getCharPositionInLine();
    var12.setCharPositionInLine(69);
    int var19 = var12.LT(3);
    int var21 = var12.LT(10);
    boolean var23 = var8.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var12, 100);
    var0.setCharStream((org.antlr.runtime.CharStream)var12);
    var12.release(41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test192");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    var0.setDriverClass("select nextval for ') from REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test193");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    boolean var6 = var0.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var9 = var0.renderSequenceValue("drop generator sequence", 100L);
    boolean var10 = var0.isSequenceSupported();
    boolean var12 = var0.isDeterministicFKName("derby");
    boolean var14 = var0.isDeterministicIndexName("catalog null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var9.equals("alter sequence drop generator sequence restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test194");


    boolean var1 = org.databene.jdbacl.SQLUtil.isDML("JDBCDBImporter");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test195");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    org.databene.jdbacl.identity.xml.IdentityParseContext var12 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var10);
    var12.remove("drop sequence 10");
    org.databene.jdbacl.identity.IdentityProvider var15 = var12.getIdentityProvider();
    java.lang.Object var17 = var12.get("CREATE SEQUENCE CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test196");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    java.util.List var2 = var0.getComponents();
    org.databene.jdbacl.model.DBSchema var4 = var0.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var6 = var0.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var7 = var0.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeTable("procedure CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test197");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String[] var5 = var4.getColumnNames();
    java.lang.String var6 = var4.getConditionText();
    org.databene.jdbacl.dialect.DerbyDialect var11 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var13 = var11.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var14 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var15 = var14.getName();
    java.lang.String var16 = var11.formatValue((java.lang.Object)var14);
    var14.setName("'hi!'");
    java.util.List var19 = var14.getSchemas();
    org.databene.jdbacl.model.DBSchema var20 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var14);
    org.databene.jdbacl.model.DBTrigger var21 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var20);
    java.util.List var22 = var20.getPackages();
    org.databene.jdbacl.model.DBPackage var23 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var20);
    java.util.List var24 = var23.getComponents();
    var23.setObjectType("-1");
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("'d'", (org.databene.jdbacl.model.CompositeDBObject)var23);
    var23.setSubObjectName("derby");
    boolean var30 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "\"'hi!'\""+ "'", var6.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test198");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getColumnName();
    java.lang.String var17 = var12.getTriggerBody();
    java.lang.String var18 = var12.getTriggerType();
    java.lang.String var19 = var12.getColumnName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test199");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var0.consumeUntil((org.antlr.runtime.IntStream)var9, 100);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    var0.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var22);
    var0.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var25 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var25.mCREATE_TABLE();
    var25.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var29 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var31 = var29.LT(10);
    var25.setCharStream((org.antlr.runtime.CharStream)var29);
    var0.consumeUntil((org.antlr.runtime.IntStream)var29, 1);
    org.databene.jdbacl.sql.parser.SQLLexer var35 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var29);
    var35.mORA_CONFIGS();
    java.lang.String var37 = var35.getSourceName();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var39 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var40 = var39.mark();
    int var41 = var39.getCharPositionInLine();
    int var42 = var39.getLine();
    int var43 = var39.index();
    var35.setCharStream((org.antlr.runtime.CharStream)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test200");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var2 = org.databene.jdbacl.DBUtil.connect("alter sequence NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.') restart with 10", false);
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test201");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    boolean var6 = var0.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var9 = var0.renderSequenceValue("drop generator sequence", 100L);
    boolean var11 = var0.isDeterministicPKName("drop generator sequence");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var9.equals("alter sequence drop generator sequence restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test202");


    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var7 = var6.getTables();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var6);
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var13 = var12.getForeignKeyConstraints();
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var12);
    var6.addTable((org.databene.jdbacl.model.DBTable)var12);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var20);
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var41 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var41);
    org.databene.jdbacl.model.DBForeignKeyConstraint var43 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var12, var20, (org.databene.jdbacl.model.DBTable)var35, var41);
    java.lang.String[] var44 = var43.getRefereeColumnNames();
    java.lang.String var45 = var43.toString();
    java.lang.String var46 = var43.toString();
    org.databene.jdbacl.model.FKChangeRule var47 = var43.getUpdateRule();
    int var48 = var47.ordinal();
    java.lang.Class var49 = var47.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var50 = new org.databene.jdbacl.ColumnInfo("", (-1), var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "."+ "'", var26.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var42.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var45.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var46.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test203");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mT__123();
    var0.mTABLE_NAME();
    org.databene.jdbacl.sql.parser.SQLLexer var17 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var17.mCREATE_TABLE();
    var17.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var21 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var23 = var21.LT(10);
    var17.setCharStream((org.antlr.runtime.CharStream)var21);
    int var25 = var21.index();
    var21.seek((-1));
    var0.setCharStream((org.antlr.runtime.CharStream)var21);
    org.databene.jdbacl.dialect.MySQLDialect var31 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var33 = var31.isDeterministicFKName("NaturalPkIdentity(hi!)");
    var0.traceOut("select next value for ()", 4, (java.lang.Object)var33);
    org.antlr.runtime.CharStream var35 = var0.getCharStream();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mEQ();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test204");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    java.util.List var20 = var17.getComponents();
    var12.setCatalog(var17);
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var25.setCache((java.lang.Long)100L);
    java.lang.String var28 = var25.getObjectType();
    java.math.BigInteger var29 = var25.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var33 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var33.setName("10");
    java.math.BigInteger var36 = var33.getIncrement();
    java.math.BigInteger var37 = var33.getIncrement();
    var25.setLastNumber(var37);
    var12.addSequence(var25);
    org.databene.jdbacl.model.DBPackage var40 = new org.databene.jdbacl.model.DBPackage("alter sequence call next value for 'hi!' restart with 100", var12);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    java.util.Set var46 = var42.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isAlpha();
    boolean var51 = var49.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var42, var49, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var58 = var57.getTables();
    org.databene.jdbacl.model.TableContainer var59 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var57);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    var60.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var64 = var63.getForeignKeyConstraints();
    var60.addReferrer((org.databene.jdbacl.model.DBTable)var63);
    var57.addTable((org.databene.jdbacl.model.DBTable)var63);
    var54.setTable((org.databene.jdbacl.model.DBTable)var63);
    boolean var68 = var40.isIdentical((org.databene.jdbacl.model.DBObject)var63);
    org.databene.jdbacl.dialect.Derby10_6Dialect var69 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var72 = var69.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var74 = var69.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var78 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var78.setName("10");
    java.math.BigInteger var81 = var78.getIncrement();
    java.lang.String var82 = var69.renderCreateSequence(var78);
    org.databene.jdbacl.model.DBSequence var86 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var87 = var86.dropDDL();
    java.lang.String var88 = var69.renderCreateSequence(var86);
    boolean var90 = var69.isDeterministicUKName("org.firebirdsql.jdbc.FBDriver");
    boolean var92 = var69.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var93 = var63.equals((java.lang.Object)"alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var74.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var82.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "drop sequence "+ "'", var87.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var88.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test205");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var9.setCharPositionInLine(1);
    var9.setLine(69);
    int var19 = var9.getCharPositionInLine();
    java.lang.String var20 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "DROP SEQUENCE "+ "'", var20.equals("DROP SEQUENCE "));

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test206");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.join("", "", var12, "hi!", "10", var16);
    org.databene.jdbacl.model.DBUniqueConstraint var18 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var4, "select nextval('')", false, var12);
    var4.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var23 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var23);
    org.databene.jdbacl.model.DBUniqueConstraint var25 = var4.getUniqueConstraint(var23);
    org.databene.jdbacl.identity.UniqueKeyIdentity var26 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var23);
    java.lang.Object[] var28 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("sequence");
    java.lang.String var29 = var26.extractNK(var28);
    java.lang.String var30 = var26.getDescription();
    java.lang.String var31 = var26.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi! as 10 on . = 10."+ "'", var17.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var24.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "sequence"+ "'", var29.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Identity definition by unique key: DROP SEQUENCE "+ "'", var30.equals("Identity definition by unique key: DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Identity definition by unique key: DROP SEQUENCE "+ "'", var31.equals("Identity definition by unique key: DROP SEQUENCE "));

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test207");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIS();
    var10.matchRange(79, (-1));
    var10.mINVOCATION();
    var10.mT__130();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test208");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_SEQUENCE();
    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    java.util.List var16 = var0.toStrings(var15);
    var0.mCREATE_SEQUENCE();
    var0.setBacktrackingLevel(14);
    var0.mCOLUMN_NAME();
    int var21 = var0.getRuleMemoizationCacheSize();
    var0.mCOMMENT_COLUMN();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test209");


    java.lang.String var2 = org.databene.jdbacl.SQLUtil.normalize("Sub identity of ():\nnull", true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Sub identity of () : null"+ "'", var2.equals("Sub identity of () : null"));

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test210");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    org.databene.jdbacl.model.DBUniqueConstraint var55 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var41, "select nextval('')", false, var49);
    java.lang.String var56 = var55.toString();
    boolean var57 = var36.isEquivalent((org.databene.jdbacl.model.DBObject)var55);
    org.databene.jdbacl.model.DBTable var58 = var36.getTable();
    java.lang.Integer var59 = var36.getSize();
    org.databene.jdbacl.model.DBNotNullConstraint var60 = var36.getNotNullConstraint();
    var36.setVersionColumn(true);
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    var65.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var69 = var68.getForeignKeyConstraints();
    var65.addReferrer((org.databene.jdbacl.model.DBTable)var68);
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String[] var80 = new java.lang.String[] { ""};
    java.lang.String var81 = org.databene.jdbacl.SQLUtil.join("", "", var76, "hi!", "10", var80);
    org.databene.jdbacl.model.DBUniqueConstraint var82 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var68, "select nextval('')", false, var76);
    java.lang.String var83 = var82.toString();
    boolean var84 = var82.isNameDeterministic();
    org.databene.jdbacl.model.DBUniqueIndex var85 = new org.databene.jdbacl.model.DBUniqueIndex("select next value for SET GENERATOR . TO -1", false, var82);
    java.lang.String var86 = var82.toString();
    java.lang.String var87 = var82.toString();
    var36.addUkConstraint(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var56.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + 0+ "'", var59.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi! as 10 on . = 10."+ "'", var81.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var83.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var86.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var87.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test211");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mOR();
    var10.mSTRING();
    var10.mT__70();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test212");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var8.setFaultTolerant(true);
    org.databene.jdbacl.model.cache.CachingDBImporter var12 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var8, "VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)");

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test213");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    boolean var17 = var0.failed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__121();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test214");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicPKName(".");
    java.lang.String var7 = var0.regexQuery(" ", false, "VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)");
    boolean var9 = var0.isDeterministicIndexName("alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "  REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'"+ "'", var7.equals("  REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test215");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.lang.String var17 = var16.getStatus();
    java.util.List var18 = var16.getProcedures();
    var16.setObjectType("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    org.databene.jdbacl.model.Database var23 = var21.getDatabase();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var28 = var27.dropDDL();
    java.math.BigInteger var29 = var27.getMinValueIfNotDefault();
    boolean var30 = var21.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    org.databene.jdbacl.model.DBCatalog var31 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var32 = var31.getName();
    org.databene.jdbacl.model.Database var33 = var31.getDatabase();
    java.lang.String var34 = var31.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var36 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var38 = var36.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var39 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var40 = var39.getName();
    java.lang.String var41 = var36.formatValue((java.lang.Object)var39);
    var39.setName("'hi!'");
    java.util.List var44 = var39.getSchemas();
    org.databene.jdbacl.model.DBSchema var45 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var39);
    var31.removeSchema(var45);
    org.databene.jdbacl.dialect.DerbyDialect var49 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var51 = var49.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var52 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var53 = var52.getName();
    java.lang.String var54 = var49.formatValue((java.lang.Object)var52);
    var52.setName("'hi!'");
    java.util.List var57 = var52.getSchemas();
    org.databene.jdbacl.model.DBSchema var58 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var52);
    org.databene.jdbacl.model.DBTrigger var59 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var58);
    var59.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var62 = var59.getTriggerBody();
    java.lang.String var63 = var59.getColumnName();
    java.lang.String var64 = var59.getWhenClause();
    var45.addTrigger(var59);
    java.util.List var66 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var45);
    java.util.List var67 = var45.getTriggers();
    java.lang.String var68 = var45.getName();
    var21.removeSchema(var45);
    boolean var70 = var16.isIdentical((org.databene.jdbacl.model.DBObject)var21);
    org.databene.jdbacl.model.DBSchema var71 = new org.databene.jdbacl.model.DBSchema("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ", var21);
    java.util.List var72 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "drop sequence "+ "'", var28.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var68.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test216");


    org.databene.jdbacl.sql.ColumnExpression var3 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var7 = var6.getValue();
    org.databene.jdbacl.sql.ColumnExpression var10 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var11 = var10.getValue();
    org.databene.jdbacl.sql.BetweenExpression var12 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var3, (org.databene.script.Expression)var6, (org.databene.script.Expression)var10);
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var19 = var18.getValue();
    org.databene.jdbacl.sql.ColumnExpression var22 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var23 = var22.getValue();
    org.databene.jdbacl.sql.BetweenExpression var24 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var15, (org.databene.script.Expression)var18, (org.databene.script.Expression)var22);
    var12.addTerm((org.databene.script.Expression)var18);
    org.databene.script.Expression[] var26 = new org.databene.script.Expression[] { var12};
    org.databene.jdbacl.sql.FunctionInvocation var27 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var26);
    java.lang.String var28 = var27.getFunctionName();
    org.databene.script.Expression[] var29 = var27.getSourceExpressions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "sequence"+ "'", var11.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "sequence"+ "'", var19.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var28.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test217");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBCatalog var15 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var16 = var15.getName();
    org.databene.jdbacl.model.Database var17 = var15.getDatabase();
    java.lang.String var18 = var15.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    var15.removeSchema(var29);
    java.util.List var32 = var29.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var29);
    boolean var34 = var13.equals((java.lang.Object)"drop generator .");
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    org.databene.jdbacl.model.DBUniqueConstraint var53 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var39, "select nextval('')", false, var47);
    org.databene.jdbacl.model.DBDataType var56 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var57 = var56.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var58 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var39, var56);
    org.databene.jdbacl.sql.ColumnExpression var61 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var62 = var61.isConstant();
    java.lang.Object var63 = var61.getValue();
    boolean var64 = var58.equals((java.lang.Object)var61);
    var58.setDefaultValue("jdbc:h2:mem:select next value for 10");
    boolean var67 = var58.isNullable();
    org.databene.jdbacl.model.DefaultDBTable var70 = new org.databene.jdbacl.model.DefaultDBTable();
    var70.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var74 = var73.getForeignKeyConstraints();
    var70.addReferrer((org.databene.jdbacl.model.DBTable)var73);
    java.lang.String[] var81 = new java.lang.String[] { ""};
    java.lang.String[] var85 = new java.lang.String[] { ""};
    java.lang.String var86 = org.databene.jdbacl.SQLUtil.join("", "", var81, "hi!", "10", var85);
    org.databene.jdbacl.model.DBUniqueConstraint var87 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var73, "select nextval('')", false, var81);
    java.lang.String var88 = var87.toString();
    boolean var89 = var87.isNameDeterministic();
    org.databene.jdbacl.model.DBUniqueIndex var90 = new org.databene.jdbacl.model.DBUniqueIndex("select next value for SET GENERATOR . TO -1", false, var87);
    java.lang.String var91 = var87.toString();
    java.lang.String var92 = var87.toString();
    var58.addUkConstraint(var87);
    var13.addUkConstraint(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "sequence"+ "'", var63.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi! as 10 on . = 10."+ "'", var86.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var88.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var91.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var92.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test218");


    org.databene.jdbacl.sql.parser.SQLParser.null_comparison_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.null_comparison_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test219");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__61();
    var10.mT__67();
    var10.mT__132();
    var10.mT__114();
    org.databene.jdbacl.sql.parser.SQLLexer var21 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var23 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var23.release((-1));
    boolean var27 = var21.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var23, 0);
    int var28 = var21.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var30 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var21.consumeUntil((org.antlr.runtime.IntStream)var30, 100);
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    var21.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var43);
    var21.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var46 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var46.mCREATE_TABLE();
    var46.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var50 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var52 = var50.LT(10);
    var46.setCharStream((org.antlr.runtime.CharStream)var50);
    var21.consumeUntil((org.antlr.runtime.IntStream)var50, 1);
    org.databene.jdbacl.sql.parser.SQLLexer var56 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var50);
    var10.consumeUntil((org.antlr.runtime.IntStream)var50, 0);
    int var59 = var50.getLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test220");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getForeignKeyColumnNames();
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var41);
    java.lang.String[] var44 = var41.getForeignKeyColumnNames();
    org.databene.jdbacl.model.DBTable var45 = var41.getRefereeTable();
    boolean var46 = var41.isNameDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" "+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test221");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.lang.String var19 = var0.renderCreateSequence(var17);
    java.lang.String var21 = var0.renderFetchSequenceValue("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var24 = var0.isDefaultSchema("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    java.lang.String var26 = var0.renderDropSequence("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    java.lang.String var28 = var0.renderFetchSequenceValue("CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    java.lang.String var30 = var0.renderDropSequence("Identity definition by unique key: DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"+ "'", var21.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT"+ "'", var26.equals("DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "VALUES (NEXT VALUE FOR CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT)"+ "'", var28.equals("VALUES (NEXT VALUE FOR CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "DROP SEQUENCE Identity definition by unique key: DROP SEQUENCE  RESTRICT"+ "'", var30.equals("DROP SEQUENCE Identity definition by unique key: DROP SEQUENCE  RESTRICT"));

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test222");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var9 = var0.renderFetchSequenceValue("");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", "hi! identity by primary key", "jdbc:h2:mem:select next value for 10");
    java.lang.String var14 = var0.renderCreateSequence(var13);
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    org.databene.jdbacl.model.Database var19 = var17.getDatabase();
    java.lang.String var20 = var17.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    org.databene.jdbacl.model.DBSchema var31 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var25);
    var17.removeSchema(var31);
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    org.databene.jdbacl.model.DBSchema var44 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var38);
    org.databene.jdbacl.model.DBTrigger var45 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var44);
    var45.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var48 = var45.getTriggerBody();
    java.lang.String var49 = var45.getColumnName();
    java.lang.String var50 = var45.getWhenClause();
    var31.addTrigger(var45);
    org.databene.jdbacl.model.DBTrigger var52 = new org.databene.jdbacl.model.DBTrigger("-1", var31);
    org.databene.jdbacl.model.DBSequence var53 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var31);
    java.lang.String var54 = var0.renderCreateSequence(var53);
    java.lang.String var55 = var53.getCatalogName();
    java.math.BigInteger var56 = var53.getLastNumber();
    java.lang.String var57 = var53.getSchemaName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('')"+ "'", var9.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var14.equals("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var54.equals("CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "'hi!'"+ "'", var55.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var57.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test223");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    org.databene.jdbacl.model.DBSchema var30 = var23.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var43 = var42.isAlpha();
    java.lang.String var44 = var42.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var45 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var48 = var45.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var50 = var45.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var51 = var42.equals((java.lang.Object)var50);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var37, var42, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = var54.getType();
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String[] var71 = new java.lang.String[] { ""};
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.join("", "", var67, "hi!", "10", var71);
    org.databene.jdbacl.model.DBUniqueConstraint var73 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var59, "select nextval('')", false, var67);
    var73.addColumnName("sequence");
    var54.addUkConstraint(var73);
    java.lang.String[] var77 = var73.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var78 = new org.databene.jdbacl.model.DBUniqueIndex("select nextval('')", false, var73);
    var23.removeIndex((org.databene.jdbacl.model.DBIndex)var78);
    var0.addTable((org.databene.jdbacl.model.DBTable)var23);
    java.util.List var81 = var23.getCheckConstraints();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "DROP SEQUENCE "+ "'", var44.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var50.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi! as 10 on . = 10."+ "'", var72.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test224");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var3 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    org.databene.jdbacl.model.xml.XMLModelExporter var5 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    org.databene.jdbacl.model.csv.CSVModelExporter var6 = new org.databene.jdbacl.model.csv.CSVModelExporter(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test225");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(true);
    org.databene.jdbacl.model.TableContainerSupport var4 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.Collection var5 = var4.getSubContainers();
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    int var14 = var7.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var16 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var7.consumeUntil((org.antlr.runtime.IntStream)var16, 100);
    org.databene.jdbacl.dialect.DerbyDialect var21 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var23 = var21.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var21.formatValue((java.lang.Object)var24);
    var24.setName("'hi!'");
    java.util.List var29 = var24.getSchemas();
    var7.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var29);
    java.util.List var31 = var4.getSequences(false, var29);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.dialect.DerbyDialect var39 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var41 = var39.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var42 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var43 = var42.getName();
    java.lang.String var44 = var39.formatValue((java.lang.Object)var42);
    var42.setName("'hi!'");
    java.util.List var47 = var42.getSchemas();
    java.util.List var48 = var37.getTables(false, var47);
    org.databene.jdbacl.model.DBCatalog var51 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var52 = var51.getName();
    org.databene.jdbacl.model.Database var53 = var51.getDatabase();
    java.lang.String var54 = var51.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var56 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var58 = var56.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var59 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var60 = var59.getName();
    java.lang.String var61 = var56.formatValue((java.lang.Object)var59);
    var59.setName("'hi!'");
    java.util.List var64 = var59.getSchemas();
    org.databene.jdbacl.model.DBSchema var65 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var59);
    var51.removeSchema(var65);
    org.databene.jdbacl.dialect.DerbyDialect var69 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var71 = var69.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var72 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var73 = var72.getName();
    java.lang.String var74 = var69.formatValue((java.lang.Object)var72);
    var72.setName("'hi!'");
    java.util.List var77 = var72.getSchemas();
    org.databene.jdbacl.model.DBSchema var78 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var72);
    org.databene.jdbacl.model.DBTrigger var79 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var78);
    var79.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var82 = var79.getTriggerBody();
    java.lang.String var83 = var79.getColumnName();
    java.lang.String var84 = var79.getWhenClause();
    var65.addTrigger(var79);
    org.databene.jdbacl.model.DBTrigger var86 = new org.databene.jdbacl.model.DBTrigger("-1", var65);
    java.util.List var88 = var65.getSequences(true);
    java.util.List var89 = var37.getSequences(true, var88);
    java.util.List var91 = var37.getSequences(true);
    java.util.List var92 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var37);
    java.util.List var93 = var4.getTables(false, var92);
    java.util.List var94 = var4.getTables();
    java.util.List var95 = var0.getTables(false, var94);
    org.databene.jdbacl.model.DBTable var97 = var0.getTable("CONSTRAINT \"select nextval('')\" UNIQUE (, sequence, drop generator DROP SEQUENCE catalog RESTRICT)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test226");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicFKName("NaturalPkIdentity(hi!)");
    boolean var3 = var0.supportsRegex();
    boolean var4 = var0.supportsRegex();
    boolean var6 = var0.isDeterministicPKName("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    boolean var9 = var0.isDefaultCatalog("left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual.", "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.' NOT REGEXP 'SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test227");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("org.databene.jdbacl.identity.InvalidIdentityDefinitionError");

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test228");


    org.databene.jdbacl.JDBCDriverInfo var2 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var3 = var2.getUrlPattern();
    var2.setDefaultUser("-1");
    java.lang.String var6 = var2.getUrlPattern();
    var2.setDriverClass("Identity definition by unique key: select next value for 10");
    org.databene.jdbacl.JDBCDriverInfo var9 = new org.databene.jdbacl.JDBCDriverInfo();
    var9.setDriverClass("hi!");
    var9.setDefaultPort("CREATE SEQUENCE 10");
    var9.setDriverClass("drop sequence ");
    var9.setId("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var9.setName("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var26.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var45 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var45);
    org.databene.jdbacl.model.DBUniqueConstraint var47 = var26.getUniqueConstraint(var45);
    java.lang.String[] var54 = new java.lang.String[] { ""};
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String var59 = org.databene.jdbacl.SQLUtil.join("", "", var54, "hi!", "10", var58);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var54);
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "CREATE SEQUENCE 10", var45, "select next value for SET GENERATOR . TO -1", "select next value for SET GENERATOR . TO -1", var54);
    java.lang.String[] var65 = new java.lang.String[] { "NOT drop generator sequence ~ 'hi!'"};
    java.lang.String var66 = org.databene.jdbacl.SQLUtil.innerJoin("CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.", var54, "drop generator sequence", "catalog", var65);
    var9.setJars(var65);
    var2.setJars(var65);
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String[] var80 = new java.lang.String[] { ""};
    java.lang.String var81 = org.databene.jdbacl.SQLUtil.join("", "", var76, "hi!", "10", var80);
    java.lang.String var82 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var76);
    java.lang.String[] var89 = new java.lang.String[] { ""};
    java.lang.String[] var93 = new java.lang.String[] { ""};
    java.lang.String var94 = org.databene.jdbacl.SQLUtil.join("", "", var89, "hi!", "10", var93);
    java.lang.String var95 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var93);
    java.lang.String var96 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var76, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var93);
    java.lang.String var97 = org.databene.jdbacl.SQLUtil.leftJoin("REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0')", var65, "CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence)", "drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0", var93);
    org.databene.jdbacl.identity.UniqueKeyIdentity var98 = new org.databene.jdbacl.identity.UniqueKeyIdentity("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var46.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi! as 10 on . = 10."+ "'", var59.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "."+ "'", var60.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var61.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'"+ "'", var66.equals("drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi! as 10 on . = 10."+ "'", var81.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "."+ "'", var82.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi! as 10 on . = 10."+ "'", var94.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "."+ "'", var95.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var96.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "left join CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence) as drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0 on REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0').NOT drop generator sequence ~ 'hi!' = drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0."+ "'", var97.equals("left join CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence) as drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0 on REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0').NOT drop generator sequence ~ 'hi!' = drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0."));

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test229");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    boolean var38 = var36.isNullable();
    org.databene.jdbacl.model.DBForeignKeyConstraint var39 = var36.getForeignKeyConstraint();
    boolean var40 = var36.isNullable();
    java.lang.Integer var41 = var36.getSize();
    boolean var42 = var36.isVersionColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 0+ "'", var41.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test230");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicPKName(".");
    java.lang.String var7 = var0.regexQuery(" ", false, "VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)");
    boolean var9 = var0.isDeterministicPKName("call next value for 'hi!' identity by primary key");
    boolean var10 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "  REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'"+ "'", var7.equals("  REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test231");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var1.reset();
    var1.consume();
    int var4 = var1.getCharPositionInLine();
    java.lang.String var5 = var1.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DROP SEQUENCE "+ "'", var5.equals("DROP SEQUENCE "));

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test232");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var3 = var2.getValue();
    java.lang.String var4 = var2.getColumnName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "sequence"+ "'", var3.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "sequence"+ "'", var4.equals("sequence"));

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test233");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("select NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.').nextval from dual");

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test234");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    var0.setDefaultDatabase("procedure CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    var0.setUrlPattern("(DROP SEQUENCE )");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test235");


    boolean var1 = org.databene.jdbacl.SQLUtil.isDML("select nextval for  from left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test236");


    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    var37.addTable((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.join("", "", var51, "hi!", "10", var55);
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var51);
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var61 = var60.getTables();
    org.databene.jdbacl.model.TableContainer var62 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var60);
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    var63.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var67 = var66.getForeignKeyConstraints();
    var63.addReferrer((org.databene.jdbacl.model.DBTable)var66);
    var60.addTable((org.databene.jdbacl.model.DBTable)var66);
    java.lang.String[] var72 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var72);
    org.databene.jdbacl.model.DBForeignKeyConstraint var74 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var43, var51, (org.databene.jdbacl.model.DBTable)var66, var72);
    org.databene.jdbacl.model.DBTable var75 = var74.getRefereeTable();
    var8.addForeignKey(var74);
    org.databene.jdbacl.model.FKChangeRule var77 = var74.getDeleteRule();
    java.lang.String var78 = var77.toString();
    java.lang.String var79 = var77.toString();
    java.lang.Class var80 = var77.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var81 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var80);
    org.databene.jdbacl.ColumnInfo var82 = new org.databene.jdbacl.ColumnInfo("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", 32, var80);
    org.databene.jdbacl.ResultSetConverter var84 = new org.databene.jdbacl.ResultSetConverter(var80, false);
    java.lang.Class var85 = var84.getTargetType();
    java.lang.Class var86 = var84.getTargetType();
    boolean var87 = var84.isParallelizable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi! as 10 on . = 10."+ "'", var56.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "."+ "'", var57.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var73.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "NO_ACTION"+ "'", var78.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NO_ACTION"+ "'", var79.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test237");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingChecks(false);
    boolean var9 = var6.isImportingIndexes();
    var6.setCatalogName("'hi!'");
    var6.setSchemaName("VALUES (NEXT VALUE FOR postgres)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test238");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var24 = var23.getType();
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    var25.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var29 = var28.getForeignKeyConstraints();
    var25.addReferrer((org.databene.jdbacl.model.DBTable)var28);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var42 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var28, "select nextval('')", false, var36);
    var42.addColumnName("sequence");
    var23.addUkConstraint(var42);
    org.databene.jdbacl.model.DBUniqueIndex var46 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var42);
    org.databene.jdbacl.model.DBTable var47 = var46.getTable();
    org.databene.jdbacl.model.DBTable var48 = var46.getTable();
    java.lang.String[] var49 = var46.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test239");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingChecks(false);
    boolean var9 = var6.isImportingIndexes();
    boolean var10 = var6.isImportingPackages();
    java.lang.String var11 = var6.getDatabaseProductName();
    boolean var12 = var6.isImportingIndexes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test240");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("hi! as 10 on . = 10.");
    java.util.List var2 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var1);
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.util.List var7 = var5.getComponents();
    org.databene.jdbacl.model.DBSchema var9 = var5.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var11 = var5.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var12 = var5.getName();
    java.util.List var13 = var5.getSequences();
    java.util.List var14 = var5.getTables();
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    org.databene.jdbacl.model.DBSchema var26 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var20);
    org.databene.jdbacl.model.DBTrigger var27 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var26);
    java.util.List var28 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var26);
    java.util.List var30 = var26.getSequences(false);
    var5.addSchema(var26);
    var4.addSchema(var26);
    boolean var33 = var1.isIdentical((org.databene.jdbacl.model.DBObject)var4);
    org.databene.jdbacl.sql.parser.SQLLexer var34 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var34.mCREATE_TABLE();
    var34.mCOLUMN_SPEC();
    var34.setBacktrackingLevel(6);
    var34.setText("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.dialect.DerbyDialect var45 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var47 = var45.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var48 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var49 = var48.getName();
    java.lang.String var50 = var45.formatValue((java.lang.Object)var48);
    var48.setName("'hi!'");
    java.util.List var53 = var48.getSchemas();
    org.databene.jdbacl.model.DBSchema var54 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var48);
    org.databene.jdbacl.model.DBTrigger var55 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var54);
    java.lang.String var56 = var54.getName();
    org.databene.jdbacl.dialect.DerbyDialect var58 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var60 = var58.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var61 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var62 = var61.getName();
    java.lang.String var63 = var58.formatValue((java.lang.Object)var61);
    var61.setName("'hi!'");
    java.util.List var66 = var61.getSchemas();
    org.databene.jdbacl.model.DBSchema var67 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var61);
    org.databene.jdbacl.dialect.DerbyDialect var70 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var72 = var70.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var73 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var74 = var73.getName();
    java.lang.String var75 = var70.formatValue((java.lang.Object)var73);
    var73.setName("'hi!'");
    java.util.List var78 = var73.getSchemas();
    org.databene.jdbacl.model.DBSchema var79 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var73);
    org.databene.jdbacl.model.DBTrigger var80 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var79);
    var67.addTrigger(var80);
    var54.addTrigger(var80);
    var34.traceOut("call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')", 100, (java.lang.Object)var54);
    java.util.List var84 = var54.getTables();
    var4.addSchema(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var56.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test241");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("select next value for CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))", "SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test242");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.join("", "", var12, "hi!", "10", var16);
    org.databene.jdbacl.model.DBUniqueConstraint var18 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var4, "select nextval('')", false, var12);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    java.lang.String var30 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var24);
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String[] var41 = new java.lang.String[] { ""};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.join("", "", var37, "hi!", "10", var41);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var41);
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var24, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var41);
    org.databene.jdbacl.identity.NaturalPkIdentity var46 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var47 = var46.getName();
    boolean var49 = var46.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    var50.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var53 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var54 = var53.getForeignKeyConstraints();
    var50.addReferrer((org.databene.jdbacl.model.DBTable)var53);
    java.lang.String[] var61 = new java.lang.String[] { ""};
    java.lang.String[] var65 = new java.lang.String[] { ""};
    java.lang.String var66 = org.databene.jdbacl.SQLUtil.join("", "", var61, "hi!", "10", var65);
    org.databene.jdbacl.model.DBUniqueConstraint var67 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var53, "select nextval('')", false, var61);
    java.lang.String var68 = var46.extractNK((java.lang.Object[])var61);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var4, var24, (java.lang.Object[])var61);
    java.lang.String[] var75 = new java.lang.String[] { ""};
    java.lang.String[] var79 = new java.lang.String[] { ""};
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.join("", "", var75, "hi!", "10", var79);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var81 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var4, "jdbc:h2:mem:select next value for 10", false, var79);
    var4.setDoc("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    org.databene.jdbacl.model.TableContainer var84 = new org.databene.jdbacl.model.TableContainer("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .", (org.databene.jdbacl.model.CompositeDBObject)var4);
    java.util.List var85 = var4.getIndexes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi! as 10 on . = 10."+ "'", var17.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "."+ "'", var30.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi! as 10 on . = 10."+ "'", var42.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "."+ "'", var43.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var44.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi! as 10 on . = 10."+ "'", var66.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var69.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi! as 10 on . = 10."+ "'", var80.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test243");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.addTable((org.databene.jdbacl.model.DBTable)var1);
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String var13 = org.databene.jdbacl.SQLUtil.join("", "", var8, "hi!", "10", var12);
    java.lang.String var14 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var8);
    java.lang.String[] var21 = new java.lang.String[] { ""};
    java.lang.String[] var25 = new java.lang.String[] { ""};
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.join("", "", var21, "hi!", "10", var25);
    java.lang.String var27 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var25);
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var8, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var25);
    org.databene.jdbacl.model.DBUniqueConstraint var29 = var1.getUniqueConstraint(var25);
    java.util.List var30 = var1.getIndexes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi! as 10 on . = 10."+ "'", var13.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "."+ "'", var14.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi! as 10 on . = 10."+ "'", var26.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "."+ "'", var27.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var28.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test244");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.lang.String var5 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    org.databene.jdbacl.model.DBDataType var15 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var16 = var15.isAlpha();
    java.lang.String var17 = var15.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var18 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var21 = var18.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var23 = var18.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var24 = var15.equals((java.lang.Object)var23);
    org.databene.jdbacl.model.DefaultDBColumn var27 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var10, var15, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var28 = var27.getType();
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    java.lang.String var33 = var31.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var34 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var37 = var34.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var39 = var34.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var40 = var31.equals((java.lang.Object)var39);
    var27.setType(var31);
    boolean var42 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    org.databene.jdbacl.model.TableContainer var45 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var46 = var45.getTables();
    org.databene.jdbacl.model.TableContainer var47 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var45);
    java.util.List var48 = var47.getTables();
    org.databene.jdbacl.model.DBCatalog var51 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var52 = var51.getName();
    org.databene.jdbacl.model.Database var53 = var51.getDatabase();
    java.lang.String var54 = var51.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var56 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var58 = var56.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var59 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var60 = var59.getName();
    java.lang.String var61 = var56.formatValue((java.lang.Object)var59);
    var59.setName("'hi!'");
    java.util.List var64 = var59.getSchemas();
    org.databene.jdbacl.model.DBSchema var65 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var59);
    var51.removeSchema(var65);
    org.databene.jdbacl.dialect.DerbyDialect var69 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var71 = var69.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var72 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var73 = var72.getName();
    java.lang.String var74 = var69.formatValue((java.lang.Object)var72);
    var72.setName("'hi!'");
    java.util.List var77 = var72.getSchemas();
    org.databene.jdbacl.model.DBSchema var78 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var72);
    org.databene.jdbacl.model.DBTrigger var79 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var78);
    var79.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var82 = var79.getTriggerBody();
    java.lang.String var83 = var79.getColumnName();
    java.lang.String var84 = var79.getWhenClause();
    var65.addTrigger(var79);
    org.databene.jdbacl.model.DBTrigger var86 = new org.databene.jdbacl.model.DBTrigger("-1", var65);
    org.databene.jdbacl.model.DBSequence var87 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var65);
    boolean var88 = var47.isIdentical((org.databene.jdbacl.model.DBObject)var65);
    java.util.List var89 = var65.getComponents();
    org.databene.jdbacl.model.DBCatalog var90 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var91 = var90.getName();
    java.util.List var92 = var90.getComponents();
    org.databene.jdbacl.model.DBSchema var94 = var90.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var96 = var90.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    var65.setCatalog(var90);
    var3.setOwner((org.databene.jdbacl.model.CompositeDBObject)var65);
    org.databene.jdbacl.model.Database var99 = var65.getDatabase();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "DROP SEQUENCE "+ "'", var17.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var23.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "DROP SEQUENCE "+ "'", var33.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var39.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test245");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var27.setCache((java.lang.Long)100L);
    java.lang.String var30 = var27.getObjectType();
    java.math.BigInteger var31 = var27.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setName("10");
    java.math.BigInteger var38 = var35.getIncrement();
    java.math.BigInteger var39 = var35.getIncrement();
    var27.setLastNumber(var39);
    var27.setOrder((java.lang.Boolean)false);
    var21.setCellValue("alter sequence  restart with -1", (java.lang.Object)var27);
    org.databene.jdbacl.model.TableContainer var48 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var49 = var48.getTables();
    org.databene.jdbacl.model.TableContainer var50 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    var48.addTable((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    org.databene.jdbacl.model.TableContainer var71 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var72 = var71.getTables();
    org.databene.jdbacl.model.TableContainer var73 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var71);
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    var74.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var77 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var78 = var77.getForeignKeyConstraints();
    var74.addReferrer((org.databene.jdbacl.model.DBTable)var77);
    var71.addTable((org.databene.jdbacl.model.DBTable)var77);
    java.lang.String[] var83 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var83);
    org.databene.jdbacl.model.DBForeignKeyConstraint var85 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var54, var62, (org.databene.jdbacl.model.DBTable)var77, var83);
    boolean var86 = var85.isNameDeterministic();
    java.lang.Object[] var87 = var21.getFKComponents(var85);
    java.lang.String var88 = var21.toString();
    java.lang.Object var89 = var21.getPKValue();
    java.util.Map var90 = var21.getCells();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "."+ "'", var68.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "null[]"+ "'", var88.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test246");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    var2.setName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSchema var20 = new org.databene.jdbacl.model.DBSchema("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1", var2);
    org.databene.jdbacl.model.DBTrigger var21 = new org.databene.jdbacl.model.DBTrigger("drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;", var20);
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog("drop sequence alter sequence hi! restart with 1");
    var20.setCatalog(var23);
    org.databene.jdbacl.model.DBCatalog var25 = var20.getCatalog();
    java.util.List var26 = var25.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test247");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicIndexName("DROP SEQUENCE (100)");
    boolean var7 = var0.isDefaultSchema("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ", "column jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.dialect.H2Dialect var8 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var10 = var8.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var12 = var8.isDeterministicPKName("'hi!'");
    boolean var14 = var8.isDeterministicIndexName("NaturalPkIdentity(hi!)");
    java.lang.String var16 = var8.renderFetchSequenceValue("(\"sequence\")");
    boolean var18 = var8.isDeterministicFKName("container");
    java.lang.String var19 = var0.formatValue((java.lang.Object)var8);
    boolean var22 = var0.isDefaultCatalog("JDBCDBImporter", "select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var10.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "select next value for (\"sequence\")"+ "'", var16.equals("select next value for (\"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test248");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getIncrementIfNotDefault();
    java.math.BigInteger var6 = var3.getMinValue();
    java.math.BigInteger var7 = var3.getMinValue();
    java.lang.Boolean var8 = var3.isOrder();
    org.databene.jdbacl.model.TableContainer var14 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var15 = var14.getTables();
    org.databene.jdbacl.model.TableContainer var16 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var14);
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    var17.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var21 = var20.getForeignKeyConstraints();
    var17.addReferrer((org.databene.jdbacl.model.DBTable)var20);
    var14.addTable((org.databene.jdbacl.model.DBTable)var20);
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String[] var32 = new java.lang.String[] { ""};
    java.lang.String var33 = org.databene.jdbacl.SQLUtil.join("", "", var28, "hi!", "10", var32);
    java.lang.String var34 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var28);
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    var37.addTable((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var49 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var49);
    org.databene.jdbacl.model.DBForeignKeyConstraint var51 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var20, var28, (org.databene.jdbacl.model.DBTable)var43, var49);
    java.lang.String[] var52 = var51.getRefereeColumnNames();
    java.lang.String[] var53 = var51.getForeignKeyColumnNames();
    org.databene.jdbacl.identity.UniqueKeyIdentity var54 = new org.databene.jdbacl.identity.UniqueKeyIdentity("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'", var53);
    boolean var55 = var3.equals((java.lang.Object)var53);
    java.math.BigInteger var56 = var3.getIncrementIfNotDefault();
    java.math.BigInteger var57 = var3.getMinValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi! as 10 on . = 10."+ "'", var33.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "."+ "'", var34.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var50.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test249");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("alter sequence CREATE GENERATOR drop sequence  restart with 10", "CREATE SEQUENCE 10", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT", "NOT drop generator sequence ~ 'hi!'", "Sub identity of ():\nnull", "-1");
    var6.setImportingPackages(true);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test250");


    org.databene.jdbacl.sql.parser.SQLParser.name_list_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.name_list_return();
    java.lang.Object var1 = var0.getTemplate();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test251");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Statement var3 = org.databene.jdbacl.dialect.HSQLUtil.shutdown("insert into \"'hi!'\".\"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE \" () values ()", "select next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0", "select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test252");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    java.lang.String var10 = var0.renderSequenceValue("drop sequence 10", 0L);
    java.lang.String var13 = var0.renderSequenceValue("CREATE GENERATOR drop sequence ", 10L);
    boolean var14 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var10.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "alter sequence CREATE GENERATOR drop sequence  restart with 10"+ "'", var13.equals("alter sequence CREATE GENERATOR drop sequence  restart with 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test253");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.JDBCConnectData var1 = org.databene.jdbacl.JDBCConnectData.parseSingleDbProperties("org.databene.jdbacl.identity.InvalidIdentityDefinitionError.DROP SEQUENCE ");
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test254");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    java.lang.String var5 = var0.setSequenceValue("", (-1L));
    boolean var8 = var0.isDefaultCatalog("sequence", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var10 = var0.isDeterministicIndexName("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ");
    boolean var12 = var0.isDeterministicFKName("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1");
    boolean var15 = var0.isDefaultSchema("alter sequence drop generator . restart with 10", "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )");
    java.lang.String var19 = var0.regexQuery("select null.nextval from dual", true, "drop generator (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    java.lang.String var22 = var0.setSequenceValue("REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0')", 100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence  restart with -1"+ "'", var5.equals("alter sequence  restart with -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "select null.nextval from dual NOT REGEXP 'drop generator (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")'"+ "'", var19.equals("select null.nextval from dual NOT REGEXP 'drop generator (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "alter sequence REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0') restart with 100"+ "'", var22.equals("alter sequence REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0') restart with 100"));

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test255");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    java.util.List var17 = var14.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var21 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var23 = var21.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var21.formatValue((java.lang.Object)var24);
    var24.setName("'hi!'");
    java.util.List var29 = var24.getSchemas();
    org.databene.jdbacl.model.DBSchema var30 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var24);
    org.databene.jdbacl.model.DBTrigger var31 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var30);
    java.util.List var32 = var30.getPackages();
    org.databene.jdbacl.model.DBPackage var33 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var30);
    java.util.List var34 = var33.getComponents();
    var14.addPackage(var33);
    java.lang.String var36 = var33.getSubObjectName();
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    org.databene.jdbacl.model.DBDataType var46 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var47 = var46.isAlpha();
    java.lang.String var48 = var46.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var49 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var52 = var49.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var54 = var49.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var55 = var46.equals((java.lang.Object)var54);
    org.databene.jdbacl.model.DefaultDBColumn var58 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var41, var46, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var59 = var33.isIdentical((org.databene.jdbacl.model.DBObject)var41);
    java.lang.String[] var60 = var41.getPKColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBTable var62 = var41.getProvider(69);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "DROP SEQUENCE "+ "'", var48.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var54.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test256");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    java.util.List var2 = var0.getComponents();
    org.databene.jdbacl.model.DBSchema var4 = var0.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var6 = var0.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var7 = var0.getName();
    java.util.List var8 = var0.getSchemas();
    var0.setName("select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'.DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test257");


    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var5 = var4.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    org.databene.jdbacl.model.Database var8 = var6.getDatabase();
    java.lang.String var9 = var6.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var11 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var13 = var11.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var14 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var15 = var14.getName();
    java.lang.String var16 = var11.formatValue((java.lang.Object)var14);
    var14.setName("'hi!'");
    java.util.List var19 = var14.getSchemas();
    org.databene.jdbacl.model.DBSchema var20 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var14);
    var6.removeSchema(var20);
    org.databene.jdbacl.dialect.DerbyDialect var24 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var26 = var24.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = var24.formatValue((java.lang.Object)var27);
    var27.setName("'hi!'");
    java.util.List var32 = var27.getSchemas();
    org.databene.jdbacl.model.DBSchema var33 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var27);
    org.databene.jdbacl.model.DBTrigger var34 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var33);
    var34.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var37 = var34.getTriggerBody();
    java.lang.String var38 = var34.getColumnName();
    java.lang.String var39 = var34.getWhenClause();
    var20.addTrigger(var34);
    boolean var41 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var20);
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var20);
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("CREATE SEQUENCE  CACHE 100", var20);
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    var45.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var49 = var48.getForeignKeyConstraints();
    var45.addReferrer((org.databene.jdbacl.model.DBTable)var48);
    org.databene.jdbacl.model.DBDataType var53 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var54 = var53.isAlpha();
    java.lang.String var55 = var53.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var56 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var59 = var56.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var61 = var56.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var62 = var53.equals((java.lang.Object)var61);
    org.databene.jdbacl.model.DefaultDBColumn var65 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var48, var53, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    var66.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var69 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var70 = var69.getForeignKeyConstraints();
    var66.addReferrer((org.databene.jdbacl.model.DBTable)var69);
    var48.addReferrer((org.databene.jdbacl.model.DBTable)var66);
    org.databene.jdbacl.model.DBIndex var74 = var66.getIndex("");
    java.util.List var75 = var66.getIndexes();
    java.util.Set var76 = var66.getForeignKeyConstraints();
    java.util.List var77 = var66.getCheckConstraints();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var78 = var66.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBCatalog var79 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var80 = var79.getName();
    org.databene.jdbacl.model.Database var81 = var79.getDatabase();
    java.lang.String var82 = var79.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var84 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var86 = var84.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var87 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var88 = var87.getName();
    java.lang.String var89 = var84.formatValue((java.lang.Object)var87);
    var87.setName("'hi!'");
    java.util.List var92 = var87.getSchemas();
    org.databene.jdbacl.model.DBSchema var93 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var87);
    var79.removeSchema(var93);
    java.util.List var96 = var93.getSequences(false);
    boolean var97 = var66.equals((java.lang.Object)var93);
    var20.removeTable((org.databene.jdbacl.model.DBTable)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var42.equals("schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "DROP SEQUENCE "+ "'", var55.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var61.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test258");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    var8.setExcludeTables("(\"sequence\")");
    boolean var34 = var8.isImportingIndexes();
    var8.setImportingIndexes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test259");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    java.util.List var18 = var15.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var15);
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    var20.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var24 = var23.getForeignKeyConstraints();
    var20.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    java.lang.String[] var31 = new java.lang.String[] { ""};
    java.lang.String[] var35 = new java.lang.String[] { ""};
    java.lang.String var36 = org.databene.jdbacl.SQLUtil.join("", "", var31, "hi!", "10", var35);
    org.databene.jdbacl.model.DBUniqueConstraint var37 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var23, "select nextval('')", false, var31);
    java.lang.String[] var43 = new java.lang.String[] { ""};
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.join("", "", var43, "hi!", "10", var47);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var43);
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("", "", var56, "hi!", "10", var60);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var60);
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var43, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var60);
    org.databene.jdbacl.identity.NaturalPkIdentity var65 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var66 = var65.getName();
    boolean var68 = var65.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var69 = new org.databene.jdbacl.model.DefaultDBTable();
    var69.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var72 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var73 = var72.getForeignKeyConstraints();
    var69.addReferrer((org.databene.jdbacl.model.DBTable)var72);
    java.lang.String[] var80 = new java.lang.String[] { ""};
    java.lang.String[] var84 = new java.lang.String[] { ""};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.join("", "", var80, "hi!", "10", var84);
    org.databene.jdbacl.model.DBUniqueConstraint var86 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var72, "select nextval('')", false, var80);
    java.lang.String var87 = var65.extractNK((java.lang.Object[])var80);
    java.lang.String var88 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var23, var43, (java.lang.Object[])var80);
    var15.removeTable((org.databene.jdbacl.model.DBTable)var23);
    org.databene.jdbacl.model.DefaultDBTable var91 = new org.databene.jdbacl.model.DefaultDBTable("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    java.util.List var92 = var91.getColumns();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var91);
    java.util.Set var95 = var23.getUniqueConstraints(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi! as 10 on . = 10."+ "'", var36.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi! as 10 on . = 10."+ "'", var48.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "."+ "'", var49.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "."+ "'", var62.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var63.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi! as 10 on . = 10."+ "'", var85.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var88.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test260");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    java.lang.String var16 = var15.getDoc();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBNotNullConstraint var20 = new org.databene.jdbacl.model.DBNotNullConstraint((org.databene.jdbacl.model.DBTable)var15, "alter sequence call next value for 'hi!' restart with 100", false, "alter sequence -1 restart with 1");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test261");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var80 = new org.databene.jdbacl.ResultSetConverter(var78);
    java.lang.String var81 = var80.toString();
    java.lang.Class var82 = var80.getSourceType();
    java.lang.String var83 = var80.toString();
    java.lang.String var84 = var80.toString();
    java.lang.Class var85 = var80.getSourceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "ResultSetConverter"+ "'", var81.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "ResultSetConverter"+ "'", var83.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "ResultSetConverter"+ "'", var84.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test262");


    org.databene.jdbacl.dialect.DerbyDialect var0 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var2 = var0.isDeterministicIndexName(".");
    boolean var5 = var0.isDefaultSchema("alter sequence call next value for 'hi!' restart with 100", "Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    boolean var8 = var0.isDefaultCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')");
    boolean var9 = var0.isSequenceBoundarySupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test263");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mALTER_TABLE();
    var10.mT__134();
    var10.mT__111();
    var10.mT__82();
    var10.emitErrorMessage("CONSTRAINT hi! UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test264");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    var4.setDoc("NOT REGEXP_MATCHES(sequence, '')");
    org.databene.jdbacl.model.Database var13 = var4.getDatabase();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test265");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("call next value for CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.' NOT REGEXP 'SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0'", "select nextval for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'') from sysibm.sysdummy1", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test266");


    java.lang.String var2 = org.databene.jdbacl.SQLUtil.normalize("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .", false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR."+ "'", var2.equals("left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR."));

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test267");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.util.List var16 = var15.getComponents();
    var15.setObjectType("-1");
    java.util.List var19 = var15.getComponents();
    java.lang.String var20 = var15.getObjectType();
    var15.setStatus("h2");
    var15.setStatus("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\"");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "-1"+ "'", var20.equals("-1"));

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test268");


    java.lang.String var1 = org.databene.jdbacl.DBUtil.escape("drop generator select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "drop generator select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual"+ "'", var1.equals("drop generator select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual"));

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test269");


    org.databene.jdbacl.sql.parser.SQLParser.additive_expression_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.additive_expression_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test270");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    java.lang.String var5 = var0.setSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 1L);
    java.lang.String var8 = var0.setSequenceValue("alter sequence CREATE GENERATOR drop sequence  restart with -1", 0L);
    boolean var10 = var0.isDeterministicUKName("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var12 = var0.isDeterministicUKName("DROP SEQUENCE (10,69)");
    java.lang.String var16 = var0.regexQuery("drop sequence select next value for CREATE GENERATOR ", true, "UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"+ "'", var5.equals("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"+ "'", var8.equals("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "drop sequence select next value for CREATE GENERATOR  NOT REGEXP 'UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')'"+ "'", var16.equals("drop sequence select next value for CREATE GENERATOR  NOT REGEXP 'UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')'"));

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test271");


    org.databene.jdbacl.model.DBSchema var1 = new org.databene.jdbacl.model.DBSchema("drop sequence 10");
    java.util.List var2 = var1.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test272");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("alter sequence NOT drop generator sequence ~ 'hi!' restart with 10", "SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'", "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    org.databene.jdbacl.JDBCDriverInfo var4 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var5 = var4.getUrlPattern();
    var4.setDefaultUser("-1");
    java.lang.String var8 = var4.getUrlPattern();
    var4.setDefaultPort("alter sequence  restart with -1");
    boolean var11 = var3.equals((java.lang.Object)var4);
    java.lang.String var12 = var4.getDefaultUser();
    var4.setDefaultDatabase("select Identity definition by unique key: select next value for 10.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "-1"+ "'", var12.equals("-1"));

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test273");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(true);
    org.databene.jdbacl.JDBCConnectData var9 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var10 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var9);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var11 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var9);
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    org.databene.jdbacl.model.Database var15 = var13.getDatabase();
    java.lang.String var16 = var13.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    var13.removeSchema(var27);
    java.util.List var30 = var27.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var27);
    org.databene.jdbacl.model.jdbc.LazyTable var34 = new org.databene.jdbacl.model.jdbc.LazyTable(var11, var27, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var35 = var34.getCatalog();
    var0.addTable((org.databene.jdbacl.model.DBTable)var34);
    org.databene.jdbacl.model.DBCatalog var37 = var34.getCatalog();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test274");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT", "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test275");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var21 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var23 = var21.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var21.formatValue((java.lang.Object)var24);
    var24.setName("'hi!'");
    java.util.List var29 = var24.getSchemas();
    org.databene.jdbacl.model.DBSchema var30 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var24);
    org.databene.jdbacl.model.DBTrigger var31 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var30);
    java.util.List var32 = var30.getPackages();
    org.databene.jdbacl.model.DBPackage var33 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var30);
    java.util.List var34 = var33.getComponents();
    org.databene.jdbacl.model.DBProcedure var35 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var33);
    java.lang.String var36 = var35.getSubProgramId();
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    java.util.Set var42 = var38.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var45 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var46 = var45.isAlpha();
    boolean var47 = var45.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var50 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var38, var45, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var53 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var54 = var53.getTables();
    org.databene.jdbacl.model.TableContainer var55 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var53);
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    var53.addTable((org.databene.jdbacl.model.DBTable)var59);
    var50.setTable((org.databene.jdbacl.model.DBTable)var59);
    boolean var64 = var35.isIdentical((org.databene.jdbacl.model.DBObject)var59);
    var15.addProcedure(var35);
    java.lang.String var66 = var35.getSubProgramId();
    var35.setObjectId("SET GENERATOR catalog TO -2");
    var35.setOverload("select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test276");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setCache((java.lang.Long)100L);
    java.lang.String var6 = var3.getObjectType();
    java.math.BigInteger var7 = var3.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var11.setName("10");
    java.math.BigInteger var14 = var11.getIncrement();
    java.math.BigInteger var15 = var11.getIncrement();
    var3.setLastNumber(var15);
    java.lang.String var17 = var3.getCatalogName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "drop sequence "+ "'", var17.equals("drop sequence "));

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test277");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    java.lang.String var10 = var0.renderSequenceValue("drop sequence 10", 0L);
    java.lang.String var14 = var0.regexQuery("CONSTRAINT \"select nextval('')\" ", false, "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var17 = var0.isDefaultCatalog("NO_ACTION", "alter sequence drop sequence 10 restart with 0");
    boolean var20 = var0.isDefaultCatalog("drop sequence 10", "drop sequence 10");
    java.lang.String var22 = var0.renderFetchSequenceValue("CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))");
    java.lang.String var24 = var0.renderFetchSequenceValue("'O'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var10.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')"+ "'", var14.equals("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "call next value for CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))"+ "'", var22.equals("call next value for CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "call next value for 'O'"+ "'", var24.equals("call next value for 'O'"));

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test278");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getColumnName();
    java.lang.String var17 = var12.getTriggerBody();
    java.lang.String var18 = var12.getTriggerType();
    var12.setTriggerType("call next value for alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test279");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    java.util.List var3 = var1.getComponents();
    org.databene.jdbacl.model.DBSchema var5 = var1.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var7 = var1.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var8 = var1.getName();
    org.databene.jdbacl.model.DBSchema var9 = new org.databene.jdbacl.model.DBSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", var1);
    java.util.List var10 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test280");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDefaultUser("call next value for 'hi!'");
    java.lang.String var5 = var0.getDefaultPort();
    var0.setDefaultDatabase("Sub identity of ():\nSET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test281");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    org.databene.jdbacl.model.DBTrigger var28 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    var28.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var31 = var28.getTriggerBody();
    java.lang.String var32 = var28.getColumnName();
    java.lang.String var33 = var28.getWhenClause();
    var14.addTrigger(var28);
    java.util.List var35 = var14.getComponents();
    java.util.List var37 = var14.getSequences(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test282");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("left join select next value for (\"sequence\") as (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1) on EQUEN.DROP SEQUENCE  = (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1).DROP SEQUENCE ", "select nextval('drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT')");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test283");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    org.databene.jdbacl.model.DBTrigger var26 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var25);
    var26.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var29 = var26.getTriggerBody();
    java.lang.String var30 = var26.getTriggerBody();
    var26.setReferencingNames("NOT REGEXP_MATCHES(sequence, '')");
    var11.addTrigger(var26);
    var26.setActionType("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE  NOT SIMILAR TO 'CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'''");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var13.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test284");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mTABLE_DETAILS();
    java.lang.String var16 = var0.getSourceName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mIN();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test285");


    org.databene.jdbacl.identity.NkPkQueryIdentity var2 = new org.databene.jdbacl.identity.NkPkQueryIdentity("jdbc:hsqldb:mem:call next value for 'hi!' identity by primary key", "call next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1");
    java.lang.String var3 = var2.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Identity definition by NK-PK query: call next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1"+ "'", var3.equals("Identity definition by NK-PK query: call next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1"));

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test286");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicPKName("org.firebirdsql.jdbc.FBDriver");
    boolean var6 = var0.isDeterministicFKName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var12 = var11.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    org.databene.jdbacl.model.Database var15 = var13.getDatabase();
    java.lang.String var16 = var13.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    var13.removeSchema(var27);
    org.databene.jdbacl.dialect.DerbyDialect var31 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var33 = var31.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var34 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var35 = var34.getName();
    java.lang.String var36 = var31.formatValue((java.lang.Object)var34);
    var34.setName("'hi!'");
    java.util.List var39 = var34.getSchemas();
    org.databene.jdbacl.model.DBSchema var40 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var34);
    org.databene.jdbacl.model.DBTrigger var41 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var40);
    var41.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var44 = var41.getTriggerBody();
    java.lang.String var45 = var41.getColumnName();
    java.lang.String var46 = var41.getWhenClause();
    var27.addTrigger(var41);
    boolean var48 = var11.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.util.List var49 = var27.getPackages();
    org.databene.jdbacl.model.DBSequence var50 = new org.databene.jdbacl.model.DBSequence("NO_ACTION", var27);
    java.math.BigInteger var51 = var50.getIncrementIfNotDefault();
    java.lang.String var52 = var0.renderCreateSequence(var50);
    boolean var54 = var0.isDeterministicCheckName("DROP SEQUENCE ");
    org.databene.jdbacl.dialect.PostgreSQLDialect var55 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var58 = var55.isDefaultCatalog("", "");
    java.lang.String var60 = var55.formatValue((java.lang.Object)10);
    org.databene.jdbacl.dialect.Derby10_6Dialect var61 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var64 = var61.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var66 = var61.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var70 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var70.setCache((java.lang.Long)100L);
    java.lang.String var73 = var70.getObjectType();
    java.lang.String var74 = var61.renderCreateSequence(var70);
    java.lang.String var75 = var70.getSchemaName();
    java.lang.String var76 = var55.renderCreateSequence(var70);
    org.databene.jdbacl.model.DBSequence var80 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var81 = var80.dropDDL();
    java.math.BigInteger var82 = var80.getMinValueIfNotDefault();
    java.lang.String var83 = var55.renderCreateSequence(var80);
    java.lang.Long var84 = var80.getCache();
    java.lang.String var85 = var0.renderCreateSequence(var80);
    java.lang.String var89 = var0.regexQuery("\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'", false, "JDBCDBImporter");
    java.lang.String var93 = var0.regexQuery("()", false, "drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0");
    boolean var95 = var0.isDeterministicFKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\""+ "'", var52.equals("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "10"+ "'", var60.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "sequence"+ "'", var73.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi! as 10 on . = 10."+ "'", var75.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var76.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "drop sequence "+ "'", var81.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CREATE SEQUENCE "+ "'", var83.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""+ "'", var85.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "REGEXP_LIKE(\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10', 'JDBCDBImporter')"+ "'", var89.equals("REGEXP_LIKE(\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10', 'JDBCDBImporter')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0')"+ "'", var93.equals("REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test287");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    java.lang.String var6 = var0.renderSequenceValue("CREATE SEQUENCE 10", 1L);
    java.lang.String var8 = var0.renderFetchSequenceValue("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    boolean var10 = var0.isDeterministicFKName("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE (, sequence)");
    boolean var12 = var0.isDeterministicPKName("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "alter sequence CREATE SEQUENCE 10 restart with 1"+ "'", var6.equals("alter sequence CREATE SEQUENCE 10 restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'"+ "'", var8.equals("call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test288");


    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var5 = var4.dropDDL();
    java.math.BigInteger var6 = var4.getIncrementIfNotDefault();
    java.math.BigInteger var7 = var4.getMinValue();
    java.math.BigInteger var8 = var4.getMinValue();
    java.lang.Boolean var9 = var4.isOrder();
    org.databene.jdbacl.model.TableContainer var15 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var16 = var15.getTables();
    org.databene.jdbacl.model.TableContainer var17 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var15);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    var15.addTable((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { ""};
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String var34 = org.databene.jdbacl.SQLUtil.join("", "", var29, "hi!", "10", var33);
    java.lang.String var35 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var29);
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var39 = var38.getTables();
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var45 = var44.getForeignKeyConstraints();
    var41.addReferrer((org.databene.jdbacl.model.DBTable)var44);
    var38.addTable((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var50 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var50);
    org.databene.jdbacl.model.DBForeignKeyConstraint var52 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var21, var29, (org.databene.jdbacl.model.DBTable)var44, var50);
    java.lang.String[] var53 = var52.getRefereeColumnNames();
    java.lang.String[] var54 = var52.getForeignKeyColumnNames();
    org.databene.jdbacl.identity.UniqueKeyIdentity var55 = new org.databene.jdbacl.identity.UniqueKeyIdentity("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'", var54);
    boolean var56 = var4.equals((java.lang.Object)var54);
    org.databene.jdbacl.identity.IdentityProvider var57 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.NaturalPkIdentity var59 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var60 = var59.getName();
    var57.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var59, "SET GENERATOR . TO -1");
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var63 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("jdbc:hsqldb:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '", var54, var57);
    org.databene.jdbacl.identity.NaturalPkIdentity var65 = new org.databene.jdbacl.identity.NaturalPkIdentity("call next value for 'hi!'");
    java.lang.String var66 = var65.getName();
    java.lang.String var67 = var65.getDescription();
    var57.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var65, "DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE ");
    java.lang.String var70 = var65.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi! as 10 on . = 10."+ "'", var34.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "."+ "'", var35.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var51.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "call next value for 'hi!'"+ "'", var66.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "call next value for 'hi!' identity by primary key"+ "'", var67.equals("call next value for 'hi!' identity by primary key"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "call next value for 'hi!' identity by primary key"+ "'", var70.equals("call next value for 'hi!' identity by primary key"));

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test289");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getMinValueIfNotDefault();
    java.lang.String var6 = var3.getSchemaName();
    java.math.BigInteger var7 = var3.getIncrementIfNotDefault();
    java.lang.String var8 = var3.getCatalogName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi! as 10 on . = 10."+ "'", var6.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence "+ "'", var8.equals("drop sequence "));

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test290");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicPKName("org.firebirdsql.jdbc.FBDriver");
    boolean var6 = var0.isDeterministicFKName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var12 = var11.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    org.databene.jdbacl.model.Database var15 = var13.getDatabase();
    java.lang.String var16 = var13.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    var13.removeSchema(var27);
    org.databene.jdbacl.dialect.DerbyDialect var31 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var33 = var31.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var34 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var35 = var34.getName();
    java.lang.String var36 = var31.formatValue((java.lang.Object)var34);
    var34.setName("'hi!'");
    java.util.List var39 = var34.getSchemas();
    org.databene.jdbacl.model.DBSchema var40 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var34);
    org.databene.jdbacl.model.DBTrigger var41 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var40);
    var41.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var44 = var41.getTriggerBody();
    java.lang.String var45 = var41.getColumnName();
    java.lang.String var46 = var41.getWhenClause();
    var27.addTrigger(var41);
    boolean var48 = var11.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.util.List var49 = var27.getPackages();
    org.databene.jdbacl.model.DBSequence var50 = new org.databene.jdbacl.model.DBSequence("NO_ACTION", var27);
    java.math.BigInteger var51 = var50.getIncrementIfNotDefault();
    java.lang.String var52 = var0.renderCreateSequence(var50);
    boolean var54 = var0.isDeterministicCheckName("DROP SEQUENCE ");
    org.databene.jdbacl.dialect.PostgreSQLDialect var55 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var58 = var55.isDefaultCatalog("", "");
    java.lang.String var60 = var55.formatValue((java.lang.Object)10);
    org.databene.jdbacl.dialect.Derby10_6Dialect var61 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var64 = var61.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var66 = var61.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var70 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var70.setCache((java.lang.Long)100L);
    java.lang.String var73 = var70.getObjectType();
    java.lang.String var74 = var61.renderCreateSequence(var70);
    java.lang.String var75 = var70.getSchemaName();
    java.lang.String var76 = var55.renderCreateSequence(var70);
    org.databene.jdbacl.model.DBSequence var80 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var81 = var80.dropDDL();
    java.math.BigInteger var82 = var80.getMinValueIfNotDefault();
    java.lang.String var83 = var55.renderCreateSequence(var80);
    java.lang.Long var84 = var80.getCache();
    java.lang.String var85 = var0.renderCreateSequence(var80);
    java.lang.String var89 = var0.regexQuery("\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'", false, "JDBCDBImporter");
    boolean var91 = var0.isDeterministicUKName("jdbc:hsqldb:mem:jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var93 = var0.isDeterministicUKName("\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'");
    boolean var95 = var0.isDeterministicPKName("select next value for SET GENERATOR . TO -1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\""+ "'", var52.equals("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "10"+ "'", var60.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "sequence"+ "'", var73.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi! as 10 on . = 10."+ "'", var75.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var76.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "drop sequence "+ "'", var81.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CREATE SEQUENCE "+ "'", var83.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""+ "'", var85.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "REGEXP_LIKE(\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10', 'JDBCDBImporter')"+ "'", var89.equals("REGEXP_LIKE(\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10', 'JDBCDBImporter')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test291");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicPKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL");
    boolean var5 = var0.isDeterministicIndexName("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    java.lang.String var7 = var0.renderCreateSequence("DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    boolean var8 = var0.isSequenceBoundarySupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT"+ "'", var7.equals("CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test292");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var6.setName("10");
    java.math.BigInteger var9 = var6.getIncrement();
    java.lang.Boolean var10 = var6.isCycle();
    java.lang.String var11 = var6.dropDDL();
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.math.BigInteger var19 = var15.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var23.setName("10");
    java.math.BigInteger var26 = var23.getIncrement();
    java.math.BigInteger var27 = var23.getIncrement();
    var15.setLastNumber(var27);
    var6.setIncrement(var27);
    var0.addSequence(var6);
    org.databene.jdbacl.model.DBTable var32 = var0.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var35 = var34.getTables();
    java.util.List var37 = var34.getTables(false);
    var0.addSubContainer(var34);
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.util.List var42 = var40.getComponents();
    org.databene.jdbacl.model.DBSchema var44 = var40.getSchema("alter sequence hi! restart with 1");
    java.lang.String var45 = var40.getObjectType();
    java.util.List var46 = var40.getComponents();
    java.util.List var47 = var0.getSequences(false, var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop sequence 10"+ "'", var11.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "catalog"+ "'", var45.equals("catalog"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test293");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    java.lang.String var5 = var0.getDoc();
    var0.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    org.databene.jdbacl.JDBCConnectData var14 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var15 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var16 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    boolean var17 = var0.equals((java.lang.Object)var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var18 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var19 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    var19.setCatalogName("select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    var19.setLazy(false);
    var19.setImportingIndexes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "."+ "'", var5.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test294");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    var1.seek(14);
    java.lang.String var9 = var1.substring(79, 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "0"+ "'", var9.equals("0"));

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test295");


    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var1 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.SQLScriptException var3 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, 3);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test296");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String[] var21 = new java.lang.String[] { ""};
    java.lang.String var22 = org.databene.jdbacl.SQLUtil.join("", "", var17, "hi!", "10", var21);
    org.databene.jdbacl.model.DBUniqueConstraint var23 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var9, "select nextval('')", false, var17);
    java.lang.String[] var29 = new java.lang.String[] { ""};
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String var34 = org.databene.jdbacl.SQLUtil.join("", "", var29, "hi!", "10", var33);
    java.lang.String var35 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var29);
    java.lang.String[] var42 = new java.lang.String[] { ""};
    java.lang.String[] var46 = new java.lang.String[] { ""};
    java.lang.String var47 = org.databene.jdbacl.SQLUtil.join("", "", var42, "hi!", "10", var46);
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var46);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var29, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var46);
    org.databene.jdbacl.identity.NaturalPkIdentity var51 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var52 = var51.getName();
    boolean var54 = var51.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var59 = var58.getForeignKeyConstraints();
    var55.addReferrer((org.databene.jdbacl.model.DBTable)var58);
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.join("", "", var66, "hi!", "10", var70);
    org.databene.jdbacl.model.DBUniqueConstraint var72 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var58, "select nextval('')", false, var66);
    java.lang.String var73 = var51.extractNK((java.lang.Object[])var66);
    java.lang.String var74 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var9, var29, (java.lang.Object[])var66);
    java.lang.String[] var80 = new java.lang.String[] { ""};
    java.lang.String[] var84 = new java.lang.String[] { ""};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.join("", "", var80, "hi!", "10", var84);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var86 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var9, "jdbc:h2:mem:select next value for 10", false, var84);
    var0.setPrimaryKey(var86);
    java.util.Set var89 = var0.getUniqueConstraints(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var91 = var0.requiresProvider(79);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi! as 10 on . = 10."+ "'", var22.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi! as 10 on . = 10."+ "'", var34.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "."+ "'", var35.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi! as 10 on . = 10."+ "'", var47.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "."+ "'", var48.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var49.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi! as 10 on . = 10."+ "'", var71.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var74.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi! as 10 on . = 10."+ "'", var85.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test297");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.model.DBTrigger var25 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var24);
    var25.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    var29.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var33 = var32.getForeignKeyConstraints();
    var29.addReferrer((org.databene.jdbacl.model.DBTable)var32);
    org.databene.jdbacl.model.DBDataType var37 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var38 = var37.isAlpha();
    java.lang.String var39 = var37.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var40 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var43 = var40.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var45 = var40.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var46 = var37.equals((java.lang.Object)var45);
    org.databene.jdbacl.model.DefaultDBColumn var49 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var32, var37, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var50 = var25.isIdentical((org.databene.jdbacl.model.DBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    org.databene.jdbacl.model.DBUniqueConstraint var68 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var54, "select nextval('')", false, var62);
    java.lang.String var69 = var68.toString();
    boolean var70 = var49.isEquivalent((org.databene.jdbacl.model.DBObject)var68);
    boolean var71 = var11.isIdentical((org.databene.jdbacl.model.DBObject)var49);
    org.databene.jdbacl.model.DBTreeModel var72 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var11);
    java.util.List var73 = var11.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "DROP SEQUENCE "+ "'", var39.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var45.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var69.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test298");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    var0.mCOMMENT_TABLE();
    var0.mDROP_TABLE();
    int var6 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var9 = var8.getTables();
    java.util.List var11 = var8.getTables(false);
    java.util.List var13 = var8.getSequences(false);
    java.util.List var14 = var0.toStrings(var13);
    org.databene.jdbacl.sql.parser.SQLLexer var15 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var15.mCREATE_TABLE();
    var15.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var19 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var21 = var19.LT(10);
    var15.setCharStream((org.antlr.runtime.CharStream)var19);
    int var24 = var19.LA(10);
    int var25 = var19.getLine();
    java.lang.String var26 = var19.toString();
    var19.consume();
    var0.matchAny((org.antlr.runtime.IntStream)var19);
    int var30 = var19.LT(41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.script.Expression var31 = org.databene.jdbacl.sql.SQLParserUtil.parseExpression((org.antlr.runtime.CharStream)var19);
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test299");


    org.databene.jdbacl.JDBCConnectData var7 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var9 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    java.util.List var28 = var25.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var25);
    org.databene.jdbacl.model.jdbc.LazyTable var32 = new org.databene.jdbacl.model.jdbc.LazyTable(var9, var25, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var33 = var32.getDoc();
    java.lang.String var34 = var32.getName();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("select nextval('')", (org.databene.jdbacl.model.CompositeDBObject)var32);
    java.lang.String var36 = var32.getObjectType();
    java.lang.String var37 = var32.getDoc();
    org.databene.jdbacl.model.DBSchema var38 = var32.getSchema();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var33.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var34.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "table"+ "'", var36.equals("table"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var37.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test300");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    java.lang.String var6 = var0.renderFetchSequenceValue("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. NOT REGEXP 'CONSTRAINT \"select nextval('')\" '");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "select gen_id(drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. NOT REGEXP 'CONSTRAINT \"select nextval('')\" ', 1) from RDB$DATABASE;"+ "'", var6.equals("select gen_id(drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. NOT REGEXP 'CONSTRAINT \"select nextval('')\" ', 1) from RDB$DATABASE;"));

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test301");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var0.consumeUntil((org.antlr.runtime.IntStream)var9, 100);
    int var12 = var9.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 14);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test302");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("call next value for 'hi!'");
    java.lang.String var2 = var1.getName();
    var1.addIrrelevantColumn("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") null \"sequence\" null \"'hi!'\")");
    java.lang.String var5 = var1.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "call next value for 'hi!' identity by primary key"+ "'", var5.equals("call next value for 'hi!' identity by primary key"));

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test303");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    boolean var4 = var0.isDeterministicPKName("'hi!'");
    java.lang.String var6 = var0.renderCreateSequence("drop sequence ");
    boolean var7 = var0.supportsRegex();
    boolean var9 = var0.isDeterministicPKName("call next value for null[]");
    boolean var12 = var0.isDefaultCatalog("alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10", "select next value for SET GENERATOR.TO - 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "CREATE GENERATOR drop sequence "+ "'", var6.equals("CREATE GENERATOR drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test304");


    boolean var1 = org.databene.jdbacl.SQLUtil.isProcedureCall("index");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test305");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    boolean var5 = var0.isDeterministicFKName("DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    java.lang.String var7 = var0.renderFetchSequenceValue("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1");
    boolean var9 = var0.isDeterministicIndexName("sequence 10 ~ 'REGEXP_MATCHES(catalog, 'call next value for null[]')'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "select nextval for CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 from sysibm.sysdummy1"+ "'", var7.equals("select nextval for CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 from sysibm.sysdummy1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test306");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    var8.setExcludeTables("(\"sequence\")");
    var8.setImportingIndexes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test307");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mT__123();
    org.databene.jdbacl.sql.parser.SQLLexer var16 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var18 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var18.release((-1));
    boolean var22 = var16.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var18, 0);
    int var23 = var16.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var25 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var16.consumeUntil((org.antlr.runtime.IntStream)var25, 100);
    org.databene.jdbacl.dialect.DerbyDialect var30 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var32 = var30.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var33 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var34 = var33.getName();
    java.lang.String var35 = var30.formatValue((java.lang.Object)var33);
    var33.setName("'hi!'");
    java.util.List var38 = var33.getSchemas();
    var16.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var38);
    var16.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var41 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var41.mCREATE_TABLE();
    var41.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var45 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var47 = var45.LT(10);
    var41.setCharStream((org.antlr.runtime.CharStream)var45);
    var16.consumeUntil((org.antlr.runtime.IntStream)var45, 1);
    org.databene.jdbacl.sql.parser.SQLLexer var51 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var45);
    org.databene.jdbacl.sql.parser.SQLLexer var52 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var52.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var55 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var57 = var55.LT(10);
    var52.setCharStream((org.antlr.runtime.CharStream)var55);
    org.databene.jdbacl.sql.parser.SQLLexer var59 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var61 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var61.release((-1));
    boolean var65 = var59.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var61, 0);
    var52.setCharStream((org.antlr.runtime.CharStream)var61);
    var52.setBacktrackingLevel(1);
    var52.mT__75();
    org.databene.jdbacl.sql.parser.SQLLexer var70 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var70.mCREATE_TABLE();
    var70.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var74 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var76 = var74.LT(10);
    var70.setCharStream((org.antlr.runtime.CharStream)var74);
    int var79 = var74.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var80 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var74);
    var80.setText("select next value for SET GENERATOR.TO - 1");
    var80.setBacktrackingLevel(1);
    var80.mLE();
    var80.mT__99();
    var80.mT__110();
    org.antlr.runtime.Token var88 = var80.emit();
    var52.emit(var88);
    java.lang.String var90 = var51.getTokenErrorDisplay(var88);
    var0.emit(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "'select next value for SET GENERATOR.TO - 1'"+ "'", var90.equals("'select next value for SET GENERATOR.TO - 1'"));

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test308");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.join("", "", var16, "hi!", "10", var20);
    org.databene.jdbacl.model.DBUniqueConstraint var22 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var8, "select nextval('')", false, var16);
    var8.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    java.util.List var26 = var8.getIndexes();
    org.databene.jdbacl.model.DBRow var27 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.TableContainer var32 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var33 = var32.getTables();
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var32);
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    var35.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var39 = var38.getForeignKeyConstraints();
    var35.addReferrer((org.databene.jdbacl.model.DBTable)var38);
    var32.addTable((org.databene.jdbacl.model.DBTable)var38);
    java.lang.String[] var46 = new java.lang.String[] { ""};
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.join("", "", var46, "hi!", "10", var50);
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var46);
    org.databene.jdbacl.model.TableContainer var55 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var56 = var55.getTables();
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var55);
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    var58.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var62 = var61.getForeignKeyConstraints();
    var58.addReferrer((org.databene.jdbacl.model.DBTable)var61);
    var55.addTable((org.databene.jdbacl.model.DBTable)var61);
    java.lang.String[] var67 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var67);
    org.databene.jdbacl.model.DBForeignKeyConstraint var69 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var38, var46, (org.databene.jdbacl.model.DBTable)var61, var67);
    java.lang.String[] var70 = var69.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var71 = var69.getTable();
    java.lang.String var72 = var69.toString();
    java.lang.Object[] var73 = var27.getFKComponents(var69);
    java.lang.Object[] var74 = var27.getPKValues();
    org.databene.jdbacl.DBExecutionResult var76 = new org.databene.jdbacl.DBExecutionResult((java.lang.Object)var27, (java.lang.Boolean)true);
    org.databene.jdbacl.model.TableContainerSupport var78 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.Collection var79 = var78.getSubContainers();
    java.util.List var81 = var78.getSequences(false);
    var27.setCellValue("org.databene.jdbacl.SQLScriptException: Error in execution of script line -1: DROP SEQUENCE CREATE GENERATOR  RESTRICT", (java.lang.Object)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi! as 10 on . = 10."+ "'", var21.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi! as 10 on . = 10."+ "'", var51.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "."+ "'", var52.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var68.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var72.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test309");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    java.lang.String var2 = var1.toString();
    org.databene.jdbacl.SQLScriptException var4 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var6 = var4.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var9 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var4, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", (-1));
    org.databene.jdbacl.SQLScriptException var12 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var9, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 69);
    org.databene.jdbacl.SQLScriptException var14 = new org.databene.jdbacl.SQLScriptException(1);
    java.lang.String var15 = var14.toString();
    java.lang.String var16 = var14.toString();
    var9.addSuppressed((java.lang.Throwable)var14);
    var1.addSuppressed((java.lang.Throwable)var9);
    java.lang.String var19 = var9.toString();
    org.databene.jdbacl.SQLScriptException var22 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var9, "CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.", 6);
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var23 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError((java.lang.Throwable)var22);
    org.databene.jdbacl.SQLScriptException var25 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var27 = var25.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var30 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var25, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", (-1));
    int var31 = var30.getLineNo();
    var23.addSuppressed((java.lang.Throwable)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "org.databene.jdbacl.SQLScriptException: Error in execution of script line 1: "+ "'", var2.equals("org.databene.jdbacl.SQLScriptException: Error in execution of script line 1: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "org.databene.jdbacl.SQLScriptException: Error in execution of script line 1: "+ "'", var15.equals("org.databene.jdbacl.SQLScriptException: Error in execution of script line 1: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "org.databene.jdbacl.SQLScriptException: Error in execution of script line 1: "+ "'", var16.equals("org.databene.jdbacl.SQLScriptException: Error in execution of script line 1: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "org.databene.jdbacl.SQLScriptException: Error in execution of script CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT line -1: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: "+ "'", var19.equals("org.databene.jdbacl.SQLScriptException: Error in execution of script CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT line -1: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test310");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    var0.setDownloadUrl("catalog");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test311");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var29 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var30 = var29.getValue();
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.BetweenExpression var35 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var26, (org.databene.script.Expression)var29, (org.databene.script.Expression)var33);
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var17, (org.databene.script.Expression)var29);
    org.databene.jdbacl.identity.xml.IdentityParseContext var37 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var38 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var37.addParser((org.databene.webdecs.xml.XMLElementParser)var38);
    java.lang.Object var41 = var37.get("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    java.util.Set var42 = var37.entrySet();
    var37.remove("CREATE SEQUENCE 10");
    org.databene.jdbacl.identity.xml.IdentityParseContext var46 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var47 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var46.addParser((org.databene.webdecs.xml.XMLElementParser)var47);
    org.databene.jdbacl.identity.xml.IdentityParseContext var49 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var50 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var49.addParser((org.databene.webdecs.xml.XMLElementParser)var50);
    var46.addParser((org.databene.webdecs.xml.XMLElementParser)var50);
    var37.set("select next value for (\"sequence\")", (java.lang.Object)var46);
    java.lang.Boolean var54 = var36.evaluate((org.databene.commons.Context)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + true+ "'", var54.equals(true));

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test312");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.jdbc.JDBCDBImporter var1 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE : class org.databene.jdbacl.model.FKChangeRule");
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test313");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    var25.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var29 = var28.getForeignKeyConstraints();
    var25.addReferrer((org.databene.jdbacl.model.DBTable)var28);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var42 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var28, "select nextval('')", false, var36);
    var28.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var47 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var47);
    org.databene.jdbacl.model.DBUniqueConstraint var49 = var28.getUniqueConstraint(var47);
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("", "", var56, "hi!", "10", var60);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var56);
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "CREATE SEQUENCE 10", var47, "select next value for SET GENERATOR . TO -1", "select next value for SET GENERATOR . TO -1", var56);
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    var65.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var69 = var68.getForeignKeyConstraints();
    var65.addReferrer((org.databene.jdbacl.model.DBTable)var68);
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String[] var80 = new java.lang.String[] { ""};
    java.lang.String var81 = org.databene.jdbacl.SQLUtil.join("", "", var76, "hi!", "10", var80);
    org.databene.jdbacl.model.DBUniqueConstraint var82 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var68, "select nextval('')", false, var76);
    var68.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var87 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var88 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var87);
    org.databene.jdbacl.model.DBUniqueConstraint var89 = var68.getUniqueConstraint(var87);
    org.databene.jdbacl.identity.UniqueKeyIdentity var90 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var87);
    var21.setCellValues(var47, (java.lang.Object[])var87);
    java.lang.String var92 = var21.toString();
    java.lang.String var93 = var21.toString();
    java.lang.String var94 = var21.toString();
    java.lang.String var95 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var48.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "."+ "'", var62.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var63.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi! as 10 on . = 10."+ "'", var81.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var88.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "null[DROP SEQUENCE ]"+ "'", var92.equals("null[DROP SEQUENCE ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "null[DROP SEQUENCE ]"+ "'", var93.equals("null[DROP SEQUENCE ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "null[DROP SEQUENCE ]"+ "'", var94.equals("null[DROP SEQUENCE ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "null[DROP SEQUENCE ]"+ "'", var95.equals("null[DROP SEQUENCE ]"));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test314");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mSTRING();
    var10.endResync();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test315");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    java.lang.String var33 = var31.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var34 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var37 = var34.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var39 = var34.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var40 = var31.equals((java.lang.Object)var39);
    org.databene.jdbacl.model.DefaultDBColumn var43 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var26, var31, (java.lang.Integer)0, (java.lang.Integer)(-1));
    var43.setDefaultValue(".");
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var43);
    java.lang.Integer var47 = var43.getSize();
    org.databene.jdbacl.model.DBCatalog var48 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var49 = var48.getName();
    org.databene.jdbacl.model.Database var50 = var48.getDatabase();
    org.databene.jdbacl.model.DBSequence var54 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var55 = var54.dropDDL();
    java.math.BigInteger var56 = var54.getMinValueIfNotDefault();
    boolean var57 = var48.isIdentical((org.databene.jdbacl.model.DBObject)var54);
    org.databene.jdbacl.model.DBTreeModel var58 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.dialect.DerbyDialect var61 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var63 = var61.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var64 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var65 = var64.getName();
    java.lang.String var66 = var61.formatValue((java.lang.Object)var64);
    var64.setName("'hi!'");
    java.util.List var69 = var64.getSchemas();
    org.databene.jdbacl.model.DBSchema var70 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var64);
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable("select next value for 10", var70);
    org.databene.jdbacl.model.DBCatalog var73 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    int var74 = var58.getIndexOfChild((org.databene.jdbacl.model.DBObject)var71, (org.databene.jdbacl.model.DBObject)var73);
    var43.setOwner((org.databene.jdbacl.model.CompositeDBObject)var73);
    org.databene.jdbacl.dialect.DerbyDialect var78 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var80 = var78.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var81 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var82 = var81.getName();
    java.lang.String var83 = var78.formatValue((java.lang.Object)var81);
    var81.setName("'hi!'");
    java.util.List var86 = var81.getSchemas();
    org.databene.jdbacl.model.DBSchema var87 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var81);
    org.databene.jdbacl.model.DBTrigger var88 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var87);
    var88.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var91 = var88.getTriggerBody();
    java.lang.String var92 = var88.getTriggerBody();
    var88.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    java.lang.String var95 = var88.getTriggerType();
    boolean var96 = var43.isIdentical((org.databene.jdbacl.model.DBObject)var88);
    var88.setStatus("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "DROP SEQUENCE "+ "'", var33.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var39.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 0+ "'", var47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "drop sequence "+ "'", var55.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test316");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    org.databene.jdbacl.model.DBUniqueConstraint var55 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var41, "select nextval('')", false, var49);
    java.lang.String var56 = var55.toString();
    boolean var57 = var36.isEquivalent((org.databene.jdbacl.model.DBObject)var55);
    java.lang.String var58 = var36.getDefaultValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var56.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test317");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var4 = var1.isDefaultSchema("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)", "alter sequence hi! restart with 1");
    boolean var6 = var1.isDeterministicPKName("jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    boolean var8 = var1.isDeterministicUKName("");
    boolean var10 = var1.isDeterministicPKName("select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual");
    boolean var12 = var1.isDeterministicPKName("alter sequence -1 restart with 1");
    boolean var14 = var1.isDeterministicFKName("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test318");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    java.util.List var17 = var14.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var21 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var23 = var21.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var21.formatValue((java.lang.Object)var24);
    var24.setName("'hi!'");
    java.util.List var29 = var24.getSchemas();
    org.databene.jdbacl.model.DBSchema var30 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var24);
    org.databene.jdbacl.model.DBTrigger var31 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var30);
    java.util.List var32 = var30.getPackages();
    org.databene.jdbacl.model.DBPackage var33 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var30);
    java.util.List var34 = var33.getComponents();
    var14.addPackage(var33);
    java.lang.String var36 = var33.getSubObjectName();
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    org.databene.jdbacl.model.DBDataType var46 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var47 = var46.isAlpha();
    java.lang.String var48 = var46.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var49 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var52 = var49.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var54 = var49.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var55 = var46.equals((java.lang.Object)var54);
    org.databene.jdbacl.model.DefaultDBColumn var58 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var41, var46, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var59 = var33.isIdentical((org.databene.jdbacl.model.DBObject)var41);
    java.lang.String var60 = var33.getStatus();
    java.lang.String var61 = var33.getSubObjectName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "DROP SEQUENCE "+ "'", var48.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var54.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test319");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var3 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "sequence");
    org.databene.jdbacl.model.sql.CreateExporter var4 = new org.databene.jdbacl.model.sql.CreateExporter(var1);
    org.databene.jdbacl.model.xml.XMLModelImporter var5 = new org.databene.jdbacl.model.xml.XMLModelImporter(var1);
    var5.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var7 = var5.importDatabase();
      fail("Expected exception of type org.databene.commons.ImportFailedException");
    } catch (org.databene.commons.ImportFailedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test320");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var5, var22);
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    org.databene.jdbacl.model.DBDataType var34 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var35 = var34.isAlpha();
    java.lang.String var36 = var34.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var37 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var40 = var37.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var42 = var37.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var43 = var34.equals((java.lang.Object)var42);
    org.databene.jdbacl.model.DefaultDBColumn var46 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var29, var34, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isTemporal();
    boolean var51 = var34.equals((java.lang.Object)var49);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.", (org.databene.jdbacl.model.DBTable)var5, var34, (java.lang.Integer)1, (java.lang.Integer)(-1));
    var54.setDefaultValue("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.model.DBNotNullConstraint var57 = var54.getNotNullConstraint();
    var54.setDefaultValue("select gen_id('d', 1) from RDB$DATABASE;: class org.databene.jdbacl.model.FKChangeRule");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "DROP SEQUENCE "+ "'", var36.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var42.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test321");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    java.lang.String var4 = var0.getDefaultSchema();
    java.lang.String[] var5 = var0.getJars();
    org.databene.jdbacl.model.TableContainer var10 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var11 = var10.getTables();
    org.databene.jdbacl.model.TableContainer var12 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var10);
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    var10.addTable((org.databene.jdbacl.model.DBTable)var16);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    java.lang.String var30 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var24);
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var34 = var33.getTables();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var33);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    var33.addTable((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var45 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var45);
    org.databene.jdbacl.model.DBForeignKeyConstraint var47 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var16, var24, (org.databene.jdbacl.model.DBTable)var39, var45);
    var0.setJars(var24);
    java.lang.String var49 = var0.getDefaultDatabase();
    java.lang.String var50 = var0.getDefaultUser();
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String[] var59 = new java.lang.String[] { ""};
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.join("", "", var55, "hi!", "10", var59);
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var59);
    var0.setJars(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "."+ "'", var30.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var46.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi! as 10 on . = 10."+ "'", var60.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "."+ "'", var61.equals("."));

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test322");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var39 = var38.getTables();
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var45 = var44.getForeignKeyConstraints();
    var41.addReferrer((org.databene.jdbacl.model.DBTable)var44);
    var38.addTable((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.join("", "", var52, "hi!", "10", var56);
    java.lang.String var58 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    org.databene.jdbacl.model.TableContainer var61 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var62 = var61.getTables();
    org.databene.jdbacl.model.TableContainer var63 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var61);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    var61.addTable((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var73 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var74 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var73);
    org.databene.jdbacl.model.DBForeignKeyConstraint var75 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var44, var52, (org.databene.jdbacl.model.DBTable)var67, var73);
    org.databene.jdbacl.model.DBTable var76 = var75.getRefereeTable();
    var9.addForeignKey(var75);
    java.lang.String[] var78 = var75.getColumnNames();
    var0.addForeignKey(var75);
    org.databene.jdbacl.model.FKChangeRule var80 = var75.getUpdateRule();
    java.lang.Class var81 = var80.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi! as 10 on . = 10."+ "'", var57.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "."+ "'", var58.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test323");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    var2.setName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSchema var20 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var2);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0", var20);
    java.lang.String var22 = var21.getDoc();
    org.databene.jdbacl.model.CompositeDBObject var23 = var21.getOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test324");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.dialect.DerbyDialect var27 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var29 = var27.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    java.lang.String var32 = var27.formatValue((java.lang.Object)var30);
    var30.setName("'hi!'");
    java.util.List var35 = var30.getSchemas();
    org.databene.jdbacl.model.DBSchema var36 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var36);
    var24.addTrigger(var37);
    var11.addTrigger(var37);
    java.lang.String var40 = var37.getTriggerType();
    var37.setStatus("\"'hi!'\"");
    var37.setStatus("alter sequence call next value for 'hi!' restart with 100");
    var37.setStatus("call next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var13.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test325");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderDropSequence("NOT drop generator sequence ~ 'hi!'");
    java.lang.String var7 = var0.renderFetchSequenceValue("-1");
    java.lang.String var9 = var0.renderDropSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var14 = var13.dropDDL();
    java.lang.String var15 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var13);
    var13.setName("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL");
    var13.setCache((java.lang.Long)100L);
    java.lang.String var20 = var0.renderCreateSequence(var13);
    java.lang.String var22 = var0.renderDropSequence("select next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"+ "'", var5.equals("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "VALUES (NEXT VALUE FOR -1)"+ "'", var7.equals("VALUES (NEXT VALUE FOR -1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "DROP SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. RESTRICT"+ "'", var9.equals("DROP SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence "+ "'", var14.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL AS BIGINT"+ "'", var20.equals("CREATE SEQUENCE hi! as 10 on . = 10..CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "DROP SEQUENCE select next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0 RESTRICT"+ "'", var22.equals("DROP SEQUENCE select next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0 RESTRICT"));

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test326");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    org.databene.jdbacl.model.DBTable var44 = var41.getRefereeTable();
    org.databene.jdbacl.model.FKChangeRule var45 = var41.getUpdateRule();
    java.lang.String[] var46 = var41.getRefereeColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test327");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    var33.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var37 = var36.getForeignKeyConstraints();
    var33.addReferrer((org.databene.jdbacl.model.DBTable)var36);
    org.databene.jdbacl.model.DBDataType var41 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var42 = var41.isAlpha();
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var44 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var47 = var44.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var49 = var44.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var50 = var41.equals((java.lang.Object)var49);
    org.databene.jdbacl.model.DefaultDBColumn var53 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var36, var41, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var54 = var53.getType();
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var59 = var58.getForeignKeyConstraints();
    var55.addReferrer((org.databene.jdbacl.model.DBTable)var58);
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.join("", "", var66, "hi!", "10", var70);
    org.databene.jdbacl.model.DBUniqueConstraint var72 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var58, "select nextval('')", false, var66);
    var72.addColumnName("sequence");
    var53.addUkConstraint(var72);
    java.lang.String[] var76 = var72.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var77 = new org.databene.jdbacl.model.DBUniqueIndex("select nextval('')", false, var72);
    var22.removeIndex((org.databene.jdbacl.model.DBIndex)var77);
    java.util.Set var79 = var22.getForeignKeyConstraints();
    int var80 = var22.countProviders();
    int var81 = var22.countProviders();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "DROP SEQUENCE "+ "'", var43.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var49.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi! as 10 on . = 10."+ "'", var71.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test328");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    boolean var4 = var0.isDeterministicUKName("drop generator drop sequence ");
    java.lang.String var6 = var0.renderCreateSequence("alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10 NOT REGEXP 'sequence'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "CREATE GENERATOR alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10 NOT REGEXP 'sequence'"+ "'", var6.equals("CREATE GENERATOR alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10 NOT REGEXP 'sequence'"));

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test329");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    int var11 = var4.LT(3);
    int var12 = var4.index();
    var4.consume();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test330");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    boolean var3 = var0.isSequenceBoundarySupported();
    java.lang.String var5 = var0.renderFetchSequenceValue("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    java.lang.String var7 = var0.renderDropSequence("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    boolean var9 = var0.isDeterministicIndexName("select gen_id('d', 1) from RDB$DATABASE;: class org.databene.jdbacl.model.FKChangeRule");
    boolean var10 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"+ "'", var5.equals("select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"+ "'", var7.equals("drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test331");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBRow var8 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var2);
    org.databene.jdbacl.dialect.DerbyDialect var12 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var14 = var12.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var15 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var16 = var15.getName();
    java.lang.String var17 = var12.formatValue((java.lang.Object)var15);
    var15.setName("'hi!'");
    java.util.List var20 = var15.getSchemas();
    org.databene.jdbacl.model.DBSchema var21 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var15);
    org.databene.jdbacl.model.DBTrigger var22 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var21);
    java.lang.String var23 = var21.getName();
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var21);
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    java.lang.String[] var38 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var39 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var38);
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    var43.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var47 = var46.getForeignKeyConstraints();
    var43.addReferrer((org.databene.jdbacl.model.DBTable)var46);
    java.lang.String[] var54 = new java.lang.String[] { ""};
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String var59 = org.databene.jdbacl.SQLUtil.join("", "", var54, "hi!", "10", var58);
    org.databene.jdbacl.model.DBUniqueConstraint var60 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var46, "select nextval('')", false, var54);
    var46.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var65 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var66 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var65);
    org.databene.jdbacl.model.DBUniqueConstraint var67 = var46.getUniqueConstraint(var65);
    org.databene.jdbacl.identity.UniqueKeyIdentity var68 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var65);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var38, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var65);
    org.databene.jdbacl.model.DBUniqueConstraint var70 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var27, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var38);
    org.databene.jdbacl.model.DBUniqueIndex var71 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var70);
    var71.addColumnName("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    var24.addIndex((org.databene.jdbacl.model.DBIndex)var71);
    java.lang.String var75 = var71.toString();
    org.databene.jdbacl.model.DBTable var76 = var71.getTable();
    var2.addReferrer(var76);
    org.databene.jdbacl.model.DBCheckConstraint var79 = new org.databene.jdbacl.model.DBCheckConstraint("call next value for 'd'", true, var76, "'\u0135'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var23.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi! as 10 on . = 10."+ "'", var59.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var66.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var69.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique"+ "'", var75.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test332");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    java.lang.String var16 = var15.getDoc();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var18 = var15.requiresProvider(32);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test333");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var30 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var29);
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var37.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var56 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var58 = var37.getUniqueConstraint(var56);
    org.databene.jdbacl.identity.UniqueKeyIdentity var59 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var56);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var29, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var61 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var18, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var29);
    org.databene.jdbacl.model.DBUniqueIndex var62 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var61);
    var62.addColumnName("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    var15.addIndex((org.databene.jdbacl.model.DBIndex)var62);
    var62.addColumnName("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var60.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test334");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    var0.mTABLE_NAME();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.matchRange(69, 69);
      fail("Expected exception of type org.antlr.runtime.MismatchedRangeException");
    } catch (org.antlr.runtime.MismatchedRangeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test335");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var6.setName("10");
    java.math.BigInteger var9 = var6.getIncrement();
    java.lang.Boolean var10 = var6.isCycle();
    java.lang.String var11 = var6.dropDDL();
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.math.BigInteger var19 = var15.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var23.setName("10");
    java.math.BigInteger var26 = var23.getIncrement();
    java.math.BigInteger var27 = var23.getIncrement();
    var15.setLastNumber(var27);
    var6.setIncrement(var27);
    var0.addSequence(var6);
    org.databene.jdbacl.model.DBTable var32 = var0.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var35 = var34.getTables();
    var0.addSubContainer(var34);
    java.util.List var37 = var0.getTables();
    java.util.List var39 = var0.getTables(true);
    java.util.List var40 = var0.getComponents();
    org.databene.jdbacl.model.DBSequence var44 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var44.setName("10");
    java.lang.String var47 = var44.getObjectType();
    java.math.BigInteger var48 = var44.getStart();
    var0.addSequence(var44);
    org.databene.jdbacl.model.DBTable var51 = var0.getTable("Identity definition by unique key: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop sequence 10"+ "'", var11.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sequence"+ "'", var47.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test336");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var43 = var41.getTable();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.CompositeDBObject var45 = var41.getOwner();
    org.databene.jdbacl.model.FKChangeRule var46 = var41.getDeleteRule();
    java.lang.String var47 = var46.name();
    java.lang.String var48 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "NO_ACTION"+ "'", var47.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "NO_ACTION"+ "'", var48.equals("NO_ACTION"));

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test337");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    java.lang.String[] var92 = var90.getColumnNames();
    var90.addColumnName("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')");
    java.lang.String var95 = var90.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "SET GENERATOR catalog TO -2 (REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).'))"+ "'", var95.equals("SET GENERATOR catalog TO -2 (REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).'))"));

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test338");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.DBTable var45 = var41.getRefereeTable();
    java.lang.String var46 = var41.toString();
    org.databene.jdbacl.model.FKChangeRule var47 = var41.getDeleteRule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var46.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test339");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__61();
    var10.mT__67();
    var10.mINDEX_NAME();
    java.util.List var20 = var10.getRuleInvocationStack();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test340");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var5 = org.databene.jdbacl.DBUtil.connect("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", "null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL", "call next value for alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10", false);
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test341");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBTreeModel var10 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var0);
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.model.DBTrigger var25 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var24);
    java.util.List var26 = var24.getPackages();
    org.databene.jdbacl.model.DBPackage var27 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var24);
    java.util.List var28 = var27.getComponents();
    org.databene.jdbacl.model.DBProcedure var29 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    java.lang.String var30 = var29.getSubProgramId();
    var29.setSubProgramId("jdbc:h2:mem:select next value for 10");
    java.lang.String var33 = var29.getSubProgramId();
    java.lang.String var34 = var29.getSubProgramId();
    boolean var35 = var10.isLeaf((org.databene.jdbacl.model.DBObject)var29);
    org.databene.jdbacl.dialect.Derby10_6Dialect var36 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var39 = var36.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var41 = var36.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var45 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var45.setName("10");
    java.math.BigInteger var48 = var45.getIncrement();
    java.math.BigInteger var49 = var45.getIncrement();
    java.lang.String var50 = var36.renderCreateSequence(var45);
    java.math.BigInteger var51 = var45.getMaxValue();
    java.lang.String var52 = var45.getCatalogName();
    org.databene.jdbacl.model.DBSequence var56 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var56.setName("10");
    java.math.BigInteger var59 = var56.getIncrement();
    java.math.BigInteger var60 = var56.getStartIfNotDefault();
    java.lang.Boolean var61 = var56.isCycle();
    java.math.BigInteger var62 = var56.getStart();
    var45.setIncrement(var62);
    boolean var64 = var10.isLeaf((org.databene.jdbacl.model.DBObject)var45);
    org.databene.jdbacl.model.DBObject var65 = var10.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "jdbc:h2:mem:select next value for 10"+ "'", var33.equals("jdbc:h2:mem:select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "jdbc:h2:mem:select next value for 10"+ "'", var34.equals("jdbc:h2:mem:select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var41.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var50.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "drop sequence "+ "'", var52.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test342");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var3.setCharPositionInLine(1);
    java.lang.String var6 = var3.toString();
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    var0.mCOLUMN_SPEC();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mTIMESTAMP();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "DROP SEQUENCE "+ "'", var6.equals("DROP SEQUENCE "));

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test343");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    var0.mCREATE_INDEX();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__85();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test344");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("\"'hi!'\"");
    java.lang.String var2 = var1.getTableName();
    var1.addIrrelevantColumn("CREATE GENERATOR 'd'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "\"'hi!'\""+ "'", var2.equals("\"'hi!'\""));

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test345");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("() = CASE WHEN NOT drop generator sequence ~ 'hi!' THEN alter sequence CREATE GENERATOR drop sequence  restart with -1 ELSE SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 END");

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test346");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    org.databene.jdbacl.identity.xml.IdentityParseContext var12 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var10);
    var12.remove("drop sequence 10");
    java.util.Set var15 = var12.entrySet();
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    var17.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var21 = var20.getForeignKeyConstraints();
    var17.addReferrer((org.databene.jdbacl.model.DBTable)var20);
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var20.addColumn((org.databene.jdbacl.model.DBColumn)var36);
    org.databene.jdbacl.model.DBRow var38 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var20);
    java.lang.Object[] var39 = var38.getPKValues();
    org.databene.jdbacl.model.DBSequence var44 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var44.setCache((java.lang.Long)100L);
    java.lang.String var47 = var44.getObjectType();
    java.math.BigInteger var48 = var44.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var52 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var52.setName("10");
    java.math.BigInteger var55 = var52.getIncrement();
    java.math.BigInteger var56 = var52.getIncrement();
    var44.setLastNumber(var56);
    var44.setOrder((java.lang.Boolean)false);
    var38.setCellValue("alter sequence  restart with -1", (java.lang.Object)var44);
    java.lang.String var61 = var38.toString();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var69 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var69.setImportingChecks(false);
    boolean var72 = var69.isImportingIndexes();
    var69.setCatalogName("'hi!'");
    var38.setCellValue("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", "'hi!'");
    org.databene.jdbacl.model.DBTable var76 = var38.getTable();
    java.lang.Object[] var77 = var38.getPKValues();
    org.databene.jdbacl.sql.parser.SQLLexer var79 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var81 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var81.release((-1));
    boolean var85 = var79.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var81, 0);
    var79.mSIZE();
    var79.endResync();
    var38.setCellValue("org.firebirdsql.jdbc.FBDriver", (java.lang.Object)var79);
    var12.set("jdbc:hsqldb:mem:CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER", (java.lang.Object)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sequence"+ "'", var47.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "null[]"+ "'", var61.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test347");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("org.databene.jdbacl.SQLScriptException: Error in execution of script line 1: ", "false", "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ", "null[DROP SEQUENCE ]", "drop sequence ", "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER", "select nextval('')", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var9 = var8.importDatabase();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test348");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    boolean var3 = var0.isSequenceBoundarySupported();
    java.lang.String var5 = var0.renderFetchSequenceValue("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    java.lang.String var7 = var0.renderDropSequence("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    boolean var9 = var0.isDeterministicIndexName("select gen_id('d', 1) from RDB$DATABASE;: class org.databene.jdbacl.model.FKChangeRule");
    boolean var11 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (32,-1) NULL");
    java.lang.String var15 = var0.regexQuery("unique constraint", true, "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"+ "'", var5.equals("select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"+ "'", var7.equals("drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "unique constraint NOT REGEXP 'left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .'"+ "'", var15.equals("unique constraint NOT REGEXP 'left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR .'"));

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test349");


    boolean var1 = org.databene.jdbacl.SQLUtil.isDDL("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-. join org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.). on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE .DROP SEQUENCE  = CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)..");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test350");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var21 = var20.getTables();
    org.databene.jdbacl.model.TableContainer var22 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var20);
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var20.addTable((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var34);
    org.databene.jdbacl.model.TableContainer var43 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var44 = var43.getTables();
    org.databene.jdbacl.model.TableContainer var45 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var43);
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    var46.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var50 = var49.getForeignKeyConstraints();
    var46.addReferrer((org.databene.jdbacl.model.DBTable)var49);
    var43.addTable((org.databene.jdbacl.model.DBTable)var49);
    java.lang.String[] var55 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var55);
    org.databene.jdbacl.model.DBForeignKeyConstraint var57 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var26, var34, (org.databene.jdbacl.model.DBTable)var49, var55);
    boolean var58 = var57.isNameDeterministic();
    var3.removeForeignKeyConstraint(var57);
    org.databene.jdbacl.model.DBDataType var62 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var63 = var62.isAlpha();
    java.lang.String var64 = var62.getName();
    boolean var65 = var57.equals((java.lang.Object)var64);
    java.lang.String[] var66 = var57.getColumnNames();
    org.databene.jdbacl.model.DBCheckConstraint var73 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var74 = var73.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var79 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var80 = var79.getTableName();
    boolean var81 = var73.isEquivalent(var79);
    java.lang.String[] var82 = var79.getColumnNames();
    java.lang.String var83 = org.databene.jdbacl.SQLUtil.renderColumnNames(var82);
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.join("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE", "SET GENERATOR catalog TO -2 ()", var66, "DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE ", "jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "."+ "'", var40.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var56.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "DROP SEQUENCE "+ "'", var64.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "\"'hi!'\""+ "'", var74.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var80.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "('hi!')"+ "'", var83.equals("('hi!')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE join DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE  as jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  on SET GENERATOR catalog TO -2 (). = jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: .'hi!'"+ "'", var84.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE join DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE  as jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  on SET GENERATOR catalog TO -2 (). = jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: .'hi!'"));

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test351");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    java.lang.String var5 = var0.setSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 1L);
    boolean var7 = var0.isDeterministicIndexName("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var9 = var0.isDeterministicFKName("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var12 = var0.isDefaultCatalog("-1.DROP SEQUENCE ", "select next value for 10");
    java.lang.String var15 = var0.setSequenceValue("call next value for 'hi!'", 100L);
    boolean var17 = var0.isDeterministicUKName("(\"sequence\")");
    java.lang.String var21 = var0.regexQuery("drop generator drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;", true, "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"+ "'", var5.equals("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "alter sequence call next value for 'hi!' restart with 100"+ "'", var15.equals("alter sequence call next value for 'hi!' restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "drop generator drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE; NOT REGEXP 'alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10''"+ "'", var21.equals("drop generator drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE; NOT REGEXP 'alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10''"));

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test352");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingIndexes(true);
    var6.setImportingUKs(true);
    var6.setImportingIndexes(false);
    var6.setImportingIndexes(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var15 = var6.getConnection();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test353");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    boolean var2 = var0.isDeterministicFKName("drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'");
    boolean var4 = var0.isDeterministicUKName("org.databene.jdbacl.identity.InvalidIdentityDefinitionError.DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test354");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("null", "SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1", "call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')", "alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1", "jdbc:h2:mem:NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ", "drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;");
    var6.setImportingChecks(true);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test355");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var13.setName("10");
    java.math.BigInteger var16 = var13.getIncrement();
    java.math.BigInteger var17 = var13.getIncrement();
    var9.setMaxValue(var17);
    java.lang.String var19 = var0.formatValue((java.lang.Object)var9);
    boolean var21 = var0.isDeterministicUKName("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)");
    boolean var23 = var0.isDeterministicIndexName("SET GENERATOR . TO -1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "call next value for 'hi!'"+ "'", var19.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test356");


    org.databene.jdbacl.JDBCConnectData var1 = org.databene.jdbacl.DatabaseTestUtil.getConnectData("NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test357");


    java.lang.String var1 = org.databene.jdbacl.dialect.HSQLUtil.getInMemoryURL("CONSTRAINT \"drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.\" UNIQUE (select next value for 10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "jdbc:hsqldb:mem:CONSTRAINT \"drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.\" UNIQUE (select next value for 10)"+ "'", var1.equals("jdbc:hsqldb:mem:CONSTRAINT \"drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.\" UNIQUE (select next value for 10)"));

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test358");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var3 = var2.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var4 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var6 = var4.renderFetchSequenceValue("'hi!'");
    var2.setValue("'hi!'");
    java.lang.Object var8 = var2.getValue();
    org.databene.jdbacl.identity.xml.IdentityParseContext var9 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var10 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var9.addParser((org.databene.webdecs.xml.XMLElementParser)var10);
    org.databene.jdbacl.identity.xml.IdentityParseContext var12 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var13 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var12.addParser((org.databene.webdecs.xml.XMLElementParser)var13);
    var9.addParser((org.databene.webdecs.xml.XMLElementParser)var13);
    java.lang.Object var16 = var2.evaluate((org.databene.commons.Context)var9);
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var20 = var19.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var21 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var23 = var21.renderFetchSequenceValue("'hi!'");
    var19.setValue("'hi!'");
    java.lang.Object var25 = var19.getValue();
    org.databene.jdbacl.sql.ColumnExpression var28 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var31 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var32 = var31.getValue();
    org.databene.jdbacl.sql.ColumnExpression var35 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var36 = var35.getValue();
    org.databene.jdbacl.sql.BetweenExpression var37 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var28, (org.databene.script.Expression)var31, (org.databene.script.Expression)var35);
    org.databene.jdbacl.sql.ColumnExpression var40 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var43 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var44 = var43.getValue();
    org.databene.jdbacl.sql.ColumnExpression var47 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var48 = var47.getValue();
    org.databene.jdbacl.sql.BetweenExpression var49 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var40, (org.databene.script.Expression)var43, (org.databene.script.Expression)var47);
    var37.addTerm((org.databene.script.Expression)var43);
    org.databene.jdbacl.sql.ColumnExpression var53 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var56 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var57 = var56.getValue();
    org.databene.jdbacl.sql.ColumnExpression var60 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var61 = var60.getValue();
    org.databene.jdbacl.sql.BetweenExpression var62 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var53, (org.databene.script.Expression)var56, (org.databene.script.Expression)var60);
    java.lang.Object var63 = var53.getValue();
    org.databene.jdbacl.sql.ColumnExpression var66 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var67 = var66.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var68 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var70 = var68.renderFetchSequenceValue("'hi!'");
    var66.setValue("'hi!'");
    boolean var72 = var66.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var75 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var76 = var75.isConstant();
    java.lang.Object var77 = var75.getValue();
    org.databene.jdbacl.sql.BetweenExpression var78 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var53, (org.databene.script.Expression)var66, (org.databene.script.Expression)var75);
    org.databene.jdbacl.sql.BetweenExpression var79 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var19, (org.databene.script.Expression)var37, (org.databene.script.Expression)var53);
    org.databene.jdbacl.sql.ColumnExpression var82 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var85 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var86 = var85.getValue();
    org.databene.jdbacl.sql.ColumnExpression var89 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var90 = var89.getValue();
    org.databene.jdbacl.sql.BetweenExpression var91 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var82, (org.databene.script.Expression)var85, (org.databene.script.Expression)var89);
    org.databene.jdbacl.identity.xml.IdentityParseContext var92 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var93 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var92.addParser((org.databene.webdecs.xml.XMLElementParser)var93);
    java.lang.Boolean var95 = var91.evaluate((org.databene.commons.Context)var92);
    java.util.Set var96 = var92.keySet();
    java.lang.Boolean var97 = var79.evaluate((org.databene.commons.Context)var92);
    org.databene.jdbacl.identity.IdentityProvider var98 = var92.getIdentityProvider();
    java.lang.Object var99 = var2.evaluate((org.databene.commons.Context)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "sequence"+ "'", var3.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "call next value for 'hi!'"+ "'", var6.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "'hi!'"+ "'", var8.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "'hi!'"+ "'", var16.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "sequence"+ "'", var20.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "call next value for 'hi!'"+ "'", var23.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "'hi!'"+ "'", var25.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "sequence"+ "'", var32.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "sequence"+ "'", var36.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "sequence"+ "'", var44.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "sequence"+ "'", var48.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "sequence"+ "'", var57.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "sequence"+ "'", var61.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "sequence"+ "'", var63.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "sequence"+ "'", var67.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "call next value for 'hi!'"+ "'", var70.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "sequence"+ "'", var77.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "sequence"+ "'", var86.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "sequence"+ "'", var90.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + true+ "'", var95.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + false+ "'", var97.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "'hi!'"+ "'", var99.equals("'hi!'"));

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test359");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicUKName("call next value for 'hi!'");
    java.lang.String var6 = var0.regexQuery("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0", false, "alter sequence hi! restart with 1");
    boolean var9 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    boolean var12 = var0.isDefaultCatalog("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var13 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"+ "'", var6.equals("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test360");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var3 = var2.getForeignKeyConstraints();
    java.util.List var4 = var2.getColumns();
    org.databene.jdbacl.model.DefaultDBColumn var7 = new org.databene.jdbacl.model.DefaultDBColumn("call next value for 'hi!'", (org.databene.jdbacl.model.DBTable)var2, 100, "select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    var10.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var14 = var13.getForeignKeyConstraints();
    var10.addReferrer((org.databene.jdbacl.model.DBTable)var13);
    org.databene.jdbacl.model.DBDataType var18 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var19 = var18.isAlpha();
    java.lang.String var20 = var18.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var21 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var24 = var21.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var26 = var21.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var27 = var18.equals((java.lang.Object)var26);
    org.databene.jdbacl.model.DefaultDBColumn var30 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var13, var18, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable();
    var31.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var35 = var34.getForeignKeyConstraints();
    var31.addReferrer((org.databene.jdbacl.model.DBTable)var34);
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var31);
    org.databene.jdbacl.model.TableContainer var42 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var43 = var42.getTables();
    org.databene.jdbacl.model.TableContainer var44 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var42);
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    var45.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var49 = var48.getForeignKeyConstraints();
    var45.addReferrer((org.databene.jdbacl.model.DBTable)var48);
    var42.addTable((org.databene.jdbacl.model.DBTable)var48);
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("", "", var56, "hi!", "10", var60);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var56);
    org.databene.jdbacl.model.TableContainer var65 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var66 = var65.getTables();
    org.databene.jdbacl.model.TableContainer var67 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var65);
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    var68.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var72 = var71.getForeignKeyConstraints();
    var68.addReferrer((org.databene.jdbacl.model.DBTable)var71);
    var65.addTable((org.databene.jdbacl.model.DBTable)var71);
    java.lang.String[] var77 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var78 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var77);
    org.databene.jdbacl.model.DBForeignKeyConstraint var79 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var48, var56, (org.databene.jdbacl.model.DBTable)var71, var77);
    org.databene.jdbacl.model.DBTable var80 = var79.getRefereeTable();
    var13.addForeignKey(var79);
    org.databene.jdbacl.model.DBDataType var84 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    org.databene.jdbacl.model.DefaultDBColumn var85 = new org.databene.jdbacl.model.DefaultDBColumn("select next value for SET GENERATOR . TO -1", (org.databene.jdbacl.model.DBTable)var13, var84);
    org.databene.jdbacl.model.DefaultDBColumn var87 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT \"select nextval('')\" UNIQUE ()", (org.databene.jdbacl.model.DBTable)var2, var84, (java.lang.Integer)100);
    java.lang.String var88 = org.databene.jdbacl.SQLUtil.renderColumnTypeWithSize((org.databene.jdbacl.model.DBColumn)var87);
    java.lang.Integer var89 = var87.getSize();
    java.lang.String var90 = org.databene.jdbacl.SQLUtil.renderColumn((org.databene.jdbacl.model.DBColumn)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "DROP SEQUENCE "+ "'", var20.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var26.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "."+ "'", var62.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var78.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "DROP SEQUENCE (100)"+ "'", var88.equals("DROP SEQUENCE (100)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + 100+ "'", var89.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL"+ "'", var90.equals("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL"));

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test361");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.join("", "", var16, "hi!", "10", var20);
    org.databene.jdbacl.model.DBUniqueConstraint var22 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var8, "select nextval('')", false, var16);
    var8.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    java.util.List var27 = var2.getTables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi! as 10 on . = 10."+ "'", var21.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test362");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("alter sequence No identity defined for table alter sequence drop generator sequence restart with 100 restart with 0", "org.databene.jdbacl.SQLScriptException: Error in execution of script line 69: ");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test363");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    java.lang.String var45 = var41.toString();
    org.databene.jdbacl.model.FKChangeRule var46 = var41.getUpdateRule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var45.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test364");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.identity.xml.IdentityParseContext var12 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var13 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var12.addParser((org.databene.webdecs.xml.XMLElementParser)var13);
    java.lang.Boolean var15 = var11.evaluate((org.databene.commons.Context)var12);
    boolean var17 = var12.contains("call next value for 'hi!'");
    java.util.Set var18 = var12.entrySet();
    org.databene.jdbacl.identity.IdentityProvider var19 = var12.getIdentityProvider();
    org.databene.jdbacl.identity.IdentityProvider var20 = var12.getIdentityProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test365");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__111();
    var10.mSIZE();
    var10.mT__62();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test366");


    org.databene.jdbacl.JDBCConnectData var4 = new org.databene.jdbacl.JDBCConnectData("call next value for select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL", "null[DROP SEQUENCE ]", "\"sequence\"", "alter sequence call next value for 'hi!' restart with 100");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var5 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var4);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test367");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    var0.endResync();
    var0.mCOLUMN_NAME();
    var0.mCOMMENT_COLUMN();

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test368");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("drop generator drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence)", "select nextval for CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 from sysibm.sysdummy1", "SET GENERATOR SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 TO 9", "CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.", "foreign key constraint");

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test369");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.TableContainer var33 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var34 = var33.getTables();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var33);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    var33.addTable((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var47);
    org.databene.jdbacl.model.TableContainer var56 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var57 = var56.getTables();
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var56);
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    var56.addTable((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var68 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var68);
    org.databene.jdbacl.model.DBForeignKeyConstraint var70 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var39, var47, (org.databene.jdbacl.model.DBTable)var62, var68);
    org.databene.jdbacl.model.DBTable var71 = var70.getRefereeTable();
    var4.addForeignKey(var70);
    org.databene.jdbacl.model.FKChangeRule var73 = var70.getUpdateRule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "."+ "'", var53.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var69.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test370");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var3 = var0.renderSetSequenceValue(".", 0L);
    boolean var6 = var0.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    boolean var9 = var0.isDefaultCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    java.lang.String var11 = var0.renderDropSequence("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    boolean var13 = var0.isDeterministicIndexName("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR . TO -1"+ "'", var3.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"+ "'", var11.equals("drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test371");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var14 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var13);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { ""};
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String var34 = org.databene.jdbacl.SQLUtil.join("", "", var29, "hi!", "10", var33);
    org.databene.jdbacl.model.DBUniqueConstraint var35 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var21, "select nextval('')", false, var29);
    var21.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var40 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var42 = var21.getUniqueConstraint(var40);
    org.databene.jdbacl.identity.UniqueKeyIdentity var43 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var40);
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var13, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var45 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var2, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var13);
    org.databene.jdbacl.model.DBUniqueIndex var46 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var45);
    java.lang.String var47 = var46.getName();
    java.lang.String var48 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi! as 10 on . = 10."+ "'", var34.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var41.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var44.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var47.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10) unique"+ "'", var48.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10) unique"));

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test372");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.lang.String var5 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    org.databene.jdbacl.model.DBDataType var15 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var16 = var15.isAlpha();
    java.lang.String var17 = var15.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var18 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var21 = var18.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var23 = var18.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var24 = var15.equals((java.lang.Object)var23);
    org.databene.jdbacl.model.DefaultDBColumn var27 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var10, var15, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var28 = var27.getType();
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    java.lang.String var33 = var31.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var34 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var37 = var34.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var39 = var34.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var40 = var31.equals((java.lang.Object)var39);
    var27.setType(var31);
    boolean var42 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    boolean var43 = var27.isUnique();
    org.databene.jdbacl.model.DBNotNullConstraint var44 = var27.getNotNullConstraint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "DROP SEQUENCE "+ "'", var17.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var23.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "DROP SEQUENCE "+ "'", var33.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var39.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test373");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.DBExecutionResult var6 = new org.databene.jdbacl.DBExecutionResult((java.lang.Object)var4, (java.lang.Boolean)false);
    java.lang.String var7 = var4.getName();
    java.lang.String var8 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SET GENERATOR . TO -1"+ "'", var7.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SET GENERATOR . TO -1"+ "'", var8.equals("SET GENERATOR . TO -1"));

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test374");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__126();
    var10.mT__133();
    var10.mALTER_TABLE();
    var10.mPLUS();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test375");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var3 = var1.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var6 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", (-1));
    org.databene.jdbacl.SQLScriptException var9 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var6, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 69);
    org.databene.jdbacl.SQLScriptException var11 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var14 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var11, "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", 100);
    var9.addSuppressed((java.lang.Throwable)var14);
    org.databene.jdbacl.SQLScriptException var17 = var14.withUri("alter sequence CREATE SEQUENCE 10 restart with 1");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test376");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    java.lang.String var4 = var0.getDefaultSchema();
    java.lang.String var5 = var0.getDriverClass();
    var0.setDefaultDatabase("SET GENERATOR . TO -1");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test377");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    org.databene.jdbacl.model.DBUniqueConstraint var55 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var41, "select nextval('')", false, var49);
    java.lang.String var56 = var55.toString();
    boolean var57 = var36.isEquivalent((org.databene.jdbacl.model.DBObject)var55);
    org.databene.jdbacl.model.DBTable var58 = var36.getTable();
    java.lang.String var59 = var36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var56.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var59.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test378");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var13.setName("10");
    java.math.BigInteger var16 = var13.getIncrement();
    java.math.BigInteger var17 = var13.getIncrement();
    var9.setMaxValue(var17);
    java.lang.String var19 = var0.formatValue((java.lang.Object)var9);
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var39 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var40 = var39.isAlpha();
    java.lang.String var41 = var39.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var42 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var45 = var42.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var47 = var42.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var48 = var39.equals((java.lang.Object)var47);
    boolean var49 = var39.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var50 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var24, var39);
    java.lang.String[] var51 = var24.getColumnNames();
    java.lang.String var52 = var0.renderCase("()", "SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", var51);
    boolean var55 = var0.isDefaultCatalog("CREATE GENERATOR ", "DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT");
    boolean var57 = var0.isDeterministicFKName("'\u0135'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "call next value for 'hi!'"+ "'", var19.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "DROP SEQUENCE "+ "'", var41.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var47.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "() = CASE WHEN NOT drop generator sequence ~ 'hi!' THEN alter sequence CREATE GENERATOR drop sequence  restart with -1 ELSE SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 END"+ "'", var52.equals("() = CASE WHEN NOT drop generator sequence ~ 'hi!' THEN alter sequence CREATE GENERATOR drop sequence  restart with -1 ELSE SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 END"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test379");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("jdbc:hsqldb:mem:jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var6 = var5.getTables();
    org.databene.jdbacl.model.TableContainer var7 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var5);
    org.databene.jdbacl.dialect.DerbyDialect var9 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var11 = var9.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var12 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var9.formatValue((java.lang.Object)var12);
    var12.setName("'hi!'");
    java.util.List var17 = var12.getSchemas();
    java.util.List var18 = var7.getTables(false, var17);
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    org.databene.jdbacl.model.Database var23 = var21.getDatabase();
    java.lang.String var24 = var21.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var26 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var28 = var26.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var26.formatValue((java.lang.Object)var29);
    var29.setName("'hi!'");
    java.util.List var34 = var29.getSchemas();
    org.databene.jdbacl.model.DBSchema var35 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var29);
    var21.removeSchema(var35);
    org.databene.jdbacl.dialect.DerbyDialect var39 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var41 = var39.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var42 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var43 = var42.getName();
    java.lang.String var44 = var39.formatValue((java.lang.Object)var42);
    var42.setName("'hi!'");
    java.util.List var47 = var42.getSchemas();
    org.databene.jdbacl.model.DBSchema var48 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var42);
    org.databene.jdbacl.model.DBTrigger var49 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var48);
    var49.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var52 = var49.getTriggerBody();
    java.lang.String var53 = var49.getColumnName();
    java.lang.String var54 = var49.getWhenClause();
    var35.addTrigger(var49);
    org.databene.jdbacl.model.DBTrigger var56 = new org.databene.jdbacl.model.DBTrigger("-1", var35);
    java.util.List var58 = var35.getSequences(true);
    java.util.List var59 = var7.getSequences(true, var58);
    java.util.List var61 = var7.getSequences(true);
    org.databene.jdbacl.model.DBSchema var62 = var7.getSchema();
    org.databene.jdbacl.model.DBSequence var66 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var66.setName("10");
    java.math.BigInteger var69 = var66.getIncrement();
    org.databene.jdbacl.model.DBSequence var73 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var73.setName("10");
    java.math.BigInteger var76 = var73.getIncrement();
    java.math.BigInteger var77 = var73.getIncrement();
    var66.setStart(var77);
    boolean var79 = var7.isIdentical((org.databene.jdbacl.model.DBObject)var66);
    var66.setOrder((java.lang.Boolean)false);
    java.lang.String var82 = var0.renderCreateSequence(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\"NOORDER"+ "'", var82.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\"NOORDER"));

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test380");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test381");


    java.lang.String[] var2 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var3 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var2);
    boolean var5 = var3.equals((java.lang.Object)"alter sequence hi! restart with 1");
    java.lang.String var6 = var3.getDescription();
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var7.mCREATE_TABLE();
    var7.mNAME_LIST();
    var7.mCREATE_TABLE();
    org.databene.jdbacl.model.TableContainer var17 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var18 = var17.getTables();
    org.databene.jdbacl.model.TableContainer var19 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var17);
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    var20.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var24 = var23.getForeignKeyConstraints();
    var20.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    var17.addTable((org.databene.jdbacl.model.DBTable)var23);
    java.lang.String[] var31 = new java.lang.String[] { ""};
    java.lang.String[] var35 = new java.lang.String[] { ""};
    java.lang.String var36 = org.databene.jdbacl.SQLUtil.join("", "", var31, "hi!", "10", var35);
    java.lang.String var37 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var31);
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var41 = var40.getTables();
    org.databene.jdbacl.model.TableContainer var42 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var40);
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    var43.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var47 = var46.getForeignKeyConstraints();
    var43.addReferrer((org.databene.jdbacl.model.DBTable)var46);
    var40.addTable((org.databene.jdbacl.model.DBTable)var46);
    java.lang.String[] var52 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var52);
    org.databene.jdbacl.model.DBForeignKeyConstraint var54 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var23, var31, (org.databene.jdbacl.model.DBTable)var46, var52);
    java.lang.String[] var55 = var54.getRefereeColumnNames();
    var7.traceOut("NOT REGEXP_MATCHES(sequence, '')", 6, (java.lang.Object)var55);
    var3.setColumns(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Identity definition by unique key: select next value for 10"+ "'", var6.equals("Identity definition by unique key: select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi! as 10 on . = 10."+ "'", var36.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "."+ "'", var37.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var53.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test382");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    org.databene.jdbacl.dialect.DerbyDialect var28 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var30 = var28.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var31 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var32 = var31.getName();
    java.lang.String var33 = var28.formatValue((java.lang.Object)var31);
    var31.setName("'hi!'");
    java.util.List var36 = var31.getSchemas();
    org.databene.jdbacl.model.DBSchema var37 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var31);
    org.databene.jdbacl.model.DBTrigger var38 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var37);
    var25.addTrigger(var38);
    var12.addTrigger(var38);
    java.util.List var41 = var12.getComponents();
    org.databene.jdbacl.model.DBPackage var42 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var12);
    var42.setSubObjectName("null[false]");
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    var46.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var50 = var49.getForeignKeyConstraints();
    var46.addReferrer((org.databene.jdbacl.model.DBTable)var49);
    java.lang.String[] var57 = new java.lang.String[] { ""};
    java.lang.String[] var61 = new java.lang.String[] { ""};
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.join("", "", var57, "hi!", "10", var61);
    org.databene.jdbacl.model.DBUniqueConstraint var63 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var49, "select nextval('')", false, var57);
    org.databene.jdbacl.model.DBDataType var66 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var67 = var66.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var68 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var49, var66);
    org.databene.jdbacl.model.DBDataType var69 = var68.getType();
    boolean var70 = var42.isIdentical((org.databene.jdbacl.model.DBObject)var68);
    java.util.List var71 = var42.getComponents();
    var42.setObjectId("\"'hi!'\"");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi! as 10 on . = 10."+ "'", var62.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test383");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    org.databene.jdbacl.model.DBSequence var18 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var18.setCache((java.lang.Long)100L);
    java.lang.String var21 = var18.getObjectType();
    java.math.BigInteger var22 = var18.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var26 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var26.setName("10");
    java.math.BigInteger var29 = var26.getIncrement();
    java.math.BigInteger var30 = var26.getIncrement();
    var18.setLastNumber(var30);
    var9.setIncrement(var30);
    var3.setIncrement(var30);
    java.math.BigInteger var34 = var3.getStartIfNotDefault();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "sequence"+ "'", var21.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test384");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDefaultPort("CREATE SEQUENCE 10");
    var0.setDbSystem("SET GENERATOR . TO -1");
    java.lang.String var7 = var0.toString();
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var13 = var12.getForeignKeyConstraints();
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var12);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    org.databene.jdbacl.model.DBUniqueConstraint var26 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var12, "select nextval('')", false, var20);
    var12.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var31 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var32 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var31);
    org.databene.jdbacl.model.DBUniqueConstraint var33 = var12.getUniqueConstraint(var31);
    org.databene.jdbacl.identity.UniqueKeyIdentity var34 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var31);
    var0.setJars(var31);
    var0.setId("')'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SET GENERATOR . TO -1"+ "'", var7.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var32.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test385");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var1 = var0.getForeignKeyConstraints();
    var0.setDoc("drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.DBSchema var33 = var26.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var41 = var40.getForeignKeyConstraints();
    var37.addReferrer((org.databene.jdbacl.model.DBTable)var40);
    org.databene.jdbacl.model.DBDataType var45 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var46 = var45.isAlpha();
    java.lang.String var47 = var45.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var48 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var51 = var48.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var53 = var48.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var54 = var45.equals((java.lang.Object)var53);
    org.databene.jdbacl.model.DefaultDBColumn var57 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var40, var45, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var58 = var57.getType();
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String var75 = org.databene.jdbacl.SQLUtil.join("", "", var70, "hi!", "10", var74);
    org.databene.jdbacl.model.DBUniqueConstraint var76 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var62, "select nextval('')", false, var70);
    var76.addColumnName("sequence");
    var57.addUkConstraint(var76);
    java.lang.String[] var80 = var76.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var81 = new org.databene.jdbacl.model.DBUniqueIndex("select nextval('')", false, var76);
    var26.removeIndex((org.databene.jdbacl.model.DBIndex)var81);
    java.util.Set var84 = var26.getUniqueConstraints(false);
    java.util.Set var85 = var26.getForeignKeyConstraints();
    java.lang.String[] var90 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var91 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var90);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var92 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var26, "drop sequence 10", true, var90);
    var0.setPrimaryKey(var92);
    java.lang.String var94 = var92.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "DROP SEQUENCE "+ "'", var47.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var53.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi! as 10 on . = 10."+ "'", var75.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "CONSTRAINT \"drop sequence 10\" PRIMARY KEY (select next value for 10)"+ "'", var94.equals("CONSTRAINT \"drop sequence 10\" PRIMARY KEY (select next value for 10)"));

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test386");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var8.setImportingChecks(true);
    var8.setFaultTolerant(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var13 = var8.importDatabase();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test387");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    var0.mINDEX_NAME();
    org.antlr.runtime.CharStream var3 = var0.getCharStream();
    var0.mCOMMENT_TABLE();
    var0.beginResync();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var7 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var9 = var7.LA(10);
    java.lang.String var10 = var7.getText();
    var7.setLine(69);
    boolean var14 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var7, 14);
    java.lang.String var15 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "DROP SEQUENCE "+ "'", var10.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test388");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var3 = var1.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var6 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", (-1));
    int var7 = var6.getLineNo();
    org.databene.jdbacl.SQLScriptException var9 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var6, 79);
    org.databene.jdbacl.SQLScriptException var11 = var9.withUri("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    org.databene.jdbacl.SQLScriptException var13 = var9.withUri("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'");
    org.databene.jdbacl.SQLScriptException var16 = new org.databene.jdbacl.SQLScriptException(1);
    int var17 = var16.getLineNo();
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var18 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("table as NOT REGEXP_MATCHES(sequence, '') on select next value for (\"sequence\"). = NOT REGEXP_MATCHES(sequence, '').DROP SEQUENCE ", (java.lang.Throwable)var16);
    var13.addSuppressed((java.lang.Throwable)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test389");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    java.util.List var20 = var17.getComponents();
    var12.setCatalog(var17);
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var25.setCache((java.lang.Long)100L);
    java.lang.String var28 = var25.getObjectType();
    java.math.BigInteger var29 = var25.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var33 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var33.setName("10");
    java.math.BigInteger var36 = var33.getIncrement();
    java.math.BigInteger var37 = var33.getIncrement();
    var25.setLastNumber(var37);
    var12.addSequence(var25);
    org.databene.jdbacl.model.DBPackage var40 = new org.databene.jdbacl.model.DBPackage("alter sequence call next value for 'hi!' restart with 100", var12);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    java.util.Set var46 = var42.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isAlpha();
    boolean var51 = var49.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var42, var49, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var58 = var57.getTables();
    org.databene.jdbacl.model.TableContainer var59 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var57);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    var60.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var64 = var63.getForeignKeyConstraints();
    var60.addReferrer((org.databene.jdbacl.model.DBTable)var63);
    var57.addTable((org.databene.jdbacl.model.DBTable)var63);
    var54.setTable((org.databene.jdbacl.model.DBTable)var63);
    boolean var68 = var40.isIdentical((org.databene.jdbacl.model.DBObject)var63);
    java.lang.String var69 = var40.getStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test390");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBCatalog var15 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var16 = var15.getName();
    org.databene.jdbacl.model.Database var17 = var15.getDatabase();
    java.lang.String var18 = var15.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    var15.removeSchema(var29);
    java.util.List var32 = var29.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var29);
    boolean var34 = var13.equals((java.lang.Object)"drop generator .");
    org.databene.jdbacl.model.DBCatalog var36 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var37 = var36.getName();
    org.databene.jdbacl.model.Database var38 = var36.getDatabase();
    org.databene.jdbacl.model.DBSequence var42 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var43 = var42.dropDDL();
    java.math.BigInteger var44 = var42.getMinValueIfNotDefault();
    boolean var45 = var36.isIdentical((org.databene.jdbacl.model.DBObject)var42);
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", var36);
    org.databene.jdbacl.model.DBSchema var48 = var36.getSchema("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    boolean var49 = var13.equals((java.lang.Object)"DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "drop sequence "+ "'", var43.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test391");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingChecks(false);
    boolean var9 = var6.isImportingIndexes();
    var6.setImportingSequences(false);
    var6.setIncludeTables("select next value for SET GENERATOR . TO -1");
    var6.setLazy(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test392");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.join("", "", var12, "hi!", "10", var16);
    org.databene.jdbacl.model.DBUniqueConstraint var18 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var4, "select nextval('')", false, var12);
    org.databene.jdbacl.model.DBDataType var21 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var22 = var21.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var4, var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var27 = var26.isConstant();
    java.lang.Object var28 = var26.getValue();
    boolean var29 = var23.equals((java.lang.Object)var26);
    java.lang.String var30 = var26.toString();
    java.lang.String var31 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi! as 10 on . = 10."+ "'", var17.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "\"sequence\""+ "'", var30.equals("\"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "\"sequence\""+ "'", var31.equals("\"sequence\""));

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test393");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    org.databene.jdbacl.model.DBTrigger var33 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var32);
    java.util.List var34 = var32.getPackages();
    org.databene.jdbacl.model.DBPackage var35 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var32);
    java.util.List var36 = var35.getComponents();
    org.databene.jdbacl.model.DBProcedure var37 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var35);
    var16.addProcedure(var37);
    var16.setDataObjectId("alter sequence NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.') restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test394");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    java.util.List var19 = var16.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var16);
    org.databene.jdbacl.model.DBDataType var23 = org.databene.jdbacl.model.DBDataType.getInstance(3, "alter sequence catalog restart with 1");
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("catalog null: interface java.sql.ResultSet", (org.databene.jdbacl.model.DBTable)var20, var23, (java.lang.Integer)41, (java.lang.Integer)85);
    boolean var27 = var23.isAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test395");


    org.databene.jdbacl.sql.parser.SQLParser.create_index_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.create_index_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getStart();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    java.lang.Object var7 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test396");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.jdbc.JDBCDBImporter var1 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("CONSTRAINT \"select nextval('')\" ");
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test397");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("");
    org.databene.jdbacl.model.DBTable var3 = var1.getTable("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.DBSchema var33 = var26.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var41 = var40.getForeignKeyConstraints();
    var37.addReferrer((org.databene.jdbacl.model.DBTable)var40);
    org.databene.jdbacl.model.DBDataType var45 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var46 = var45.isAlpha();
    java.lang.String var47 = var45.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var48 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var51 = var48.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var53 = var48.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var54 = var45.equals((java.lang.Object)var53);
    org.databene.jdbacl.model.DefaultDBColumn var57 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var40, var45, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var58 = var57.getType();
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String var75 = org.databene.jdbacl.SQLUtil.join("", "", var70, "hi!", "10", var74);
    org.databene.jdbacl.model.DBUniqueConstraint var76 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var62, "select nextval('')", false, var70);
    var76.addColumnName("sequence");
    var57.addUkConstraint(var76);
    java.lang.String[] var80 = var76.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var81 = new org.databene.jdbacl.model.DBUniqueIndex("select nextval('')", false, var76);
    var26.removeIndex((org.databene.jdbacl.model.DBIndex)var81);
    java.util.Set var84 = var26.getUniqueConstraints(false);
    var1.removeTable((org.databene.jdbacl.model.DBTable)var26);
    java.util.List var86 = var26.getIndexes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "DROP SEQUENCE "+ "'", var47.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var53.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi! as 10 on . = 10."+ "'", var75.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test398");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var32 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var33 = var32.getName();
    org.databene.jdbacl.model.Database var34 = var32.getDatabase();
    java.lang.String var35 = var32.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    var32.removeSchema(var46);
    java.util.List var49 = var46.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var53 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var55 = var53.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var56 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var57 = var56.getName();
    java.lang.String var58 = var53.formatValue((java.lang.Object)var56);
    var56.setName("'hi!'");
    java.util.List var61 = var56.getSchemas();
    org.databene.jdbacl.model.DBSchema var62 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var56);
    org.databene.jdbacl.model.DBTrigger var63 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var62);
    java.util.List var64 = var62.getPackages();
    org.databene.jdbacl.model.DBPackage var65 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var62);
    java.util.List var66 = var65.getComponents();
    var46.addPackage(var65);
    java.lang.String var68 = var65.getSubObjectName();
    var24.addPackage(var65);
    org.databene.jdbacl.dialect.DerbyDialect var72 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var74 = var72.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var75 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var76 = var75.getName();
    java.lang.String var77 = var72.formatValue((java.lang.Object)var75);
    var75.setName("'hi!'");
    java.util.List var80 = var75.getSchemas();
    org.databene.jdbacl.model.DBSchema var81 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var75);
    org.databene.jdbacl.model.DefaultDBTable var82 = new org.databene.jdbacl.model.DefaultDBTable("select next value for 10", var81);
    var24.removeTable((org.databene.jdbacl.model.DBTable)var82);
    org.databene.jdbacl.model.DBRow var84 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var82);
    org.databene.jdbacl.dialect.DB2Dialect var85 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var88 = var85.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    boolean var90 = var85.isDeterministicFKName("DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    boolean var92 = var85.isDeterministicUKName("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100");
    java.lang.String var93 = var85.getSystem();
    boolean var94 = var82.equals((java.lang.Object)var85);
    boolean var97 = var85.isDefaultCatalog("select nextval for CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 from sysibm.sysdummy1", "CREATE GENERATOR 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "db2"+ "'", var93.equals("db2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test399");


    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var6 = var5.getTables();
    org.databene.jdbacl.model.TableContainer var7 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var5);
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    var8.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var12 = var11.getForeignKeyConstraints();
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var11);
    var5.addTable((org.databene.jdbacl.model.DBTable)var11);
    java.lang.String[] var19 = new java.lang.String[] { ""};
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.join("", "", var19, "hi!", "10", var23);
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var19);
    org.databene.jdbacl.model.TableContainer var28 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var29 = var28.getTables();
    org.databene.jdbacl.model.TableContainer var30 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var28);
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable();
    var31.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var35 = var34.getForeignKeyConstraints();
    var31.addReferrer((org.databene.jdbacl.model.DBTable)var34);
    var28.addTable((org.databene.jdbacl.model.DBTable)var34);
    java.lang.String[] var40 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var40);
    org.databene.jdbacl.model.DBForeignKeyConstraint var42 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var11, var19, (org.databene.jdbacl.model.DBTable)var34, var40);
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    var44.setDoc(".");
    java.util.Set var48 = var44.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var51 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var52 = var51.isAlpha();
    boolean var53 = var51.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var56 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var44, var51, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var58 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT \"select nextval('')\" ", (org.databene.jdbacl.model.DBTable)var11, var51, (java.lang.Integer)10);
    java.util.List var59 = var11.getComponents();
    org.databene.jdbacl.dialect.OracleDialect var60 = new org.databene.jdbacl.dialect.OracleDialect();
    java.lang.String var64 = var60.regexQuery("drop sequence alter sequence hi! restart with 1", true, "CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var66 = var60.isDeterministicFKName("\"sequence\"");
    boolean var67 = var11.equals((java.lang.Object)var60);
    boolean var70 = var60.isDefaultSchema("CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi! as 10 on . = 10."+ "'", var24.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "."+ "'", var25.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var41.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')"+ "'", var64.equals("NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test400");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicFKName("false");
    org.databene.jdbacl.dialect.Derby10_6Dialect var5 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var8 = var5.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var10 = var5.isDeterministicIndexName("select nextval('')");
    java.lang.String var12 = var5.renderDropSequence("jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    var20.setDoc(".");
    java.util.Set var24 = var20.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var27 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var28 = var27.isAlpha();
    boolean var29 = var27.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var32 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var20, var27, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var16.addColumn((org.databene.jdbacl.model.DBColumn)var32);
    org.databene.jdbacl.model.DBRow var34 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var16);
    java.lang.Object[] var35 = var34.getPKValues();
    org.databene.jdbacl.model.DBSequence var40 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var40.setCache((java.lang.Long)100L);
    java.lang.String var43 = var40.getObjectType();
    java.math.BigInteger var44 = var40.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var48 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var48.setName("10");
    java.math.BigInteger var51 = var48.getIncrement();
    java.math.BigInteger var52 = var48.getIncrement();
    var40.setLastNumber(var52);
    var40.setOrder((java.lang.Boolean)false);
    var34.setCellValue("alter sequence  restart with -1", (java.lang.Object)var40);
    java.lang.String var57 = var5.renderCreateSequence(var40);
    var40.setCycle((java.lang.Boolean)true);
    java.lang.String var60 = var0.renderCreateSequence(var40);
    java.lang.Boolean var61 = var40.isOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"+ "'", var12.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "sequence"+ "'", var43.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER"+ "'", var60.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + false+ "'", var61.equals(false));

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test401");


    boolean var1 = org.databene.jdbacl.SQLUtil.isDDL("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (, DROP SEQUENCE )");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test402");


    org.databene.jdbacl.DBUtil.checkReadOnly("select nextval(''((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"''hi!''\")'')", true);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test403");


    boolean var1 = org.databene.jdbacl.DBUtil.existsEnvironment("oracle");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test404");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("JDBCDBImporter-identity-DROP SEQUENCE CREATE GENERATOR  RESTRICT", true, "Sub identity of ():\nSET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99", "select next value for CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))");
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test405");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    var0.mALTER_TABLE();
    var0.emitErrorMessage("hi! as 10 on . = 10.");
    var0.reset();
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.join("", "", var33, "hi!", "10", var37);
    org.databene.jdbacl.model.DBUniqueConstraint var39 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var25, "select nextval('')", false, var33);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var45);
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("", "", var58, "hi!", "10", var62);
    java.lang.String var64 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var45, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var62);
    org.databene.jdbacl.identity.NaturalPkIdentity var67 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var68 = var67.getName();
    boolean var70 = var67.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable();
    var71.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var75 = var74.getForeignKeyConstraints();
    var71.addReferrer((org.databene.jdbacl.model.DBTable)var74);
    java.lang.String[] var82 = new java.lang.String[] { ""};
    java.lang.String[] var86 = new java.lang.String[] { ""};
    java.lang.String var87 = org.databene.jdbacl.SQLUtil.join("", "", var82, "hi!", "10", var86);
    org.databene.jdbacl.model.DBUniqueConstraint var88 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var74, "select nextval('')", false, var82);
    java.lang.String var89 = var67.extractNK((java.lang.Object[])var82);
    java.lang.String var90 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var25, var45, (java.lang.Object[])var82);
    var0.traceIn("NO_ACTION", 14, (java.lang.Object)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mBETWEEN();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi! as 10 on . = 10."+ "'", var38.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "."+ "'", var51.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi! as 10 on . = 10."+ "'", var63.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "."+ "'", var64.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var65.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi! as 10 on . = 10."+ "'", var87.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var90.equals("SELECT * FROM null WHERE  = ''"));

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test406");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    java.util.List var16 = var12.getTables(true);
    org.databene.jdbacl.model.DBPackage var17 = new org.databene.jdbacl.model.DBPackage("SELECT * FROM null WHERE  = ''", var12);
    java.util.List var19 = var12.getTables(false);
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var24 = var23.dropDDL();
    var23.setCycle((java.lang.Boolean)true);
    java.lang.Long var27 = var23.getCache();
    var12.addSequence(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "drop sequence "+ "'", var24.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test407");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var4 = var3.getMaxValue();
    java.lang.String var5 = var3.toString();
    java.lang.String var6 = var3.dropDDL();
    org.databene.jdbacl.dialect.FirebirdDialect var7 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var10 = var7.renderSetSequenceValue(".", 0L);
    boolean var13 = var7.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var18 = var17.getMaxValue();
    java.lang.String var19 = var17.toString();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var24 = var23.dropDDL();
    java.math.BigInteger var25 = var23.getMinValueIfNotDefault();
    java.math.BigInteger var26 = var23.getLastNumber();
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var30.setName("10");
    java.math.BigInteger var33 = var30.getIncrement();
    java.math.BigInteger var34 = var30.getIncrement();
    var23.setStart(var34);
    var17.setIncrement(var34);
    java.lang.String var37 = var7.renderCreateSequence(var17);
    java.math.BigInteger var38 = var17.getIncrement();
    var3.setLastNumber(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "drop sequence "+ "'", var6.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SET GENERATOR . TO -1"+ "'", var10.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "drop sequence "+ "'", var24.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "CREATE GENERATOR "+ "'", var37.equals("CREATE GENERATOR "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test408");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var27.setCache((java.lang.Long)100L);
    java.lang.String var30 = var27.getObjectType();
    java.math.BigInteger var31 = var27.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setName("10");
    java.math.BigInteger var38 = var35.getIncrement();
    java.math.BigInteger var39 = var35.getIncrement();
    var27.setLastNumber(var39);
    var27.setOrder((java.lang.Boolean)false);
    var21.setCellValue("alter sequence  restart with -1", (java.lang.Object)var27);
    org.databene.jdbacl.model.TableContainer var48 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var49 = var48.getTables();
    org.databene.jdbacl.model.TableContainer var50 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    var48.addTable((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    org.databene.jdbacl.model.TableContainer var71 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var72 = var71.getTables();
    org.databene.jdbacl.model.TableContainer var73 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var71);
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    var74.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var77 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var78 = var77.getForeignKeyConstraints();
    var74.addReferrer((org.databene.jdbacl.model.DBTable)var77);
    var71.addTable((org.databene.jdbacl.model.DBTable)var77);
    java.lang.String[] var83 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var83);
    org.databene.jdbacl.model.DBForeignKeyConstraint var85 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var54, var62, (org.databene.jdbacl.model.DBTable)var77, var83);
    boolean var86 = var85.isNameDeterministic();
    java.lang.Object[] var87 = var21.getFKComponents(var85);
    org.databene.jdbacl.model.DBTable var88 = var21.getTable();
    java.lang.Object var89 = var21.getPKValue();
    java.lang.String var90 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "."+ "'", var68.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "null[]"+ "'", var90.equals("null[]"));

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test409");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("DROP SEQUENCE drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. RESTRICT");
    boolean var3 = var1.isDeterministicUKName("Identity definition by NK-PK query: alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    boolean var5 = var1.isDeterministicIndexName("CONSTRAINT \"drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.\" UNIQUE (select next value for 10)");
    boolean var7 = var1.isDeterministicUKName("alter sequence catalog restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test410");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var18 = var0.isDefaultCatalog("catalog", "sequence");
    boolean var20 = var0.isDeterministicIndexName("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    org.databene.jdbacl.model.Database var23 = var21.getDatabase();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var28 = var27.dropDDL();
    java.math.BigInteger var29 = var27.getMinValueIfNotDefault();
    boolean var30 = var21.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.lang.String var31 = var0.renderCreateSequence(var27);
    java.lang.String var33 = var0.renderDropSequence("CREATE SEQUENCE  MAXVALUE 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "drop sequence "+ "'", var28.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "CREATE SEQUENCE "+ "'", var31.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "drop sequence CREATE SEQUENCE  MAXVALUE 0"+ "'", var33.equals("drop sequence CREATE SEQUENCE  MAXVALUE 0"));

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test411");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    org.databene.jdbacl.model.Database var10 = var8.getDatabase();
    java.lang.String var11 = var8.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    var8.removeSchema(var22);
    org.databene.jdbacl.dialect.DerbyDialect var26 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var28 = var26.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var26.formatValue((java.lang.Object)var29);
    var29.setName("'hi!'");
    java.util.List var34 = var29.getSchemas();
    org.databene.jdbacl.model.DBSchema var35 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var35);
    var36.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var39 = var36.getTriggerBody();
    java.lang.String var40 = var36.getColumnName();
    java.lang.String var41 = var36.getWhenClause();
    var22.addTrigger(var36);
    org.databene.jdbacl.model.DBTrigger var43 = new org.databene.jdbacl.model.DBTrigger("-1", var22);
    org.databene.jdbacl.model.DBSequence var44 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var22);
    boolean var45 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var22);
    java.util.List var46 = var22.getComponents();
    org.databene.jdbacl.model.DBCatalog var47 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var48 = var47.getName();
    java.util.List var49 = var47.getComponents();
    org.databene.jdbacl.model.DBSchema var51 = var47.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var53 = var47.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    var22.setCatalog(var47);
    java.lang.String var55 = var47.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test412");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    var5.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var24 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var24);
    org.databene.jdbacl.model.DBUniqueConstraint var26 = var5.getUniqueConstraint(var24);
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.join("", "", var33, "hi!", "10", var37);
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var33);
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.join("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "CREATE SEQUENCE 10", var24, "select next value for SET GENERATOR . TO -1", "select next value for SET GENERATOR . TO -1", var33);
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnNames(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var25.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi! as 10 on . = 10."+ "'", var38.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "."+ "'", var39.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var40.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "()"+ "'", var41.equals("()"));

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test413");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDownloadUrl("drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    var0.setDbSystem("alter sequence hi! restart with 1");
    var0.setDriverClass("REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0')");

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test414");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var3 = var2.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var4 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var6 = var4.renderFetchSequenceValue("'hi!'");
    var2.setValue("'hi!'");
    java.lang.Object var8 = var2.getValue();
    org.databene.jdbacl.sql.ColumnExpression var11 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var15 = var14.getValue();
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var19 = var18.getValue();
    org.databene.jdbacl.sql.BetweenExpression var20 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var11, (org.databene.script.Expression)var14, (org.databene.script.Expression)var18);
    org.databene.jdbacl.sql.ColumnExpression var23 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var27 = var26.getValue();
    org.databene.jdbacl.sql.ColumnExpression var30 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var31 = var30.getValue();
    org.databene.jdbacl.sql.BetweenExpression var32 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var23, (org.databene.script.Expression)var26, (org.databene.script.Expression)var30);
    var20.addTerm((org.databene.script.Expression)var26);
    org.databene.jdbacl.sql.ColumnExpression var36 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var39 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var40 = var39.getValue();
    org.databene.jdbacl.sql.ColumnExpression var43 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var44 = var43.getValue();
    org.databene.jdbacl.sql.BetweenExpression var45 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var36, (org.databene.script.Expression)var39, (org.databene.script.Expression)var43);
    java.lang.Object var46 = var36.getValue();
    org.databene.jdbacl.sql.ColumnExpression var49 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var50 = var49.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var51 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var53 = var51.renderFetchSequenceValue("'hi!'");
    var49.setValue("'hi!'");
    boolean var55 = var49.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var58 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var59 = var58.isConstant();
    java.lang.Object var60 = var58.getValue();
    org.databene.jdbacl.sql.BetweenExpression var61 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var36, (org.databene.script.Expression)var49, (org.databene.script.Expression)var58);
    org.databene.jdbacl.sql.BetweenExpression var62 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var20, (org.databene.script.Expression)var36);
    boolean var63 = var36.isConstant();
    java.lang.String var64 = var36.toString();
    boolean var65 = var36.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "sequence"+ "'", var3.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "call next value for 'hi!'"+ "'", var6.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "'hi!'"+ "'", var8.equals("'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "sequence"+ "'", var15.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "sequence"+ "'", var19.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "sequence"+ "'", var27.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "sequence"+ "'", var31.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "sequence"+ "'", var40.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "sequence"+ "'", var44.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "sequence"+ "'", var46.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "sequence"+ "'", var50.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "call next value for 'hi!'"+ "'", var53.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "sequence"+ "'", var60.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "\"sequence\""+ "'", var64.equals("\"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test415");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var3 = var0.renderSetSequenceValue("select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE;", 100L);
    boolean var4 = var0.supportsRegex();
    boolean var7 = var0.isDefaultCatalog("\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'", "Sub identity of ():\nnull");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99"+ "'", var3.equals("SET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test416");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getTriggerBody();
    var12.setReferencingNames("NOT REGEXP_MATCHES(sequence, '')");
    java.lang.String var19 = var12.getTriggerBody();
    java.lang.String var20 = var12.getTriggerBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test417");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var4 = var0.isDeterministicIndexName("drop generator .");
    boolean var6 = var0.isDeterministicUKName("alter sequence  restart with -1");
    boolean var9 = var0.isDefaultSchema("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')", "foreign key constraint");
    boolean var12 = var0.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    boolean var15 = var0.isDefaultSchema("'\u0135'.NOT drop generator sequence ~ 'hi!'", "drop generator select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test418");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    org.databene.jdbacl.identity.xml.IdentityParseContext var12 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var10);
    java.util.Set var13 = var12.keySet();
    org.databene.jdbacl.identity.xml.IdentityParser var14 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var12.addParser((org.databene.webdecs.xml.XMLElementParser)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test419");


    org.databene.jdbacl.sql.parser.SQLParser.ora_config_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.ora_config_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test420");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var29 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var30 = var29.getValue();
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.BetweenExpression var35 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var26, (org.databene.script.Expression)var29, (org.databene.script.Expression)var33);
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var17, (org.databene.script.Expression)var29);
    org.databene.jdbacl.sql.ColumnExpression var39 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var42 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var43 = var42.getValue();
    org.databene.jdbacl.sql.ColumnExpression var46 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var47 = var46.getValue();
    org.databene.jdbacl.sql.BetweenExpression var48 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var39, (org.databene.script.Expression)var42, (org.databene.script.Expression)var46);
    org.databene.jdbacl.sql.ColumnExpression var51 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var54 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var55 = var54.getValue();
    org.databene.jdbacl.sql.ColumnExpression var58 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var59 = var58.getValue();
    org.databene.jdbacl.sql.BetweenExpression var60 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var51, (org.databene.script.Expression)var54, (org.databene.script.Expression)var58);
    org.databene.jdbacl.sql.ColumnExpression var63 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var66 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var67 = var66.getValue();
    org.databene.jdbacl.sql.ColumnExpression var70 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var71 = var70.getValue();
    org.databene.jdbacl.sql.BetweenExpression var72 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var63, (org.databene.script.Expression)var66, (org.databene.script.Expression)var70);
    org.databene.jdbacl.sql.BetweenExpression var73 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var46, (org.databene.script.Expression)var54, (org.databene.script.Expression)var66);
    org.databene.jdbacl.sql.ColumnExpression var76 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var77 = var76.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var78 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var80 = var78.renderFetchSequenceValue("'hi!'");
    var76.setValue("'hi!'");
    org.databene.jdbacl.sql.BetweenExpression var82 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var36, (org.databene.script.Expression)var66, (org.databene.script.Expression)var76);
    org.databene.script.Expression[] var83 = var82.getSourceExpressions();
    java.lang.String var84 = var82.toString();
    java.lang.String var85 = var82.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "sequence"+ "'", var43.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sequence"+ "'", var47.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "sequence"+ "'", var55.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "sequence"+ "'", var59.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "sequence"+ "'", var67.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "sequence"+ "'", var71.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "sequence"+ "'", var77.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "call next value for 'hi!'"+ "'", var80.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")"+ "'", var84.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")"+ "'", var85.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")"));

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test421");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    java.lang.String[] var12 = new java.lang.String[] { ""};
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String var17 = org.databene.jdbacl.SQLUtil.join("", "", var12, "hi!", "10", var16);
    org.databene.jdbacl.model.DBUniqueConstraint var18 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var4, "select nextval('')", false, var12);
    org.databene.jdbacl.model.DBDataType var21 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var22 = var21.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var4, var21);
    org.databene.jdbacl.model.DBDataType var24 = var23.getType();
    boolean var25 = var23.isVersionColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi! as 10 on . = 10."+ "'", var17.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test422");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    var0.setDoc("select next value for SET GENERATOR.TO - 1");
    org.databene.jdbacl.model.DBIndex var8 = var0.getIndex("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    org.databene.jdbacl.model.DBUniqueConstraint var29 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var15, "select nextval('')", false, var23);
    java.lang.String[] var35 = new java.lang.String[] { ""};
    java.lang.String[] var39 = new java.lang.String[] { ""};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.join("", "", var35, "hi!", "10", var39);
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var35);
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.join("", "", var48, "hi!", "10", var52);
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var35, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var52);
    org.databene.jdbacl.identity.NaturalPkIdentity var57 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var58 = var57.getName();
    boolean var60 = var57.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var72 = new java.lang.String[] { ""};
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String var77 = org.databene.jdbacl.SQLUtil.join("", "", var72, "hi!", "10", var76);
    org.databene.jdbacl.model.DBUniqueConstraint var78 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var64, "select nextval('')", false, var72);
    java.lang.String var79 = var57.extractNK((java.lang.Object[])var72);
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var15, var35, (java.lang.Object[])var72);
    org.databene.jdbacl.identity.UniqueKeyIdentity var81 = new org.databene.jdbacl.identity.UniqueKeyIdentity("drop generator sequence", var72);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var82 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var0, "hi! identity by primary key", true, var72);
    java.lang.String var83 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var82);
    java.lang.String[] var84 = var82.getColumnNames();
    org.databene.jdbacl.model.DBTable var85 = var82.getTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi! as 10 on . = 10."+ "'", var40.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "."+ "'", var41.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi! as 10 on . = 10."+ "'", var53.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "."+ "'", var54.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var55.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi! as 10 on . = 10."+ "'", var77.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var80.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" "+ "'", var83.equals("CONSTRAINT \"hi! identity by primary key\" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test423");


    boolean var1 = org.databene.jdbacl.SQLUtil.isQuery("jdbc:h2:mem:DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test424");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    org.databene.jdbacl.model.DBDataType var40 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var41 = var40.isAlpha();
    var36.setType(var40);
    java.lang.String var43 = var40.toString();
    boolean var44 = var40.isAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "DROP SEQUENCE "+ "'", var43.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test425");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    var17.addColumnName("sequence");
    var17.addColumnName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var17.addColumnName("jdbc:hsqldb:mem:drop generator CREATE GENERATOR 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test426");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    var3.setDoc("drop generator REGEXP_LIKE(select next value for SET GENERATOR.TO - 1, 'NOT drop sequence  ~ 'alter sequence  restart with -1'')");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test427");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    java.lang.String[] var43 = new java.lang.String[] { ""};
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.join("", "", var43, "hi!", "10", var47);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var43);
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("", "", var56, "hi!", "10", var60);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var60);
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var43, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var60);
    boolean var64 = var36.equals((java.lang.Object)"drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    var66.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var69 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var70 = var69.getForeignKeyConstraints();
    var66.addReferrer((org.databene.jdbacl.model.DBTable)var69);
    java.lang.String[] var77 = new java.lang.String[] { ""};
    java.lang.String[] var81 = new java.lang.String[] { ""};
    java.lang.String var82 = org.databene.jdbacl.SQLUtil.join("", "", var77, "hi!", "10", var81);
    org.databene.jdbacl.model.DBUniqueConstraint var83 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var69, "select nextval('')", false, var77);
    org.databene.jdbacl.model.DBDataType var86 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var87 = var86.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var88 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var69, var86);
    java.lang.String var89 = var86.getName();
    var36.setType(var86);
    var36.setVersionColumn(false);
    boolean var93 = var36.isVersionColumn();
    org.databene.jdbacl.model.DBNotNullConstraint var94 = var36.getNotNullConstraint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi! as 10 on . = 10."+ "'", var48.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "."+ "'", var49.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "."+ "'", var62.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var63.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi! as 10 on . = 10."+ "'", var82.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "DROP SEQUENCE "+ "'", var89.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test428");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mLT();
    int var18 = var10.getCharPositionInLine();
    var10.mT__89();
    var10.mXOR();
    int var21 = var10.getLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test429");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var8 = org.databene.jdbacl.DBUtil.getMetaData("drop generator .", false, true, true, false, "select next value for ()", true, true);
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test430");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mGE();
    var10.mT__113();
    var10.mIN();
    java.lang.String[] var21 = var10.getTokenNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test431");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__65();
    var10.mT__130();
    var10.mINDEX_NAME();
    boolean var18 = var10.failed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test432");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    org.databene.jdbacl.model.DBCheckConstraint var9 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var10 = var9.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var15 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var16 = var15.getTableName();
    boolean var17 = var9.isEquivalent(var15);
    boolean var18 = var4.isEquivalent(var9);
    java.lang.String[] var19 = var4.getColumnNames();
    java.lang.String var20 = var4.getTableName();
    org.databene.jdbacl.dialect.DerbyDialect var24 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var26 = var24.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = var24.formatValue((java.lang.Object)var27);
    var27.setName("'hi!'");
    java.util.List var32 = var27.getSchemas();
    org.databene.jdbacl.model.DBSchema var33 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var27);
    org.databene.jdbacl.model.DBTrigger var34 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var33);
    java.util.List var35 = var33.getPackages();
    org.databene.jdbacl.model.DBPackage var36 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var33);
    java.util.List var37 = var36.getComponents();
    var36.setObjectType("-1");
    java.util.List var40 = var36.getComponents();
    boolean var41 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "\"'hi!'\""+ "'", var10.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var16.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var20.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test433");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.setBacktrackingLevel(10);
    var0.mTABLE_NAME();
    boolean var5 = var0.failed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test434");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var0.consumeUntil((org.antlr.runtime.IntStream)var9, 100);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    var0.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var22);
    var0.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var25 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var25.mCREATE_TABLE();
    var25.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var29 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var31 = var29.LT(10);
    var25.setCharStream((org.antlr.runtime.CharStream)var29);
    var0.consumeUntil((org.antlr.runtime.IntStream)var29, 1);
    org.databene.jdbacl.sql.parser.SQLLexer var35 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var29);
    var35.mORA_CONFIGS();
    java.lang.String var37 = var35.getSourceName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.mT__131();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test435");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\"");
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var2 = var1.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBRow var3 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test436");


    java.lang.Object[] var1 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("select next value for CREATE GENERATOR ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test437");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.setBacktrackingLevel(1);
    var0.mIDENTIFIER();
    var0.mT__110();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test438");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    java.lang.String var4 = var0.renderDropSequence("sequence");
    boolean var7 = var0.isDefaultSchema("alter sequence  restart with -1", "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DBSequence var11 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var12 = var11.dropDDL();
    java.math.BigInteger var13 = var11.getMinValueIfNotDefault();
    java.math.BigInteger var14 = var11.getLastNumber();
    org.databene.jdbacl.model.DBSequence var18 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var18.setName("10");
    java.math.BigInteger var21 = var18.getIncrement();
    java.math.BigInteger var22 = var18.getIncrement();
    var11.setStart(var22);
    java.lang.String var24 = var0.renderCreateSequence(var11);
    boolean var26 = var0.isDeterministicPKName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop generator sequence"+ "'", var4.equals("drop generator sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "drop sequence "+ "'", var12.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "CREATE GENERATOR "+ "'", var24.equals("CREATE GENERATOR "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test439");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicFKName("NaturalPkIdentity(hi!)");
    boolean var3 = var0.supportsRegex();
    boolean var4 = var0.supportsRegex();
    boolean var6 = var0.isDeterministicPKName("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    java.lang.String var10 = var0.regexQuery("DROP SEQUENCE (100,-1)", false, "DROP SEQUENCE (10,69)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "DROP SEQUENCE (100,-1) REGEXP 'DROP SEQUENCE (10,69)'"+ "'", var10.equals("DROP SEQUENCE (100,-1) REGEXP 'DROP SEQUENCE (10,69)'"));

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test440");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    boolean var5 = var0.isDeterministicFKName("DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    boolean var7 = var0.isDeterministicUKName("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100");
    java.lang.String var8 = var0.getSystem();
    boolean var10 = var0.isDeterministicFKName("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").");
    boolean var11 = var0.supportsRegex();
    boolean var13 = var0.isDeterministicUKName("NOT drop sequence  ~ 'alter sequence  restart with -1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "db2"+ "'", var8.equals("db2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test441");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getRefereeColumnNames();
    java.lang.String var88 = var86.toString();
    org.databene.jdbacl.model.DBTable var89 = var86.getRefereeTable();
    org.databene.jdbacl.model.FKChangeRule var90 = var86.getUpdateRule();
    var41.setDeleteRule(var90);
    java.lang.String var92 = var90.name();
    int var93 = var90.ordinal();
    java.lang.Class var94 = var90.getDeclaringClass();
    org.databene.jdbacl.ResultSetConverter var95 = new org.databene.jdbacl.ResultSetConverter(var94);
    java.lang.Class var96 = var95.getSourceType();
    org.databene.jdbacl.ResultSetConverter var98 = new org.databene.jdbacl.ResultSetConverter(var96, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var88.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "NO_ACTION"+ "'", var92.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test442");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    int var11 = var4.LT(3);
    int var12 = var4.mark();
    var4.seek(1);
    java.lang.String var15 = var4.getText();
    var4.rewind();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test443");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    java.lang.String[] var14 = new java.lang.String[] { ""};
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String var19 = org.databene.jdbacl.SQLUtil.join("", "", var14, "hi!", "10", var18);
    org.databene.jdbacl.model.DBUniqueConstraint var20 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var6, "select nextval('')", false, var14);
    var6.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var25 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var25);
    org.databene.jdbacl.model.DBUniqueConstraint var27 = var6.getUniqueConstraint(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBForeignKeyConstraint var28 = var0.getForeignKeyConstraint(var25);
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi! as 10 on . = 10."+ "'", var19.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var26.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test444");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mCOMMENT_TABLE();
    var10.mALTER_TABLE();
    int var18 = var10.getLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test445");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    org.databene.jdbacl.model.DBTable var44 = var41.getTable();
    org.databene.jdbacl.model.DBTable var45 = var41.getRefereeTable();
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var41);
    java.lang.String var47 = var41.toString();
    org.databene.jdbacl.model.FKChangeRule var48 = var41.getDeleteRule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" "+ "'", var46.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var47.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test446");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var17 = var0.isDeterministicFKName("CREATE SEQUENCE 10");
    boolean var19 = var0.isDeterministicPKName("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE");
    boolean var21 = var0.isDeterministicUKName("select nextval for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'') from sysibm.sysdummy1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test447");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicPKName("org.firebirdsql.jdbc.FBDriver");
    java.lang.String var6 = var0.renderFetchSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "select CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique.nextval from dual"+ "'", var6.equals("select CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique.nextval from dual"));

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test448");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    var0.setName("select next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0");
    java.util.List var3 = var0.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test449");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("drop sequence ", "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "alter sequence drop sequence 10 restart with 0", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT", ".", "alter sequence hi! restart with 1");
    var6.setExcludeTables("call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    java.lang.String var9 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "JDBCDBImporter"+ "'", var9.equals("JDBCDBImporter"));

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test450");


    boolean var1 = org.databene.jdbacl.SQLUtil.isDML("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test451");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var14 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var13);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { ""};
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String var34 = org.databene.jdbacl.SQLUtil.join("", "", var29, "hi!", "10", var33);
    org.databene.jdbacl.model.DBUniqueConstraint var35 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var21, "select nextval('')", false, var29);
    var21.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var40 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var42 = var21.getUniqueConstraint(var40);
    org.databene.jdbacl.identity.UniqueKeyIdentity var43 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var40);
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var13, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var45 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var2, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var13);
    org.databene.jdbacl.model.DBUniqueIndex var46 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var45);
    java.lang.String[] var47 = var46.getColumnNames();
    java.lang.String var48 = var46.toString();
    org.databene.jdbacl.model.DBTable var49 = var46.getTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi! as 10 on . = 10."+ "'", var34.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var41.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var44.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10) unique"+ "'", var48.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10) unique"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test452");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.identity.NaturalPkIdentity var15 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var16 = var15.getName();
    boolean var18 = var15.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    var19.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var23 = var22.getForeignKeyConstraints();
    var19.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    java.lang.String[] var30 = new java.lang.String[] { ""};
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String var35 = org.databene.jdbacl.SQLUtil.join("", "", var30, "hi!", "10", var34);
    org.databene.jdbacl.model.DBUniqueConstraint var36 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var22, "select nextval('')", false, var30);
    java.lang.String var37 = var15.extractNK((java.lang.Object[])var30);
    boolean var38 = var1.equals((java.lang.Object)var15);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var46 = var45.getForeignKeyConstraints();
    var42.addReferrer((org.databene.jdbacl.model.DBTable)var45);
    org.databene.jdbacl.model.DBDataType var50 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var51 = var50.isAlpha();
    java.lang.String var52 = var50.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var53 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var56 = var53.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var58 = var53.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var59 = var50.equals((java.lang.Object)var58);
    org.databene.jdbacl.model.DefaultDBColumn var62 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var45, var50, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var63 = var62.getType();
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var75 = new java.lang.String[] { ""};
    java.lang.String[] var79 = new java.lang.String[] { ""};
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.join("", "", var75, "hi!", "10", var79);
    org.databene.jdbacl.model.DBUniqueConstraint var81 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var67, "select nextval('')", false, var75);
    var81.addColumnName("sequence");
    var62.addUkConstraint(var81);
    org.databene.jdbacl.model.DBUniqueIndex var85 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var81);
    org.databene.jdbacl.model.DBTable var86 = var85.getTable();
    var85.addColumnName("null[DROP SEQUENCE ]");
    var1.addIndex((org.databene.jdbacl.model.DBIndex)var85);
    boolean var90 = var85.isUnique();
    org.databene.jdbacl.model.DBTable var91 = var85.getTable();
    boolean var92 = var85.isNameDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi! as 10 on . = 10."+ "'", var35.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "DROP SEQUENCE "+ "'", var52.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var58.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi! as 10 on . = 10."+ "'", var80.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test453");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    java.util.List var17 = var15.getProcedures();
    java.lang.String var18 = var15.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    org.databene.jdbacl.model.DBTrigger var33 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var32);
    java.util.List var34 = var32.getPackages();
    org.databene.jdbacl.model.DBPackage var35 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var32);
    java.util.List var36 = var35.getComponents();
    org.databene.jdbacl.model.DBProcedure var37 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var35);
    var37.setSubProgramId("alter sequence catalog restart with 1");
    var15.addProcedure(var37);
    java.lang.String var41 = var37.getObjectId();
    var37.setSubProgramId("alter sequence drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test454");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    org.databene.jdbacl.model.TableContainer var3 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var4 = var3.getTables();
    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var3);
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    java.util.List var16 = var5.getTables(false, var15);
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    org.databene.jdbacl.model.Database var21 = var19.getDatabase();
    java.lang.String var22 = var19.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var24 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var26 = var24.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = var24.formatValue((java.lang.Object)var27);
    var27.setName("'hi!'");
    java.util.List var32 = var27.getSchemas();
    org.databene.jdbacl.model.DBSchema var33 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var27);
    var19.removeSchema(var33);
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    org.databene.jdbacl.model.DBTrigger var47 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var46);
    var47.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var50 = var47.getTriggerBody();
    java.lang.String var51 = var47.getColumnName();
    java.lang.String var52 = var47.getWhenClause();
    var33.addTrigger(var47);
    org.databene.jdbacl.model.DBTrigger var54 = new org.databene.jdbacl.model.DBTrigger("-1", var33);
    java.util.List var56 = var33.getSequences(true);
    java.util.List var57 = var5.getSequences(true, var56);
    java.util.List var59 = var5.getSequences(true);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var61 = var60.getForeignKeyConstraints();
    var60.setDoc("drop sequence ");
    var60.setDoc("catalog");
    var5.removeTable((org.databene.jdbacl.model.DBTable)var60);
    var0.addSubContainer(var5);
    org.databene.jdbacl.model.TableContainerSupport var69 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var71 = var69.getTables(false);
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var75 = var74.getTables();
    java.util.List var77 = var74.getSequences(false);
    java.util.List var78 = var69.getSequences(false, var77);
    java.util.List var79 = var0.getTables(false, var77);
    java.util.List var81 = var0.getTables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test455");


    java.lang.String[] var2 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.ColumnExpression var13 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var14 = var13.getValue();
    org.databene.jdbacl.sql.BetweenExpression var15 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var6, (org.databene.script.Expression)var9, (org.databene.script.Expression)var13);
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.ColumnExpression var25 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var26 = var25.getValue();
    org.databene.jdbacl.sql.BetweenExpression var27 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var18, (org.databene.script.Expression)var21, (org.databene.script.Expression)var25);
    org.databene.jdbacl.sql.ColumnExpression var30 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.ColumnExpression var37 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var38 = var37.getValue();
    org.databene.jdbacl.sql.BetweenExpression var39 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var30, (org.databene.script.Expression)var33, (org.databene.script.Expression)var37);
    org.databene.jdbacl.sql.BetweenExpression var40 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var13, (org.databene.script.Expression)var21, (org.databene.script.Expression)var33);
    org.databene.script.Expression[] var41 = new org.databene.script.Expression[] { var13};
    org.databene.jdbacl.sql.FunctionInvocation var42 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.renderWhereClause(var2, (java.lang.Object[])var41);
    org.databene.jdbacl.sql.FunctionInvocation var44 = new org.databene.jdbacl.sql.FunctionInvocation("SET GENERATOR . TO -1", var41);
    java.lang.String var45 = var44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "sequence"+ "'", var14.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "sequence"+ "'", var26.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "sequence"+ "'", var38.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var43.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(\"sequence\")"+ "'", var45.equals("(\"sequence\")"));

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test456");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var4 = var3.getMaxValue();
    java.lang.String var5 = var3.toString();
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var10 = var9.dropDDL();
    java.math.BigInteger var11 = var9.getMinValueIfNotDefault();
    java.math.BigInteger var12 = var9.getLastNumber();
    org.databene.jdbacl.model.DBSequence var16 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var16.setName("10");
    java.math.BigInteger var19 = var16.getIncrement();
    java.math.BigInteger var20 = var16.getIncrement();
    var9.setStart(var20);
    var3.setIncrement(var20);
    org.databene.jdbacl.model.CompositeDBObject var23 = var3.getOwner();
    org.databene.jdbacl.dialect.FirebirdDialect var24 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var27 = var24.renderSetSequenceValue(".", 0L);
    boolean var30 = var24.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSequence var34 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var35 = var34.getMaxValue();
    java.lang.String var36 = var34.toString();
    org.databene.jdbacl.model.DBSequence var40 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var41 = var40.dropDDL();
    java.math.BigInteger var42 = var40.getMinValueIfNotDefault();
    java.math.BigInteger var43 = var40.getLastNumber();
    org.databene.jdbacl.model.DBSequence var47 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var47.setName("10");
    java.math.BigInteger var50 = var47.getIncrement();
    java.math.BigInteger var51 = var47.getIncrement();
    var40.setStart(var51);
    var34.setIncrement(var51);
    java.lang.String var54 = var24.renderCreateSequence(var34);
    java.math.BigInteger var55 = var34.getIncrement();
    var3.setIncrement(var55);
    org.databene.jdbacl.model.DBSequence var60 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var61 = var60.getMaxValue();
    java.lang.String var62 = var60.toString();
    java.lang.String var63 = var60.dropDDL();
    java.lang.Boolean var64 = var60.isOrder();
    org.databene.jdbacl.model.DBSequence var68 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var68.setName("10");
    java.math.BigInteger var71 = var68.getIncrement();
    java.math.BigInteger var72 = var68.getIncrement();
    var60.setStart(var72);
    var3.setMaxValue(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "drop sequence "+ "'", var10.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "SET GENERATOR . TO -1"+ "'", var27.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "drop sequence "+ "'", var41.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "CREATE GENERATOR "+ "'", var54.equals("CREATE GENERATOR "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "drop sequence "+ "'", var63.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test457");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderDropSequence("NOT drop generator sequence ~ 'hi!'");
    java.lang.String var7 = var0.renderFetchSequenceValue("-1");
    java.lang.String var9 = var0.renderDropSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var14 = var13.dropDDL();
    java.lang.String var15 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var13);
    var13.setName("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL");
    var13.setCache((java.lang.Long)100L);
    java.lang.String var20 = var0.renderCreateSequence(var13);
    boolean var22 = var0.isDeterministicIndexName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) DEFAULT alter sequence select next value for 10 restart with 100 NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"+ "'", var5.equals("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "VALUES (NEXT VALUE FOR -1)"+ "'", var7.equals("VALUES (NEXT VALUE FOR -1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "DROP SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. RESTRICT"+ "'", var9.equals("DROP SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence "+ "'", var14.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL AS BIGINT"+ "'", var20.equals("CREATE SEQUENCE hi! as 10 on . = 10..CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test458");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var7.mCREATE_TABLE();
    var7.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var11 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var13 = var11.LT(10);
    var7.setCharStream((org.antlr.runtime.CharStream)var11);
    boolean var16 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var11, 69);
    var0.mTABLE_DETAILS();
    var0.mSIZE();
    var0.mVALUE_LIST();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test459");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__126();
    var10.mT__133();
    var10.mDATE();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.mCOMMENT();
      fail("Expected exception of type org.antlr.runtime.NoViableAltException");
    } catch (org.antlr.runtime.NoViableAltException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test460");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1");
    boolean var4 = var0.isDeterministicFKName("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE join DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE  as jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  on SET GENERATOR catalog TO -2 (). = jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: .'hi!'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test461");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var43 = var41.getTable();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.FKChangeRule var45 = var41.getUpdateRule();
    java.lang.String var46 = var45.name();
    org.databene.jdbacl.sql.parser.SQLLexer var47 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var47.mCREATE_TABLE();
    var47.mARGUMENTS();
    org.databene.jdbacl.dialect.HSQL2Dialect var52 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var55 = var52.renderSequenceValue("hi!", 1L);
    java.lang.String var59 = var52.regexQuery("sequence", true, "");
    boolean var61 = var52.isDeterministicPKName("alter sequence hi! restart with 1");
    java.lang.String var63 = var52.renderDropSequence("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var47.traceIn("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", 0, (java.lang.Object)var52);
    var47.mCREATE_SEQUENCE();
    var47.setText("drop sequence Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    boolean var68 = var45.equals((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "NO_ACTION"+ "'", var46.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "alter sequence hi! restart with 1"+ "'", var55.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var59.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var63.equals("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test462");


    org.databene.jdbacl.dialect.DerbyDialect var0 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var2 = var0.isDeterministicPKName("hi! as 10 on . = 10.");
    boolean var4 = var0.isDeterministicIndexName("sequence");
    boolean var6 = var0.isDeterministicFKName("10");
    boolean var9 = var0.isDefaultCatalog("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )", "jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    boolean var11 = var0.isDeterministicFKName("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test463");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__61();
    var10.mT__67();
    var10.mT__132();
    var10.mT__114();
    var10.mROWID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test464");


    java.lang.Boolean var1 = org.databene.jdbacl.SQLUtil.mutatesStructure("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + false+ "'", var1.equals(false));

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test465");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("jdbc:hsqldb:mem:CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test466");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    java.util.List var3 = var0.getRuleInvocationStack();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var5 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var5.setCharPositionInLine(1);
    int var8 = var5.getCharPositionInLine();
    var5.setCharPositionInLine(69);
    var5.setCharPositionInLine(1);
    var0.setCharStream((org.antlr.runtime.CharStream)var5);
    java.lang.String[] var14 = var0.getTokenNames();
    var0.skip();
    var0.setText("null[DROP SEQUENCE ] SIMILAR TO 'CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT'");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__95();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test467");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.emitErrorMessage("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\"");
    java.lang.String var17 = var0.getGrammarFileName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mNUMBER();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"+ "'", var17.equals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"));

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test468");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var3 = var0.renderSetSequenceValue(".", 0L);
    boolean var5 = var0.isDeterministicFKName("hi!");
    java.lang.String var6 = var0.getJDBCDriverClass();
    org.databene.jdbacl.dialect.Derby10_6Dialect var7 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var10 = var7.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var12 = var7.renderDropSequence("NOT drop generator sequence ~ 'hi!'");
    boolean var13 = var7.isSequenceBoundarySupported();
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.lang.String var19 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var17);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.DBDataType var29 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var30 = var29.isAlpha();
    java.lang.String var31 = var29.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var32 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var35 = var32.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var37 = var32.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var38 = var29.equals((java.lang.Object)var37);
    org.databene.jdbacl.model.DefaultDBColumn var41 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var24, var29, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var42 = var41.getType();
    org.databene.jdbacl.model.DBDataType var45 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var46 = var45.isAlpha();
    java.lang.String var47 = var45.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var48 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var51 = var48.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var53 = var48.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var54 = var45.equals((java.lang.Object)var53);
    var41.setType(var45);
    boolean var56 = var17.isIdentical((org.databene.jdbacl.model.DBObject)var41);
    java.lang.String var57 = var7.renderCreateSequence(var17);
    java.lang.Boolean var58 = var17.isOrder();
    java.lang.String var59 = var0.renderCreateSequence(var17);
    java.lang.String var60 = var17.getCatalogName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR . TO -1"+ "'", var3.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "org.firebirdsql.jdbc.FBDriver"+ "'", var6.equals("org.firebirdsql.jdbc.FBDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"+ "'", var12.equals("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "DROP SEQUENCE "+ "'", var31.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var37.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "DROP SEQUENCE "+ "'", var47.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var53.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "CREATE GENERATOR "+ "'", var59.equals("CREATE GENERATOR "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "drop sequence "+ "'", var60.equals("drop sequence "));

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test469");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.emitErrorMessage("call next value for 'hi!'");
    var0.mDROP_SEQUENCE();

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test470");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.emitErrorMessage("call next value for 'hi!'");
    var0.mCOLUMN_SPEC();
    java.lang.String var6 = var0.getCharErrorDisplay(69);
    var0.mDROP_TABLE();
    boolean var8 = var0.failed();
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    org.databene.jdbacl.model.DBDataType var20 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var21 = var20.isAlpha();
    java.lang.String var22 = var20.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var23 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var26 = var23.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var28 = var23.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var29 = var20.equals((java.lang.Object)var28);
    org.databene.jdbacl.model.DefaultDBColumn var32 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var15, var20, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var33 = var32.getType();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var51.addColumnName("sequence");
    var32.addUkConstraint(var51);
    var32.setNullable(true);
    var0.traceIn("trigger", 3, (java.lang.Object)var32);
    var0.beginResync();
    var0.mDROP_TABLE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "'E'"+ "'", var6.equals("'E'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "DROP SEQUENCE "+ "'", var22.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var28.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test471");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.join("", "", var16, "hi!", "10", var20);
    org.databene.jdbacl.model.DBUniqueConstraint var22 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var8, "select nextval('')", false, var16);
    var8.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    java.util.List var26 = var8.getIndexes();
    org.databene.jdbacl.model.DBRow var27 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.TableContainer var32 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var33 = var32.getTables();
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var32);
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    var35.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var39 = var38.getForeignKeyConstraints();
    var35.addReferrer((org.databene.jdbacl.model.DBTable)var38);
    var32.addTable((org.databene.jdbacl.model.DBTable)var38);
    java.lang.String[] var46 = new java.lang.String[] { ""};
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.join("", "", var46, "hi!", "10", var50);
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var46);
    org.databene.jdbacl.model.TableContainer var55 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var56 = var55.getTables();
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var55);
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    var58.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var62 = var61.getForeignKeyConstraints();
    var58.addReferrer((org.databene.jdbacl.model.DBTable)var61);
    var55.addTable((org.databene.jdbacl.model.DBTable)var61);
    java.lang.String[] var67 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var67);
    org.databene.jdbacl.model.DBForeignKeyConstraint var69 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var38, var46, (org.databene.jdbacl.model.DBTable)var61, var67);
    java.lang.String[] var70 = var69.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var71 = var69.getTable();
    java.lang.String var72 = var69.toString();
    java.lang.Object[] var73 = var27.getFKComponents(var69);
    java.lang.Object[] var74 = var27.getPKValues();
    org.databene.jdbacl.DBExecutionResult var76 = new org.databene.jdbacl.DBExecutionResult((java.lang.Object)var27, (java.lang.Boolean)true);
    java.lang.Object var78 = var27.getCellValue("catalog");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi! as 10 on . = 10."+ "'", var21.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi! as 10 on . = 10."+ "'", var51.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "."+ "'", var52.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var68.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var72.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test472");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var3 = var0.isSequenceSupported();
    boolean var5 = var0.isDeterministicIndexName("call next value for null[]");
    boolean var6 = var0.isSequenceBoundarySupported();
    boolean var8 = var0.isDeterministicFKName("select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test473");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    org.databene.jdbacl.model.DBTrigger var30 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var29);
    java.util.List var31 = var29.getPackages();
    org.databene.jdbacl.model.DBPackage var32 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var29);
    java.lang.String var33 = var32.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var38 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var40 = var38.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    java.lang.String var43 = var38.formatValue((java.lang.Object)var41);
    var41.setName("'hi!'");
    java.util.List var46 = var41.getSchemas();
    org.databene.jdbacl.model.DBSchema var47 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var41);
    org.databene.jdbacl.model.DBTrigger var48 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var47);
    java.util.List var49 = var47.getPackages();
    org.databene.jdbacl.model.DBPackage var50 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var47);
    java.util.List var51 = var50.getComponents();
    org.databene.jdbacl.model.DBProcedure var52 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var50);
    java.lang.String var53 = var52.getSubProgramId();
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    java.util.Set var59 = var55.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var62 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var63 = var62.isAlpha();
    boolean var64 = var62.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var67 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var55, var62, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var70 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var71 = var70.getTables();
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var70);
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    var73.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var76 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var77 = var76.getForeignKeyConstraints();
    var73.addReferrer((org.databene.jdbacl.model.DBTable)var76);
    var70.addTable((org.databene.jdbacl.model.DBTable)var76);
    var67.setTable((org.databene.jdbacl.model.DBTable)var76);
    boolean var81 = var52.isIdentical((org.databene.jdbacl.model.DBObject)var76);
    var32.addProcedure(var52);
    java.lang.String var83 = var52.getSubProgramId();
    var15.addProcedure(var52);
    var15.setObjectType("sequence");
    java.lang.String var87 = var15.getDataObjectId();
    java.lang.String var88 = var15.getObjectId();
    java.lang.String var89 = var15.getObjectId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test474");


    boolean var4 = org.databene.jdbacl.DBUtil.available("SET GENERATOR catalog TO -2 ()", "select Identity definition by unique key: select next value for 10.nextval from dual", "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", "null[DROP SEQUENCE ] SIMILAR TO 'CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test475");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    java.lang.String var5 = var0.getDoc();
    var0.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    org.databene.jdbacl.JDBCConnectData var14 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var15 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var16 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    boolean var17 = var0.equals((java.lang.Object)var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var18 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    var18.setImportingTriggers(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "."+ "'", var5.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test476");


    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    var4.setDoc(".");
    java.util.Set var8 = var4.getUniqueConstraints(false);
    var4.setDoc("select next value for SET GENERATOR.TO - 1");
    org.databene.jdbacl.model.DBIndex var12 = var4.getIndex("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String[] var31 = new java.lang.String[] { ""};
    java.lang.String var32 = org.databene.jdbacl.SQLUtil.join("", "", var27, "hi!", "10", var31);
    org.databene.jdbacl.model.DBUniqueConstraint var33 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var19, "select nextval('')", false, var27);
    java.lang.String[] var39 = new java.lang.String[] { ""};
    java.lang.String[] var43 = new java.lang.String[] { ""};
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.join("", "", var39, "hi!", "10", var43);
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var39);
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.join("", "", var52, "hi!", "10", var56);
    java.lang.String var58 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var56);
    java.lang.String var59 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var39, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var56);
    org.databene.jdbacl.identity.NaturalPkIdentity var61 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var62 = var61.getName();
    boolean var64 = var61.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    var65.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var69 = var68.getForeignKeyConstraints();
    var65.addReferrer((org.databene.jdbacl.model.DBTable)var68);
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String[] var80 = new java.lang.String[] { ""};
    java.lang.String var81 = org.databene.jdbacl.SQLUtil.join("", "", var76, "hi!", "10", var80);
    org.databene.jdbacl.model.DBUniqueConstraint var82 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var68, "select nextval('')", false, var76);
    java.lang.String var83 = var61.extractNK((java.lang.Object[])var76);
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var19, var39, (java.lang.Object[])var76);
    org.databene.jdbacl.identity.UniqueKeyIdentity var85 = new org.databene.jdbacl.identity.UniqueKeyIdentity("drop generator sequence", var76);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var86 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var4, "hi! identity by primary key", true, var76);
    java.lang.String var87 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var86);
    var86.addColumnName("DROP SEQUENCE ");
    org.databene.jdbacl.model.DBUniqueIndex var90 = new org.databene.jdbacl.model.DBUniqueIndex("hi! as 10 on . = 10.", false, (org.databene.jdbacl.model.DBUniqueConstraint)var86);
    org.databene.jdbacl.model.DBUniqueIndex var91 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", false, (org.databene.jdbacl.model.DBUniqueConstraint)var86);
    java.lang.String var92 = var86.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi! as 10 on . = 10."+ "'", var32.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi! as 10 on . = 10."+ "'", var44.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "."+ "'", var45.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi! as 10 on . = 10."+ "'", var57.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "."+ "'", var58.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var59.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi! as 10 on . = 10."+ "'", var81.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + ""+ "'", var83.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var84.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" "+ "'", var87.equals("CONSTRAINT \"hi! identity by primary key\" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (, DROP SEQUENCE )"+ "'", var92.equals("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (, DROP SEQUENCE )"));

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test477");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var24 = var23.getType();
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    var25.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var29 = var28.getForeignKeyConstraints();
    var25.addReferrer((org.databene.jdbacl.model.DBTable)var28);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var42 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var28, "select nextval('')", false, var36);
    var42.addColumnName("sequence");
    var23.addUkConstraint(var42);
    org.databene.jdbacl.model.DBUniqueIndex var46 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var42);
    org.databene.jdbacl.model.DefaultDBTable var47 = new org.databene.jdbacl.model.DefaultDBTable();
    var47.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var51 = var50.getForeignKeyConstraints();
    var47.addReferrer((org.databene.jdbacl.model.DBTable)var50);
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("", "", var58, "hi!", "10", var62);
    org.databene.jdbacl.model.DBUniqueConstraint var64 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var50, "select nextval('')", false, var58);
    boolean var65 = var46.equals((java.lang.Object)false);
    java.lang.String[] var66 = var46.getColumnNames();
    org.databene.jdbacl.dialect.H2Dialect var67 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var69 = var67.renderFetchSequenceValue("10");
    java.lang.String var72 = var67.setSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 1L);
    boolean var74 = var67.isDeterministicIndexName("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var77 = var67.setSequenceValue("catalog", 1L);
    boolean var78 = var46.equals((java.lang.Object)var77);
    boolean var79 = var46.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi! as 10 on . = 10."+ "'", var63.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "select next value for 10"+ "'", var69.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"+ "'", var72.equals("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "alter sequence catalog restart with 1"+ "'", var77.equals("alter sequence catalog restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test478");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingIndexes(true);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! identity by primary key");
    var6.setImportingIndexes(false);
    var6.setSchemaName("drop sequence call next value for 'hi!'");

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test479");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE");

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test480");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("Identity definition by unique key: select next value for 10", "CREATE SEQUENCE  CACHE 100");
    boolean var4 = var0.supportsRegex();
    boolean var7 = var0.isDefaultCatalog("select next value for (\"sequence\")", "(DROP SEQUENCE )");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test481");


    java.lang.Object[] var1 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    java.lang.String var2 = org.databene.jdbacl.SQLUtil.renderValue((java.lang.Object)"left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "'left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE '"+ "'", var2.equals("'left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE '"));

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test482");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var18 = var0.isDefaultCatalog("catalog", "sequence");
    boolean var20 = var0.isDeterministicIndexName("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    org.databene.jdbacl.model.Database var23 = var21.getDatabase();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var28 = var27.dropDDL();
    java.math.BigInteger var29 = var27.getMinValueIfNotDefault();
    boolean var30 = var21.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.lang.String var31 = var0.renderCreateSequence(var27);
    java.math.BigInteger var32 = var27.getMinValueIfNotDefault();
    org.databene.jdbacl.model.DBSequence var36 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var37 = var36.dropDDL();
    java.math.BigInteger var38 = var36.getMinValueIfNotDefault();
    java.lang.String var39 = var36.getSchemaName();
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var44 = var43.dropDDL();
    java.math.BigInteger var45 = var43.getStart();
    var36.setMinValue(var45);
    var27.setStart(var45);
    java.lang.String var48 = var27.dropDDL();
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "drop sequence "+ "'", var28.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "CREATE SEQUENCE "+ "'", var31.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "drop sequence "+ "'", var37.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "drop sequence "+ "'", var44.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "drop sequence "+ "'", var48.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "sequence "+ "'", var49.equals("sequence "));

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test483");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var32 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var33 = var32.getName();
    org.databene.jdbacl.model.Database var34 = var32.getDatabase();
    java.lang.String var35 = var32.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    var32.removeSchema(var46);
    java.util.List var49 = var46.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var53 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var55 = var53.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var56 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var57 = var56.getName();
    java.lang.String var58 = var53.formatValue((java.lang.Object)var56);
    var56.setName("'hi!'");
    java.util.List var61 = var56.getSchemas();
    org.databene.jdbacl.model.DBSchema var62 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var56);
    org.databene.jdbacl.model.DBTrigger var63 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var62);
    java.util.List var64 = var62.getPackages();
    org.databene.jdbacl.model.DBPackage var65 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var62);
    java.util.List var66 = var65.getComponents();
    var46.addPackage(var65);
    java.lang.String var68 = var65.getSubObjectName();
    var24.addPackage(var65);
    var65.setStatus("CREATE GENERATOR 10; SET GENERATOR 10 TO -1;");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test484");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    java.lang.String var4 = var0.getDefaultSchema();
    java.lang.String[] var5 = var0.getJars();
    java.lang.String[] var6 = var0.getJars();
    java.lang.String var7 = var0.getDefaultPort();
    java.lang.String var8 = var0.getId();
    var0.setDefaultPort("No identity defined for table alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test485");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var17 = var0.isDeterministicFKName("CREATE SEQUENCE 10");
    boolean var20 = var0.isDefaultCatalog("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'");
    boolean var21 = var0.isSequenceSupported();
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var25.setName("10");
    java.math.BigInteger var28 = var25.getIncrement();
    java.lang.Boolean var29 = var25.isCycle();
    java.lang.String var30 = var25.dropDDL();
    org.databene.jdbacl.model.DBSequence var34 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var34.setCache((java.lang.Long)100L);
    java.lang.String var37 = var34.getObjectType();
    java.math.BigInteger var38 = var34.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var42 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var42.setName("10");
    java.math.BigInteger var45 = var42.getIncrement();
    java.math.BigInteger var46 = var42.getIncrement();
    var34.setLastNumber(var46);
    var25.setIncrement(var46);
    org.databene.jdbacl.model.DBSequence var52 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var52.setName("10");
    java.math.BigInteger var55 = var52.getIncrement();
    java.math.BigInteger var56 = var52.getIncrement();
    java.math.BigInteger var57 = var52.getStart();
    var25.setIncrement(var57);
    java.lang.Long var59 = var25.getCache();
    java.lang.String var60 = var0.renderCreateSequence(var25);
    java.lang.String var61 = var25.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "drop sequence 10"+ "'", var30.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "sequence"+ "'", var37.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "CREATE SEQUENCE 10"+ "'", var60.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "10"+ "'", var61.equals("10"));

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test486");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    java.lang.Object var12 = var2.getValue();
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var16 = var15.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var17 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var19 = var17.renderFetchSequenceValue("'hi!'");
    var15.setValue("'hi!'");
    boolean var21 = var15.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var24 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var25 = var24.isConstant();
    java.lang.Object var26 = var24.getValue();
    org.databene.jdbacl.sql.BetweenExpression var27 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var15, (org.databene.script.Expression)var24);
    java.lang.String var28 = var2.getColumnName();
    boolean var29 = var2.isConstant();
    org.databene.jdbacl.identity.xml.IdentityParseContext var30 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    java.lang.Object var31 = var2.evaluate((org.databene.commons.Context)var30);
    java.lang.Object var33 = var30.get("CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var35 = var30.contains("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "sequence"+ "'", var16.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "call next value for 'hi!'"+ "'", var19.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "sequence"+ "'", var26.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "sequence"+ "'", var31.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test487");


    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    var37.addTable((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.join("", "", var51, "hi!", "10", var55);
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var51);
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var61 = var60.getTables();
    org.databene.jdbacl.model.TableContainer var62 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var60);
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    var63.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var67 = var66.getForeignKeyConstraints();
    var63.addReferrer((org.databene.jdbacl.model.DBTable)var66);
    var60.addTable((org.databene.jdbacl.model.DBTable)var66);
    java.lang.String[] var72 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var72);
    org.databene.jdbacl.model.DBForeignKeyConstraint var74 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var43, var51, (org.databene.jdbacl.model.DBTable)var66, var72);
    org.databene.jdbacl.model.DBTable var75 = var74.getRefereeTable();
    var8.addForeignKey(var74);
    org.databene.jdbacl.model.FKChangeRule var77 = var74.getDeleteRule();
    java.lang.String var78 = var77.toString();
    java.lang.String var79 = var77.toString();
    java.lang.Class var80 = var77.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var81 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var80);
    org.databene.jdbacl.ColumnInfo var82 = new org.databene.jdbacl.ColumnInfo("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", 32, var80);
    org.databene.jdbacl.ResultSetConverter var84 = new org.databene.jdbacl.ResultSetConverter(var80, false);
    java.lang.Class var85 = var84.getTargetType();
    java.lang.Class var86 = var84.getTargetType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var88 = java.lang.Enum.<java.lang.Enum>valueOf(var86, "drop sequence org.databene.jdbacl.SQLScriptException: Error in execution of script line 0: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi! as 10 on . = 10."+ "'", var56.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "."+ "'", var57.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var73.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "NO_ACTION"+ "'", var78.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NO_ACTION"+ "'", var79.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test488");


    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    var4.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var8 = var7.getForeignKeyConstraints();
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var7);
    org.databene.jdbacl.model.DBDataType var12 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var13 = var12.isAlpha();
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var15 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var18 = var15.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var20 = var15.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var21 = var12.equals((java.lang.Object)var20);
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var7, var12, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var27 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var7, (-1), "hi! identity by primary key");
    java.lang.String[] var30 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var34 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var37 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var38 = var37.getValue();
    org.databene.jdbacl.sql.ColumnExpression var41 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var42 = var41.getValue();
    org.databene.jdbacl.sql.BetweenExpression var43 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var34, (org.databene.script.Expression)var37, (org.databene.script.Expression)var41);
    org.databene.jdbacl.sql.ColumnExpression var46 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var49 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var50 = var49.getValue();
    org.databene.jdbacl.sql.ColumnExpression var53 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var54 = var53.getValue();
    org.databene.jdbacl.sql.BetweenExpression var55 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var46, (org.databene.script.Expression)var49, (org.databene.script.Expression)var53);
    org.databene.jdbacl.sql.ColumnExpression var58 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var61 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var62 = var61.getValue();
    org.databene.jdbacl.sql.ColumnExpression var65 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var66 = var65.getValue();
    org.databene.jdbacl.sql.BetweenExpression var67 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var58, (org.databene.script.Expression)var61, (org.databene.script.Expression)var65);
    org.databene.jdbacl.sql.BetweenExpression var68 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var41, (org.databene.script.Expression)var49, (org.databene.script.Expression)var61);
    org.databene.script.Expression[] var69 = new org.databene.script.Expression[] { var41};
    org.databene.jdbacl.sql.FunctionInvocation var70 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var69);
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderWhereClause(var30, (java.lang.Object[])var69);
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ", var30);
    org.databene.jdbacl.model.DBNonUniqueIndex var73 = new org.databene.jdbacl.model.DBNonUniqueIndex("drop generator DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key", true, (org.databene.jdbacl.model.DBTable)var7, var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "DROP SEQUENCE "+ "'", var14.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var20.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "sequence"+ "'", var38.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "sequence"+ "'", var42.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "sequence"+ "'", var50.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "sequence"+ "'", var54.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "sequence"+ "'", var62.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "sequence"+ "'", var66.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var71.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE .VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"+ "'", var72.equals("Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE .VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"));

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test489");


    org.databene.jdbacl.sql.ColumnExpression var3 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var6 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var7 = var6.getValue();
    org.databene.jdbacl.sql.ColumnExpression var10 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var11 = var10.getValue();
    org.databene.jdbacl.sql.BetweenExpression var12 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var3, (org.databene.script.Expression)var6, (org.databene.script.Expression)var10);
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var18 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var19 = var18.getValue();
    org.databene.jdbacl.sql.ColumnExpression var22 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var23 = var22.getValue();
    org.databene.jdbacl.sql.BetweenExpression var24 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var15, (org.databene.script.Expression)var18, (org.databene.script.Expression)var22);
    var12.addTerm((org.databene.script.Expression)var18);
    org.databene.script.Expression[] var26 = new org.databene.script.Expression[] { var12};
    org.databene.jdbacl.sql.FunctionInvocation var27 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var26);
    org.databene.jdbacl.identity.xml.IdentityParseContext var28 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    java.lang.Object var29 = var27.evaluate((org.databene.commons.Context)var28);
    org.databene.jdbacl.sql.ColumnExpression var32 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var35 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var36 = var35.getValue();
    org.databene.jdbacl.sql.ColumnExpression var39 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var40 = var39.getValue();
    org.databene.jdbacl.sql.BetweenExpression var41 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var32, (org.databene.script.Expression)var35, (org.databene.script.Expression)var39);
    org.databene.jdbacl.identity.xml.IdentityParseContext var42 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var43 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var42.addParser((org.databene.webdecs.xml.XMLElementParser)var43);
    java.lang.Boolean var45 = var41.evaluate((org.databene.commons.Context)var42);
    java.util.Set var46 = var42.keySet();
    org.databene.jdbacl.identity.IdentityProvider var47 = var42.getIdentityProvider();
    java.lang.Object var49 = var42.get("jdbc:h2:mem:VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    java.lang.Object var50 = var27.evaluate((org.databene.commons.Context)var42);
    java.lang.String var51 = var27.toString();
    java.lang.String var52 = var27.getFunctionName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "sequence"+ "'", var11.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "sequence"+ "'", var19.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "sequence"+ "'", var36.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "sequence"+ "'", var40.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + true+ "'", var45.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var51.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var52.equals("alter sequence drop sequence 10 restart with 0"));

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test490");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("null", "DROP SEQUENCE ", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    boolean var5 = var3.equals((java.lang.Object)"'\\n'");
    java.lang.String var6 = var3.getDefaultSchema();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test491");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    org.databene.jdbacl.model.DBSequence var8 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var9 = var8.dropDDL();
    java.math.BigInteger var10 = var8.getMinValueIfNotDefault();
    boolean var11 = var2.isIdentical((org.databene.jdbacl.model.DBObject)var8);
    org.databene.jdbacl.model.DBTreeModel var12 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable("select next value for 10", var24);
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    int var28 = var12.getIndexOfChild((org.databene.jdbacl.model.DBObject)var25, (org.databene.jdbacl.model.DBObject)var27);
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    org.databene.jdbacl.model.Database var32 = var30.getDatabase();
    java.lang.String var33 = var30.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    org.databene.jdbacl.model.DBSchema var44 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var38);
    var30.removeSchema(var44);
    java.util.List var47 = var44.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var44);
    java.util.List var49 = var44.getTables();
    var25.setSchema(var44);
    org.databene.jdbacl.model.DBTrigger var51 = new org.databene.jdbacl.model.DBTrigger("sequence 10", var44);
    org.databene.jdbacl.model.DBTrigger var52 = new org.databene.jdbacl.model.DBTrigger("alter sequence drop generator . restart with 1", var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "drop sequence "+ "'", var9.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test492");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("Identity definition by unique key: select next value for 10");

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test493");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    var0.mCREATE_INDEX();
    var0.mIDENTIFIER();
    var0.mCOMMENT_COLUMN();
    java.lang.String var11 = var0.getCharErrorDisplay(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__119();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "'\u0000'"+ "'", var11.equals("'\u0000'"));

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test494");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    var0.removeSchema(var14);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    org.databene.jdbacl.model.DBTrigger var28 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    var28.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var31 = var28.getTriggerBody();
    java.lang.String var32 = var28.getColumnName();
    java.lang.String var33 = var28.getWhenClause();
    var14.addTrigger(var28);
    java.util.List var35 = var14.getComponents();
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    org.databene.jdbacl.dialect.DerbyDialect var49 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var51 = var49.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var52 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var53 = var52.getName();
    java.lang.String var54 = var49.formatValue((java.lang.Object)var52);
    var52.setName("'hi!'");
    java.util.List var57 = var52.getSchemas();
    org.databene.jdbacl.model.DBSchema var58 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var52);
    org.databene.jdbacl.model.DBTrigger var59 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var58);
    var46.addTrigger(var59);
    boolean var61 = var14.isIdentical((org.databene.jdbacl.model.DBObject)var59);
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    var62.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var66 = var65.getForeignKeyConstraints();
    var62.addReferrer((org.databene.jdbacl.model.DBTable)var65);
    java.lang.String[] var73 = new java.lang.String[] { ""};
    java.lang.String[] var77 = new java.lang.String[] { ""};
    java.lang.String var78 = org.databene.jdbacl.SQLUtil.join("", "", var73, "hi!", "10", var77);
    org.databene.jdbacl.model.DBUniqueConstraint var79 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var65, "select nextval('')", false, var73);
    org.databene.jdbacl.model.DBCatalog var80 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var81 = var80.getName();
    java.util.List var82 = var80.getComponents();
    boolean var83 = var79.isIdentical((org.databene.jdbacl.model.DBObject)var80);
    boolean var84 = var59.isIdentical((org.databene.jdbacl.model.DBObject)var79);
    java.lang.String var85 = var59.getTableOwner();
    var59.setTriggeringEvent("Identity definition by unique key: select next value for 10");
    org.databene.jdbacl.model.DBCatalog var89 = new org.databene.jdbacl.model.DBCatalog("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var90 = var59.isIdentical((org.databene.jdbacl.model.DBObject)var89);
    java.lang.String var91 = var59.getDescription();
    org.databene.jdbacl.model.DefaultDBTable var93 = new org.databene.jdbacl.model.DefaultDBTable("alter sequence SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!' restart with 1");
    boolean var94 = var59.isIdentical((org.databene.jdbacl.model.DBObject)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi! as 10 on . = 10."+ "'", var78.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test495");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var23);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var40);
    java.lang.String var43 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var23, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var40);
    org.databene.jdbacl.identity.NaturalPkIdentity var45 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var46 = var45.getName();
    boolean var48 = var45.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    var49.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var53 = var52.getForeignKeyConstraints();
    var49.addReferrer((org.databene.jdbacl.model.DBTable)var52);
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String[] var64 = new java.lang.String[] { ""};
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.join("", "", var60, "hi!", "10", var64);
    org.databene.jdbacl.model.DBUniqueConstraint var66 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var52, "select nextval('')", false, var60);
    java.lang.String var67 = var45.extractNK((java.lang.Object[])var60);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var3, var23, (java.lang.Object[])var60);
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String[] var78 = new java.lang.String[] { ""};
    java.lang.String var79 = org.databene.jdbacl.SQLUtil.join("", "", var74, "hi!", "10", var78);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var80 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var3, "jdbc:h2:mem:select next value for 10", false, var78);
    java.lang.String[] var87 = new java.lang.String[] { ""};
    java.lang.String[] var91 = new java.lang.String[] { ""};
    java.lang.String var92 = org.databene.jdbacl.SQLUtil.join("", "", var87, "hi!", "10", var91);
    org.databene.jdbacl.identity.IdentityProvider var93 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var94 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var87, var93);
    org.databene.jdbacl.model.DBUniqueConstraint var95 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "hi!", true, var87);
    org.databene.jdbacl.model.DBTable var96 = var95.getTable();
    java.lang.String var97 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var95);
    java.lang.String var98 = var95.toString();
    java.lang.String[] var99 = var95.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "."+ "'", var29.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "."+ "'", var42.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var43.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi! as 10 on . = 10."+ "'", var65.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var68.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi! as 10 on . = 10."+ "'", var79.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "hi! as 10 on . = 10."+ "'", var92.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "CONSTRAINT hi! "+ "'", var97.equals("CONSTRAINT hi! "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "CONSTRAINT hi! UNIQUE ()"+ "'", var98.equals("CONSTRAINT hi! UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test496");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderDropSequence("NOT drop generator sequence ~ 'hi!'");
    java.lang.String var7 = var0.renderFetchSequenceValue("-1");
    boolean var9 = var0.isDeterministicUKName("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"+ "'", var5.equals("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "VALUES (NEXT VALUE FOR -1)"+ "'", var7.equals("VALUES (NEXT VALUE FOR -1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test497");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    var24.setDoc("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test498");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getDriverClass();
    java.lang.String var2 = var0.getId();
    java.lang.String var3 = var0.getDefaultUser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test499");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBTreeModel var10 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var0);
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    org.databene.jdbacl.model.DBUniqueConstraint var30 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var16, "select nextval('')", false, var24);
    java.lang.String var31 = var30.toString();
    boolean var32 = var30.isNameDeterministic();
    org.databene.jdbacl.model.DBUniqueIndex var33 = new org.databene.jdbacl.model.DBUniqueIndex("select next value for SET GENERATOR . TO -1", false, var30);
    java.lang.String var34 = var30.toString();
    boolean var35 = var10.isLeaf((org.databene.jdbacl.model.DBObject)var30);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.join("", "", var51, "hi!", "10", var55);
    org.databene.jdbacl.model.DBUniqueConstraint var57 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var43, "select nextval('')", false, var51);
    java.lang.String var58 = var57.toString();
    boolean var59 = var57.isNameDeterministic();
    org.databene.jdbacl.model.DBUniqueIndex var60 = new org.databene.jdbacl.model.DBUniqueIndex("select next value for SET GENERATOR . TO -1", false, var57);
    java.lang.String var61 = var57.toString();
    java.lang.String[] var62 = var57.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var63 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0", false, var57);
    java.lang.String var64 = var63.getDoc();
    boolean var65 = var30.isIdentical((org.databene.jdbacl.model.DBObject)var63);
    org.databene.jdbacl.model.DefaultDBTable var69 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.DefaultDBTable var70 = new org.databene.jdbacl.model.DefaultDBTable();
    var70.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var74 = var73.getForeignKeyConstraints();
    var70.addReferrer((org.databene.jdbacl.model.DBTable)var73);
    java.lang.String[] var81 = new java.lang.String[] { ""};
    java.lang.String[] var85 = new java.lang.String[] { ""};
    java.lang.String var86 = org.databene.jdbacl.SQLUtil.join("", "", var81, "hi!", "10", var85);
    org.databene.jdbacl.model.DBUniqueConstraint var87 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var73, "select nextval('')", false, var81);
    java.lang.String var88 = var87.toString();
    boolean var89 = var87.isNameDeterministic();
    var69.addUniqueConstraint(var87);
    org.databene.jdbacl.model.DBUniqueIndex var91 = new org.databene.jdbacl.model.DBUniqueIndex("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", true, var87);
    boolean var92 = var63.isIdentical((org.databene.jdbacl.model.DBObject)var87);
    var63.addColumnName("Identity definition by NK-PK query: CONSTRAINT \"select nextval('')\" UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var31.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var34.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi! as 10 on . = 10."+ "'", var56.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var58.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var61.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi! as 10 on . = 10."+ "'", var86.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var88.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test500");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0", "select nextval('jdbc:hsqldb:mem:VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)')");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

}
