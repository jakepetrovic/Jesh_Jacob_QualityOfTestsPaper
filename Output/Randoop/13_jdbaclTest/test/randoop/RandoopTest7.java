package randoop;

import junit.framework.*;

public class RandoopTest7 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test1");


    org.databene.jdbacl.sql.parser.SQLParser.default_value_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.default_value_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTemplate();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test2");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    java.math.BigInteger var14 = var9.getStartIfNotDefault();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test3");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    boolean var7 = var0.isDeterministicIndexName("hi!");
    boolean var8 = var0.supportsRegex();
    java.lang.String var10 = var0.renderFetchSequenceValue("alter sequence drop generator sequence restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "select nextval('alter sequence drop generator sequence restart with 100')"+ "'", var10.equals("select nextval('alter sequence drop generator sequence restart with 100')"));

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test4");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    boolean var17 = var0.failed();
    org.databene.jdbacl.sql.parser.SQLLexer var18 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var18.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var21 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var23 = var21.LT(10);
    var18.setCharStream((org.antlr.runtime.CharStream)var21);
    org.databene.jdbacl.sql.parser.SQLLexer var25 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var27 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var27.release((-1));
    boolean var31 = var25.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var27, 0);
    var18.setCharStream((org.antlr.runtime.CharStream)var27);
    var0.matchAny((org.antlr.runtime.IntStream)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.match(4);
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test5");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    org.databene.jdbacl.model.DBUniqueConstraint var30 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var16, "select nextval('')", false, var24);
    org.databene.jdbacl.model.DBCatalog var31 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var32 = var31.getName();
    java.util.List var33 = var31.getComponents();
    boolean var34 = var30.isIdentical((org.databene.jdbacl.model.DBObject)var31);
    boolean var35 = var12.equals((java.lang.Object)var34);
    var12.setWhenClause("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test6");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    java.lang.String[] var14 = new java.lang.String[] { ""};
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String var19 = org.databene.jdbacl.SQLUtil.join("", "", var14, "hi!", "10", var18);
    var0.setJars(var18);
    java.lang.String var21 = var0.getDefaultDatabase();
    java.lang.String var22 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi! as 10 on . = 10."+ "'", var19.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test7");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mTABLE_DETAILS();
    int var16 = var0.getRuleMemoizationCacheSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__76();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test8");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var3 = var0.renderSetSequenceValue(".", 0L);
    boolean var6 = var0.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    java.lang.String var8 = var0.renderDropSequence("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var10 = var0.isDeterministicFKName("CREATE GENERATOR ");
    org.databene.jdbacl.JDBCConnectData var17 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var18 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var17);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var19 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var17);
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    org.databene.jdbacl.model.Database var23 = var21.getDatabase();
    java.lang.String var24 = var21.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var26 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var28 = var26.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var26.formatValue((java.lang.Object)var29);
    var29.setName("'hi!'");
    java.util.List var34 = var29.getSchemas();
    org.databene.jdbacl.model.DBSchema var35 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var29);
    var21.removeSchema(var35);
    java.util.List var38 = var35.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var35);
    org.databene.jdbacl.model.jdbc.LazyTable var42 = new org.databene.jdbacl.model.jdbc.LazyTable(var19, var35, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var43 = var42.toString();
    org.databene.jdbacl.model.DBCatalog var44 = var42.getCatalog();
    java.lang.String var45 = var42.getDoc();
    org.databene.jdbacl.model.DBSchema var46 = var42.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable();
    var48.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var52 = var51.getForeignKeyConstraints();
    var48.addReferrer((org.databene.jdbacl.model.DBTable)var51);
    org.databene.jdbacl.model.DBDataType var56 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var57 = var56.isAlpha();
    java.lang.String var58 = var56.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var59 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var62 = var59.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var64 = var59.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var65 = var56.equals((java.lang.Object)var64);
    org.databene.jdbacl.model.DefaultDBColumn var68 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var51, var56, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.util.List var69 = var68.getUkConstraints();
    java.lang.String var70 = var0.insert((org.databene.jdbacl.model.DBTable)var42, var69);
    boolean var71 = var0.isSequenceBoundarySupported();
    org.databene.jdbacl.model.DBSequence var75 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var75.setName("10");
    java.math.BigInteger var78 = var75.getIncrement();
    java.math.BigInteger var79 = var75.getIncrement();
    org.databene.jdbacl.model.DBSequence var83 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var84 = var83.dropDDL();
    java.math.BigInteger var85 = var83.getMinValueIfNotDefault();
    java.math.BigInteger var86 = var83.getLastNumber();
    var75.setStart(var86);
    java.lang.Boolean var88 = var75.isOrder();
    java.lang.String var89 = var0.renderCreateSequence(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR . TO -1"+ "'", var3.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var8.equals("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var43.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var45.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "DROP SEQUENCE "+ "'", var58.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var64.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "insert into \"'hi!'\".\"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE \" () values ()"+ "'", var70.equals("insert into \"'hi!'\".\"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE \" () values ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "drop sequence "+ "'", var84.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "CREATE GENERATOR 10; SET GENERATOR 10 TO -1;"+ "'", var89.equals("CREATE GENERATOR 10; SET GENERATOR 10 TO -1;"));

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test9");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__65();
    var10.mT__130();
    var10.mT__125();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test10");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    var25.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var29 = var28.getForeignKeyConstraints();
    var25.addReferrer((org.databene.jdbacl.model.DBTable)var28);
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.join("", "", var36, "hi!", "10", var40);
    org.databene.jdbacl.model.DBUniqueConstraint var42 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var28, "select nextval('')", false, var36);
    var28.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var47 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var47);
    org.databene.jdbacl.model.DBUniqueConstraint var49 = var28.getUniqueConstraint(var47);
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("", "", var56, "hi!", "10", var60);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var56);
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "CREATE SEQUENCE 10", var47, "select next value for SET GENERATOR . TO -1", "select next value for SET GENERATOR . TO -1", var56);
    org.databene.jdbacl.model.DefaultDBTable var65 = new org.databene.jdbacl.model.DefaultDBTable();
    var65.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var69 = var68.getForeignKeyConstraints();
    var65.addReferrer((org.databene.jdbacl.model.DBTable)var68);
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String[] var80 = new java.lang.String[] { ""};
    java.lang.String var81 = org.databene.jdbacl.SQLUtil.join("", "", var76, "hi!", "10", var80);
    org.databene.jdbacl.model.DBUniqueConstraint var82 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var68, "select nextval('')", false, var76);
    var68.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var87 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var88 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var87);
    org.databene.jdbacl.model.DBUniqueConstraint var89 = var68.getUniqueConstraint(var87);
    org.databene.jdbacl.identity.UniqueKeyIdentity var90 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var87);
    var21.setCellValues(var47, (java.lang.Object[])var87);
    java.lang.String var92 = org.databene.jdbacl.SQLUtil.renderColumnNames(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var48.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "."+ "'", var62.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var63.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi! as 10 on . = 10."+ "'", var81.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var88.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(DROP SEQUENCE )"+ "'", var92.equals("(DROP SEQUENCE )"));

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test11");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getMinValueIfNotDefault();
    java.math.BigInteger var6 = var3.getStartIfNotDefault();
    java.lang.Boolean var7 = var3.isOrder();
    java.lang.Boolean var8 = var3.isOrder();
    var3.setOrder((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test12");


    java.lang.String var1 = org.databene.jdbacl.dialect.H2Util.getInMemoryURL("select gen_id(CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL, 1) from RDB$DATABASE;");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "jdbc:h2:mem:select gen_id(CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL, 1) from RDB$DATABASE;"+ "'", var1.equals("jdbc:h2:mem:select gen_id(CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL, 1) from RDB$DATABASE;"));

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test13");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    java.lang.Object var4 = var0.get("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    java.lang.Object var6 = var0.get("alter sequence drop sequence 10 restart with 0");
    var0.remove("drop generator CREATE GENERATOR 10.NOT drop generator sequence ~ 'hi!'-identity-CONSTRAINT \"hi! identity by primary key\" ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test14");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    java.lang.String var80 = var79.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1: class org.databene.jdbacl.model.FKChangeRule"+ "'", var80.equals("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1: class org.databene.jdbacl.model.FKChangeRule"));

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test15");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var7 = var6.getTables();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var6);
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var13 = var12.getForeignKeyConstraints();
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var12);
    var6.addTable((org.databene.jdbacl.model.DBTable)var12);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    java.lang.String var26 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var20);
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var30 = var29.getTables();
    org.databene.jdbacl.model.TableContainer var31 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var29);
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var29.addTable((org.databene.jdbacl.model.DBTable)var35);
    java.lang.String[] var41 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var41);
    org.databene.jdbacl.model.DBForeignKeyConstraint var43 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var12, var20, (org.databene.jdbacl.model.DBTable)var35, var41);
    java.lang.String[] var44 = var43.getRefereeColumnNames();
    java.lang.String var45 = var43.toString();
    java.lang.String var46 = var43.toString();
    var1.removeForeignKeyConstraint(var43);
    java.lang.String[] var54 = new java.lang.String[] { ""};
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String var59 = org.databene.jdbacl.SQLUtil.join("", "", var54, "hi!", "10", var58);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var54);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var61 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var1, "drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1", false, var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "."+ "'", var26.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var42.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var45.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var46.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi! as 10 on . = 10."+ "'", var59.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")."+ "'", var60.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")."));

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test16");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var3 = var1.isDeterministicUKName("EQUEN");
    boolean var5 = var1.isDeterministicFKName("DROP SEQUENCE ");
    boolean var7 = var1.isDeterministicPKName("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    boolean var10 = var1.isDefaultSchema("Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE .VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "(NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test17");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var9 = var0.renderFetchSequenceValue("");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", "hi! identity by primary key", "jdbc:h2:mem:select next value for 10");
    java.lang.String var14 = var0.renderCreateSequence(var13);
    java.lang.String var16 = var0.renderFetchSequenceValue("'((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"''hi!''\")'");
    boolean var18 = var0.isDeterministicPKName("jdbc:hsqldb:mem:CONSTRAINT \"drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.\" UNIQUE (select next value for 10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('')"+ "'", var9.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var14.equals("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "select nextval(''((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"''hi!''\")'')"+ "'", var16.equals("select nextval(''((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"''hi!''\")'')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test18");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var5 = var0.supportsRegex();
    boolean var6 = var0.isSequenceBoundarySupported();
    boolean var7 = var0.supportsRegex();
    boolean var10 = var0.isDefaultSchema("alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10 NOT REGEXP 'sequence'", "left join call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'') as call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'') on NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE .DROP SEQUENCE  = call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'').select next value for 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test19");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "Identity definition by unique key: select next value for 10", "()");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var29 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var9, (-1), "hi! identity by primary key");
    boolean var30 = var29.isNullable();
    var29.setNullable(true);
    boolean var33 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var29);
    var29.setFractionDigits((java.lang.Integer)0);
    java.lang.Integer var36 = var29.getFractionDigits();
    boolean var37 = var29.isNullable();
    boolean var38 = var29.isVersionColumn();
    java.lang.String var39 = var29.getDefaultValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 0+ "'", var36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test20");


    org.databene.jdbacl.sql.parser.SQLParser.unique_constraint_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.unique_constraint_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test21");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicPKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL");
    java.lang.String var5 = var0.renderFetchSequenceValue("CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence).");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "select gen_id(CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence)., 1) from RDB$DATABASE;"+ "'", var5.equals("select gen_id(CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence)., 1) from RDB$DATABASE;"));

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test22");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getTriggerBody();
    var12.setColumnName("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    java.lang.String var19 = var12.getTriggerBody();
    var12.setColumnName("SELECT * FROM VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" WHERE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test23");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var4);
    var4.setName("table as NOT REGEXP_MATCHES(sequence, '') on select next value for (\"sequence\"). = NOT REGEXP_MATCHES(sequence, '').DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test24");


    org.databene.jdbacl.model.DBCatalog var3 = new org.databene.jdbacl.model.DBCatalog("drop generator DROP SEQUENCE catalog RESTRICT");
    org.databene.jdbacl.model.DBSchema var4 = new org.databene.jdbacl.model.DBSchema("select null.nextval from dual NOT REGEXP 'drop generator (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")'", var3);
    org.databene.jdbacl.model.DBTrigger var5 = new org.databene.jdbacl.model.DBTrigger("call next value for DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT", var4);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test25");


    java.lang.String var2 = org.databene.jdbacl.SQLUtil.normalize("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\"", true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""+ "'", var2.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\""));

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test26");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    java.util.Set var6 = var2.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    boolean var11 = var9.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var14 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var2, var9, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var17 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var18 = var17.getTables();
    org.databene.jdbacl.model.TableContainer var19 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var17);
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    var20.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var24 = var23.getForeignKeyConstraints();
    var20.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    var17.addTable((org.databene.jdbacl.model.DBTable)var23);
    var14.setTable((org.databene.jdbacl.model.DBTable)var23);
    java.util.Collection var28 = var23.getReferrers();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'", (org.databene.jdbacl.model.CompositeDBObject)var23);
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    var33.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var37 = var36.getForeignKeyConstraints();
    var33.addReferrer((org.databene.jdbacl.model.DBTable)var36);
    java.lang.String[] var44 = new java.lang.String[] { ""};
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.join("", "", var44, "hi!", "10", var48);
    org.databene.jdbacl.model.DBUniqueConstraint var50 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var36, "select nextval('')", false, var44);
    var36.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var55 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var55);
    org.databene.jdbacl.model.DBUniqueConstraint var57 = var36.getUniqueConstraint(var55);
    java.lang.String[] var64 = new java.lang.String[] { ""};
    java.lang.String[] var68 = new java.lang.String[] { ""};
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.join("", "", var64, "hi!", "10", var68);
    java.lang.String var70 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var64);
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.join("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "CREATE SEQUENCE 10", var55, "select next value for SET GENERATOR . TO -1", "select next value for SET GENERATOR . TO -1", var64);
    java.lang.String[] var75 = new java.lang.String[] { "NOT drop generator sequence ~ 'hi!'"};
    java.lang.String var76 = org.databene.jdbacl.SQLUtil.innerJoin("CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.", var64, "drop generator sequence", "catalog", var75);
    org.databene.jdbacl.model.DBUniqueConstraint var77 = var23.getUniqueConstraint(var75);
    java.lang.String var78 = org.databene.jdbacl.SQLUtil.renderColumnNames(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi! as 10 on . = 10."+ "'", var49.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var56.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi! as 10 on . = 10."+ "'", var69.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "."+ "'", var70.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var71.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'"+ "'", var76.equals("drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(NOT drop generator sequence ~ 'hi!')"+ "'", var78.equals("(NOT drop generator sequence ~ 'hi!')"));

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test27");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.FKChangeRule var1 = org.databene.jdbacl.model.FKChangeRule.valueOf("jdbc:hsqldb:mem:select next value for CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test28");


    org.databene.jdbacl.identity.NkPkQueryIdentity var2 = new org.databene.jdbacl.identity.NkPkQueryIdentity("DROP SEQUENCE -1 RESTRICT", "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    java.lang.String var3 = var2.getDescription();
    var2.setNkPkQuery("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'");
    java.lang.String var6 = var2.getTableName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var3.equals("Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "DROP SEQUENCE -1 RESTRICT"+ "'", var6.equals("DROP SEQUENCE -1 RESTRICT"));

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test29");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("container select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'", "call next value for select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'", "select next value for SET GENERATOR.TO - 1", "REGEXP_LIKE(\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10', 'JDBCDBImporter')", "call next value for 'O'", "select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')", "select SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'.nextval from dual", false);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test30");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    java.util.Set var6 = var2.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    boolean var11 = var9.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var14 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var2, var9, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var17 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var18 = var17.isAlpha();
    java.lang.String var19 = var17.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var20 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var23 = var20.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var25 = var20.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var26 = var17.equals((java.lang.Object)var25);
    boolean var27 = var17.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var28 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var2, var17);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    var29.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var33 = var32.getForeignKeyConstraints();
    var29.addReferrer((org.databene.jdbacl.model.DBTable)var32);
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String[] var44 = new java.lang.String[] { ""};
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.join("", "", var40, "hi!", "10", var44);
    org.databene.jdbacl.model.DBUniqueConstraint var46 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var32, "select nextval('')", false, var40);
    java.lang.String var47 = var46.toString();
    boolean var48 = var46.isNameDeterministic();
    var46.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    var2.addUniqueConstraint(var46);
    org.databene.jdbacl.model.DBSchema var52 = var2.getSchema();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "DROP SEQUENCE "+ "'", var19.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var25.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi! as 10 on . = 10."+ "'", var45.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var47.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test31");


    java.lang.String var2 = org.databene.jdbacl.SQLUtil.normalize("alter sequence drop generator CREATE SEQUENCE hi ! as 10 on.= 10..10 AS BIGINT restart with 0", false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "alter sequence drop generator CREATE SEQUENCE hi ! as 10 on.= 10..10 AS BIGINT restart with 0"+ "'", var2.equals("alter sequence drop generator CREATE SEQUENCE hi ! as 10 on.= 10..10 AS BIGINT restart with 0"));

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test32");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicFKName("NaturalPkIdentity(hi!)");
    boolean var3 = var0.supportsRegex();
    boolean var6 = var0.isDefaultSchema("\"'hi!'\"", "select nextval('')");
    boolean var9 = var0.isDefaultCatalog("CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence)", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var11 = var0.isDeterministicIndexName("NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test33");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    boolean var92 = var90.isUnique();
    boolean var93 = var90.isUnique();
    java.lang.String[] var94 = var90.getColumnNames();
    java.lang.String[] var95 = var90.getColumnNames();
    java.lang.String var96 = var90.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "SET GENERATOR catalog TO -2 ()"+ "'", var96.equals("SET GENERATOR catalog TO -2 ()"));

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test34");


    org.databene.jdbacl.identity.NkPkQueryIdentity var2 = new org.databene.jdbacl.identity.NkPkQueryIdentity("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:hsqldb:mem:select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL");

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test35");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    var10.mSLASH();
    var10.mCHAR();
    var10.mLTGT();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test36");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    java.lang.String[] var14 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var15 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var14);
    var10.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var15, "NOT REGEXP_MATCHES(sequence, '')");
    java.lang.String var18 = var15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "UniqueKeyIdentity(CREATE SEQUENCE 10)"+ "'", var18.equals("UniqueKeyIdentity(CREATE SEQUENCE 10)"));

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test37");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setCache((java.lang.Long)100L);
    java.lang.String var12 = var9.getObjectType();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    java.lang.String var14 = var9.getSchemaName();
    java.lang.Boolean var15 = var9.isOrder();
    java.lang.Boolean var16 = var9.isCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi! as 10 on . = 10."+ "'", var14.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test38");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var4 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", 100);
    org.databene.jdbacl.SQLScriptException var6 = var1.withUri("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.SQLScriptException var8 = var1.withUri("drop generator left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    org.databene.jdbacl.SQLScriptException var11 = var8.withUri("CREATE GENERATOR 'd'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test39");


    boolean var1 = org.databene.jdbacl.SQLUtil.isQuery("alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10 NOT REGEXP 'sequence'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test40");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var5 = var0.supportsRegex();
    java.lang.String var7 = var0.renderCreateSequence("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    java.lang.String var11 = var0.regexQuery("No identity defined for table NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')", false, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (32,-1) NULL");
    boolean var13 = var0.isDeterministicPKName("NOT REGEXP_LIKE(DROP SEQUENCE (100), 'CONSTRAINT \"select nextval('')\" ')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "CREATE GENERATOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var7.equals("CREATE GENERATOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "No identity defined for table NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.') SIMILAR TO 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (32,-1) NULL'"+ "'", var11.equals("No identity defined for table NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.') SIMILAR TO 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (32,-1) NULL'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test41");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var32 = var31.getCatalog();
    org.databene.jdbacl.model.DBCatalog var33 = var31.getCatalog();
    org.databene.jdbacl.model.DBTreeModel var34 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var31);
    org.databene.jdbacl.model.DBSequence var38 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var38.setCache((java.lang.Long)100L);
    java.lang.String var41 = var38.getObjectType();
    java.lang.String var42 = var38.dropDDL();
    java.math.BigInteger var43 = var38.getStartIfNotDefault();
    org.databene.jdbacl.model.DBObject var44 = var34.getParent((org.databene.jdbacl.model.DBObject)var38);
    org.databene.jdbacl.dialect.DerbyDialect var46 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var48 = var46.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var49 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var50 = var49.getName();
    java.lang.String var51 = var46.formatValue((java.lang.Object)var49);
    var49.setName("'hi!'");
    java.util.List var54 = var49.getSchemas();
    org.databene.jdbacl.model.DBSchema var55 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var49);
    org.databene.jdbacl.dialect.DerbyDialect var58 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var60 = var58.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var61 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var62 = var61.getName();
    java.lang.String var63 = var58.formatValue((java.lang.Object)var61);
    var61.setName("'hi!'");
    java.util.List var66 = var61.getSchemas();
    org.databene.jdbacl.model.DBSchema var67 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var61);
    org.databene.jdbacl.model.DBTrigger var68 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var67);
    var55.addTrigger(var68);
    org.databene.jdbacl.model.DBCatalog var70 = new org.databene.jdbacl.model.DBCatalog();
    var55.setCatalog(var70);
    org.databene.jdbacl.model.DBSchema var73 = new org.databene.jdbacl.model.DBSchema("drop sequence 10");
    org.databene.jdbacl.model.DBSequence var77 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var78 = var77.dropDDL();
    java.math.BigInteger var79 = var77.getMinValueIfNotDefault();
    java.math.BigInteger var80 = var77.getIncrementIfNotDefault();
    var73.addSequence(var77);
    boolean var82 = var55.isIdentical((org.databene.jdbacl.model.DBObject)var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBObject var84 = var34.getChild((org.databene.jdbacl.model.DBObject)var77, 2);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "sequence"+ "'", var41.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "drop sequence "+ "'", var42.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "drop sequence "+ "'", var78.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test42");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    var10.mCHAR();
    var10.mQUOTED_NAME();
    var10.mT__123();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test43");


    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var6 = var5.getTables();
    org.databene.jdbacl.model.TableContainer var7 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var5);
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    var8.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var12 = var11.getForeignKeyConstraints();
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var11);
    var5.addTable((org.databene.jdbacl.model.DBTable)var11);
    java.lang.String[] var19 = new java.lang.String[] { ""};
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.join("", "", var19, "hi!", "10", var23);
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var19);
    org.databene.jdbacl.model.TableContainer var28 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var29 = var28.getTables();
    org.databene.jdbacl.model.TableContainer var30 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var28);
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable();
    var31.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var35 = var34.getForeignKeyConstraints();
    var31.addReferrer((org.databene.jdbacl.model.DBTable)var34);
    var28.addTable((org.databene.jdbacl.model.DBTable)var34);
    java.lang.String[] var40 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var40);
    org.databene.jdbacl.model.DBForeignKeyConstraint var42 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var11, var19, (org.databene.jdbacl.model.DBTable)var34, var40);
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    var44.setDoc(".");
    java.util.Set var48 = var44.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var51 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var52 = var51.isAlpha();
    boolean var53 = var51.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var56 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var44, var51, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var58 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT \"select nextval('')\" ", (org.databene.jdbacl.model.DBTable)var11, var51, (java.lang.Integer)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBColumn var60 = var11.getColumn("select next value for select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'.DROP SEQUENCE ");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi! as 10 on . = 10."+ "'", var24.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "."+ "'", var25.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var41.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test44");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    java.lang.String var15 = var9.getSourceName();
    org.databene.jdbacl.sql.parser.SQLLexer var16 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var9);
    int var18 = var9.LT(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 80);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test45");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String var18 = var17.toString();
    boolean var19 = var17.isNameDeterministic();
    var17.addColumnName("NaturalPkIdentity(hi!)");
    java.lang.String var22 = var17.toString();
    java.lang.String[] var23 = var17.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var18.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))"+ "'", var22.equals("CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test46");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String var18 = var17.toString();
    boolean var19 = var17.isNameDeterministic();
    var17.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var30 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var30.setSchemaName("alter sequence hi! restart with 1");
    boolean var33 = var17.equals((java.lang.Object)var30);
    var30.setImportingUKs(true);
    java.lang.String var36 = var30.getDatabaseProductName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var18.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test47");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    java.util.List var20 = var17.getComponents();
    var12.setCatalog(var17);
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var25.setCache((java.lang.Long)100L);
    java.lang.String var28 = var25.getObjectType();
    java.math.BigInteger var29 = var25.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var33 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var33.setName("10");
    java.math.BigInteger var36 = var33.getIncrement();
    java.math.BigInteger var37 = var33.getIncrement();
    var25.setLastNumber(var37);
    var12.addSequence(var25);
    org.databene.jdbacl.model.DBPackage var40 = new org.databene.jdbacl.model.DBPackage("alter sequence call next value for 'hi!' restart with 100", var12);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    java.util.Set var46 = var42.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isAlpha();
    boolean var51 = var49.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var42, var49, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var58 = var57.getTables();
    org.databene.jdbacl.model.TableContainer var59 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var57);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    var60.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var64 = var63.getForeignKeyConstraints();
    var60.addReferrer((org.databene.jdbacl.model.DBTable)var63);
    var57.addTable((org.databene.jdbacl.model.DBTable)var63);
    var54.setTable((org.databene.jdbacl.model.DBTable)var63);
    boolean var68 = var40.isIdentical((org.databene.jdbacl.model.DBObject)var63);
    java.lang.String var69 = var40.getSubObjectName();
    var40.setObjectId("alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test48");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    java.lang.String var11 = var0.getDefaultPort();
    java.lang.String var12 = var0.getDefaultUser();
    java.lang.String var13 = var0.getName();
    java.lang.String[] var14 = var0.getJars();
    java.lang.String var15 = var0.getDownloadUrl();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test49");


    java.lang.Boolean var1 = org.databene.jdbacl.SQLUtil.mutatesDataOrStructure("drop sequence select gen_id('d', 1) from RDB$DATABASE;: class org.databene.jdbacl.model.FKChangeRule");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test50");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var3 = var0.isSequenceSupported();
    boolean var5 = var0.isDeterministicIndexName("call next value for null[]");
    boolean var7 = var0.isDeterministicIndexName("No identity defined for table alter sequence drop generator sequence restart with 100");
    java.lang.String var10 = var0.setSequenceValue("jdbc:h2:mem:NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ", 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence jdbc:h2:mem:NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  restart with 0"+ "'", var10.equals("alter sequence jdbc:h2:mem:NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  restart with 0"));

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test51");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getTriggerBody();
    var12.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    java.lang.String var19 = var12.getTriggerType();
    org.databene.jdbacl.dialect.PostgreSQLDialect var20 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var23 = var20.isDefaultCatalog("", "");
    java.lang.String var25 = var20.renderDropSequence("");
    boolean var27 = var20.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var29 = var20.renderFetchSequenceValue("");
    java.lang.String var33 = var20.regexQuery("drop generator sequence", true, "hi!");
    boolean var35 = var20.isDeterministicPKName("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var37 = var20.isDeterministicFKName("SET GENERATOR . TO -1");
    boolean var39 = var20.isDeterministicPKName("DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT");
    boolean var40 = var20.supportsRegex();
    org.databene.jdbacl.dialect.Derby10_6Dialect var41 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var44 = var41.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var46 = var41.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var50 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var50.setName("10");
    java.math.BigInteger var53 = var50.getIncrement();
    java.lang.String var54 = var41.renderCreateSequence(var50);
    org.databene.jdbacl.model.DBSequence var58 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var59 = var58.dropDDL();
    java.math.BigInteger var60 = var58.getMinValueIfNotDefault();
    java.lang.String var61 = var58.getSchemaName();
    org.databene.jdbacl.model.DBSequence var65 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var66 = var65.dropDDL();
    java.math.BigInteger var67 = var65.getMinValueIfNotDefault();
    java.lang.String var68 = var65.getSchemaName();
    java.lang.Boolean var69 = var65.isOrder();
    org.databene.jdbacl.model.DBSequence var73 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var74 = var73.dropDDL();
    java.math.BigInteger var75 = var73.getMinValueIfNotDefault();
    java.math.BigInteger var76 = var73.getLastNumber();
    var65.setIncrement(var76);
    var58.setMaxValue(var76);
    java.lang.String var79 = var41.renderCreateSequence(var58);
    org.databene.jdbacl.model.DBSequence var83 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var83.setName("10");
    java.math.BigInteger var86 = var83.getIncrement();
    org.databene.jdbacl.model.DBSequence var90 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var90.setName("10");
    java.math.BigInteger var93 = var90.getIncrement();
    var83.setMaxValue(var93);
    var58.setStart(var93);
    java.math.BigInteger var96 = var58.getLastNumber();
    java.lang.String var97 = var20.renderCreateSequence(var58);
    boolean var98 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var58);
    java.math.BigInteger var99 = var58.getStartIfNotDefault();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "drop sequence "+ "'", var25.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "select nextval('')"+ "'", var29.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "NOT drop generator sequence ~ 'hi!'"+ "'", var33.equals("NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var46.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var54.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "drop sequence "+ "'", var59.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "drop sequence "+ "'", var66.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "drop sequence "+ "'", var74.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0"+ "'", var79.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "CREATE SEQUENCE  MAXVALUE 0"+ "'", var97.equals("CREATE SEQUENCE  MAXVALUE 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test52");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var5 = org.databene.jdbacl.DBUtil.connect("VALUES (NEXT VALUE FOR call next value for 'hi!')", "call next value for alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69) restart with 10", "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE", "DROP SEQUENCE CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")' RESTRICT", false);
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test53");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var5 = org.databene.jdbacl.DBUtil.connect("firebird", "NOT REGEXP_MATCHES(DROP SEQUENCE EQUEN RESTRICT, 'DROP SEQUENCE CREATE GENERATOR  RESTRICT')", "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", "drop generator ()", true);
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test54");


    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    var37.addTable((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.join("", "", var51, "hi!", "10", var55);
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var51);
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var61 = var60.getTables();
    org.databene.jdbacl.model.TableContainer var62 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var60);
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    var63.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var67 = var66.getForeignKeyConstraints();
    var63.addReferrer((org.databene.jdbacl.model.DBTable)var66);
    var60.addTable((org.databene.jdbacl.model.DBTable)var66);
    java.lang.String[] var72 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var72);
    org.databene.jdbacl.model.DBForeignKeyConstraint var74 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var43, var51, (org.databene.jdbacl.model.DBTable)var66, var72);
    org.databene.jdbacl.model.DBTable var75 = var74.getRefereeTable();
    var8.addForeignKey(var74);
    org.databene.jdbacl.model.FKChangeRule var77 = var74.getDeleteRule();
    java.lang.String var78 = var77.toString();
    java.lang.String var79 = var77.toString();
    java.lang.Class var80 = var77.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var81 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var80);
    org.databene.jdbacl.ColumnInfo var82 = new org.databene.jdbacl.ColumnInfo("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ", 3, var80);
    java.lang.String var83 = var82.toString();
    java.lang.String var84 = var82.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi! as 10 on . = 10."+ "'", var56.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "."+ "'", var57.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var73.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "NO_ACTION"+ "'", var78.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NO_ACTION"+ "'", var79.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE : class org.databene.jdbacl.model.FKChangeRule"+ "'", var83.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE : class org.databene.jdbacl.model.FKChangeRule"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE : class org.databene.jdbacl.model.FKChangeRule"+ "'", var84.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE : class org.databene.jdbacl.model.FKChangeRule"));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test55");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    var8.setExcludeTables("(\"sequence\")");
    boolean var34 = var8.isImportingIndexes();
    var8.setImportingIndexes(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test56");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    boolean var5 = var0.isDeterministicPKName("CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var7 = var0.isDeterministicIndexName("select Identity definition by unique key: select next value for 10.nextval from dual");
    boolean var9 = var0.isDeterministicUKName("NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')");
    java.lang.String var10 = var0.getSystem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "db2"+ "'", var10.equals("db2"));

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test57");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    org.databene.jdbacl.model.DBSchema var23 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var17);
    org.databene.jdbacl.model.DBTrigger var24 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var23);
    var11.addTrigger(var24);
    org.databene.jdbacl.model.DBTrigger var26 = new org.databene.jdbacl.model.DBTrigger("SELECT * FROM null WHERE  = ''", var11);
    org.databene.jdbacl.model.DBSequence var32 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var32.setName("10");
    java.math.BigInteger var35 = var32.getIncrement();
    java.math.BigInteger var36 = var32.getIncrement();
    org.databene.jdbacl.model.DBSequence var40 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var41 = var40.dropDDL();
    java.math.BigInteger var42 = var40.getMinValueIfNotDefault();
    java.math.BigInteger var43 = var40.getLastNumber();
    var32.setStart(var43);
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.substituteMarkers("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')", (java.lang.Object)var32);
    boolean var46 = var26.isIdentical((org.databene.jdbacl.model.DBObject)var32);
    java.lang.String var47 = var26.getTableName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "drop sequence "+ "'", var41.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var45.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test58");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    boolean var5 = var0.isDefaultCatalog("CREATE SEQUENCE 10", "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ");
    boolean var7 = var0.isDeterministicUKName("select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;");
    boolean var8 = var0.isSequenceBoundarySupported();
    java.lang.String var10 = var0.renderCreateSequence("'d'");
    boolean var12 = var0.isDeterministicIndexName("DROP SEQUENCE (10,69)");
    boolean var14 = var0.isDeterministicUKName("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with 10 restart with 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "CREATE GENERATOR 'd'"+ "'", var10.equals("CREATE GENERATOR 'd'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test59");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var32 = var31.getCatalog();
    java.lang.String var33 = var31.getDoc();
    java.lang.String var34 = var31.toString();
    java.lang.String var35 = var31.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var33.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var34.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var35.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test60");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var1 = var0.supportsRegex();
    java.lang.String var5 = var0.regexQuery("select next value for SET GENERATOR.TO - 1", true, "hi!");
    boolean var8 = var0.isDefaultCatalog("select SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'.nextval from dual", "drop generator drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"+ "'", var5.equals("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test61");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    var11.setSubNkPkQuery("null");
    java.lang.String var14 = var11.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Sub identity of ():\nnull"+ "'", var14.equals("Sub identity of ():\nnull"));

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test62");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var1 = var0.getForeignKeyConstraints();
    var0.setDoc("drop sequence ");
    var0.setDoc("catalog");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    var8.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var12 = var11.getForeignKeyConstraints();
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var11);
    java.lang.String[] var19 = new java.lang.String[] { ""};
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.join("", "", var19, "hi!", "10", var23);
    org.databene.jdbacl.model.DBUniqueConstraint var25 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var11, "select nextval('')", false, var19);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var26 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var0, "REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')", false, var19);
    java.lang.String var27 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var26);
    org.databene.jdbacl.model.TableContainer var30 = new org.databene.jdbacl.model.TableContainer("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable();
    var31.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var35 = var34.getForeignKeyConstraints();
    var31.addReferrer((org.databene.jdbacl.model.DBTable)var34);
    java.lang.String[] var42 = new java.lang.String[] { ""};
    java.lang.String[] var46 = new java.lang.String[] { ""};
    java.lang.String var47 = org.databene.jdbacl.SQLUtil.join("", "", var42, "hi!", "10", var46);
    org.databene.jdbacl.model.DBUniqueConstraint var48 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var34, "select nextval('')", false, var42);
    var34.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var53 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var53);
    org.databene.jdbacl.model.DBUniqueConstraint var55 = var34.getUniqueConstraint(var53);
    var30.addTable((org.databene.jdbacl.model.DBTable)var34);
    org.databene.jdbacl.model.DBDataType var59 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var60 = var59.isAlpha();
    java.lang.String var61 = var59.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var62 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var65 = var62.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var67 = var62.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var68 = var59.equals((java.lang.Object)var67);
    org.databene.jdbacl.model.DefaultDBColumn var69 = new org.databene.jdbacl.model.DefaultDBColumn("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '", (org.databene.jdbacl.model.DBTable)var34, var59);
    boolean var70 = var26.isIdentical((org.databene.jdbacl.model.DBObject)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi! as 10 on . = 10."+ "'", var24.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "CONSTRAINT \"REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')\" "+ "'", var27.equals("CONSTRAINT \"REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')\" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi! as 10 on . = 10."+ "'", var47.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var54.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "DROP SEQUENCE "+ "'", var61.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var67.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test63");


    org.databene.jdbacl.SQLScriptException var2 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var4 = var2.withUri("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.SQLScriptException var6 = var4.withUri("SET GENERATOR . TO -1");
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var7 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE ", (java.lang.Throwable)var6);
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var8 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError((java.lang.Throwable)var7);
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var9 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError((java.lang.Throwable)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test64");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var27.setCache((java.lang.Long)100L);
    java.lang.String var30 = var27.getObjectType();
    java.math.BigInteger var31 = var27.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setName("10");
    java.math.BigInteger var38 = var35.getIncrement();
    java.math.BigInteger var39 = var35.getIncrement();
    var27.setLastNumber(var39);
    var27.setOrder((java.lang.Boolean)false);
    var21.setCellValue("alter sequence  restart with -1", (java.lang.Object)var27);
    org.databene.jdbacl.model.TableContainer var48 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var49 = var48.getTables();
    org.databene.jdbacl.model.TableContainer var50 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    var48.addTable((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    org.databene.jdbacl.model.TableContainer var71 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var72 = var71.getTables();
    org.databene.jdbacl.model.TableContainer var73 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var71);
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    var74.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var77 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var78 = var77.getForeignKeyConstraints();
    var74.addReferrer((org.databene.jdbacl.model.DBTable)var77);
    var71.addTable((org.databene.jdbacl.model.DBTable)var77);
    java.lang.String[] var83 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var83);
    org.databene.jdbacl.model.DBForeignKeyConstraint var85 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var54, var62, (org.databene.jdbacl.model.DBTable)var77, var83);
    boolean var86 = var85.isNameDeterministic();
    java.lang.Object[] var87 = var21.getFKComponents(var85);
    java.lang.String var88 = var21.toString();
    java.util.Map var89 = var21.getCells();
    org.databene.jdbacl.model.DBTable var90 = var21.getTable();
    java.lang.Object var91 = var21.getPKValue();
    java.util.Map var92 = var21.getCells();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "."+ "'", var68.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "null[]"+ "'", var88.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test65");


    org.databene.jdbacl.sql.parser.SQLParser.literal_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.literal_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test66");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIS();
    var10.matchRange(79, (-1));
    var10.mINVOCATION();
    var10.mT__71();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test67");


    java.lang.String var1 = org.databene.jdbacl.SQLUtil.removeComments("drop sequence select CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\".nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "drop sequence select CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\".nextval from dual"+ "'", var1.equals("drop sequence select CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\".nextval from dual"));

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test68");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var9 = var0.isDeterministicFKName("jdbc:h2:mem:select next value for 10");
    java.lang.String var13 = var0.regexQuery("drop sequence ", true, "alter sequence  restart with -1");
    boolean var15 = var0.isDeterministicUKName("select next value for SET GENERATOR . TO -1");
    java.lang.String var17 = var0.renderFetchSequenceValue("select next value for SET GENERATOR . TO -1");
    boolean var18 = var0.supportsRegex();
    boolean var21 = var0.isDefaultCatalog("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "SELECT * FROM VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" WHERE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop sequence  ~ 'alter sequence  restart with -1'"+ "'", var13.equals("NOT drop sequence  ~ 'alter sequence  restart with -1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select nextval('select next value for SET GENERATOR . TO -1')"+ "'", var17.equals("select nextval('select next value for SET GENERATOR . TO -1')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test69");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("NOT REGEXP_MATCHES(hi! as 10 on . = 10., 'jdbc:hsqldb:mem:call next value for 'hi!' identity by primary key')", "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ().");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test70");


    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var5 = var4.dropDDL();
    java.math.BigInteger var6 = var4.getIncrementIfNotDefault();
    java.math.BigInteger var7 = var4.getMinValue();
    java.math.BigInteger var8 = var4.getMinValue();
    java.lang.Boolean var9 = var4.isOrder();
    org.databene.jdbacl.model.TableContainer var15 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var16 = var15.getTables();
    org.databene.jdbacl.model.TableContainer var17 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var15);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    var15.addTable((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { ""};
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String var34 = org.databene.jdbacl.SQLUtil.join("", "", var29, "hi!", "10", var33);
    java.lang.String var35 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var29);
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var39 = var38.getTables();
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var45 = var44.getForeignKeyConstraints();
    var41.addReferrer((org.databene.jdbacl.model.DBTable)var44);
    var38.addTable((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var50 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var50);
    org.databene.jdbacl.model.DBForeignKeyConstraint var52 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var21, var29, (org.databene.jdbacl.model.DBTable)var44, var50);
    java.lang.String[] var53 = var52.getRefereeColumnNames();
    java.lang.String[] var54 = var52.getForeignKeyColumnNames();
    org.databene.jdbacl.identity.UniqueKeyIdentity var55 = new org.databene.jdbacl.identity.UniqueKeyIdentity("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'", var54);
    boolean var56 = var4.equals((java.lang.Object)var54);
    org.databene.jdbacl.identity.IdentityProvider var57 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.NaturalPkIdentity var59 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var60 = var59.getName();
    var57.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var59, "SET GENERATOR . TO -1");
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var63 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("jdbc:hsqldb:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '", var54, var57);
    org.databene.jdbacl.dialect.DerbyDialect var67 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var69 = var67.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var70 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var71 = var70.getName();
    java.lang.String var72 = var67.formatValue((java.lang.Object)var70);
    var70.setName("'hi!'");
    java.util.List var75 = var70.getSchemas();
    org.databene.jdbacl.model.DBSchema var76 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var70);
    org.databene.jdbacl.model.DBTrigger var77 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var76);
    java.util.List var78 = var76.getPackages();
    org.databene.jdbacl.model.DBPackage var79 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var76);
    java.lang.String var80 = var79.getStatus();
    java.util.List var81 = var79.getProcedures();
    boolean var82 = var63.equals((java.lang.Object)var81);
    java.lang.String var83 = var63.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi! as 10 on . = 10."+ "'", var34.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "."+ "'", var35.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var51.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "jdbc:hsqldb:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '"+ "'", var83.equals("jdbc:hsqldb:mem:left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '"));

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test71");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var1 = var0.supportsRegex();
    java.lang.String var5 = var0.regexQuery("select next value for SET GENERATOR.TO - 1", true, "hi!");
    boolean var7 = var0.isDeterministicFKName("select alter sequence drop sequence 10 restart with 0.nextval from dual");
    boolean var10 = var0.isDefaultSchema("select drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER.nextval from dual", "null[false]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"+ "'", var5.equals("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test72");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.lang.String var19 = var0.renderCreateSequence(var17);
    boolean var22 = var0.isDefaultSchema("VALUES (NEXT VALUE FOR call next value for 'hi!')", "catalog null");
    boolean var24 = var0.isDeterministicPKName("(, sequence)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test73");


    org.databene.jdbacl.identity.NoIdentity var1 = new org.databene.jdbacl.identity.NoIdentity("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test74");


    org.databene.jdbacl.sql.parser.SQLParser.column_spec_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.column_spec_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test75");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.lang.String var19 = var0.renderCreateSequence(var17);
    java.lang.String var21 = var0.renderFetchSequenceValue("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var24 = var0.isDefaultSchema("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    java.lang.String var26 = var0.renderDropSequence("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'");
    java.lang.String var28 = var0.renderFetchSequenceValue("CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    boolean var29 = var0.isSequenceBoundarySupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"+ "'", var21.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT"+ "'", var26.equals("DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "VALUES (NEXT VALUE FOR CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT)"+ "'", var28.equals("VALUES (NEXT VALUE FOR CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test76");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("Identity definition by unique key: select next value for 10", "CREATE SEQUENCE  CACHE 100");
    boolean var4 = var0.supportsRegex();
    boolean var6 = var0.isDeterministicUKName("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test77");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    java.lang.String[] var14 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var15 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var14);
    var10.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var15, "NOT REGEXP_MATCHES(sequence, '')");
    org.databene.jdbacl.identity.NaturalPkIdentity var19 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    java.lang.String var22 = var19.toString();
    var19.addIrrelevantColumn("org.firebirdsql.jdbc.FBDriver");
    java.lang.String var25 = var19.getName();
    java.lang.String var26 = var19.getTableName();
    java.lang.String var27 = var19.getDescription();
    var10.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var19, "CREATE GENERATOR DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    java.lang.String var30 = var19.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "NaturalPkIdentity(hi!)"+ "'", var22.equals("NaturalPkIdentity(hi!)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi! identity by primary key"+ "'", var27.equals("hi! identity by primary key"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi! identity by primary key"+ "'", var30.equals("hi! identity by primary key"));

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test78");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var9 = var0.isDeterministicFKName("jdbc:h2:mem:select next value for 10");
    java.lang.String var11 = var0.renderFetchSequenceValue("");
    java.lang.String var15 = var0.regexQuery("alter sequence jdbc:h2:mem:NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  restart with 0", true, "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\"NOORDER");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "select nextval('')"+ "'", var11.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "NOT alter sequence jdbc:h2:mem:NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  restart with 0 ~ 'CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\"NOORDER'"+ "'", var15.equals("NOT alter sequence jdbc:h2:mem:NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  restart with 0 ~ 'CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\"NOORDER'"));

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test79");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.join("", "", var16, "hi!", "10", var20);
    org.databene.jdbacl.model.DBUniqueConstraint var22 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var8, "select nextval('')", false, var16);
    var8.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    java.util.List var26 = var8.getIndexes();
    org.databene.jdbacl.model.DBRow var27 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.TableContainer var32 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var33 = var32.getTables();
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var32);
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    var35.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var39 = var38.getForeignKeyConstraints();
    var35.addReferrer((org.databene.jdbacl.model.DBTable)var38);
    var32.addTable((org.databene.jdbacl.model.DBTable)var38);
    java.lang.String[] var46 = new java.lang.String[] { ""};
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.join("", "", var46, "hi!", "10", var50);
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var46);
    org.databene.jdbacl.model.TableContainer var55 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var56 = var55.getTables();
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var55);
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    var58.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var62 = var61.getForeignKeyConstraints();
    var58.addReferrer((org.databene.jdbacl.model.DBTable)var61);
    var55.addTable((org.databene.jdbacl.model.DBTable)var61);
    java.lang.String[] var67 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var67);
    org.databene.jdbacl.model.DBForeignKeyConstraint var69 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var38, var46, (org.databene.jdbacl.model.DBTable)var61, var67);
    java.lang.String[] var70 = var69.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var71 = var69.getTable();
    java.lang.String var72 = var69.toString();
    java.lang.Object[] var73 = var27.getFKComponents(var69);
    java.util.Map var74 = var27.getCells();
    java.lang.Object var76 = var27.getCellValue("UniqueKeyIdentity(CREATE SEQUENCE 10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi! as 10 on . = 10."+ "'", var21.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi! as 10 on . = 10."+ "'", var51.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "."+ "'", var52.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var68.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var72.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test80");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var4 = var0.isDeterministicFKName("false");
    boolean var7 = var0.isDefaultCatalog("alter sequence hi! restart with 1", "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence, SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!') unique");
    boolean var9 = var0.isDeterministicIndexName("CREATE GENERATOR ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test81");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var6 = var5.getTables();
    java.util.List var8 = var5.getSequences(false);
    java.util.List var9 = var0.getSequences(false, var8);
    org.databene.jdbacl.model.TableContainer var11 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var12 = var11.getTables();
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    boolean var17 = var13.equals((java.lang.Object)(-1.0f));
    var11.removeTable((org.databene.jdbacl.model.DBTable)var13);
    var0.addSubContainer(var11);
    org.databene.jdbacl.model.DBTable var21 = var0.getTable("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE (, sequence)");
    java.util.Collection var22 = var0.getSubContainers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test82");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var8.setExcludeTables("DROP SEQUENCE (0,-1)");
    var8.setFaultTolerant(true);
    org.databene.jdbacl.model.DBCatalog var14 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var15 = var14.getName();
    org.databene.jdbacl.model.Database var16 = var14.getDatabase();
    java.lang.String var17 = var14.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    var14.removeSchema(var28);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    var42.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var45 = var42.getTriggerBody();
    java.lang.String var46 = var42.getColumnName();
    java.lang.String var47 = var42.getWhenClause();
    var28.addTrigger(var42);
    org.databene.jdbacl.model.DBTrigger var49 = new org.databene.jdbacl.model.DBTrigger("-1", var28);
    java.util.List var51 = var28.getSequences(false);
    org.databene.jdbacl.dialect.DerbyDialect var55 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var57 = var55.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var58 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var59 = var58.getName();
    java.lang.String var60 = var55.formatValue((java.lang.Object)var58);
    var58.setName("'hi!'");
    java.util.List var63 = var58.getSchemas();
    org.databene.jdbacl.model.DBSchema var64 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var58);
    org.databene.jdbacl.model.DBTrigger var65 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var64);
    java.util.List var66 = var64.getPackages();
    org.databene.jdbacl.model.DBPackage var67 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var64);
    var28.addPackage(var67);
    org.databene.jdbacl.model.DBCatalog var70 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    var28.setCatalog(var70);
    org.databene.jdbacl.model.DBTable var73 = var28.getTable("alter sequence CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (). restart with 100");
    org.databene.jdbacl.model.jdbc.LazyTable var76 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var28, "alter sequence SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!' restart with 1", "select 'SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0'.nextval from dual");
    boolean var77 = var8.isImportingIndexes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test83");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var5 = var0.supportsRegex();
    boolean var6 = var0.isSequenceBoundarySupported();
    boolean var7 = var0.supportsRegex();
    boolean var8 = var0.supportsRegex();
    boolean var9 = var0.supportsRegex();
    java.lang.String var13 = var0.regexQuery("select next value for Identity definition by unique key: select next value for 10", false, "call next value for 'd'");
    java.lang.String var15 = var0.renderDropSequence("sequence 10 ~ 'REGEXP_MATCHES(catalog, 'call next value for null[]')' REGEXP 'CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'''");
    java.lang.String var19 = var0.regexQuery("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE ()", false, "drop sequence DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    boolean var21 = var0.isDeterministicFKName("drop generator select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "select next value for Identity definition by unique key: select next value for 10 SIMILAR TO 'call next value for 'd''"+ "'", var13.equals("select next value for Identity definition by unique key: select next value for 10 SIMILAR TO 'call next value for 'd''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "drop generator sequence 10 ~ 'REGEXP_MATCHES(catalog, 'call next value for null[]')' REGEXP 'CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'''"+ "'", var15.equals("drop generator sequence 10 ~ 'REGEXP_MATCHES(catalog, 'call next value for null[]')' REGEXP 'CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "drop sequence CONSTRAINT \"select nextval('')\" UNIQUE () SIMILAR TO 'drop sequence DROP SEQUENCE CREATE GENERATOR  RESTRICT'"+ "'", var19.equals("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE () SIMILAR TO 'drop sequence DROP SEQUENCE CREATE GENERATOR  RESTRICT'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test84");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    java.lang.String var5 = var0.setSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 1L);
    boolean var7 = var0.isDeterministicIndexName("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var9 = var0.isDeterministicFKName("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var12 = var0.isDefaultSchema("Sub identity of ():\nalter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var14 = var0.renderDropSequence("NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    java.lang.String var18 = var0.regexQuery("CREATE GENERATOR CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", true, "drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"+ "'", var5.equals("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" "+ "'", var14.equals("drop sequence NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CREATE GENERATOR CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE  NOT REGEXP 'drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1'"+ "'", var18.equals("CREATE GENERATOR CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE  NOT REGEXP 'drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1'"));

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test85");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    var8.setExcludeTables("(\"sequence\")");
    boolean var34 = var8.isImportingIndexes();
    java.lang.String var35 = var8.getDatabaseProductName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test86");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var81 = new org.databene.jdbacl.ResultSetConverter(var78, false);
    java.lang.Class var82 = var81.getSourceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test87");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.setBacktrackingLevel(10);
    var0.mTABLE_DETAILS();
    var0.mCREATE_TABLE();
    var0.mCOMMENT_COLUMN();

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test88");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    org.databene.jdbacl.model.DBIndex var35 = var27.getIndex("");
    java.util.List var36 = var27.getIndexes();
    java.util.Set var37 = var27.getForeignKeyConstraints();
    java.util.List var38 = var27.getCheckConstraints();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var39 = var27.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    org.databene.jdbacl.model.Database var42 = var40.getDatabase();
    java.lang.String var43 = var40.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var45 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var47 = var45.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var48 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var49 = var48.getName();
    java.lang.String var50 = var45.formatValue((java.lang.Object)var48);
    var48.setName("'hi!'");
    java.util.List var53 = var48.getSchemas();
    org.databene.jdbacl.model.DBSchema var54 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var48);
    var40.removeSchema(var54);
    java.util.List var57 = var54.getSequences(false);
    boolean var58 = var27.equals((java.lang.Object)var54);
    boolean var59 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    java.lang.String var60 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "CONSTRAINT columnCHECK \"'hi!'\""+ "'", var60.equals("CONSTRAINT columnCHECK \"'hi!'\""));

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test89");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBIndex var30 = var22.getIndex("");
    java.util.List var31 = var22.getIndexes();
    java.util.Set var32 = var22.getForeignKeyConstraints();
    java.util.List var33 = var22.getCheckConstraints();
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var34 = var22.getPrimaryKeyConstraint();
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    org.databene.jdbacl.model.Database var37 = var35.getDatabase();
    java.lang.String var38 = var35.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var40 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var42 = var40.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var43 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var44 = var43.getName();
    java.lang.String var45 = var40.formatValue((java.lang.Object)var43);
    var43.setName("'hi!'");
    java.util.List var48 = var43.getSchemas();
    org.databene.jdbacl.model.DBSchema var49 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var43);
    var35.removeSchema(var49);
    java.util.List var52 = var49.getSequences(false);
    boolean var53 = var22.equals((java.lang.Object)var49);
    java.util.List var54 = var49.getPackages();
    java.util.List var55 = var49.getComponents();
    java.util.List var57 = var49.getTables(false);
    java.lang.String var58 = var49.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var58.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test90");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    var5.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var24 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var24);
    org.databene.jdbacl.model.DBUniqueConstraint var26 = var5.getUniqueConstraint(var24);
    org.databene.jdbacl.identity.UniqueKeyIdentity var27 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var24);
    org.databene.jdbacl.model.DBSequence var33 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var34 = var33.dropDDL();
    java.math.BigInteger var35 = var33.getIncrementIfNotDefault();
    java.math.BigInteger var36 = var33.getMinValue();
    java.math.BigInteger var37 = var33.getMinValue();
    java.lang.Boolean var38 = var33.isOrder();
    org.databene.jdbacl.model.TableContainer var44 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var45 = var44.getTables();
    org.databene.jdbacl.model.TableContainer var46 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var44);
    org.databene.jdbacl.model.DefaultDBTable var47 = new org.databene.jdbacl.model.DefaultDBTable();
    var47.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var51 = var50.getForeignKeyConstraints();
    var47.addReferrer((org.databene.jdbacl.model.DBTable)var50);
    var44.addTable((org.databene.jdbacl.model.DBTable)var50);
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("", "", var58, "hi!", "10", var62);
    java.lang.String var64 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var58);
    org.databene.jdbacl.model.TableContainer var67 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var68 = var67.getTables();
    org.databene.jdbacl.model.TableContainer var69 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var67);
    org.databene.jdbacl.model.DefaultDBTable var70 = new org.databene.jdbacl.model.DefaultDBTable();
    var70.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var74 = var73.getForeignKeyConstraints();
    var70.addReferrer((org.databene.jdbacl.model.DBTable)var73);
    var67.addTable((org.databene.jdbacl.model.DBTable)var73);
    java.lang.String[] var79 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var79);
    org.databene.jdbacl.model.DBForeignKeyConstraint var81 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var50, var58, (org.databene.jdbacl.model.DBTable)var73, var79);
    java.lang.String[] var82 = var81.getRefereeColumnNames();
    java.lang.String[] var83 = var81.getForeignKeyColumnNames();
    org.databene.jdbacl.identity.UniqueKeyIdentity var84 = new org.databene.jdbacl.identity.UniqueKeyIdentity("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'", var83);
    boolean var85 = var33.equals((java.lang.Object)var83);
    java.lang.String var86 = org.databene.jdbacl.SQLUtil.leftJoin("call next value for alter sequence VALUES (NEXT VALUE FOR REGEXP_MATCHES(No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence CREATE SEQUENCE 10 restart with 1')) restart with 100", var24, "org.databene.jdbacl.identity.InvalidIdentityDefinitionError.DROP SEQUENCE ", "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')", var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var25.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "drop sequence "+ "'", var34.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi! as 10 on . = 10."+ "'", var63.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "."+ "'", var64.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var80.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "left join org.databene.jdbacl.identity.InvalidIdentityDefinitionError.DROP SEQUENCE  as REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ') on call next value for alter sequence VALUES (NEXT VALUE FOR REGEXP_MATCHES(No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence CREATE SEQUENCE 10 restart with 1')) restart with 100.DROP SEQUENCE  = REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')."+ "'", var86.equals("left join org.databene.jdbacl.identity.InvalidIdentityDefinitionError.DROP SEQUENCE  as REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ') on call next value for alter sequence VALUES (NEXT VALUE FOR REGEXP_MATCHES(No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence CREATE SEQUENCE 10 restart with 1')) restart with 100.DROP SEQUENCE  = REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')."));

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test91");


    java.lang.Boolean var1 = org.databene.jdbacl.SQLUtil.mutatesDataOrStructure("drop generator select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test92");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    boolean var5 = var0.isDeterministicUKName("catalog identity by primary key");
    java.lang.String var7 = var0.renderDropSequence("hi! identity by primary key");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence hi! identity by primary key"+ "'", var7.equals("drop sequence hi! identity by primary key"));

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test93");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var39 = new org.databene.jdbacl.model.DefaultDBColumn("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (org.databene.jdbacl.model.DBTable)var5, var31, (java.lang.Integer)3, (java.lang.Integer)69);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    java.util.Set var44 = var40.getUniqueConstraints(false);
    java.lang.String var45 = var40.getDoc();
    var40.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    boolean var48 = var39.isIdentical((org.databene.jdbacl.model.DBObject)var40);
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    org.databene.jdbacl.model.DBUniqueConstraint var68 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var54, "select nextval('')", false, var62);
    java.lang.String var69 = var68.toString();
    boolean var70 = var68.isNameDeterministic();
    var50.addUniqueConstraint(var68);
    var39.setTable((org.databene.jdbacl.model.DBTable)var50);
    java.lang.Integer var73 = var39.getFractionDigits();
    boolean var74 = var39.isVersionColumn();
    org.databene.jdbacl.model.DBDataType var75 = var39.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "."+ "'", var45.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var69.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + 69+ "'", var73.equals(69));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test94");


    org.databene.jdbacl.identity.NKBuilder var0 = new org.databene.jdbacl.identity.NKBuilder();
    org.databene.jdbacl.sql.ColumnExpression var4 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var7 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var8 = var7.getValue();
    org.databene.jdbacl.sql.ColumnExpression var11 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var12 = var11.getValue();
    org.databene.jdbacl.sql.BetweenExpression var13 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var4, (org.databene.script.Expression)var7, (org.databene.script.Expression)var11);
    org.databene.jdbacl.sql.ColumnExpression var16 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var20 = var19.getValue();
    org.databene.jdbacl.sql.ColumnExpression var23 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var24 = var23.getValue();
    org.databene.jdbacl.sql.BetweenExpression var25 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var16, (org.databene.script.Expression)var19, (org.databene.script.Expression)var23);
    var13.addTerm((org.databene.script.Expression)var19);
    org.databene.script.Expression[] var27 = new org.databene.script.Expression[] { var13};
    org.databene.jdbacl.sql.FunctionInvocation var28 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var27);
    java.lang.String var29 = var28.getFunctionName();
    java.lang.String var30 = var28.toString();
    var0.addComponent((java.lang.Object)var28);
    java.lang.String var32 = var0.toString();
    org.databene.jdbacl.sql.parser.SQLLexer var33 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var33.mCREATE_TABLE();
    var33.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var37 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var39 = var37.LT(10);
    var33.setCharStream((org.antlr.runtime.CharStream)var37);
    int var42 = var37.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var43 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var37);
    var43.setText("select next value for SET GENERATOR.TO - 1");
    var43.setBacktrackingLevel(1);
    var43.mT__91();
    var43.mT__99();
    var0.addComponent((java.lang.Object)var43);
    var43.mIDENTIFIER();
    java.lang.String var52 = var43.getGrammarFileName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "sequence"+ "'", var8.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "sequence"+ "'", var20.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "sequence"+ "'", var24.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var29.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var30.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var32.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"+ "'", var52.equals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g"));

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test95");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("CREATE GENERATOR drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test96");


    org.databene.jdbacl.version.QueryVersionProvider var1 = new org.databene.jdbacl.version.QueryVersionProvider("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()");

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test97");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    boolean var92 = var90.isUnique();
    var90.addColumnName("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT");
    java.lang.String var95 = var90.toString();
    boolean var96 = var90.isUnique();
    var90.addColumnName("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)"+ "'", var95.equals("SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test98");


    org.databene.jdbacl.sql.parser.SQLParser.expression_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.expression_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test99");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mCOMMENT_TABLE();
    var10.mALTER_TABLE();
    var10.mT__89();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test100");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    boolean var31 = var21.isEquivalent((org.databene.jdbacl.model.DBObject)var25);
    java.lang.String var32 = org.databene.jdbacl.SQLUtil.renderValue((java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "'hi!'"+ "'", var32.equals("'hi!'"));

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test101");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var8 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test102");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.emitErrorMessage("call next value for 'hi!'");
    var0.mCOMMENT_TABLE();
    var0.mSIZE();
    var0.mALTER_TABLE();
    var0.setBacktrackingLevel(1);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test103");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    var1.seek(14);
    var1.setCharPositionInLine(10);
    int var10 = var1.LT(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 65);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test104");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.matchRange(100, 0);
    var10.mNULL();
    var10.mT__79();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test105");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    org.databene.jdbacl.dialect.DerbyDialect var40 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var42 = var40.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var43 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var44 = var43.getName();
    java.lang.String var45 = var40.formatValue((java.lang.Object)var43);
    var43.setName("'hi!'");
    java.util.List var48 = var43.getSchemas();
    org.databene.jdbacl.model.DBSchema var49 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var43);
    org.databene.jdbacl.model.DBTrigger var50 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var49);
    java.util.List var51 = var49.getPackages();
    org.databene.jdbacl.model.DBPackage var52 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var49);
    java.lang.String var53 = var52.getStatus();
    var15.addPackage(var52);
    java.lang.String var55 = var52.getObjectId();
    org.databene.jdbacl.dialect.PostgreSQLDialect var56 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var59 = var56.isDefaultCatalog("", "");
    java.lang.String var61 = var56.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var62 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var63 = var56.formatValue((java.lang.Object)var62);
    java.lang.String var64 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var62);
    java.util.List var65 = var62.getTables();
    java.lang.String var66 = var62.getName();
    boolean var67 = var52.isIdentical((org.databene.jdbacl.model.DBObject)var62);
    var52.setObjectId("call next value for select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "drop sequence "+ "'", var61.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "null"+ "'", var64.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test106");


    org.databene.jdbacl.sql.ColumnExpression var4 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var7 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var8 = var7.getValue();
    org.databene.jdbacl.sql.ColumnExpression var11 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var12 = var11.getValue();
    org.databene.jdbacl.sql.BetweenExpression var13 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var4, (org.databene.script.Expression)var7, (org.databene.script.Expression)var11);
    org.databene.jdbacl.sql.ColumnExpression var16 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var20 = var19.getValue();
    org.databene.jdbacl.sql.ColumnExpression var23 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var24 = var23.getValue();
    org.databene.jdbacl.sql.BetweenExpression var25 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var16, (org.databene.script.Expression)var19, (org.databene.script.Expression)var23);
    var13.addTerm((org.databene.script.Expression)var19);
    org.databene.script.Expression[] var27 = new org.databene.script.Expression[] { var13};
    org.databene.jdbacl.sql.FunctionInvocation var28 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var27);
    org.databene.jdbacl.identity.xml.IdentityParseContext var29 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    java.lang.Object var30 = var28.evaluate((org.databene.commons.Context)var29);
    org.databene.script.Expression[] var31 = var28.getTerms();
    org.databene.jdbacl.sql.FunctionInvocation var32 = new org.databene.jdbacl.sql.FunctionInvocation("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", var31);
    java.lang.String var33 = var32.toString();
    org.databene.script.Expression[] var34 = var32.getSourceExpressions();
    org.databene.script.Expression[] var35 = var32.getSourceExpressions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "sequence"+ "'", var8.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "sequence"+ "'", var20.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "sequence"+ "'", var24.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var33.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test107");


    org.databene.jdbacl.JDBCConnectData var1 = org.databene.jdbacl.DatabaseTestUtil.getConnectData("drop sequence VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test108");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var3 = var0.isDefaultSchema("select next value for 10", "NaturalPkIdentity(hi!)");
    boolean var5 = var0.isDeterministicPKName("EQUEN");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var15.setDoc("drop sequence ");
    boolean var19 = var9.equals((java.lang.Object)"drop sequence ");
    java.lang.String var20 = var9.getCatalogName();
    org.databene.jdbacl.model.DBSequence var24 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var25 = var24.getMaxValue();
    java.lang.String var26 = var24.toString();
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var31 = var30.dropDDL();
    java.math.BigInteger var32 = var30.getMinValueIfNotDefault();
    java.math.BigInteger var33 = var30.getLastNumber();
    org.databene.jdbacl.model.DBSequence var37 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var37.setName("10");
    java.math.BigInteger var40 = var37.getIncrement();
    java.math.BigInteger var41 = var37.getIncrement();
    var30.setStart(var41);
    var24.setIncrement(var41);
    var9.setIncrement(var41);
    java.lang.String var45 = var0.renderCreateSequence(var9);
    boolean var48 = var0.isDefaultSchema("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')", "NOT drop generator sequence ~ 'hi!'");
    boolean var50 = var0.isDeterministicUKName("call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')");
    boolean var51 = var0.supportsRegex();
    java.lang.String var55 = var0.regexQuery("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')", false, "left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    boolean var57 = var0.isDeterministicIndexName("alter sequence drop sequence 10 restart with 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "drop sequence "+ "'", var20.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "drop sequence "+ "'", var31.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\""+ "'", var45.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "REGEXP_LIKE(REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" '), 'left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ')"+ "'", var55.equals("REGEXP_LIKE(REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" '), 'left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test109");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    java.lang.String[] var14 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var15 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var14);
    var10.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var15, "NOT REGEXP_MATCHES(sequence, '')");
    org.databene.jdbacl.identity.xml.IdentityParseContext var18 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test110");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    org.databene.jdbacl.SQLScriptException var3 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var5 = var3.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var7 = new org.databene.jdbacl.SQLScriptException(1);
    var5.addSuppressed((java.lang.Throwable)var7);
    org.databene.jdbacl.SQLScriptException var11 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var5, "drop sequence ", (-1));
    java.util.List var13 = org.antlr.runtime.BaseRecognizer.getRuleInvocationStack((java.lang.Throwable)var5, "DROP SEQUENCE ");
    java.util.List var14 = var0.getTables(false, var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test111");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var1.setCharPositionInLine(1);
    int var4 = var1.getCharPositionInLine();
    var1.setCharPositionInLine(69);
    int var8 = var1.LT(3);
    int var10 = var1.LT(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var13 = var1.substring(68, 68);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 69);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test112");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    boolean var5 = var0.isDeterministicUKName("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var7 = var0.isDeterministicFKName("call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test113");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.math.BigInteger var13 = var9.getIncrement();
    java.lang.String var14 = var0.renderCreateSequence(var9);
    java.math.BigInteger var15 = var9.getMaxValue();
    java.lang.String var16 = var9.getCatalogName();
    java.math.BigInteger var17 = var9.getLastNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var5.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var14.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "drop sequence "+ "'", var16.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test114");


    java.lang.Object[] var1 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("select next value for CREATE SEQUENCE  CACHE 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test115");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    org.databene.jdbacl.model.DBSchema var7 = new org.databene.jdbacl.model.DBSchema("10", var4);
    java.lang.String var8 = var7.getObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "schema"+ "'", var8.equals("schema"));

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test116");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var5 = var0.supportsRegex();
    boolean var6 = var0.isSequenceBoundarySupported();
    boolean var7 = var0.supportsRegex();
    java.lang.String var11 = var0.regexQuery("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ", true, "CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!''");
    java.lang.String var13 = var0.renderDropSequence("drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;");
    boolean var15 = var0.isDeterministicUKName("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')");
    java.lang.String var19 = var0.regexQuery("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER", false, "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE  NOT SIMILAR TO 'CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'''"+ "'", var11.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE  NOT SIMILAR TO 'CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "drop generator drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;"+ "'", var13.equals("drop generator drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER SIMILAR TO 'alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1'"+ "'", var19.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER SIMILAR TO 'alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1'"));

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test117");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("jdbc:hsqldb:mem:CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100", "No identity defined for table NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')", "REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')", "jdbc:hsqldb:mem:CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER", "derby", "CONSTRAINT columnCHECK \"'hi!'\"", "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ') ~ '10'", true);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test118");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIN();
    var10.mARGUMENTS();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test119");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Statement var3 = org.databene.jdbacl.dialect.HSQLUtil.shutdown("drop sequence", "alter sequence CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 restart with 10", "select next value for drop generator org.firebirdsql.jdbc.FBDriver");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test120");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    var3.setCycle((java.lang.Boolean)true);
    java.math.BigInteger var7 = var3.getIncrementIfNotDefault();
    var3.setDoc("((\"sequence\") BETWEEN \"'hi!'\" AND \"sequence\")");
    java.lang.String var10 = var3.getCatalogName();
    org.databene.jdbacl.model.DBSequence var14 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var14.setCache((java.lang.Long)100L);
    java.lang.String var17 = var14.getObjectType();
    java.math.BigInteger var18 = var14.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var22 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var22.setName("10");
    java.math.BigInteger var25 = var22.getIncrement();
    java.math.BigInteger var26 = var22.getIncrement();
    var14.setLastNumber(var26);
    java.lang.String var28 = var14.getSchemaName();
    boolean var29 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "drop sequence "+ "'", var10.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "sequence"+ "'", var17.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test121");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.lang.String var22 = var21.toString();
    org.databene.jdbacl.dialect.PostgreSQLDialect var23 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var26 = var23.isDefaultCatalog("", "");
    java.lang.String var28 = var23.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var23.formatValue((java.lang.Object)var29);
    java.lang.String var31 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var29);
    org.databene.jdbacl.model.Database var32 = var29.getDatabase();
    org.databene.jdbacl.dialect.DerbyDialect var36 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var38 = var36.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var39 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var40 = var39.getName();
    java.lang.String var41 = var36.formatValue((java.lang.Object)var39);
    var39.setName("'hi!'");
    java.util.List var44 = var39.getSchemas();
    org.databene.jdbacl.model.DBSchema var45 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var39);
    org.databene.jdbacl.model.DBTrigger var46 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var45);
    java.lang.String var47 = var45.getName();
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var45);
    var29.addSchema(var45);
    boolean var50 = var21.equals((java.lang.Object)var29);
    java.util.List var51 = var21.getUkConstraints();
    boolean var52 = var21.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"+ "'", var22.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "drop sequence "+ "'", var28.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "null"+ "'", var31.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var47.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test122");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Statement var3 = org.databene.jdbacl.dialect.HSQLUtil.shutdown("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE () SIMILAR TO 'drop sequence DROP SEQUENCE CREATE GENERATOR  RESTRICT'", "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ", "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0-identity-NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test123");


    org.databene.jdbacl.identity.NoIdentity var1 = new org.databene.jdbacl.identity.NoIdentity("NOT . ~ 'CREATE GENERATOR drop sequence '");
    java.lang.String var2 = var1.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "No identity defined for table NOT . ~ 'CREATE GENERATOR drop sequence '"+ "'", var2.equals("No identity defined for table NOT . ~ 'CREATE GENERATOR drop sequence '"));

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test124");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var27.setCache((java.lang.Long)100L);
    java.lang.String var30 = var27.getObjectType();
    java.math.BigInteger var31 = var27.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setName("10");
    java.math.BigInteger var38 = var35.getIncrement();
    java.math.BigInteger var39 = var35.getIncrement();
    var27.setLastNumber(var39);
    var27.setOrder((java.lang.Boolean)false);
    var21.setCellValue("alter sequence  restart with -1", (java.lang.Object)var27);
    java.lang.String var44 = var21.toString();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var52 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var52.setImportingChecks(false);
    boolean var55 = var52.isImportingIndexes();
    var52.setCatalogName("'hi!'");
    var21.setCellValue("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", "'hi!'");
    java.lang.Object var59 = var21.getPKValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "null[]"+ "'", var44.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test125");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var15 = var12.getTriggerBody();
    java.lang.String var16 = var12.getActionType();
    var12.setWhenClause("null");
    java.lang.String var19 = var12.getWhenClause();
    var12.setColumnName("left join select next value for (\"sequence\") as (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1) on EQUEN.DROP SEQUENCE  = (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1).DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "null"+ "'", var19.equals("null"));

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test127");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    org.databene.jdbacl.sql.parser.SQLLexer var5 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var1);
    int var6 = var5.getCharPositionInLine();
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var7.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var10 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var12 = var10.LT(10);
    var7.setCharStream((org.antlr.runtime.CharStream)var10);
    org.databene.jdbacl.sql.parser.SQLLexer var14 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var16 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var16.release((-1));
    boolean var20 = var14.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var16, 0);
    var7.setCharStream((org.antlr.runtime.CharStream)var16);
    var16.setCharPositionInLine(1);
    var16.setLine(69);
    var5.matchAny((org.antlr.runtime.IntStream)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test128");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) restart with 10");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test129");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1", "CREATE GENERATOR CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "select next value for 10", "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.' NOT REGEXP 'SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0'", "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\"NOORDER", "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()");

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test130");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    var0.setDoc("select next value for SET GENERATOR.TO - 1");
    org.databene.jdbacl.model.DBIndex var8 = var0.getIndex("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var12.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var12.addReferrer((org.databene.jdbacl.model.DBTable)var15);
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String[] var27 = new java.lang.String[] { ""};
    java.lang.String var28 = org.databene.jdbacl.SQLUtil.join("", "", var23, "hi!", "10", var27);
    org.databene.jdbacl.model.DBUniqueConstraint var29 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var15, "select nextval('')", false, var23);
    java.lang.String[] var35 = new java.lang.String[] { ""};
    java.lang.String[] var39 = new java.lang.String[] { ""};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.join("", "", var35, "hi!", "10", var39);
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var35);
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.join("", "", var48, "hi!", "10", var52);
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var35, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var52);
    org.databene.jdbacl.identity.NaturalPkIdentity var57 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var58 = var57.getName();
    boolean var60 = var57.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var72 = new java.lang.String[] { ""};
    java.lang.String[] var76 = new java.lang.String[] { ""};
    java.lang.String var77 = org.databene.jdbacl.SQLUtil.join("", "", var72, "hi!", "10", var76);
    org.databene.jdbacl.model.DBUniqueConstraint var78 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var64, "select nextval('')", false, var72);
    java.lang.String var79 = var57.extractNK((java.lang.Object[])var72);
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var15, var35, (java.lang.Object[])var72);
    org.databene.jdbacl.identity.UniqueKeyIdentity var81 = new org.databene.jdbacl.identity.UniqueKeyIdentity("drop generator sequence", var72);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var82 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var0, "hi! identity by primary key", true, var72);
    java.lang.String var83 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var82);
    var82.addColumnName("DROP SEQUENCE ");
    java.lang.String var86 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi! as 10 on . = 10."+ "'", var28.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi! as 10 on . = 10."+ "'", var40.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "."+ "'", var41.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi! as 10 on . = 10."+ "'", var53.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "."+ "'", var54.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var55.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi! as 10 on . = 10."+ "'", var77.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var80.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" "+ "'", var83.equals("CONSTRAINT \"hi! identity by primary key\" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" "+ "'", var86.equals("CONSTRAINT \"hi! identity by primary key\" "));

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test131");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    java.util.List var17 = var15.getProcedures();
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    org.databene.jdbacl.model.DBSchema var31 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var25);
    org.databene.jdbacl.model.DBTrigger var32 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var31);
    java.util.List var33 = var31.getPackages();
    org.databene.jdbacl.model.DBPackage var34 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var31);
    java.util.List var35 = var34.getComponents();
    org.databene.jdbacl.model.DBProcedure var36 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var34);
    java.lang.String var37 = var36.getSubProgramId();
    var36.setSubProgramId("jdbc:h2:mem:select next value for 10");
    java.lang.String var40 = var36.getSubProgramId();
    var15.addProcedure(var36);
    var36.setSubProgramId("alter sequence REGEXP_LIKE((), 'drop sequence drop generator SET GENERATOR select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- TO 0') restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "jdbc:h2:mem:select next value for 10"+ "'", var40.equals("jdbc:h2:mem:select next value for 10"));

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test132");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    java.lang.String var16 = var15.getDoc();
    java.util.List var17 = var15.getIndexes();
    org.databene.jdbacl.model.DefaultDBTable var20 = new org.databene.jdbacl.model.DefaultDBTable();
    var20.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var24 = var23.getForeignKeyConstraints();
    var20.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    java.lang.String[] var31 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var32 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var31);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var39 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var40 = var39.getForeignKeyConstraints();
    var36.addReferrer((org.databene.jdbacl.model.DBTable)var39);
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.join("", "", var47, "hi!", "10", var51);
    org.databene.jdbacl.model.DBUniqueConstraint var53 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var39, "select nextval('')", false, var47);
    var39.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var58 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var59 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var58);
    org.databene.jdbacl.model.DBUniqueConstraint var60 = var39.getUniqueConstraint(var58);
    org.databene.jdbacl.identity.UniqueKeyIdentity var61 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var58);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var31, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var58);
    org.databene.jdbacl.model.DBUniqueConstraint var63 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var20, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var31);
    org.databene.jdbacl.model.DBUniqueIndex var64 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var63);
    java.lang.String[] var65 = var64.getColumnNames();
    var15.removeIndex((org.databene.jdbacl.model.DBIndex)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi! as 10 on . = 10."+ "'", var52.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var59.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var62.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test133");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var5 = var0.renderDropSequence("NOT drop generator sequence ~ 'hi!'");
    java.lang.String var7 = var0.renderFetchSequenceValue("-1");
    boolean var8 = var0.isSequenceSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"+ "'", var5.equals("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "VALUES (NEXT VALUE FOR -1)"+ "'", var7.equals("VALUES (NEXT VALUE FOR -1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test134");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("() = CASE WHEN NOT drop generator sequence ~ 'hi!' THEN alter sequence CREATE GENERATOR drop sequence  restart with -1 ELSE SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2 END", "'hi!'", "table", "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "db2", "null [ false ]");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test135");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.lang.String var5 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    org.databene.jdbacl.model.DBDataType var15 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var16 = var15.isAlpha();
    java.lang.String var17 = var15.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var18 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var21 = var18.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var23 = var18.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var24 = var15.equals((java.lang.Object)var23);
    org.databene.jdbacl.model.DefaultDBColumn var27 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var10, var15, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var28 = var27.getType();
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    java.lang.String var33 = var31.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var34 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var37 = var34.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var39 = var34.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var40 = var31.equals((java.lang.Object)var39);
    var27.setType(var31);
    boolean var42 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var27);
    org.databene.jdbacl.model.DBSequence var46 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var46.setName("10");
    java.math.BigInteger var49 = var46.getIncrement();
    org.databene.jdbacl.model.DBSequence var53 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var53.setName("10");
    java.math.BigInteger var56 = var53.getIncrement();
    var46.setMaxValue(var56);
    var3.setMaxValue(var56);
    org.databene.jdbacl.JDBCConnectData var65 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var66 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var65);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var67 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var65);
    org.databene.jdbacl.model.DBCatalog var69 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var70 = var69.getName();
    org.databene.jdbacl.model.Database var71 = var69.getDatabase();
    java.lang.String var72 = var69.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var74 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var76 = var74.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var77 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var78 = var77.getName();
    java.lang.String var79 = var74.formatValue((java.lang.Object)var77);
    var77.setName("'hi!'");
    java.util.List var82 = var77.getSchemas();
    org.databene.jdbacl.model.DBSchema var83 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var77);
    var69.removeSchema(var83);
    java.util.List var86 = var83.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var87 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var83);
    org.databene.jdbacl.model.jdbc.LazyTable var90 = new org.databene.jdbacl.model.jdbc.LazyTable(var67, var83, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var91 = var90.getCatalog();
    java.lang.String var92 = var90.getDoc();
    java.lang.String var93 = var90.toString();
    boolean var94 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "DROP SEQUENCE "+ "'", var17.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var23.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "DROP SEQUENCE "+ "'", var33.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var39.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var92.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var93.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test136");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseFileStream("call next value for 'hi!' identity by primary key", "Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE .VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test137");


    org.databene.jdbacl.model.DBSchema var1 = new org.databene.jdbacl.model.DBSchema("select nextval for ') from REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test138");


    org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("No identity defined for table alter sequence drop generator sequence restart with 100", false, "UniqueKeyIdentity(CREATE SEQUENCE 10)", "schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test139");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    java.lang.String var10 = var0.renderSequenceValue("drop sequence 10", 0L);
    java.lang.String var14 = var0.regexQuery("CONSTRAINT \"select nextval('')\" ", false, "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var17 = var0.isDefaultCatalog("NO_ACTION", "alter sequence drop sequence 10 restart with 0");
    boolean var18 = var0.supportsRegex();
    java.lang.String var20 = var0.renderFetchSequenceValue("alter sequence -1 restart with 1");
    java.lang.String var23 = var0.renderSequenceValue("NO_ACTION", 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var10.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')"+ "'", var14.equals("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "call next value for alter sequence -1 restart with 1"+ "'", var20.equals("call next value for alter sequence -1 restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "alter sequence NO_ACTION restart with 10"+ "'", var23.equals("alter sequence NO_ACTION restart with 10"));

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test140");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_SEQUENCE();
    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    java.util.List var16 = var0.toStrings(var15);
    var0.mCOMMENT_COLUMN();
    var0.skip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test141");


    org.databene.jdbacl.JDBCConnectData var7 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var9 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    java.util.List var28 = var25.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var25);
    org.databene.jdbacl.model.jdbc.LazyTable var32 = new org.databene.jdbacl.model.jdbc.LazyTable(var9, var25, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var33 = var32.getDoc();
    java.lang.String var34 = var32.getName();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("select nextval('')", (org.databene.jdbacl.model.CompositeDBObject)var32);
    org.databene.jdbacl.model.DBSchema var36 = var32.getSchema();
    java.util.List var37 = var36.getTriggers();
    org.databene.jdbacl.dialect.PostgreSQLDialect var38 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var41 = var38.isDefaultCatalog("", "");
    java.lang.String var43 = var38.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var44 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var45 = var38.formatValue((java.lang.Object)var44);
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var44);
    var36.setCatalog(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var33.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var34.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "drop sequence "+ "'", var43.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "null"+ "'", var46.equals("null"));

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test142");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    java.lang.String var15 = var9.getSourceName();
    org.databene.jdbacl.sql.parser.SQLLexer var16 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var9);
    var9.release(100);
    java.lang.String var19 = var9.toString();
    int var20 = var9.index();
    var9.consume();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "DROP SEQUENCE "+ "'", var19.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test143");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    var1.seek(14);
    var1.setCharPositionInLine(10);
    int var10 = var1.LA(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 76);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test144");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var2 = var0.isDeterministicPKName("alter sequence hi! restart with 1");
    boolean var4 = var0.isDeterministicIndexName("drop generator sequence");
    java.lang.String var6 = var0.renderFetchSequenceValue("NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "select nextval('NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ')"+ "'", var6.equals("select nextval('NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ')"));

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test145");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mGE();
    var10.mT__113();
    var10.mT__133();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test146");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var3 = var0.renderSetSequenceValue(".", 0L);
    boolean var5 = var0.isDeterministicUKName("hi! identity by primary key");
    boolean var6 = var0.isSequenceBoundarySupported();
    java.lang.String var8 = var0.renderDropSequence(".");
    java.lang.String var11 = var0.renderSetSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT REGEXP 'hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1'", 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR . TO -1"+ "'", var3.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop generator ."+ "'", var8.equals("drop generator ."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "SET GENERATOR CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT REGEXP 'hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1' TO -1"+ "'", var11.equals("SET GENERATOR CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT REGEXP 'hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1' TO -1"));

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test147");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    var4.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var8 = var7.getForeignKeyConstraints();
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var7);
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    var11.setDoc(".");
    java.util.Set var15 = var11.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var18 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var19 = var18.isAlpha();
    boolean var20 = var18.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var11, var18, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var7.addColumn((org.databene.jdbacl.model.DBColumn)var23);
    org.databene.jdbacl.model.DBRow var25 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var7);
    java.lang.Object[] var26 = var25.getPKValues();
    org.databene.jdbacl.model.DBSequence var31 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var31.setCache((java.lang.Long)100L);
    java.lang.String var34 = var31.getObjectType();
    java.math.BigInteger var35 = var31.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var39.setName("10");
    java.math.BigInteger var42 = var39.getIncrement();
    java.math.BigInteger var43 = var39.getIncrement();
    var31.setLastNumber(var43);
    var31.setOrder((java.lang.Boolean)false);
    var25.setCellValue("alter sequence  restart with -1", (java.lang.Object)var31);
    org.databene.jdbacl.model.TableContainer var52 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var53 = var52.getTables();
    org.databene.jdbacl.model.TableContainer var54 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var52);
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var59 = var58.getForeignKeyConstraints();
    var55.addReferrer((org.databene.jdbacl.model.DBTable)var58);
    var52.addTable((org.databene.jdbacl.model.DBTable)var58);
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.join("", "", var66, "hi!", "10", var70);
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var66);
    org.databene.jdbacl.model.TableContainer var75 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var76 = var75.getTables();
    org.databene.jdbacl.model.TableContainer var77 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var75);
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    var78.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var81 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var82 = var81.getForeignKeyConstraints();
    var78.addReferrer((org.databene.jdbacl.model.DBTable)var81);
    var75.addTable((org.databene.jdbacl.model.DBTable)var81);
    java.lang.String[] var87 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var88 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var87);
    org.databene.jdbacl.model.DBForeignKeyConstraint var89 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var58, var66, (org.databene.jdbacl.model.DBTable)var81, var87);
    boolean var90 = var89.isNameDeterministic();
    java.lang.Object[] var91 = var25.getFKComponents(var89);
    java.lang.Object[] var92 = var25.getPKValues();
    var0.set("drop sequence ", (java.lang.Object)var25);
    java.lang.Object var95 = var25.getCellValue("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.Object[] var96 = var25.getPKValues();
    java.lang.Object[] var97 = var25.getPKValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi! as 10 on . = 10."+ "'", var71.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "."+ "'", var72.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var88.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test149");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    java.lang.String var6 = var0.renderSequenceValue("CREATE SEQUENCE 10", 1L);
    boolean var8 = var0.isDeterministicIndexName("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')");
    boolean var9 = var0.supportsRegex();
    boolean var12 = var0.isDefaultCatalog("select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;", "null [ false ]");
    boolean var15 = var0.isDefaultCatalog("jdbc:hsqldb:mem:CREATE GENERATOR 10", "select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "alter sequence CREATE SEQUENCE 10 restart with 1"+ "'", var6.equals("alter sequence CREATE SEQUENCE 10 restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test150");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mT__110();
    var10.mT__99();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test151");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var8.setFaultTolerant(true);
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.model.DBTrigger var25 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var24);
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var24);
    org.databene.jdbacl.model.DBTrigger var28 = new org.databene.jdbacl.model.DBTrigger("CONSTRAINT \"CREATE GENERATOR drop sequence \" .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;", "catalog");
    org.databene.jdbacl.model.DBTable var33 = var24.getTable("Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var26.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test152");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__100();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var18 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var19 = var18.mark();
    int var20 = var18.getCharPositionInLine();
    int var21 = var18.getLine();
    var10.consumeUntil((org.antlr.runtime.IntStream)var18, 14);
    var10.mT__129();
    var10.mT__77();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test153");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var32 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var33 = var32.getName();
    org.databene.jdbacl.model.Database var34 = var32.getDatabase();
    java.lang.String var35 = var32.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    var32.removeSchema(var46);
    java.util.List var49 = var46.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var53 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var55 = var53.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var56 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var57 = var56.getName();
    java.lang.String var58 = var53.formatValue((java.lang.Object)var56);
    var56.setName("'hi!'");
    java.util.List var61 = var56.getSchemas();
    org.databene.jdbacl.model.DBSchema var62 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var56);
    org.databene.jdbacl.model.DBTrigger var63 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var62);
    java.util.List var64 = var62.getPackages();
    org.databene.jdbacl.model.DBPackage var65 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var62);
    java.util.List var66 = var65.getComponents();
    var46.addPackage(var65);
    java.lang.String var68 = var65.getSubObjectName();
    var24.addPackage(var65);
    org.databene.jdbacl.dialect.DerbyDialect var72 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var74 = var72.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var75 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var76 = var75.getName();
    java.lang.String var77 = var72.formatValue((java.lang.Object)var75);
    var75.setName("'hi!'");
    java.util.List var80 = var75.getSchemas();
    org.databene.jdbacl.model.DBSchema var81 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var75);
    org.databene.jdbacl.model.DefaultDBTable var82 = new org.databene.jdbacl.model.DefaultDBTable("select next value for 10", var81);
    var24.removeTable((org.databene.jdbacl.model.DBTable)var82);
    java.util.List var84 = var24.getComponents();
    org.databene.jdbacl.model.Database var85 = var24.getDatabase();
    java.util.List var87 = var24.getTables(false);
    java.util.List var89 = var24.getSequences(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test154");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDefaultPort("CREATE SEQUENCE 10");
    var0.setDriverClass("drop sequence ");
    var0.setId("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var0.setName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    java.lang.String var11 = var0.getId();
    java.lang.String var12 = var0.getDefaultPort();
    java.lang.String var13 = var0.getId();
    java.lang.String var14 = var0.getUrlPattern();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var11.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "CREATE SEQUENCE 10"+ "'", var12.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var13.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test155");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    var10.addTrigger(var23);
    var23.setStatus("alter sequence drop generator sequence restart with 100");
    java.lang.String var27 = var23.getColumnName();
    var23.setWhenClause("DROP SEQUENCE -1 RESTRICT");
    java.lang.String var30 = var23.getStatus();
    java.lang.String var31 = var23.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var30.equals("alter sequence drop generator sequence restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var31.equals("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test156");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mLT();
    int var18 = var10.getCharPositionInLine();
    var10.mT__98();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test157");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    java.util.List var20 = var17.getComponents();
    var12.setCatalog(var17);
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var25.setCache((java.lang.Long)100L);
    java.lang.String var28 = var25.getObjectType();
    java.math.BigInteger var29 = var25.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var33 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var33.setName("10");
    java.math.BigInteger var36 = var33.getIncrement();
    java.math.BigInteger var37 = var33.getIncrement();
    var25.setLastNumber(var37);
    var12.addSequence(var25);
    org.databene.jdbacl.model.DBPackage var40 = new org.databene.jdbacl.model.DBPackage("alter sequence call next value for 'hi!' restart with 100", var12);
    java.util.List var41 = var40.getComponents();
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").alter sequence call next value for 'hi!' restart with 100"+ "'", var42.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").alter sequence call next value for 'hi!' restart with 100"));

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test158");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    var10.mCHAR();
    var10.mQUOTED_NAME();
    var10.mT__87();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test159");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    java.lang.String var4 = var0.getDefaultSchema();
    java.lang.String[] var5 = var0.getJars();
    java.lang.String var6 = var0.getDefaultUser();
    var0.setDownloadUrl("drop generator CREATE GENERATOR 10.NOT drop generator sequence ~ 'hi!'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test160");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__92();
    var10.mT__74();
    var10.mT__112();
    var10.mT__113();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test161");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.mCREATE_TABLE();
    boolean var17 = var10.failed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test162");


    org.databene.jdbacl.model.TableContainer var3 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var4 = var3.getTables();
    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var3);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String[] var21 = new java.lang.String[] { ""};
    java.lang.String var22 = org.databene.jdbacl.SQLUtil.join("", "", var17, "hi!", "10", var21);
    org.databene.jdbacl.model.DBUniqueConstraint var23 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var9, "select nextval('')", false, var17);
    var9.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var3.addTable((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var29 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    java.lang.String[] var32 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var36 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var39 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var40 = var39.getValue();
    org.databene.jdbacl.sql.ColumnExpression var43 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var44 = var43.getValue();
    org.databene.jdbacl.sql.BetweenExpression var45 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var36, (org.databene.script.Expression)var39, (org.databene.script.Expression)var43);
    org.databene.jdbacl.sql.ColumnExpression var48 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var51 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var52 = var51.getValue();
    org.databene.jdbacl.sql.ColumnExpression var55 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var56 = var55.getValue();
    org.databene.jdbacl.sql.BetweenExpression var57 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var48, (org.databene.script.Expression)var51, (org.databene.script.Expression)var55);
    org.databene.jdbacl.sql.ColumnExpression var60 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var63 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var64 = var63.getValue();
    org.databene.jdbacl.sql.ColumnExpression var67 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var68 = var67.getValue();
    org.databene.jdbacl.sql.BetweenExpression var69 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var60, (org.databene.script.Expression)var63, (org.databene.script.Expression)var67);
    org.databene.jdbacl.sql.BetweenExpression var70 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var43, (org.databene.script.Expression)var51, (org.databene.script.Expression)var63);
    org.databene.script.Expression[] var71 = new org.databene.script.Expression[] { var43};
    org.databene.jdbacl.sql.FunctionInvocation var72 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var71);
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.renderWhereClause(var32, (java.lang.Object[])var71);
    org.databene.jdbacl.sql.FunctionInvocation var74 = new org.databene.jdbacl.sql.FunctionInvocation("select next value for SET GENERATOR . TO -1", var71);
    boolean var75 = var29.equals((java.lang.Object)"select next value for SET GENERATOR . TO -1");
    boolean var76 = var29.isLOB();
    java.lang.String var77 = var29.toString();
    java.lang.String var78 = var29.getName();
    org.databene.jdbacl.model.DefaultDBColumn var81 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT hi! UNIQUE () REGEXP '10'", (org.databene.jdbacl.model.DBTable)var9, var29, (java.lang.Integer)0, (java.lang.Integer)41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi! as 10 on . = 10."+ "'", var22.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "sequence"+ "'", var40.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "sequence"+ "'", var44.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "sequence"+ "'", var52.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "sequence"+ "'", var56.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "sequence"+ "'", var64.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "sequence"+ "'", var68.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var73.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "DROP SEQUENCE "+ "'", var77.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "DROP SEQUENCE "+ "'", var78.equals("DROP SEQUENCE "));

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test163");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var5 = org.databene.jdbacl.DBUtil.connect("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", "CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))", "Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ", "jdbc:h2:mem:hi! as 10 on . = 10.", true);
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test164");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    var4.reset();
    org.databene.jdbacl.sql.parser.SQLLexer var9 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.mT__131();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test165");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    java.util.List var4 = var0.getSequences();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    org.databene.jdbacl.model.DBTrigger var17 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    java.util.List var24 = var21.getComponents();
    var16.setCatalog(var21);
    var0.removeSchema(var16);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    var16.removeTable((org.databene.jdbacl.model.DBTable)var28);
    org.databene.jdbacl.model.Database var30 = var16.getDatabase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test166");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__126();
    var10.mT__133();
    var10.mT__77();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test167");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.identity.mem.MapperState var1 = org.databene.jdbacl.identity.mem.MapperState.valueOf("alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test168");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.dialect.Derby10_6Dialect var6 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var9 = var6.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var11 = var6.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.lang.String var19 = var6.renderCreateSequence(var15);
    java.lang.String var20 = var15.getSchemaName();
    java.lang.String var21 = var0.renderCreateSequence(var15);
    org.databene.jdbacl.model.DBSequence var25 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var26 = var25.dropDDL();
    java.math.BigInteger var27 = var25.getMinValueIfNotDefault();
    java.lang.String var28 = var0.renderCreateSequence(var25);
    java.lang.String var32 = var0.regexQuery("select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'", true, "SET GENERATOR catalog TO -2 ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var19.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi! as 10 on . = 10."+ "'", var20.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var21.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "drop sequence "+ "'", var26.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "CREATE SEQUENCE "+ "'", var28.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "NOT select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' ~ 'SET GENERATOR catalog TO -2 ()'"+ "'", var32.equals("NOT select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' ~ 'SET GENERATOR catalog TO -2 ()'"));

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test169");


    org.databene.jdbacl.identity.NaturalPkIdentity var1 = new org.databene.jdbacl.identity.NaturalPkIdentity("CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.");

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test170");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    var0.mTABLE_NAME();
    var0.mDROP_TABLE();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__132();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test171");


    boolean var1 = org.databene.jdbacl.SQLUtil.isDML("DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test172");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.util.List var16 = var15.getComponents();
    var15.setObjectType("-1");
    java.util.List var19 = var15.getComponents();
    java.lang.String var20 = var15.getStatus();
    var15.setSubObjectName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    var15.setDataObjectId("alter sequence CREATE GENERATOR drop sequence  restart with -1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test173");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    boolean var6 = var0.isDefaultCatalog("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var9 = var0.renderSequenceValue("drop generator sequence", 100L);
    boolean var10 = var0.isSequenceSupported();
    boolean var13 = var0.isDefaultCatalog("Identity definition by unique key: select next value for 10", "alter sequence drop sequence 10 restart with 0");
    boolean var16 = var0.isDefaultSchema("Sub identity of ():\nnull", "NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')");
    boolean var19 = var0.isDefaultSchema("10", "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var20 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var9.equals("alter sequence drop generator sequence restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test174");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__126();
    var10.mT__133();
    var10.mT__130();
    var10.mT__104();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test175");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var3 = var1.withUri("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.SQLScriptException var5 = var3.withUri("SET GENERATOR . TO -1");
    int var6 = var5.getLineNo();
    java.util.List var8 = org.antlr.runtime.BaseRecognizer.getRuleInvocationStack((java.lang.Throwable)var5, "select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test176");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    var2.reset();
    var2.setLine(79);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var2);
    var2.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test177");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isTemporal();
    boolean var26 = var9.equals((java.lang.Object)var24);
    boolean var27 = var9.isTemporal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test178");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    org.databene.jdbacl.model.DBTrigger var33 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var32);
    java.util.List var34 = var32.getPackages();
    org.databene.jdbacl.model.DBPackage var35 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var32);
    java.util.List var36 = var35.getComponents();
    org.databene.jdbacl.model.DBProcedure var37 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var35);
    var16.addProcedure(var37);
    var16.setSubObjectName("sequence");
    var16.setStatus("hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1-identity-CREATE SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test179");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var32 = var31.getCatalog();
    org.databene.jdbacl.model.DBCatalog var33 = var31.getCatalog();
    org.databene.jdbacl.model.DBTreeModel var34 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var31);
    org.databene.jdbacl.model.DBSequence var38 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var38.setCache((java.lang.Long)100L);
    java.lang.String var41 = var38.getObjectType();
    java.lang.String var42 = var38.dropDDL();
    java.math.BigInteger var43 = var38.getStartIfNotDefault();
    org.databene.jdbacl.model.DBObject var44 = var34.getParent((org.databene.jdbacl.model.DBObject)var38);
    org.databene.jdbacl.model.DBSequence var48 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var48.setName("10");
    java.math.BigInteger var51 = var48.getIncrement();
    org.databene.jdbacl.model.DBSequence var55 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var55.setName("10");
    java.math.BigInteger var58 = var55.getIncrement();
    var48.setMaxValue(var58);
    var38.setLastNumber(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "sequence"+ "'", var41.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "drop sequence "+ "'", var42.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test180");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var3 = var0.renderSetSequenceValue(".", 0L);
    boolean var6 = var0.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    boolean var8 = var0.isDeterministicPKName("select nextval('')");
    boolean var10 = var0.isDeterministicFKName("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") null \"sequence\" null \"'hi!'\")");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SET GENERATOR . TO -1"+ "'", var3.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test181");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var80 = new org.databene.jdbacl.ResultSetConverter(var78);
    org.databene.jdbacl.ResultSetConverter var82 = new org.databene.jdbacl.ResultSetConverter(var78, false);
    java.lang.Class var83 = var82.getSourceType();
    java.lang.Class var84 = var82.getTargetType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test183");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    java.lang.String var10 = var0.renderSequenceValue("drop sequence 10", 0L);
    java.lang.String var13 = var0.renderSequenceValue("CREATE GENERATOR drop sequence ", 10L);
    java.lang.String var17 = var0.regexQuery("catalog", false, "call next value for null[]");
    boolean var19 = var0.isDeterministicUKName("select next value for CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))");
    boolean var21 = var0.isDeterministicUKName("select alter sequence drop sequence 10 restart with 0.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var10.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "alter sequence CREATE GENERATOR drop sequence  restart with 10"+ "'", var13.equals("alter sequence CREATE GENERATOR drop sequence  restart with 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "REGEXP_MATCHES(catalog, 'call next value for null[]')"+ "'", var17.equals("REGEXP_MATCHES(catalog, 'call next value for null[]')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test184");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    var15.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var19 = var18.getForeignKeyConstraints();
    var15.addReferrer((org.databene.jdbacl.model.DBTable)var18);
    org.databene.jdbacl.model.DBDataType var23 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var24 = var23.isAlpha();
    java.lang.String var25 = var23.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var26 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var29 = var26.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var31 = var26.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var32 = var23.equals((java.lang.Object)var31);
    org.databene.jdbacl.model.DefaultDBColumn var35 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var18, var23, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var36 = var35.getType();
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var41 = var40.getForeignKeyConstraints();
    var37.addReferrer((org.databene.jdbacl.model.DBTable)var40);
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.join("", "", var48, "hi!", "10", var52);
    org.databene.jdbacl.model.DBUniqueConstraint var54 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var40, "select nextval('')", false, var48);
    var54.addColumnName("sequence");
    var35.addUkConstraint(var54);
    var35.setNullable(true);
    var35.setFractionDigits((java.lang.Integer)69);
    java.lang.String var62 = var35.toString();
    var1.addColumn((org.databene.jdbacl.model.DBColumn)var35);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    java.util.Set var68 = var64.getUniqueConstraints(false);
    java.lang.String var69 = var64.getDoc();
    var64.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    org.databene.jdbacl.JDBCConnectData var78 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var79 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var78);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var80 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var78);
    boolean var81 = var64.equals((java.lang.Object)var78);
    java.lang.String[] var82 = var64.getPKColumnNames();
    java.util.Set var84 = var64.getUniqueConstraints(true);
    var35.setTable((org.databene.jdbacl.model.DBTable)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "DROP SEQUENCE "+ "'", var25.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var31.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi! as 10 on . = 10."+ "'", var53.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)"+ "'", var62.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test185");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__100();
    var10.mT__115();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test186");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mCOMMENT_TABLE();
    var10.mT__121();
    var10.mTABLE_NAME();
    var10.mSTAR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test187");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var2 = var1.getTables();
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    boolean var7 = var3.equals((java.lang.Object)(-1.0f));
    var1.removeTable((org.databene.jdbacl.model.DBTable)var3);
    java.util.List var10 = var1.getSequences(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test188");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultCatalog("select nextval for CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1 from sysibm.sysdummy1", "hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1");
    java.lang.String var4 = var0.getSystem();
    boolean var6 = var0.isDeterministicUKName("jdbc:hsqldb:mem:CREATE GENERATOR 10");
    boolean var8 = var0.isDeterministicPKName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "db2"+ "'", var4.equals("db2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test189");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var13);
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    org.databene.jdbacl.model.Database var19 = var17.getDatabase();
    java.lang.String var20 = var17.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    org.databene.jdbacl.model.DBSchema var31 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var25);
    var17.removeSchema(var31);
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    org.databene.jdbacl.model.DBSchema var44 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var38);
    org.databene.jdbacl.model.DBTrigger var45 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var44);
    var45.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var48 = var45.getTriggerBody();
    java.lang.String var49 = var45.getTriggerBody();
    var45.setTriggeringEvent("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)");
    var45.setTriggerBody("DROP SEQUENCE -1 RESTRICT");
    var45.setTriggerType("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var31.addTrigger(var45);
    var13.addTrigger(var45);
    org.databene.jdbacl.model.DBCatalog var58 = var13.getCatalog();
    org.databene.jdbacl.model.DBPackage var59 = new org.databene.jdbacl.model.DBPackage("alter sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) restart with 10", var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var15.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test190");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    org.databene.jdbacl.model.DBTrigger var30 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var29);
    java.util.List var31 = var29.getPackages();
    org.databene.jdbacl.model.DBPackage var32 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var29);
    java.lang.String var33 = var32.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var38 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var40 = var38.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    java.lang.String var43 = var38.formatValue((java.lang.Object)var41);
    var41.setName("'hi!'");
    java.util.List var46 = var41.getSchemas();
    org.databene.jdbacl.model.DBSchema var47 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var41);
    org.databene.jdbacl.model.DBTrigger var48 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var47);
    java.util.List var49 = var47.getPackages();
    org.databene.jdbacl.model.DBPackage var50 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var47);
    java.util.List var51 = var50.getComponents();
    org.databene.jdbacl.model.DBProcedure var52 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var50);
    java.lang.String var53 = var52.getSubProgramId();
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    java.util.Set var59 = var55.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var62 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var63 = var62.isAlpha();
    boolean var64 = var62.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var67 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var55, var62, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var70 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var71 = var70.getTables();
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var70);
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    var73.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var76 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var77 = var76.getForeignKeyConstraints();
    var73.addReferrer((org.databene.jdbacl.model.DBTable)var76);
    var70.addTable((org.databene.jdbacl.model.DBTable)var76);
    var67.setTable((org.databene.jdbacl.model.DBTable)var76);
    boolean var81 = var52.isIdentical((org.databene.jdbacl.model.DBObject)var76);
    var32.addProcedure(var52);
    java.lang.String var83 = var52.getSubProgramId();
    var15.addProcedure(var52);
    var15.setObjectType("sequence");
    var15.setDataObjectId("No identity defined for table alter sequence drop generator sequence restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test191");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var39 = new org.databene.jdbacl.model.DefaultDBColumn("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (org.databene.jdbacl.model.DBTable)var5, var31, (java.lang.Integer)3, (java.lang.Integer)69);
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumn((org.databene.jdbacl.model.DBColumn)var39);
    java.lang.Integer var41 = var39.getFractionDigits();
    boolean var42 = var39.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  DROP SEQUENCE (3,69) NULL"+ "'", var40.equals("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  DROP SEQUENCE (3,69) NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 69+ "'", var41.equals(69));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test192");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    var12.setColumnName("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var12.setTriggerType("REGEXP_MATCHES(catalog, 'call next value for null[]')");
    java.lang.String var19 = var12.getTriggerType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "REGEXP_MATCHES(catalog, 'call next value for null[]')"+ "'", var19.equals("REGEXP_MATCHES(catalog, 'call next value for null[]')"));

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test193");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    var0.mCOMMENT_TABLE();
    var0.mCREATE_SEQUENCE();
    org.databene.jdbacl.sql.parser.SQLLexer var6 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var6.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var11 = var9.LT(10);
    var6.setCharStream((org.antlr.runtime.CharStream)var9);
    org.databene.jdbacl.sql.parser.SQLLexer var13 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var15 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var15.release((-1));
    boolean var19 = var13.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var15, 0);
    var6.setCharStream((org.antlr.runtime.CharStream)var15);
    java.lang.String var21 = var15.getSourceName();
    var0.consumeUntil((org.antlr.runtime.IntStream)var15, 1);
    var0.mALTER_TABLE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test194");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var22 = var21.getType();
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    org.databene.jdbacl.model.DBUniqueConstraint var40 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var26, "select nextval('')", false, var34);
    var40.addColumnName("sequence");
    var21.addUkConstraint(var40);
    boolean var44 = var40.isNameDeterministic();
    java.lang.String[] var45 = var40.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test196");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBIndex var30 = var22.getIndex("");
    org.databene.jdbacl.model.DBTreeModel var31 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test197");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBCheckConstraint var4 = new org.databene.jdbacl.model.DBCheckConstraint("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )", true, "org.databene.jdbacl.identity.InvalidIdentityDefinitionError", "catalog null: interface java.sql.ResultSet");
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test198");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    var12.setColumnName("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var12.setTriggerType("REGEXP_MATCHES(catalog, 'call next value for null[]')");
    java.lang.String var19 = var12.getWhenClause();
    var12.setDescription("No identity defined for table NOT drop sequence  ~ 'alter sequence  restart with -1'");
    var12.setActionType("drop generator NaturalPkIdentity(hi!)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test199");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.mT__137();
    var10.mOR();
    var10.mSIZE();
    var10.mT__65();
    var10.mT__63();
    org.databene.jdbacl.sql.parser.SQLLexer var21 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var23 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var23.release((-1));
    boolean var27 = var21.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var23, 0);
    int var28 = var21.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var30 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var21.consumeUntil((org.antlr.runtime.IntStream)var30, 100);
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    var21.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var43);
    var21.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var46 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var46.mCREATE_TABLE();
    var46.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var50 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var52 = var50.LT(10);
    var46.setCharStream((org.antlr.runtime.CharStream)var50);
    var21.consumeUntil((org.antlr.runtime.IntStream)var50, 1);
    org.databene.jdbacl.sql.parser.SQLLexer var56 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var50);
    org.databene.jdbacl.sql.parser.SQLLexer var57 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var57.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var60 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var62 = var60.LT(10);
    var57.setCharStream((org.antlr.runtime.CharStream)var60);
    org.databene.jdbacl.sql.parser.SQLLexer var64 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var66 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var66.release((-1));
    boolean var70 = var64.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var66, 0);
    var57.setCharStream((org.antlr.runtime.CharStream)var66);
    var57.setBacktrackingLevel(1);
    var57.mT__75();
    org.databene.jdbacl.sql.parser.SQLLexer var75 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var75.mCREATE_TABLE();
    var75.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var79 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var81 = var79.LT(10);
    var75.setCharStream((org.antlr.runtime.CharStream)var79);
    int var84 = var79.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var85 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var79);
    var85.setText("select next value for SET GENERATOR.TO - 1");
    var85.setBacktrackingLevel(1);
    var85.mLE();
    var85.mT__99();
    var85.mT__110();
    org.antlr.runtime.Token var93 = var85.emit();
    var57.emit(var93);
    java.lang.String var95 = var56.getTokenErrorDisplay(var93);
    var10.emit(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "'select next value for SET GENERATOR.TO - 1'"+ "'", var95.equals("'select next value for SET GENERATOR.TO - 1'"));

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test200");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.setText("'SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)'");
    var10.skip();
    var10.mOR();
    var10.mT__68();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test201");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var4 = var0.isDeterministicPKName("alter sequence  restart with -1");
    java.lang.String var6 = var0.renderFetchSequenceValue("select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL");
    boolean var8 = var0.isDeterministicPKName("SET GENERATOR catalog TO -2 (REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).'))");
    boolean var10 = var0.isDeterministicFKName("alter sequence drop sequence 10 restart with 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "call next value for select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL"+ "'", var6.equals("call next value for select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test202");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getMinValueIfNotDefault();
    java.lang.String var6 = var3.getSchemaName();
    java.lang.Boolean var7 = var3.isOrder();
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    java.lang.String var24 = var22.getName();
    org.databene.jdbacl.dialect.DerbyDialect var26 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var28 = var26.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var26.formatValue((java.lang.Object)var29);
    var29.setName("'hi!'");
    java.util.List var34 = var29.getSchemas();
    org.databene.jdbacl.model.DBSchema var35 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var29);
    org.databene.jdbacl.dialect.DerbyDialect var38 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var40 = var38.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    java.lang.String var43 = var38.formatValue((java.lang.Object)var41);
    var41.setName("'hi!'");
    java.util.List var46 = var41.getSchemas();
    org.databene.jdbacl.model.DBSchema var47 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var41);
    org.databene.jdbacl.model.DBTrigger var48 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var47);
    var35.addTrigger(var48);
    var22.addTrigger(var48);
    org.databene.jdbacl.model.DBSequence var51 = new org.databene.jdbacl.model.DBSequence("'hi!'", var22);
    var8.addSchema(var22);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var8);
    org.databene.jdbacl.dialect.DerbyDialect var56 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var58 = var56.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var59 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var60 = var59.getName();
    java.lang.String var61 = var56.formatValue((java.lang.Object)var59);
    var59.setName("'hi!'");
    java.util.List var64 = var59.getSchemas();
    org.databene.jdbacl.model.DBSchema var65 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var59);
    org.databene.jdbacl.model.DBTrigger var66 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var65);
    org.databene.jdbacl.dialect.DerbyDialect var67 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var69 = var67.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var70 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var71 = var70.getName();
    java.lang.String var72 = var67.formatValue((java.lang.Object)var70);
    java.util.List var73 = var70.getComponents();
    var65.setCatalog(var70);
    java.util.List var76 = var65.getSequences(true);
    var8.removeSchema(var65);
    java.util.List var79 = var65.getTables(true);
    var3.setOwner((org.databene.jdbacl.model.CompositeDBObject)var65);
    java.util.List var82 = var65.getSequences(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi! as 10 on . = 10."+ "'", var6.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var24.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "catalog null"+ "'", var53.equals("catalog null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test203");


    org.databene.jdbacl.sql.parser.SQLParser.create_table_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.create_table_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test204");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.emitErrorMessage("call next value for 'hi!'");
    var0.mCOLUMN_SPEC();
    java.lang.String var6 = var0.getCharErrorDisplay(69);
    var0.mDROP_SEQUENCE();
    java.util.List var8 = var0.getRuleInvocationStack();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var10 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var12 = var10.LA(10);
    java.lang.String var13 = var10.getText();
    var0.setCharStream((org.antlr.runtime.CharStream)var10);
    java.lang.String var15 = var0.getSourceName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__99();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "'E'"+ "'", var6.equals("'E'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test205");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var4 = var1.isDefaultSchema("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)", "alter sequence hi! restart with 1");
    boolean var6 = var1.isDeterministicPKName("jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    boolean var8 = var1.isDeterministicUKName("");
    boolean var10 = var1.isDeterministicPKName("select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual");
    boolean var12 = var1.isDeterministicPKName("alter sequence -1 restart with 1");
    boolean var14 = var1.isDeterministicPKName("select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null)");
    boolean var17 = var1.isDefaultCatalog("'d'", "null[false]");
    org.databene.jdbacl.dialect.OracleDialect var18 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var20 = var18.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    boolean var22 = var18.isDeterministicFKName("false");
    org.databene.jdbacl.dialect.Derby10_6Dialect var23 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var26 = var23.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var28 = var23.isDeterministicIndexName("select nextval('')");
    java.lang.String var30 = var23.renderDropSequence("jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable();
    var31.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var35 = var34.getForeignKeyConstraints();
    var31.addReferrer((org.databene.jdbacl.model.DBTable)var34);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    java.util.Set var42 = var38.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var45 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var46 = var45.isAlpha();
    boolean var47 = var45.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var50 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var38, var45, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var34.addColumn((org.databene.jdbacl.model.DBColumn)var50);
    org.databene.jdbacl.model.DBRow var52 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var34);
    java.lang.Object[] var53 = var52.getPKValues();
    org.databene.jdbacl.model.DBSequence var58 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var58.setCache((java.lang.Long)100L);
    java.lang.String var61 = var58.getObjectType();
    java.math.BigInteger var62 = var58.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var66 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var66.setName("10");
    java.math.BigInteger var69 = var66.getIncrement();
    java.math.BigInteger var70 = var66.getIncrement();
    var58.setLastNumber(var70);
    var58.setOrder((java.lang.Boolean)false);
    var52.setCellValue("alter sequence  restart with -1", (java.lang.Object)var58);
    java.lang.String var75 = var23.renderCreateSequence(var58);
    var58.setCycle((java.lang.Boolean)true);
    java.lang.String var78 = var18.renderCreateSequence(var58);
    java.lang.String var79 = var1.renderCreateSequence(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"+ "'", var30.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "sequence"+ "'", var61.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var75.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER"+ "'", var78.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "CREATE SEQUENCE  CYCLE"+ "'", var79.equals("CREATE SEQUENCE  CYCLE"));

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test206");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    var7.setIncludeTables("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var13 = var7.getConnection();
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test207");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.FKChangeRule var45 = var41.getUpdateRule();
    int var46 = var45.ordinal();
    java.lang.Class var47 = var45.getDeclaringClass();
    org.databene.jdbacl.ResultSetConverter var48 = new org.databene.jdbacl.ResultSetConverter(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var43.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test208");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    var10.addTrigger(var23);
    var23.setStatus("alter sequence drop generator sequence restart with 100");
    java.lang.String var27 = var23.getColumnName();
    var23.setWhenClause("DROP SEQUENCE -1 RESTRICT");
    java.lang.String var30 = var23.getStatus();
    var23.setTriggerBody("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    var23.setTableOwner("hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1");
    java.lang.String var35 = var23.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "alter sequence drop generator sequence restart with 100"+ "'", var30.equals("alter sequence drop generator sequence restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test209");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_SEQUENCE();
    var0.mCOLUMN_NAME();
    var0.reset();
    var0.mCREATE_TABLE();

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test210");


    org.databene.jdbacl.SQLScriptException var2 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var4 = var2.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var6 = new org.databene.jdbacl.SQLScriptException(1);
    var4.addSuppressed((java.lang.Throwable)var6);
    org.databene.jdbacl.SQLScriptException var10 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var4, "drop sequence ", (-1));
    java.lang.Throwable[] var11 = var10.getSuppressed();
    org.databene.jdbacl.SQLScriptException var13 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var10, 100);
    org.databene.jdbacl.SQLScriptException var15 = var10.withUri("null");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var17 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("alter sequence NOT drop generator sequence ~ 'hi!' restart with 10 NOT REGEXP 'jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: '", (java.lang.Throwable)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test211");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var3 = var0.renderSequenceValue("hi!", 1L);
    java.lang.String var7 = var0.regexQuery("sequence", true, "");
    boolean var9 = var0.isDeterministicPKName("alter sequence hi! restart with 1");
    boolean var12 = var0.isDefaultCatalog("catalog null", "(NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1)");
    java.lang.String var14 = var0.renderFetchSequenceValue("drop generator CONSTRAINT \"select nextval('')\" UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "alter sequence hi! restart with 1"+ "'", var3.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var7.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "call next value for drop generator CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var14.equals("call next value for drop generator CONSTRAINT \"select nextval('')\" UNIQUE ()"));

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test212");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDownloadUrl("drop generator CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    var0.setDbSystem("alter sequence hi! restart with 1");
    java.lang.String var7 = var0.getId();
    java.lang.String var8 = var0.getDefaultUser();
    var0.setDefaultSchema("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\"");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test213");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.io.File var20 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var22 = new org.databene.jdbacl.model.xml.XMLModelExporter(var20, "sequence");
    org.databene.jdbacl.model.sql.CreateExporter var23 = new org.databene.jdbacl.model.sql.CreateExporter(var20);
    org.databene.jdbacl.model.xml.XMLModelImporter var24 = new org.databene.jdbacl.model.xml.XMLModelImporter(var20);
    var24.close();
    var10.traceOut("select nextval(''((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"''hi!''\")'')", 3, (java.lang.Object)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.Database var27 = var24.importDatabase();
      fail("Expected exception of type org.databene.commons.ImportFailedException");
    } catch (org.databene.commons.ImportFailedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test214");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1");
    boolean var4 = var0.isDeterministicPKName("NaturalPkIdentity(hi!)");
    boolean var6 = var0.isDeterministicIndexName("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1");
    boolean var9 = var0.isDefaultCatalog("No identity defined for table NOT drop sequence  ~ 'alter sequence  restart with -1'", "No identity defined for table NOT drop sequence  ~ 'alter sequence  restart with -1'");
    boolean var12 = var0.isDefaultSchema("drop sequence CREATE SEQUENCE  MAXVALUE 0", "alter sequence NOT drop generator sequence ~ 'hi!' restart with 10 NOT REGEXP 'jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: '");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test215");


    org.databene.jdbacl.sql.parser.SQLParser.ora_lob_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.ora_lob_return();
    java.lang.Object var1 = var0.getStart();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test216");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.Boolean var4 = var3.isOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test217");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable("select   REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'.nextval from dual");
    org.databene.jdbacl.model.DBDataType var5 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    java.lang.String[] var8 = new java.lang.String[] { "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"};
    org.databene.jdbacl.sql.ColumnExpression var12 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var15 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var16 = var15.getValue();
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var20 = var19.getValue();
    org.databene.jdbacl.sql.BetweenExpression var21 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var12, (org.databene.script.Expression)var15, (org.databene.script.Expression)var19);
    org.databene.jdbacl.sql.ColumnExpression var24 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var27 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var28 = var27.getValue();
    org.databene.jdbacl.sql.ColumnExpression var31 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var32 = var31.getValue();
    org.databene.jdbacl.sql.BetweenExpression var33 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var24, (org.databene.script.Expression)var27, (org.databene.script.Expression)var31);
    org.databene.jdbacl.sql.ColumnExpression var36 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var39 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var40 = var39.getValue();
    org.databene.jdbacl.sql.ColumnExpression var43 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var44 = var43.getValue();
    org.databene.jdbacl.sql.BetweenExpression var45 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var36, (org.databene.script.Expression)var39, (org.databene.script.Expression)var43);
    org.databene.jdbacl.sql.BetweenExpression var46 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var19, (org.databene.script.Expression)var27, (org.databene.script.Expression)var39);
    org.databene.script.Expression[] var47 = new org.databene.script.Expression[] { var19};
    org.databene.jdbacl.sql.FunctionInvocation var48 = new org.databene.jdbacl.sql.FunctionInvocation("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var47);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.renderWhereClause(var8, (java.lang.Object[])var47);
    org.databene.jdbacl.sql.FunctionInvocation var50 = new org.databene.jdbacl.sql.FunctionInvocation("select next value for SET GENERATOR . TO -1", var47);
    boolean var51 = var5.equals((java.lang.Object)"select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.DefaultDBColumn var52 = new org.databene.jdbacl.model.DefaultDBColumn("sequence", (org.databene.jdbacl.model.DBTable)var2, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "sequence"+ "'", var16.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "sequence"+ "'", var20.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "sequence"+ "'", var28.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "sequence"+ "'", var32.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "sequence"+ "'", var40.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "sequence"+ "'", var44.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var49.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test218");


    org.databene.jdbacl.sql.parser.SQLParser.type_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.type_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getStop();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test219");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    var0.mCOMMENT_TABLE();
    var0.mCREATE_SEQUENCE();
    var0.mCOLUMN_SPEC();
    var0.mDROP_TABLE();
    var0.mORA_CONFIGS();

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test220");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mVARCHAR2();
    var10.mT__77();
    var10.mT__130();
    var10.mT__74();
    int var20 = var10.getLine();
    var10.mT__135();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test221");


    org.databene.jdbacl.model.DBSchema var1 = new org.databene.jdbacl.model.DBSchema("CONSTRAINT \"select nextval('')\" ");
    java.util.List var3 = var1.getTables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test222");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var3 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "Identity definition by unique key: select next value for 10");
    org.databene.jdbacl.model.xml.XMLModelExporter var4 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1);
    org.databene.jdbacl.model.xml.XMLModelExporter var5 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1);
    org.databene.jdbacl.model.sql.CreateExporter var6 = new org.databene.jdbacl.model.sql.CreateExporter(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test223");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var3 = var1.isDeterministicFKName("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test224");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var6.setFaultTolerant(false);
    var6.setLazy(true);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test225");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.math.BigInteger var19 = var17.getMinValueIfNotDefault();
    boolean var20 = var11.isIdentical((org.databene.jdbacl.model.DBObject)var17);
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    org.databene.jdbacl.model.Database var23 = var21.getDatabase();
    java.lang.String var24 = var21.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var26 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var28 = var26.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var26.formatValue((java.lang.Object)var29);
    var29.setName("'hi!'");
    java.util.List var34 = var29.getSchemas();
    org.databene.jdbacl.model.DBSchema var35 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var29);
    var21.removeSchema(var35);
    org.databene.jdbacl.dialect.DerbyDialect var39 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var41 = var39.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var42 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var43 = var42.getName();
    java.lang.String var44 = var39.formatValue((java.lang.Object)var42);
    var42.setName("'hi!'");
    java.util.List var47 = var42.getSchemas();
    org.databene.jdbacl.model.DBSchema var48 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var42);
    org.databene.jdbacl.model.DBTrigger var49 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var48);
    var49.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var52 = var49.getTriggerBody();
    java.lang.String var53 = var49.getColumnName();
    java.lang.String var54 = var49.getWhenClause();
    var35.addTrigger(var49);
    java.util.List var56 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var35);
    java.util.List var57 = var35.getTriggers();
    java.lang.String var58 = var35.getName();
    var11.removeSchema(var35);
    var10.setCatalog(var11);
    var11.setDoc("null.jdbc:h2:mem:select next value for 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var58.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test226");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("CONSTRAINT \"jdbc:h2:mem:select next value for 10\" PRIMARY KEY ()", "CONSTRAINT \"CREATE GENERATOR drop sequence \" .", "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\"): class org.databene.jdbacl.model.FKChangeRule", "CREATE SEQUENCE  CYCLE", "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'", "call next value for alter sequence -1 restart with 1", "left join call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'') as call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'') on NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE .DROP SEQUENCE  = call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'').select next value for 10", true);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test227");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    org.databene.jdbacl.model.DBTrigger var30 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var29);
    var30.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var33 = var30.getTriggerBody();
    java.lang.String var34 = var30.getColumnName();
    java.lang.String var35 = var30.getWhenClause();
    var16.addTrigger(var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("-1", var16);
    java.util.List var39 = var16.getSequences(true);
    org.databene.jdbacl.model.Database var40 = var16.getDatabase();
    org.databene.jdbacl.model.DBSequence var41 = new org.databene.jdbacl.model.DBSequence("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (, DROP SEQUENCE )", var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test228");


    java.lang.String var1 = org.databene.jdbacl.dialect.HSQLUtil.getInMemoryURL("CONSTRAINT hi! UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "jdbc:hsqldb:mem:CONSTRAINT hi! UNIQUE ()"+ "'", var1.equals("jdbc:hsqldb:mem:CONSTRAINT hi! UNIQUE ()"));

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test229");


    org.databene.jdbacl.model.TableContainer var3 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var4 = var3.getTables();
    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var3);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    var3.addTable((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.removeTable((org.databene.jdbacl.model.DBTable)var13);
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    var15.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var19 = var18.getForeignKeyConstraints();
    var15.addReferrer((org.databene.jdbacl.model.DBTable)var18);
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    java.util.Set var26 = var22.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var29 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var30 = var29.isAlpha();
    boolean var31 = var29.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var34 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var22, var29, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var18.addColumn((org.databene.jdbacl.model.DBColumn)var34);
    var3.removeTable((org.databene.jdbacl.model.DBTable)var18);
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    java.util.Set var41 = var37.getUniqueConstraints(false);
    java.lang.String var42 = var37.getDoc();
    var37.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    var3.addTable((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DefaultDBTable var47 = new org.databene.jdbacl.model.DefaultDBTable();
    var47.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var51 = var50.getForeignKeyConstraints();
    var47.addReferrer((org.databene.jdbacl.model.DBTable)var50);
    org.databene.jdbacl.model.DBDataType var55 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var56 = var55.isAlpha();
    java.lang.String var57 = var55.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var58 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var61 = var58.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var63 = var58.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var64 = var55.equals((java.lang.Object)var63);
    org.databene.jdbacl.model.DefaultDBColumn var67 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var50, var55, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var68 = var67.getType();
    org.databene.jdbacl.model.DBDataType var71 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var72 = var71.isAlpha();
    java.lang.String var73 = var71.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var74 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var77 = var74.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var79 = var74.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var80 = var71.equals((java.lang.Object)var79);
    var67.setType(var71);
    java.lang.String var82 = var71.getName();
    org.databene.jdbacl.model.DefaultDBColumn var83 = new org.databene.jdbacl.model.DefaultDBColumn("call next value for null[]", (org.databene.jdbacl.model.DBTable)var37, var71);
    int var84 = var71.getJdbcType();
    java.lang.String var85 = var71.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "."+ "'", var42.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "DROP SEQUENCE "+ "'", var57.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var63.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "DROP SEQUENCE "+ "'", var73.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var79.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "DROP SEQUENCE "+ "'", var82.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "DROP SEQUENCE "+ "'", var85.equals("DROP SEQUENCE "));

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test230");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    org.databene.jdbacl.model.DBPackage var16 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var13);
    java.util.List var17 = var16.getComponents();
    org.databene.jdbacl.model.DBProcedure var18 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    java.lang.String var19 = var18.getSubProgramId();
    var18.setSubProgramId("jdbc:h2:mem:select next value for 10");
    var18.setSubProgramId("NOT drop sequence  ~ 'alter sequence  restart with -1'");
    var18.setSubProgramId("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    java.lang.String var26 = var18.getOverload();
    var18.setSubProgramId("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0");
    java.lang.String var29 = var18.getSubProgramId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0"+ "'", var29.equals("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script line 1:  TO 0"));

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test231");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var9 = var0.renderFetchSequenceValue("");
    java.lang.String var13 = var0.regexQuery("drop generator sequence", true, "hi!");
    boolean var15 = var0.isDeterministicPKName("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    org.databene.jdbacl.model.DBSequence var19 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var20 = var19.dropDDL();
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var19);
    var19.setName("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL");
    java.lang.String var24 = var0.renderCreateSequence(var19);
    java.lang.Boolean var25 = var19.isOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('')"+ "'", var9.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop generator sequence ~ 'hi!'"+ "'", var13.equals("NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "drop sequence "+ "'", var20.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "CREATE SEQUENCE CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL"+ "'", var24.equals("CREATE SEQUENCE CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test232");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var2 = var1.mark();
    int var3 = var1.getCharPositionInLine();
    int var4 = var1.getLine();
    int var6 = var1.LA(309);
    java.lang.String var7 = var1.toString();
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"+ "'", var7.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"+ "'", var8.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)"));

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test233");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.lang.String var16 = var15.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    org.databene.jdbacl.model.DBTrigger var30 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var29);
    java.util.List var31 = var29.getPackages();
    org.databene.jdbacl.model.DBPackage var32 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var29);
    java.lang.String var33 = var32.getStatus();
    org.databene.jdbacl.dialect.DerbyDialect var38 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var40 = var38.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    java.lang.String var43 = var38.formatValue((java.lang.Object)var41);
    var41.setName("'hi!'");
    java.util.List var46 = var41.getSchemas();
    org.databene.jdbacl.model.DBSchema var47 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var41);
    org.databene.jdbacl.model.DBTrigger var48 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var47);
    java.util.List var49 = var47.getPackages();
    org.databene.jdbacl.model.DBPackage var50 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var47);
    java.util.List var51 = var50.getComponents();
    org.databene.jdbacl.model.DBProcedure var52 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var50);
    java.lang.String var53 = var52.getSubProgramId();
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    java.util.Set var59 = var55.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var62 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var63 = var62.isAlpha();
    boolean var64 = var62.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var67 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var55, var62, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var70 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var71 = var70.getTables();
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var70);
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    var73.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var76 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var77 = var76.getForeignKeyConstraints();
    var73.addReferrer((org.databene.jdbacl.model.DBTable)var76);
    var70.addTable((org.databene.jdbacl.model.DBTable)var76);
    var67.setTable((org.databene.jdbacl.model.DBTable)var76);
    boolean var81 = var52.isIdentical((org.databene.jdbacl.model.DBObject)var76);
    var32.addProcedure(var52);
    java.lang.String var83 = var52.getSubProgramId();
    var15.addProcedure(var52);
    var15.setObjectType("sequence");
    java.lang.String var87 = var15.getDataObjectId();
    java.lang.String var88 = var15.getObjectType();
    java.lang.String var89 = var15.getObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "sequence"+ "'", var88.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "sequence"+ "'", var89.equals("sequence"));

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test234");


    org.databene.jdbacl.sql.parser.SQLParser.arguments_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.arguments_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test235");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    var0.mCOMMENT_TABLE();
    var0.mCREATE_SEQUENCE();
    org.databene.jdbacl.sql.parser.SQLLexer var6 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var6.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var11 = var9.LT(10);
    var6.setCharStream((org.antlr.runtime.CharStream)var9);
    org.databene.jdbacl.sql.parser.SQLLexer var13 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var15 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var15.release((-1));
    boolean var19 = var13.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var15, 0);
    var6.setCharStream((org.antlr.runtime.CharStream)var15);
    java.lang.String var21 = var15.getSourceName();
    var0.consumeUntil((org.antlr.runtime.IntStream)var15, 1);
    var0.mSIZE();
    var0.mSIZE();
    var0.mORA_CONFIGS();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test236");


    org.databene.jdbacl.identity.IdentityProvider var0 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.NaturalPkIdentity var2 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var3 = var2.getName();
    var0.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var2, "SET GENERATOR . TO -1");
    java.lang.String[] var10 = new java.lang.String[] { ""};
    java.lang.String[] var14 = new java.lang.String[] { ""};
    java.lang.String var15 = org.databene.jdbacl.SQLUtil.join("", "", var10, "hi!", "10", var14);
    org.databene.jdbacl.identity.IdentityProvider var16 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var17 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var10, var16);
    java.lang.String var18 = var17.getDescription();
    java.lang.String var19 = var17.getDescription();
    var0.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var17, "select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE;");
    java.lang.String var22 = var17.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi! as 10 on . = 10."+ "'", var15.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Sub identity of ():\nnull"+ "'", var18.equals("Sub identity of ():\nnull"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Sub identity of ():\nnull"+ "'", var19.equals("Sub identity of ():\nnull"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Sub identity of ():\nnull"+ "'", var22.equals("Sub identity of ():\nnull"));

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test237");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var7.mCREATE_TABLE();
    var7.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var11 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var13 = var11.LT(10);
    var7.setCharStream((org.antlr.runtime.CharStream)var11);
    boolean var16 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var11, 69);
    java.lang.String var17 = var11.getSourceName();
    var11.setCharPositionInLine(32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test238");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    java.lang.String[] var43 = new java.lang.String[] { ""};
    java.lang.String[] var47 = new java.lang.String[] { ""};
    java.lang.String var48 = org.databene.jdbacl.SQLUtil.join("", "", var43, "hi!", "10", var47);
    java.lang.String var49 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var43);
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String[] var60 = new java.lang.String[] { ""};
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.join("", "", var56, "hi!", "10", var60);
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var60);
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var43, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var60);
    boolean var64 = var36.equals((java.lang.Object)"drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.renderColumnTypeWithSize((org.databene.jdbacl.model.DBColumn)var36);
    var36.setVersionColumn(false);
    boolean var68 = var36.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi! as 10 on . = 10."+ "'", var48.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "."+ "'", var49.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi! as 10 on . = 10."+ "'", var61.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "."+ "'", var62.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var63.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "DROP SEQUENCE (0,-1)"+ "'", var65.equals("DROP SEQUENCE (0,-1)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test239");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    org.databene.jdbacl.dialect.DerbyDialect var28 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var30 = var28.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var31 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var32 = var31.getName();
    java.lang.String var33 = var28.formatValue((java.lang.Object)var31);
    var31.setName("'hi!'");
    java.util.List var36 = var31.getSchemas();
    org.databene.jdbacl.model.DBSchema var37 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var31);
    org.databene.jdbacl.model.DBTrigger var38 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var37);
    var25.addTrigger(var38);
    var12.addTrigger(var38);
    java.util.List var41 = var12.getComponents();
    org.databene.jdbacl.model.DBPackage var42 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var12);
    var42.setSubObjectName("null[false]");
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    var46.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var50 = var49.getForeignKeyConstraints();
    var46.addReferrer((org.databene.jdbacl.model.DBTable)var49);
    java.lang.String[] var57 = new java.lang.String[] { ""};
    java.lang.String[] var61 = new java.lang.String[] { ""};
    java.lang.String var62 = org.databene.jdbacl.SQLUtil.join("", "", var57, "hi!", "10", var61);
    org.databene.jdbacl.model.DBUniqueConstraint var63 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var49, "select nextval('')", false, var57);
    org.databene.jdbacl.model.DBDataType var66 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var67 = var66.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var68 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var49, var66);
    org.databene.jdbacl.model.DBDataType var69 = var68.getType();
    boolean var70 = var42.isIdentical((org.databene.jdbacl.model.DBObject)var68);
    java.lang.String var71 = var68.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi! as 10 on . = 10."+ "'", var62.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "'hi!' : DROP SEQUENCE "+ "'", var71.equals("'hi!' : DROP SEQUENCE "));

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test240");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    org.databene.jdbacl.model.DBSequence var27 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var27.setCache((java.lang.Long)100L);
    java.lang.String var30 = var27.getObjectType();
    java.math.BigInteger var31 = var27.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setName("10");
    java.math.BigInteger var38 = var35.getIncrement();
    java.math.BigInteger var39 = var35.getIncrement();
    var27.setLastNumber(var39);
    var27.setOrder((java.lang.Boolean)false);
    var21.setCellValue("alter sequence  restart with -1", (java.lang.Object)var27);
    org.databene.jdbacl.model.TableContainer var48 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var49 = var48.getTables();
    org.databene.jdbacl.model.TableContainer var50 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var48);
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    var51.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var54 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var55 = var54.getForeignKeyConstraints();
    var51.addReferrer((org.databene.jdbacl.model.DBTable)var54);
    var48.addTable((org.databene.jdbacl.model.DBTable)var54);
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.join("", "", var62, "hi!", "10", var66);
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    org.databene.jdbacl.model.TableContainer var71 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var72 = var71.getTables();
    org.databene.jdbacl.model.TableContainer var73 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var71);
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    var74.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var77 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var78 = var77.getForeignKeyConstraints();
    var74.addReferrer((org.databene.jdbacl.model.DBTable)var77);
    var71.addTable((org.databene.jdbacl.model.DBTable)var77);
    java.lang.String[] var83 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var83);
    org.databene.jdbacl.model.DBForeignKeyConstraint var85 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var54, var62, (org.databene.jdbacl.model.DBTable)var77, var83);
    boolean var86 = var85.isNameDeterministic();
    java.lang.Object[] var87 = var21.getFKComponents(var85);
    java.lang.String var88 = var21.toString();
    java.util.Map var89 = var21.getCells();
    java.lang.Object var90 = var21.getPKValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi! as 10 on . = 10."+ "'", var67.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "."+ "'", var68.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var84.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "null[]"+ "'", var88.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test241");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Connection var5 = org.databene.jdbacl.DBUtil.connect("CREATE SEQUENCE 10", "drop sequence NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ", "org.databene.jdbacl.SQLScriptException: Error in execution of script CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT line -1: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", "select nextval for  from left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual., select nextval for  from left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual.sequence", true);
      fail("Expected exception of type org.databene.commons.ConnectFailedException");
    } catch (org.databene.commons.ConnectFailedException e) {
      // Expected exception.
    }

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test242");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("hi! as 10 on . = 10.");
    java.util.List var2 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var1);
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.util.List var7 = var5.getComponents();
    org.databene.jdbacl.model.DBSchema var9 = var5.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var11 = var5.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var12 = var5.getName();
    java.util.List var13 = var5.getSequences();
    java.util.List var14 = var5.getTables();
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    org.databene.jdbacl.model.DBSchema var26 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var20);
    org.databene.jdbacl.model.DBTrigger var27 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var26);
    java.util.List var28 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var26);
    java.util.List var30 = var26.getSequences(false);
    var5.addSchema(var26);
    var4.addSchema(var26);
    boolean var33 = var1.isIdentical((org.databene.jdbacl.model.DBObject)var4);
    java.lang.String var34 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi! as 10 on . = 10."+ "'", var34.equals("hi! as 10 on . = 10."));

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test243");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    org.databene.jdbacl.model.DBDataType var40 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var41 = var40.isAlpha();
    var36.setType(var40);
    java.lang.String var43 = var36.getDefaultValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test244");


    org.databene.jdbacl.sql.parser.SQLParser.constraint_detail_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.constraint_detail_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getStop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test245");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    org.databene.jdbacl.model.DBSequence var8 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var9 = var8.dropDDL();
    java.math.BigInteger var10 = var8.getMinValueIfNotDefault();
    boolean var11 = var2.isIdentical((org.databene.jdbacl.model.DBObject)var8);
    org.databene.jdbacl.model.DBTreeModel var12 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable("select next value for 10", var24);
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    int var28 = var12.getIndexOfChild((org.databene.jdbacl.model.DBObject)var25, (org.databene.jdbacl.model.DBObject)var27);
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    org.databene.jdbacl.model.Database var32 = var30.getDatabase();
    java.lang.String var33 = var30.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var35 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var37 = var35.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var38 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var39 = var38.getName();
    java.lang.String var40 = var35.formatValue((java.lang.Object)var38);
    var38.setName("'hi!'");
    java.util.List var43 = var38.getSchemas();
    org.databene.jdbacl.model.DBSchema var44 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var38);
    var30.removeSchema(var44);
    java.util.List var47 = var44.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var44);
    java.util.List var49 = var44.getTables();
    var25.setSchema(var44);
    org.databene.jdbacl.model.DBTrigger var51 = new org.databene.jdbacl.model.DBTrigger("sequence 10", var44);
    org.databene.jdbacl.model.DBTrigger var52 = new org.databene.jdbacl.model.DBTrigger("jdbc:h2:mem:hi! as 10 on . = 10. : DROP SEQUENCE (1,-1)", var44);
    java.util.List var54 = var44.getSequences(false);
    var44.setName("alter sequence drop generator sequence restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "drop sequence "+ "'", var9.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test246");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    boolean var11 = var6.isImportingIndexes();
    var6.setImportingTriggers(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test247");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__65();
    var10.mT__130();
    var10.mINDEX_NAME();
    var10.mNOT();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test248");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var6.setName("10");
    java.math.BigInteger var9 = var6.getIncrement();
    java.lang.Boolean var10 = var6.isCycle();
    java.lang.String var11 = var6.dropDDL();
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.math.BigInteger var19 = var15.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var23.setName("10");
    java.math.BigInteger var26 = var23.getIncrement();
    java.math.BigInteger var27 = var23.getIncrement();
    var15.setLastNumber(var27);
    var6.setIncrement(var27);
    var0.addSequence(var6);
    org.databene.jdbacl.model.DBTable var32 = var0.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var35 = var34.getTables();
    var0.addSubContainer(var34);
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var41 = var40.getTables();
    org.databene.jdbacl.model.TableContainer var42 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var40);
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    var43.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var47 = var46.getForeignKeyConstraints();
    var43.addReferrer((org.databene.jdbacl.model.DBTable)var46);
    var40.addTable((org.databene.jdbacl.model.DBTable)var46);
    org.databene.jdbacl.model.DBCatalog var51 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var52 = var51.getName();
    org.databene.jdbacl.model.Database var53 = var51.getDatabase();
    java.lang.String var54 = var51.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var56 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var58 = var56.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var59 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var60 = var59.getName();
    java.lang.String var61 = var56.formatValue((java.lang.Object)var59);
    var59.setName("'hi!'");
    java.util.List var64 = var59.getSchemas();
    org.databene.jdbacl.model.DBSchema var65 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var59);
    var51.removeSchema(var65);
    org.databene.jdbacl.dialect.DerbyDialect var69 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var71 = var69.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var72 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var73 = var72.getName();
    java.lang.String var74 = var69.formatValue((java.lang.Object)var72);
    var72.setName("'hi!'");
    java.util.List var77 = var72.getSchemas();
    org.databene.jdbacl.model.DBSchema var78 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var72);
    org.databene.jdbacl.model.DBTrigger var79 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var78);
    var79.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var82 = var79.getTriggerBody();
    java.lang.String var83 = var79.getColumnName();
    java.lang.String var84 = var79.getWhenClause();
    var65.addTrigger(var79);
    java.util.List var86 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var65);
    java.util.List var87 = var65.getTriggers();
    java.util.List var89 = var65.getTables(true);
    java.util.List var90 = var40.getSequences(true, var89);
    java.util.List var91 = var0.getSequences(false, var90);
    org.databene.jdbacl.model.TableContainer var93 = new org.databene.jdbacl.model.TableContainer("CREATE GENERATOR drop sequence ");
    java.util.List var94 = var93.getComponents();
    var0.addSubContainer(var93);
    java.util.List var97 = var0.getSequences(false);
    org.databene.jdbacl.model.DBTable var99 = var0.getTable("foreign key constraint CREATE GENERATOR drop sequence ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop sequence 10"+ "'", var11.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test249");


    org.databene.jdbacl.model.DBSchema var2 = new org.databene.jdbacl.model.DBSchema("CREATE SEQUENCE ");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable("sequence", var2);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test250");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.List var2 = var0.getTables(false);
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var6.setName("10");
    java.math.BigInteger var9 = var6.getIncrement();
    java.lang.Boolean var10 = var6.isCycle();
    java.lang.String var11 = var6.dropDDL();
    org.databene.jdbacl.model.DBSequence var15 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var15.setCache((java.lang.Long)100L);
    java.lang.String var18 = var15.getObjectType();
    java.math.BigInteger var19 = var15.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var23 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var23.setName("10");
    java.math.BigInteger var26 = var23.getIncrement();
    java.math.BigInteger var27 = var23.getIncrement();
    var15.setLastNumber(var27);
    var6.setIncrement(var27);
    var0.addSequence(var6);
    org.databene.jdbacl.model.DBTable var32 = var0.getTable("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var35 = var34.getTables();
    var0.addSubContainer(var34);
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var41 = var40.getTables();
    org.databene.jdbacl.model.TableContainer var42 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var40);
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    var43.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var47 = var46.getForeignKeyConstraints();
    var43.addReferrer((org.databene.jdbacl.model.DBTable)var46);
    var40.addTable((org.databene.jdbacl.model.DBTable)var46);
    org.databene.jdbacl.model.DBCatalog var51 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var52 = var51.getName();
    org.databene.jdbacl.model.Database var53 = var51.getDatabase();
    java.lang.String var54 = var51.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var56 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var58 = var56.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var59 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var60 = var59.getName();
    java.lang.String var61 = var56.formatValue((java.lang.Object)var59);
    var59.setName("'hi!'");
    java.util.List var64 = var59.getSchemas();
    org.databene.jdbacl.model.DBSchema var65 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var59);
    var51.removeSchema(var65);
    org.databene.jdbacl.dialect.DerbyDialect var69 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var71 = var69.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var72 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var73 = var72.getName();
    java.lang.String var74 = var69.formatValue((java.lang.Object)var72);
    var72.setName("'hi!'");
    java.util.List var77 = var72.getSchemas();
    org.databene.jdbacl.model.DBSchema var78 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var72);
    org.databene.jdbacl.model.DBTrigger var79 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var78);
    var79.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var82 = var79.getTriggerBody();
    java.lang.String var83 = var79.getColumnName();
    java.lang.String var84 = var79.getWhenClause();
    var65.addTrigger(var79);
    java.util.List var86 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var65);
    java.util.List var87 = var65.getTriggers();
    java.util.List var89 = var65.getTables(true);
    java.util.List var90 = var40.getSequences(true, var89);
    java.util.List var91 = var0.getSequences(false, var90);
    java.util.List var93 = var0.getTables(false);
    org.databene.jdbacl.model.DBTable var95 = var0.getTable("NkPkQueryIdentity(DROP SEQUENCE -1 RESTRICT)");
    java.util.List var97 = var0.getTables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "drop sequence 10"+ "'", var11.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test251");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("10");
    java.lang.String var5 = var0.setSequenceValue("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", 1L);
    java.lang.String var8 = var0.setSequenceValue("alter sequence CREATE GENERATOR drop sequence  restart with -1", 0L);
    java.lang.String var10 = var0.renderFetchSequenceValue("jdbc:h2:mem:select next value for 10");
    java.lang.String var11 = var0.getSystem();
    boolean var13 = var0.isDeterministicIndexName("select drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for 10"+ "'", var2.equals("select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"+ "'", var5.equals("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"+ "'", var8.equals("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "select next value for jdbc:h2:mem:select next value for 10"+ "'", var10.equals("select next value for jdbc:h2:mem:select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "h2"+ "'", var11.equals("h2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test252");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.dialect.DerbyDialect var27 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var29 = var27.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    java.lang.String var32 = var27.formatValue((java.lang.Object)var30);
    var30.setName("'hi!'");
    java.util.List var35 = var30.getSchemas();
    org.databene.jdbacl.model.DBSchema var36 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var36);
    var24.addTrigger(var37);
    var11.addTrigger(var37);
    java.lang.String var40 = var37.getTriggerType();
    java.lang.String var41 = var37.getBaseObjectType();
    java.lang.String var42 = var37.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var13.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test253");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    boolean var4 = var0.isDeterministicPKName("'hi!'");
    java.lang.String var5 = var0.getJDBCDriverClass();
    boolean var8 = var0.isDefaultSchema("select NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.').nextval from dual", "alter sequence No identity defined for table alter sequence drop generator sequence restart with 100 restart with 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.firebirdsql.jdbc.FBDriver"+ "'", var5.equals("org.firebirdsql.jdbc.FBDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test254");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var0.consumeUntil((org.antlr.runtime.IntStream)var9, 100);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    var0.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var22);
    var0.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var25 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var25.mCREATE_TABLE();
    var25.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var29 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var31 = var29.LT(10);
    var25.setCharStream((org.antlr.runtime.CharStream)var29);
    var0.consumeUntil((org.antlr.runtime.IntStream)var29, 1);
    org.databene.jdbacl.sql.parser.SQLLexer var35 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var29);
    var35.skip();
    org.databene.jdbacl.dialect.Derby10_6Dialect var39 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var42 = var39.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var44 = var39.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var45 = var39.supportsRegex();
    boolean var47 = var39.isDeterministicFKName("REGEXP_MATCHES(No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence CREATE SEQUENCE 10 restart with 1')");
    java.lang.String var49 = var39.renderDropSequence("CREATE GENERATOR ");
    var35.traceIn("CREATE SEQUENCE  CACHE 100", 100, (java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var44.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "DROP SEQUENCE CREATE GENERATOR  RESTRICT"+ "'", var49.equals("DROP SEQUENCE CREATE GENERATOR  RESTRICT"));

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test255");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    java.lang.String var4 = var0.renderDropSequence("sequence");
    java.lang.String var6 = var0.renderDropSequence("drop generator .");
    boolean var8 = var0.isDeterministicUKName("SubNkPkQueryIdentity(-1)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop generator sequence"+ "'", var4.equals("drop generator sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "drop generator drop generator ."+ "'", var6.equals("drop generator drop generator ."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test256");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mCOLUMN_SPEC();
    var0.setBacktrackingLevel(6);
    var0.setText("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    var0.mDROP_TABLE();

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test257");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var5 = var0.supportsRegex();
    boolean var6 = var0.isSequenceBoundarySupported();
    boolean var7 = var0.supportsRegex();
    boolean var8 = var0.supportsRegex();
    boolean var9 = var0.supportsRegex();
    java.lang.String var13 = var0.regexQuery("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1", false, "DROP SEQUENCE (0,-1)");
    boolean var14 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1 SIMILAR TO 'DROP SEQUENCE (0,-1)'"+ "'", var13.equals("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1 SIMILAR TO 'DROP SEQUENCE (0,-1)'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test258");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var30 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var29);
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var37.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var56 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var58 = var37.getUniqueConstraint(var56);
    org.databene.jdbacl.identity.UniqueKeyIdentity var59 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var56);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var29, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var61 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var18, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var29);
    org.databene.jdbacl.model.DBUniqueIndex var62 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var61);
    var62.addColumnName("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    var15.addIndex((org.databene.jdbacl.model.DBIndex)var62);
    var62.addColumnName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var68 = var62.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var60.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test259");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    org.databene.jdbacl.sql.ColumnExpression var26 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var29 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var30 = var29.getValue();
    org.databene.jdbacl.sql.ColumnExpression var33 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var34 = var33.getValue();
    org.databene.jdbacl.sql.BetweenExpression var35 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var26, (org.databene.script.Expression)var29, (org.databene.script.Expression)var33);
    org.databene.jdbacl.sql.BetweenExpression var36 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var9, (org.databene.script.Expression)var17, (org.databene.script.Expression)var29);
    org.databene.jdbacl.sql.ColumnExpression var39 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var42 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var43 = var42.getValue();
    org.databene.jdbacl.sql.ColumnExpression var46 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var47 = var46.getValue();
    org.databene.jdbacl.sql.BetweenExpression var48 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var39, (org.databene.script.Expression)var42, (org.databene.script.Expression)var46);
    org.databene.jdbacl.sql.ColumnExpression var51 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var54 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var55 = var54.getValue();
    org.databene.jdbacl.sql.ColumnExpression var58 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var59 = var58.getValue();
    org.databene.jdbacl.sql.BetweenExpression var60 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var51, (org.databene.script.Expression)var54, (org.databene.script.Expression)var58);
    org.databene.jdbacl.sql.ColumnExpression var63 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var66 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var67 = var66.getValue();
    org.databene.jdbacl.sql.ColumnExpression var70 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var71 = var70.getValue();
    org.databene.jdbacl.sql.BetweenExpression var72 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var63, (org.databene.script.Expression)var66, (org.databene.script.Expression)var70);
    org.databene.jdbacl.sql.BetweenExpression var73 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var46, (org.databene.script.Expression)var54, (org.databene.script.Expression)var66);
    org.databene.jdbacl.sql.ColumnExpression var76 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var77 = var76.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var78 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var80 = var78.renderFetchSequenceValue("'hi!'");
    var76.setValue("'hi!'");
    org.databene.jdbacl.sql.BetweenExpression var82 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var36, (org.databene.script.Expression)var66, (org.databene.script.Expression)var76);
    org.databene.script.Expression[] var83 = var82.getSourceExpressions();
    org.databene.jdbacl.identity.xml.IdentityParseContext var84 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var85 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var84.addParser((org.databene.webdecs.xml.XMLElementParser)var85);
    java.lang.Object[] var88 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("drop sequence 10");
    java.lang.Object[] var90 = var84.createSubPath(var88, (java.lang.Object)(byte)(-1));
    org.databene.jdbacl.identity.IdentityProvider var91 = var84.getIdentityProvider();
    var84.remove("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.Boolean var94 = var82.evaluate((org.databene.commons.Context)var84);
    org.databene.script.Expression[] var95 = var82.getTerms();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "sequence"+ "'", var43.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sequence"+ "'", var47.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "sequence"+ "'", var55.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "sequence"+ "'", var59.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "sequence"+ "'", var67.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "sequence"+ "'", var71.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "sequence"+ "'", var77.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "call next value for 'hi!'"+ "'", var80.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + false+ "'", var94.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test260");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog("jdbc:hsqldb:mem:CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100");

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test261");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    java.lang.String var11 = var0.getDriverClass();
    var0.setId("SET GENERATOR . TO -1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test262");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var16 = var0.supportsRegex();
    org.databene.jdbacl.model.DBSequence var20 = new org.databene.jdbacl.model.DBSequence("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "Identity definition by unique key: select next value for 10", "()");
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    java.lang.String var33 = var31.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var34 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var37 = var34.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var39 = var34.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var40 = var31.equals((java.lang.Object)var39);
    org.databene.jdbacl.model.DefaultDBColumn var43 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var26, var31, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var46 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var26, (-1), "hi! identity by primary key");
    boolean var47 = var46.isNullable();
    var46.setNullable(true);
    boolean var50 = var20.isIdentical((org.databene.jdbacl.model.DBObject)var46);
    java.lang.String var51 = var0.renderCreateSequence(var20);
    boolean var53 = var0.isDeterministicFKName("alter sequence VALUES (NEXT VALUE FOR REGEXP_MATCHES(No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence CREATE SEQUENCE 10 restart with 1')) restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "DROP SEQUENCE "+ "'", var33.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var39.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE "+ "'", var51.equals("CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test263");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    java.util.List var38 = var15.getSequences(true);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    org.databene.jdbacl.model.DBDataType var48 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var49 = var48.isAlpha();
    java.lang.String var50 = var48.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var51 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var54 = var51.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var56 = var51.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var57 = var48.equals((java.lang.Object)var56);
    org.databene.jdbacl.model.DefaultDBColumn var60 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var43, var48, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.util.List var61 = var60.getUkConstraints();
    org.databene.jdbacl.dialect.DerbyDialect var65 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var67 = var65.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var68 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var69 = var68.getName();
    java.lang.String var70 = var65.formatValue((java.lang.Object)var68);
    var68.setName("'hi!'");
    java.util.List var73 = var68.getSchemas();
    org.databene.jdbacl.model.DBSchema var74 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var68);
    org.databene.jdbacl.model.DBTrigger var75 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var74);
    java.lang.String var76 = var74.getName();
    java.util.List var78 = var74.getTables(true);
    org.databene.jdbacl.model.DBPackage var79 = new org.databene.jdbacl.model.DBPackage("SELECT * FROM null WHERE  = ''", var74);
    boolean var80 = var60.isEquivalent((org.databene.jdbacl.model.DBObject)var79);
    var15.addPackage(var79);
    org.databene.jdbacl.model.DBTable var83 = var15.getTable("drop sequence NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "DROP SEQUENCE "+ "'", var50.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var56.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var76.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test264");


    java.lang.Boolean var1 = org.databene.jdbacl.SQLUtil.mutatesStructure("REGEXP_LIKE(CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'.NOT drop generator sequence ~ 'hi!', 'schema (\"sequence\" BETWEEN \"sequence\" AND \"sequence\")')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + false+ "'", var1.equals(false));

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test265");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    var0.mTABLE_NAME();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__108();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test266");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("alter sequence drop generator . restart with 10", "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "hi! identity by primary key", "NOT drop generator sequence ~ 'hi!'", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "hi! identity by primary key", "select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;", false);
    java.lang.String var9 = var8.getDatabaseProductName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test267");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("drop sequence ", "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "alter sequence drop sequence 10 restart with 0", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT", ".", "alter sequence hi! restart with 1");
    var6.setSchemaName("SELECT * FROM null WHERE  = ''");
    var6.setImportingSequences(true);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test268");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    java.lang.String[] var43 = var41.getRefereeColumnNames();
    java.lang.String var44 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var41);
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var41);
    java.lang.String var46 = var41.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" "+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "foreign key constraint CREATE GENERATOR drop sequence "+ "'", var45.equals("foreign key constraint CREATE GENERATOR drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var46.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test269");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    org.databene.jdbacl.model.Database var4 = var2.getDatabase();
    java.lang.String var5 = var2.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    var2.removeSchema(var16);
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    org.databene.jdbacl.model.DBTrigger var30 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var29);
    var30.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var33 = var30.getTriggerBody();
    java.lang.String var34 = var30.getColumnName();
    java.lang.String var35 = var30.getWhenClause();
    var16.addTrigger(var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("-1", var16);
    org.databene.jdbacl.model.DBSequence var38 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var16);
    org.databene.jdbacl.model.DBTreeModel var39 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var16);
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var44 = var43.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var45 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var46 = var45.getName();
    org.databene.jdbacl.model.Database var47 = var45.getDatabase();
    java.lang.String var48 = var45.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var50 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var52 = var50.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var53 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var54 = var53.getName();
    java.lang.String var55 = var50.formatValue((java.lang.Object)var53);
    var53.setName("'hi!'");
    java.util.List var58 = var53.getSchemas();
    org.databene.jdbacl.model.DBSchema var59 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var53);
    var45.removeSchema(var59);
    org.databene.jdbacl.dialect.DerbyDialect var63 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var65 = var63.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var66 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var67 = var66.getName();
    java.lang.String var68 = var63.formatValue((java.lang.Object)var66);
    var66.setName("'hi!'");
    java.util.List var71 = var66.getSchemas();
    org.databene.jdbacl.model.DBSchema var72 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var66);
    org.databene.jdbacl.model.DBTrigger var73 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var72);
    var73.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var76 = var73.getTriggerBody();
    java.lang.String var77 = var73.getColumnName();
    java.lang.String var78 = var73.getWhenClause();
    var59.addTrigger(var73);
    boolean var80 = var43.isIdentical((org.databene.jdbacl.model.DBObject)var59);
    java.util.List var81 = var59.getPackages();
    org.databene.jdbacl.model.DBCatalog var82 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var83 = var82.getName();
    var59.setCatalog(var82);
    int var85 = var39.getChildCount((org.databene.jdbacl.model.DBObject)var59);
    java.util.List var86 = var59.getComponents();
    org.databene.jdbacl.model.DBSequence var90 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var91 = var90.dropDDL();
    java.lang.String var92 = org.databene.jdbacl.SQLUtil.ownerDotComponent((org.databene.jdbacl.model.DBObject)var90);
    boolean var93 = var59.isIdentical((org.databene.jdbacl.model.DBObject)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "drop sequence "+ "'", var91.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test270");


    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var38 = var37.getTables();
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var37);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    var37.addTable((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.join("", "", var51, "hi!", "10", var55);
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var51);
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var61 = var60.getTables();
    org.databene.jdbacl.model.TableContainer var62 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var60);
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    var63.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var66 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var67 = var66.getForeignKeyConstraints();
    var63.addReferrer((org.databene.jdbacl.model.DBTable)var66);
    var60.addTable((org.databene.jdbacl.model.DBTable)var66);
    java.lang.String[] var72 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var72);
    org.databene.jdbacl.model.DBForeignKeyConstraint var74 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var43, var51, (org.databene.jdbacl.model.DBTable)var66, var72);
    org.databene.jdbacl.model.DBTable var75 = var74.getRefereeTable();
    var8.addForeignKey(var74);
    org.databene.jdbacl.model.FKChangeRule var77 = var74.getDeleteRule();
    java.lang.String var78 = var77.toString();
    java.lang.String var79 = var77.toString();
    java.lang.Class var80 = var77.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var81 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var80);
    org.databene.jdbacl.ColumnInfo var82 = new org.databene.jdbacl.ColumnInfo("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", 32, var80);
    org.databene.jdbacl.ResultSetConverter var84 = new org.databene.jdbacl.ResultSetConverter(var80, false);
    java.lang.Class var85 = var84.getTargetType();
    java.lang.Class var86 = var84.getTargetType();
    java.lang.Class var87 = var84.getTargetType();
    java.lang.Class var88 = var84.getTargetType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi! as 10 on . = 10."+ "'", var56.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "."+ "'", var57.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var73.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "NO_ACTION"+ "'", var78.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NO_ACTION"+ "'", var79.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test271");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.identity.NaturalPkIdentity var15 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var16 = var15.getName();
    boolean var18 = var15.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    var19.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var23 = var22.getForeignKeyConstraints();
    var19.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    java.lang.String[] var30 = new java.lang.String[] { ""};
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String var35 = org.databene.jdbacl.SQLUtil.join("", "", var30, "hi!", "10", var34);
    org.databene.jdbacl.model.DBUniqueConstraint var36 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var22, "select nextval('')", false, var30);
    java.lang.String var37 = var15.extractNK((java.lang.Object[])var30);
    boolean var38 = var1.equals((java.lang.Object)var15);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var46 = var45.getForeignKeyConstraints();
    var42.addReferrer((org.databene.jdbacl.model.DBTable)var45);
    org.databene.jdbacl.model.DBDataType var50 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var51 = var50.isAlpha();
    java.lang.String var52 = var50.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var53 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var56 = var53.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var58 = var53.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var59 = var50.equals((java.lang.Object)var58);
    org.databene.jdbacl.model.DefaultDBColumn var62 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var45, var50, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var63 = var62.getType();
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var75 = new java.lang.String[] { ""};
    java.lang.String[] var79 = new java.lang.String[] { ""};
    java.lang.String var80 = org.databene.jdbacl.SQLUtil.join("", "", var75, "hi!", "10", var79);
    org.databene.jdbacl.model.DBUniqueConstraint var81 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var67, "select nextval('')", false, var75);
    var81.addColumnName("sequence");
    var62.addUkConstraint(var81);
    org.databene.jdbacl.model.DBUniqueIndex var85 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var81);
    org.databene.jdbacl.model.DBTable var86 = var85.getTable();
    var85.addColumnName("null[DROP SEQUENCE ]");
    var1.addIndex((org.databene.jdbacl.model.DBIndex)var85);
    boolean var90 = var85.isUnique();
    boolean var91 = var85.isNameDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi! as 10 on . = 10."+ "'", var35.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "DROP SEQUENCE "+ "'", var52.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var58.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi! as 10 on . = 10."+ "'", var80.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test272");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    org.databene.jdbacl.sql.ColumnExpression var14 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var18 = var17.getValue();
    org.databene.jdbacl.sql.ColumnExpression var21 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var22 = var21.getValue();
    org.databene.jdbacl.sql.BetweenExpression var23 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var14, (org.databene.script.Expression)var17, (org.databene.script.Expression)var21);
    var11.addTerm((org.databene.script.Expression)var17);
    boolean var25 = var11.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var28 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var31 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var32 = var31.getValue();
    org.databene.jdbacl.sql.ColumnExpression var35 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var36 = var35.getValue();
    org.databene.jdbacl.sql.BetweenExpression var37 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var28, (org.databene.script.Expression)var31, (org.databene.script.Expression)var35);
    org.databene.jdbacl.identity.xml.IdentityParseContext var38 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var39 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var38.addParser((org.databene.webdecs.xml.XMLElementParser)var39);
    java.lang.Boolean var41 = var37.evaluate((org.databene.commons.Context)var38);
    org.databene.jdbacl.identity.xml.IdentityParser var42 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var38.addParser((org.databene.webdecs.xml.XMLElementParser)var42);
    java.lang.Boolean var44 = var11.evaluate((org.databene.commons.Context)var38);
    org.databene.jdbacl.identity.IdentityProvider var45 = var38.getIdentityProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "sequence"+ "'", var18.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "sequence"+ "'", var22.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "sequence"+ "'", var32.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "sequence"+ "'", var36.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + true+ "'", var41.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + true+ "'", var44.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test273");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.removeTable((org.databene.jdbacl.model.DBTable)var12);
    org.databene.jdbacl.model.DefaultDBTable var14 = new org.databene.jdbacl.model.DefaultDBTable();
    var14.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var17 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var18 = var17.getForeignKeyConstraints();
    var14.addReferrer((org.databene.jdbacl.model.DBTable)var17);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    java.util.Set var25 = var21.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var28 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var29 = var28.isAlpha();
    boolean var30 = var28.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var33 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var21, var28, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var17.addColumn((org.databene.jdbacl.model.DBColumn)var33);
    var2.removeTable((org.databene.jdbacl.model.DBTable)var17);
    org.databene.jdbacl.model.DefaultDBTable var36 = new org.databene.jdbacl.model.DefaultDBTable();
    var36.setDoc(".");
    java.util.Set var40 = var36.getUniqueConstraints(false);
    java.lang.String var41 = var36.getDoc();
    var36.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    var2.addTable((org.databene.jdbacl.model.DBTable)var36);
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    var46.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var50 = var49.getForeignKeyConstraints();
    var46.addReferrer((org.databene.jdbacl.model.DBTable)var49);
    org.databene.jdbacl.model.DBDataType var54 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var55 = var54.isAlpha();
    java.lang.String var56 = var54.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var57 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var60 = var57.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var62 = var57.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var63 = var54.equals((java.lang.Object)var62);
    org.databene.jdbacl.model.DefaultDBColumn var66 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var49, var54, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var67 = var66.getType();
    org.databene.jdbacl.model.DefaultDBTable var68 = new org.databene.jdbacl.model.DefaultDBTable();
    var68.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var72 = var71.getForeignKeyConstraints();
    var68.addReferrer((org.databene.jdbacl.model.DBTable)var71);
    java.lang.String[] var79 = new java.lang.String[] { ""};
    java.lang.String[] var83 = new java.lang.String[] { ""};
    java.lang.String var84 = org.databene.jdbacl.SQLUtil.join("", "", var79, "hi!", "10", var83);
    org.databene.jdbacl.model.DBUniqueConstraint var85 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var71, "select nextval('')", false, var79);
    var85.addColumnName("sequence");
    var66.addUkConstraint(var85);
    boolean var89 = var85.isNameDeterministic();
    var36.removeUniqueConstraint(var85);
    boolean var91 = var85.isNameDeterministic();
    org.databene.jdbacl.model.DBTable var92 = var85.getTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "."+ "'", var41.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "DROP SEQUENCE "+ "'", var56.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var62.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi! as 10 on . = 10."+ "'", var84.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test274");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.JDBCConnectData var1 = org.databene.jdbacl.DBUtil.getConnectData("REGEXP_MATCHES(Identity definition by NK-PK query: alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0, 'CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )')");
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test275");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__111();
    var10.mSIZE();
    var10.mT__107();
    var10.mT__119();
    java.lang.String var20 = var10.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var20.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test276");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("jdbc:hsqldb:mem:select next value for SET GENERATOR.TO - 1 DROP SEQUENCE NULL", "drop sequence select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')", "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT REGEXP 'hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1'");
    java.lang.Boolean var4 = var3.isOrder();
    org.databene.jdbacl.model.DBSequence var8 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var9 = var8.dropDDL();
    java.math.BigInteger var10 = var8.getIncrementIfNotDefault();
    java.math.BigInteger var11 = var8.getMinValue();
    java.math.BigInteger var12 = var8.getMinValue();
    java.lang.Boolean var13 = var8.isOrder();
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var18 = var17.dropDDL();
    java.math.BigInteger var19 = var17.getIncrementIfNotDefault();
    java.math.BigInteger var20 = var17.getMinValue();
    java.math.BigInteger var21 = var17.getMinValue();
    java.lang.Boolean var22 = var17.isOrder();
    java.math.BigInteger var23 = var17.getIncrementIfNotDefault();
    var17.setCycle((java.lang.Boolean)true);
    java.lang.String var26 = var17.getCatalogName();
    java.math.BigInteger var27 = var17.getIncrement();
    var8.setLastNumber(var27);
    var3.setMaxValue(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "drop sequence "+ "'", var9.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "drop sequence "+ "'", var18.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "drop sequence "+ "'", var26.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test277");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicFKName("NaturalPkIdentity(hi!)");
    boolean var3 = var0.supportsRegex();
    boolean var4 = var0.supportsRegex();
    boolean var6 = var0.isDeterministicPKName("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    boolean var7 = var0.supportsRegex();
    java.lang.String var11 = var0.regexQuery("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0", false, "sequence 10");
    boolean var14 = var0.isDefaultCatalog("'SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)'", "REGEXP_MATCHES(DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0 REGEXP 'sequence 10'"+ "'", var11.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0 REGEXP 'sequence 10'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test278");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    java.lang.String var17 = var10.getText();
    var10.mT__95();
    var10.mIS();
    var10.mCOMMENT_TABLE();
    var10.mT__135();
    var10.mT__67();
    var10.mT__123();
    var10.mT__70();
    var10.mT__110();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "select next value for SET GENERATOR.TO - 1"+ "'", var17.equals("select next value for SET GENERATOR.TO - 1"));

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test279");


    java.lang.String var1 = org.databene.jdbacl.DBUtil.escape("select next value for drop sequence NOT SIMILAR TO 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "select next value for drop sequence NOT SIMILAR TO ''jdbc:h2:mem:hi! as 10 on . = 10.-identity-.''"+ "'", var1.equals("select next value for drop sequence NOT SIMILAR TO ''jdbc:h2:mem:hi! as 10 on . = 10.-identity-.''"));

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test280");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    org.antlr.runtime.CharStream var7 = var0.getCharStream();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.setCharPositionInLine(1);
    int var12 = var9.getCharPositionInLine();
    var9.setCharPositionInLine(69);
    var9.setCharPositionInLine(1);
    int var17 = var9.getCharPositionInLine();
    boolean var19 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 79);
    var9.consume();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test281");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    var22.setName("DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test282");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    var3.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var22 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var22);
    org.databene.jdbacl.model.DBUniqueConstraint var24 = var3.getUniqueConstraint(var22);
    java.util.Collection var25 = var3.getReferrers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var23.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test283");


    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    org.databene.jdbacl.model.Database var6 = var4.getDatabase();
    java.lang.String var7 = var4.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var9 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var11 = var9.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var12 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var9.formatValue((java.lang.Object)var12);
    var12.setName("'hi!'");
    java.util.List var17 = var12.getSchemas();
    org.databene.jdbacl.model.DBSchema var18 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var12);
    var4.removeSchema(var18);
    org.databene.jdbacl.dialect.DerbyDialect var22 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var24 = var22.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    java.lang.String var27 = var22.formatValue((java.lang.Object)var25);
    var25.setName("'hi!'");
    java.util.List var30 = var25.getSchemas();
    org.databene.jdbacl.model.DBSchema var31 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var25);
    org.databene.jdbacl.model.DBTrigger var32 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var31);
    var32.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var35 = var32.getTriggerBody();
    java.lang.String var36 = var32.getColumnName();
    java.lang.String var37 = var32.getWhenClause();
    var18.addTrigger(var32);
    org.databene.jdbacl.model.DBTrigger var39 = new org.databene.jdbacl.model.DBTrigger("-1", var18);
    org.databene.jdbacl.model.DBSequence var40 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var18);
    org.databene.jdbacl.model.DBTreeModel var41 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DBSequence var45 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var46 = var45.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var47 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var48 = var47.getName();
    org.databene.jdbacl.model.Database var49 = var47.getDatabase();
    java.lang.String var50 = var47.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var52 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var54 = var52.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var55 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var56 = var55.getName();
    java.lang.String var57 = var52.formatValue((java.lang.Object)var55);
    var55.setName("'hi!'");
    java.util.List var60 = var55.getSchemas();
    org.databene.jdbacl.model.DBSchema var61 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var55);
    var47.removeSchema(var61);
    org.databene.jdbacl.dialect.DerbyDialect var65 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var67 = var65.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var68 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var69 = var68.getName();
    java.lang.String var70 = var65.formatValue((java.lang.Object)var68);
    var68.setName("'hi!'");
    java.util.List var73 = var68.getSchemas();
    org.databene.jdbacl.model.DBSchema var74 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var68);
    org.databene.jdbacl.model.DBTrigger var75 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var74);
    var75.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var78 = var75.getTriggerBody();
    java.lang.String var79 = var75.getColumnName();
    java.lang.String var80 = var75.getWhenClause();
    var61.addTrigger(var75);
    boolean var82 = var45.isIdentical((org.databene.jdbacl.model.DBObject)var61);
    java.util.List var83 = var61.getPackages();
    org.databene.jdbacl.model.DBCatalog var84 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var85 = var84.getName();
    var61.setCatalog(var84);
    int var87 = var41.getChildCount((org.databene.jdbacl.model.DBObject)var61);
    org.databene.jdbacl.model.TableContainer var89 = new org.databene.jdbacl.model.TableContainer("hi! as 10 on . = 10.");
    java.util.List var91 = var89.getTables(false);
    boolean var92 = var61.isIdentical((org.databene.jdbacl.model.DBObject)var89);
    org.databene.jdbacl.model.DefaultDBTable var93 = new org.databene.jdbacl.model.DefaultDBTable("alter sequence catalog restart with 1", var61);
    org.databene.jdbacl.model.DBSequence var94 = new org.databene.jdbacl.model.DBSequence("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test284");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String var18 = var17.toString();
    boolean var19 = var17.isNameDeterministic();
    var17.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var30 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var30.setSchemaName("alter sequence hi! restart with 1");
    boolean var33 = var17.equals((java.lang.Object)var30);
    org.databene.jdbacl.model.cache.CachingDBImporter var35 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var30, "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    var30.setCatalogName("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)");
    var30.setCatalogName("Identity definition by unique key: , sequence");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var18.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test285");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var6 = var5.getTables();
    org.databene.jdbacl.model.TableContainer var7 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var5);
    java.util.List var8 = var7.getTables();
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    org.databene.jdbacl.dialect.DerbyDialect var29 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var31 = var29.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var32 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var33 = var32.getName();
    java.lang.String var34 = var29.formatValue((java.lang.Object)var32);
    var32.setName("'hi!'");
    java.util.List var37 = var32.getSchemas();
    org.databene.jdbacl.model.DBSchema var38 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var32);
    org.databene.jdbacl.model.DBTrigger var39 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var38);
    var39.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var42 = var39.getTriggerBody();
    java.lang.String var43 = var39.getColumnName();
    java.lang.String var44 = var39.getWhenClause();
    var25.addTrigger(var39);
    org.databene.jdbacl.model.DBTrigger var46 = new org.databene.jdbacl.model.DBTrigger("-1", var25);
    org.databene.jdbacl.model.DBSequence var47 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var25);
    boolean var48 = var7.isIdentical((org.databene.jdbacl.model.DBObject)var25);
    java.util.List var49 = var25.getComponents();
    org.databene.jdbacl.model.DBTrigger var50 = new org.databene.jdbacl.model.DBTrigger("unique constraint", var25);
    var1.removeSchema(var25);
    java.util.List var52 = var1.getTables();
    org.databene.jdbacl.model.DBTable var55 = var1.getTable("CREATE GENERATOR drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1", false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test286");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getUrlPattern();
    var0.setUrlPattern("alter sequence hi! restart with 1");
    var0.setDefaultDatabase("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var0.setName("CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))");
    java.lang.String var8 = var0.getDownloadUrl();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test287");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    var0.mALTER_TABLE();
    var0.emitErrorMessage("hi! as 10 on . = 10.");
    var0.reset();
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.join("", "", var33, "hi!", "10", var37);
    org.databene.jdbacl.model.DBUniqueConstraint var39 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var25, "select nextval('')", false, var33);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var45);
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("", "", var58, "hi!", "10", var62);
    java.lang.String var64 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var45, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var62);
    org.databene.jdbacl.identity.NaturalPkIdentity var67 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var68 = var67.getName();
    boolean var70 = var67.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable();
    var71.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var75 = var74.getForeignKeyConstraints();
    var71.addReferrer((org.databene.jdbacl.model.DBTable)var74);
    java.lang.String[] var82 = new java.lang.String[] { ""};
    java.lang.String[] var86 = new java.lang.String[] { ""};
    java.lang.String var87 = org.databene.jdbacl.SQLUtil.join("", "", var82, "hi!", "10", var86);
    org.databene.jdbacl.model.DBUniqueConstraint var88 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var74, "select nextval('')", false, var82);
    java.lang.String var89 = var67.extractNK((java.lang.Object[])var82);
    java.lang.String var90 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var25, var45, (java.lang.Object[])var82);
    var0.traceIn("NO_ACTION", 14, (java.lang.Object)var25);
    int var92 = var25.countProviders();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi! as 10 on . = 10."+ "'", var38.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "."+ "'", var51.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi! as 10 on . = 10."+ "'", var63.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "."+ "'", var64.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var65.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi! as 10 on . = 10."+ "'", var87.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var90.equals("SELECT * FROM null WHERE  = ''"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test288");


    org.databene.jdbacl.sql.parser.SQLParser.qualified_name_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.qualified_name_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test289");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    java.lang.String var5 = var0.getDoc();
    var0.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    org.databene.jdbacl.JDBCConnectData var14 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var15 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var16 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    boolean var17 = var0.equals((java.lang.Object)var14);
    org.databene.jdbacl.model.DBSchema var18 = var0.getSchema();
    java.util.List var19 = var0.getColumns();
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    org.databene.jdbacl.model.Database var22 = var20.getDatabase();
    java.lang.String var23 = var20.getDoc();
    java.util.List var24 = var20.getSequences();
    org.databene.jdbacl.dialect.DerbyDialect var27 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var29 = var27.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    java.lang.String var32 = var27.formatValue((java.lang.Object)var30);
    var30.setName("'hi!'");
    java.util.List var35 = var30.getSchemas();
    org.databene.jdbacl.model.DBSchema var36 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var36);
    org.databene.jdbacl.dialect.DerbyDialect var38 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var40 = var38.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    java.lang.String var43 = var38.formatValue((java.lang.Object)var41);
    java.util.List var44 = var41.getComponents();
    var36.setCatalog(var41);
    var20.removeSchema(var36);
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    var36.removeTable((org.databene.jdbacl.model.DBTable)var48);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    org.databene.jdbacl.model.DBUniqueConstraint var69 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var55, "select nextval('')", false, var63);
    java.lang.String var70 = var69.toString();
    boolean var71 = var69.isNameDeterministic();
    var69.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var82 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var82.setSchemaName("alter sequence hi! restart with 1");
    boolean var85 = var69.equals((java.lang.Object)var82);
    org.databene.jdbacl.model.DBTable var86 = var69.getTable();
    var69.addColumnName("Sub identity of ():\nnull");
    org.databene.jdbacl.model.DBTable var89 = var69.getTable();
    org.databene.jdbacl.model.DBUniqueIndex var90 = new org.databene.jdbacl.model.DBUniqueIndex("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", true, var69);
    var48.addIndex((org.databene.jdbacl.model.DBIndex)var90);
    org.databene.jdbacl.model.DBTable var92 = var90.getTable();
    var0.removeIndex((org.databene.jdbacl.model.DBIndex)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "."+ "'", var5.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var70.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test290");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    int var11 = var4.LT(3);
    int var12 = var4.mark();
    int var13 = var4.getCharPositionInLine();
    int var14 = var4.getLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test291");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    var0.mCOLUMN_SPEC();
    int var9 = var0.getBacktrackingLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test292");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    java.util.List var36 = var15.getComponents();
    org.databene.jdbacl.dialect.DerbyDialect var38 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var40 = var38.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var41 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var42 = var41.getName();
    java.lang.String var43 = var38.formatValue((java.lang.Object)var41);
    var41.setName("'hi!'");
    java.util.List var46 = var41.getSchemas();
    org.databene.jdbacl.model.DBSchema var47 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var41);
    org.databene.jdbacl.dialect.DerbyDialect var50 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var52 = var50.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var53 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var54 = var53.getName();
    java.lang.String var55 = var50.formatValue((java.lang.Object)var53);
    var53.setName("'hi!'");
    java.util.List var58 = var53.getSchemas();
    org.databene.jdbacl.model.DBSchema var59 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var53);
    org.databene.jdbacl.model.DBTrigger var60 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var59);
    var47.addTrigger(var60);
    boolean var62 = var15.isIdentical((org.databene.jdbacl.model.DBObject)var60);
    org.databene.jdbacl.model.DBSequence var63 = new org.databene.jdbacl.model.DBSequence("jdbc:hsqldb:mem:jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", var15);
    var63.setOrder((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test293");


    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    var14.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    org.databene.jdbacl.model.DBDataType var26 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var27 = var26.isAlpha();
    java.lang.String var28 = var26.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var29 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var32 = var29.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var34 = var29.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var35 = var26.equals((java.lang.Object)var34);
    org.databene.jdbacl.model.DefaultDBColumn var38 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var21, var26, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var39 = var14.isIdentical((org.databene.jdbacl.model.DBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    var40.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var43 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var44 = var43.getForeignKeyConstraints();
    var40.addReferrer((org.databene.jdbacl.model.DBTable)var43);
    java.lang.String[] var51 = new java.lang.String[] { ""};
    java.lang.String[] var55 = new java.lang.String[] { ""};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.join("", "", var51, "hi!", "10", var55);
    org.databene.jdbacl.model.DBUniqueConstraint var57 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var43, "select nextval('')", false, var51);
    java.lang.String var58 = var57.toString();
    boolean var59 = var38.isEquivalent((org.databene.jdbacl.model.DBObject)var57);
    java.lang.String[] var60 = var57.getColumnNames();
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", var60);
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.join("", "", var66, "hi!", "10", var70);
    org.databene.jdbacl.identity.IdentityProvider var72 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var73 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var66, var72);
    java.lang.String[] var76 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var77 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var76);
    var72.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var77, "NOT REGEXP_MATCHES(sequence, '')");
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var80 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", var60, var72);
    org.databene.jdbacl.identity.xml.IdentityParseContext var81 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var72);
    org.databene.jdbacl.identity.NkPkQueryIdentity var84 = new org.databene.jdbacl.identity.NkPkQueryIdentity("DROP SEQUENCE -1 RESTRICT", "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    java.lang.String var85 = var84.getDescription();
    var84.setNkPkQuery("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'");
    var72.registerIdentity((org.databene.jdbacl.identity.IdentityModel)var84, "'hi!' DROP SEQUENCE  DEFAULT jdbc:h2:mem:select next value for 10 NULL");
    var84.addIrrelevantColumn("select nextval for SQLScriptException: Error in execution of script line 1:  TO 0 from SET GENERATOR org.databene.jdbacl");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "DROP SEQUENCE "+ "'", var28.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var34.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi! as 10 on . = 10."+ "'", var56.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var58.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()."+ "'", var61.equals("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi! as 10 on . = 10."+ "'", var71.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var85.equals("Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test294");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mARGUMENTS();
    var10.setBacktrackingLevel(69);
    var10.mT__95();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test295");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object[] var1 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("select nextval for ') from REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test296");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("alter sequence drop generator . restart with 10", "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "hi! identity by primary key", "NOT drop generator sequence ~ 'hi!'", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "hi! identity by primary key", "select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;", false);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    var10.setName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1", var10);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var28, "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\"");
    var8.setCatalogName("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''') SIMILAR TO ''E''");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test297");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.mT__127();
    var10.match("SET GENERATOR DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key TO 99");
    var10.skip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test298");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    java.util.Collection var1 = var0.getSubContainers();
    org.databene.jdbacl.sql.parser.SQLLexer var3 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var5 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var5.release((-1));
    boolean var9 = var3.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var5, 0);
    int var10 = var3.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var3.consumeUntil((org.antlr.runtime.IntStream)var12, 100);
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    var3.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var25);
    java.util.List var27 = var0.getSequences(false, var25);
    java.util.List var29 = var0.getSequences(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test299");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBIndex var30 = var22.getIndex("");
    java.util.List var31 = var22.getIndexes();
    org.databene.jdbacl.model.DBCatalog var32 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var33 = var32.getName();
    org.databene.jdbacl.model.Database var34 = var32.getDatabase();
    java.lang.String var35 = var32.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    var32.removeSchema(var46);
    java.util.List var49 = var46.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var53 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var55 = var53.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var56 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var57 = var56.getName();
    java.lang.String var58 = var53.formatValue((java.lang.Object)var56);
    var56.setName("'hi!'");
    java.util.List var61 = var56.getSchemas();
    org.databene.jdbacl.model.DBSchema var62 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var56);
    org.databene.jdbacl.model.DBTrigger var63 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var62);
    java.util.List var64 = var62.getPackages();
    org.databene.jdbacl.model.DBPackage var65 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var62);
    java.util.List var66 = var65.getComponents();
    var46.addPackage(var65);
    java.lang.String var68 = var65.getSubObjectName();
    org.databene.jdbacl.model.DefaultDBTable var70 = new org.databene.jdbacl.model.DefaultDBTable();
    var70.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var74 = var73.getForeignKeyConstraints();
    var70.addReferrer((org.databene.jdbacl.model.DBTable)var73);
    org.databene.jdbacl.model.DBDataType var78 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var79 = var78.isAlpha();
    java.lang.String var80 = var78.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var81 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var84 = var81.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var86 = var81.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var87 = var78.equals((java.lang.Object)var86);
    org.databene.jdbacl.model.DefaultDBColumn var90 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var73, var78, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var91 = var65.isIdentical((org.databene.jdbacl.model.DBObject)var73);
    java.lang.String[] var92 = var73.getPKColumnNames();
    java.lang.String var93 = org.databene.jdbacl.SQLUtil.renderColumnNames(var92);
    org.databene.jdbacl.model.DBColumn[] var94 = var22.getColumns(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "DROP SEQUENCE "+ "'", var80.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var86.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "()"+ "'", var93.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test300");


    java.lang.String var2 = org.databene.jdbacl.SQLUtil.normalize("SET GENERATOR Sub identity of ():\nnull TO -1", true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "SET GENERATOR Sub identity of () : null TO - 1"+ "'", var2.equals("SET GENERATOR Sub identity of () : null TO - 1"));

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test301");


    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var6 = var5.getTables();
    org.databene.jdbacl.model.TableContainer var7 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var5);
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    var8.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var12 = var11.getForeignKeyConstraints();
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var11);
    var5.addTable((org.databene.jdbacl.model.DBTable)var11);
    java.lang.String[] var19 = new java.lang.String[] { ""};
    java.lang.String[] var23 = new java.lang.String[] { ""};
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.join("", "", var19, "hi!", "10", var23);
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var19);
    org.databene.jdbacl.model.TableContainer var28 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var29 = var28.getTables();
    org.databene.jdbacl.model.TableContainer var30 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var28);
    org.databene.jdbacl.model.DefaultDBTable var31 = new org.databene.jdbacl.model.DefaultDBTable();
    var31.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var35 = var34.getForeignKeyConstraints();
    var31.addReferrer((org.databene.jdbacl.model.DBTable)var34);
    var28.addTable((org.databene.jdbacl.model.DBTable)var34);
    java.lang.String[] var40 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var41 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var40);
    org.databene.jdbacl.model.DBForeignKeyConstraint var42 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var11, var19, (org.databene.jdbacl.model.DBTable)var34, var40);
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    var44.setDoc(".");
    java.util.Set var48 = var44.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var51 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var52 = var51.isAlpha();
    boolean var53 = var51.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var56 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var44, var51, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var58 = new org.databene.jdbacl.model.DefaultDBColumn("CONSTRAINT \"select nextval('')\" ", (org.databene.jdbacl.model.DBTable)var11, var51, (java.lang.Integer)10);
    java.util.List var59 = var11.getComponents();
    org.databene.jdbacl.dialect.OracleDialect var60 = new org.databene.jdbacl.dialect.OracleDialect();
    java.lang.String var64 = var60.regexQuery("drop sequence alter sequence hi! restart with 1", true, "CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var66 = var60.isDeterministicFKName("\"sequence\"");
    boolean var67 = var11.equals((java.lang.Object)var60);
    boolean var68 = var60.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi! as 10 on . = 10."+ "'", var24.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "."+ "'", var25.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var41.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')"+ "'", var64.equals("NOT REGEXP_LIKE(drop sequence alter sequence hi! restart with 1, 'CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test302");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    org.databene.jdbacl.identity.xml.IdentityParseContext var12 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var10);
    var12.remove("drop sequence 10");
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    org.databene.jdbacl.identity.IdentityProvider var26 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var27 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var20, var26);
    org.databene.jdbacl.identity.xml.IdentityParseContext var28 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var26);
    var12.set("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", (java.lang.Object)var28);
    org.databene.jdbacl.identity.IdentityProvider var30 = var28.getIdentityProvider();
    var28.remove("h2");
    java.lang.Object var34 = var28.get("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test303");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicPKName("10");
    boolean var5 = var0.isDefaultSchema("SET GENERATOR . TO -1", "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var8 = var0.isDefaultCatalog("10", "null[DROP SEQUENCE ]");
    boolean var10 = var0.isDeterministicFKName("NOT drop sequence  ~ 'alter sequence  restart with -1'");
    boolean var12 = var0.isDeterministicUKName("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1");
    boolean var15 = var0.isDefaultCatalog("left join DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE  as select null.nextval from dual on ", "table");
    boolean var17 = var0.isDeterministicPKName("select nextval(''((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"''hi!''\")'')");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test304");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicUKName("call next value for 'hi!'");
    boolean var5 = var0.isDefaultCatalog("CREATE SEQUENCE  CACHE 100", "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var7 = var0.isDeterministicUKName("NOT REGEXP_LIKE(DROP SEQUENCE (100), 'CONSTRAINT \"select nextval('')\" ')");
    boolean var9 = var0.isDeterministicPKName("unique constraint");
    boolean var12 = var0.isDefaultCatalog("unique constraint", "alter sequence CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY (). restart with 100");
    java.lang.String var16 = var0.regexQuery("select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-", false, "DROP SEQUENCE CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")' RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- REGEXP 'DROP SEQUENCE CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")' RESTRICT'"+ "'", var16.equals("select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- REGEXP 'DROP SEQUENCE CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")' RESTRICT'"));

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test305");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    org.databene.jdbacl.model.DefaultDBTable var18 = new org.databene.jdbacl.model.DefaultDBTable();
    var18.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var22 = var21.getForeignKeyConstraints();
    var18.addReferrer((org.databene.jdbacl.model.DBTable)var21);
    java.lang.String[] var29 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var30 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var29);
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    var37.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var56 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var58 = var37.getUniqueConstraint(var56);
    org.databene.jdbacl.identity.UniqueKeyIdentity var59 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select next value for SET GENERATOR.TO - 1", var56);
    java.lang.String var60 = org.databene.jdbacl.SQLUtil.leftJoin("jdbc:h2:mem:select next value for 10", var29, "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)", "drop sequence alter sequence hi! restart with 1", var56);
    org.databene.jdbacl.model.DBUniqueConstraint var61 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var18, "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", false, var29);
    org.databene.jdbacl.model.DBUniqueIndex var62 = new org.databene.jdbacl.model.DBUniqueIndex("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"", false, var61);
    var62.addColumnName("alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1");
    var15.addIndex((org.databene.jdbacl.model.DBIndex)var62);
    java.lang.String var66 = var62.toString();
    java.lang.String[] var67 = var62.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var57.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var60.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique"+ "'", var66.equals("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test306");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    boolean var7 = var0.isDeterministicIndexName("hi!");
    boolean var10 = var0.isDefaultSchema("select nextval(''((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"''hi!''\")'')", "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )");
    boolean var12 = var0.isDeterministicFKName("alter sequence drop sequence 10 restart with 0 REGEXP 'left join select next value for (\"sequence\") as (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1) on EQUEN.DROP SEQUENCE  = (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1).DROP SEQUENCE '");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test307");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var4 = var0.isDeterministicUKName("drop sequence 10");
    boolean var6 = var0.isDeterministicUKName("jdbc:hsqldb:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script line -1: DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test308");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)");
    java.lang.String var2 = var1.getText();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.script.Expression var3 = org.databene.jdbacl.sql.SQLParserUtil.parseExpression((org.antlr.runtime.CharStream)var1);
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)"+ "'", var2.equals("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,69)"));

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test309");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    java.lang.String var5 = var0.getDoc();
    var0.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    org.databene.jdbacl.JDBCConnectData var14 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var15 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var16 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    boolean var17 = var0.equals((java.lang.Object)var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var18 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var19 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    var19.setCatalogName("select next value for SET GENERATOR . TO -1 DROP SEQUENCE  NULL");
    var19.setImportingPackages(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "."+ "'", var5.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test310");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER");
    java.util.List var2 = var1.getTables();
    org.databene.jdbacl.dialect.DerbyDialect var5 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var7 = var5.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var5.formatValue((java.lang.Object)var8);
    var8.setName("'hi!'");
    java.util.List var13 = var8.getSchemas();
    org.databene.jdbacl.model.DBSchema var14 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var8);
    org.databene.jdbacl.model.DBTrigger var15 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var14);
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    var21.setName("'hi!'");
    java.util.List var26 = var21.getSchemas();
    org.databene.jdbacl.model.DBSchema var27 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var21);
    org.databene.jdbacl.dialect.DerbyDialect var30 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var32 = var30.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var33 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var34 = var33.getName();
    java.lang.String var35 = var30.formatValue((java.lang.Object)var33);
    var33.setName("'hi!'");
    java.util.List var38 = var33.getSchemas();
    org.databene.jdbacl.model.DBSchema var39 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var33);
    org.databene.jdbacl.model.DBTrigger var40 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var39);
    var27.addTrigger(var40);
    var14.addTrigger(var40);
    var1.addSchema(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var16.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test311");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("select drop sequence CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER.nextval from dual", "REGEXP_MATCHES(drop sequence trigger, 'select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-')", "CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!''", "select nextval('select next value for SET GENERATOR . TO -1')", "CREATE GENERATOR drop sequence alter sequence CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\" restart with 1", "CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"REGEXP_MATCHES(NOT REGEXP_LIKE(DROP SEQUENCE (100), 'CONSTRAINT \"select nextval('')\" '), 'jdbc:h2:mem:hi! as 10 on . = 10.')\"", "sequence 10 ~ 'REGEXP_MATCHES(catalog, 'call next value for null[]')' REGEXP 'CONSTRAINT \"hi! identity by primary key\"  NOT REGEXP 'select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!'''", false);
      fail("Expected exception of type java.util.regex.PatternSyntaxException");
    } catch (java.util.regex.PatternSyntaxException e) {
      // Expected exception.
    }

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test312");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    java.lang.String var5 = var0.getDoc();
    var0.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    java.util.Collection var8 = var0.getReferrers();
    java.util.Collection var9 = org.databene.jdbacl.JDBCDriverInfo.getInstances();
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.databene.jdbacl.model.DBRow var11 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var0);
    org.databene.jdbacl.model.TableContainer var16 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var17 = var16.getTables();
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var16);
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    var19.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var23 = var22.getForeignKeyConstraints();
    var19.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    var16.addTable((org.databene.jdbacl.model.DBTable)var22);
    java.lang.String[] var30 = new java.lang.String[] { ""};
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String var35 = org.databene.jdbacl.SQLUtil.join("", "", var30, "hi!", "10", var34);
    java.lang.String var36 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var30);
    org.databene.jdbacl.model.TableContainer var39 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var40 = var39.getTables();
    org.databene.jdbacl.model.TableContainer var41 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var39);
    org.databene.jdbacl.model.DefaultDBTable var42 = new org.databene.jdbacl.model.DefaultDBTable();
    var42.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var46 = var45.getForeignKeyConstraints();
    var42.addReferrer((org.databene.jdbacl.model.DBTable)var45);
    var39.addTable((org.databene.jdbacl.model.DBTable)var45);
    java.lang.String[] var51 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var51);
    org.databene.jdbacl.model.DBForeignKeyConstraint var53 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var22, var30, (org.databene.jdbacl.model.DBTable)var45, var51);
    java.lang.String[] var54 = var53.getRefereeColumnNames();
    java.lang.String[] var55 = var53.getRefereeColumnNames();
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.constraintName((org.databene.jdbacl.model.DBConstraint)var53);
    java.lang.Object[] var57 = var11.getFKComponents(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "."+ "'", var5.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi! as 10 on . = 10."+ "'", var35.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "."+ "'", var36.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var52.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" "+ "'", var56.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test313");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicFKName("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var7 = var0.regexQuery("select next value for .", false, "ResultSetConverter");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "select next value for . REGEXP 'ResultSetConverter'"+ "'", var7.equals("select next value for . REGEXP 'ResultSetConverter'"));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test314");


    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.TableContainer var6 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var4);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var10 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var11 = var10.getForeignKeyConstraints();
    var7.addReferrer((org.databene.jdbacl.model.DBTable)var10);
    var4.addTable((org.databene.jdbacl.model.DBTable)var10);
    java.lang.String[] var18 = new java.lang.String[] { ""};
    java.lang.String[] var22 = new java.lang.String[] { ""};
    java.lang.String var23 = org.databene.jdbacl.SQLUtil.join("", "", var18, "hi!", "10", var22);
    java.lang.String var24 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var18);
    org.databene.jdbacl.model.TableContainer var27 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var28 = var27.getTables();
    org.databene.jdbacl.model.TableContainer var29 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var27);
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    var30.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var34 = var33.getForeignKeyConstraints();
    var30.addReferrer((org.databene.jdbacl.model.DBTable)var33);
    var27.addTable((org.databene.jdbacl.model.DBTable)var33);
    java.lang.String[] var39 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var39);
    org.databene.jdbacl.model.DBForeignKeyConstraint var41 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var10, var18, (org.databene.jdbacl.model.DBTable)var33, var39);
    java.lang.String[] var42 = var41.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var43 = var41.getTable();
    java.lang.String var44 = var41.toString();
    org.databene.jdbacl.model.CompositeDBObject var45 = var41.getOwner();
    java.lang.String[] var46 = var41.getRefereeColumnNames();
    org.databene.jdbacl.dialect.FirebirdDialect var47 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var49 = var47.isDeterministicUKName("10");
    boolean var52 = var47.isDefaultCatalog("CREATE SEQUENCE 10", "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ");
    boolean var54 = var47.isDeterministicUKName("select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;");
    boolean var55 = var47.isSequenceBoundarySupported();
    java.lang.String var57 = var47.renderCreateSequence("'d'");
    boolean var58 = var41.equals((java.lang.Object)"'d'");
    java.lang.String var59 = var41.toString();
    org.databene.jdbacl.model.DBTable var60 = var41.getRefereeTable();
    org.databene.jdbacl.model.FKChangeRule var61 = var41.getUpdateRule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi! as 10 on . = 10."+ "'", var23.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "."+ "'", var24.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var40.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var44.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "CREATE GENERATOR 'd'"+ "'", var57.equals("CREATE GENERATOR 'd'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var59.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test315");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    java.lang.String[] var16 = new java.lang.String[] { ""};
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String var21 = org.databene.jdbacl.SQLUtil.join("", "", var16, "hi!", "10", var20);
    org.databene.jdbacl.model.DBUniqueConstraint var22 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var8, "select nextval('')", false, var16);
    var8.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var2.addTable((org.databene.jdbacl.model.DBTable)var8);
    java.util.List var26 = var8.getIndexes();
    org.databene.jdbacl.model.DBRow var27 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.TableContainer var32 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var33 = var32.getTables();
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var32);
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    var35.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var39 = var38.getForeignKeyConstraints();
    var35.addReferrer((org.databene.jdbacl.model.DBTable)var38);
    var32.addTable((org.databene.jdbacl.model.DBTable)var38);
    java.lang.String[] var46 = new java.lang.String[] { ""};
    java.lang.String[] var50 = new java.lang.String[] { ""};
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.join("", "", var46, "hi!", "10", var50);
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var46);
    org.databene.jdbacl.model.TableContainer var55 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var56 = var55.getTables();
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var55);
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    var58.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var62 = var61.getForeignKeyConstraints();
    var58.addReferrer((org.databene.jdbacl.model.DBTable)var61);
    var55.addTable((org.databene.jdbacl.model.DBTable)var61);
    java.lang.String[] var67 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var67);
    org.databene.jdbacl.model.DBForeignKeyConstraint var69 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var38, var46, (org.databene.jdbacl.model.DBTable)var61, var67);
    java.lang.String[] var70 = var69.getRefereeColumnNames();
    org.databene.jdbacl.model.DBTable var71 = var69.getTable();
    java.lang.String var72 = var69.toString();
    java.lang.Object[] var73 = var27.getFKComponents(var69);
    java.lang.String var76 = var69.columnReferencedBy("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'.NOT drop generator sequence ~ 'hi!'", false);
    java.lang.String[] var77 = var69.getColumnNames();
    java.lang.String var78 = var69.toString();
    java.lang.String var79 = var69.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi! as 10 on . = 10."+ "'", var21.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi! as 10 on . = 10."+ "'", var51.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "."+ "'", var52.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var68.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var72.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var78.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var79.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test316");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    java.util.List var38 = var15.getSequences(false);
    org.databene.jdbacl.dialect.DerbyDialect var42 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var44 = var42.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var45 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var46 = var45.getName();
    java.lang.String var47 = var42.formatValue((java.lang.Object)var45);
    var45.setName("'hi!'");
    java.util.List var50 = var45.getSchemas();
    org.databene.jdbacl.model.DBSchema var51 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var45);
    org.databene.jdbacl.model.DBTrigger var52 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var51);
    java.util.List var53 = var51.getPackages();
    org.databene.jdbacl.model.DBPackage var54 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var51);
    var15.addPackage(var54);
    var54.setStatus("column jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var58 = var54.getObjectType();
    org.databene.jdbacl.JDBCConnectData var66 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var67 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var66);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var68 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var66);
    org.databene.jdbacl.model.DBCatalog var70 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var71 = var70.getName();
    org.databene.jdbacl.model.Database var72 = var70.getDatabase();
    java.lang.String var73 = var70.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var75 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var77 = var75.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var78 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var79 = var78.getName();
    java.lang.String var80 = var75.formatValue((java.lang.Object)var78);
    var78.setName("'hi!'");
    java.util.List var83 = var78.getSchemas();
    org.databene.jdbacl.model.DBSchema var84 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var78);
    var70.removeSchema(var84);
    java.util.List var87 = var84.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var88 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var84);
    org.databene.jdbacl.model.jdbc.LazyTable var91 = new org.databene.jdbacl.model.jdbc.LazyTable(var68, var84, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSequence var92 = new org.databene.jdbacl.model.DBSequence("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'", var84);
    boolean var93 = var54.isIdentical((org.databene.jdbacl.model.DBObject)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test317");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var0.consumeUntil((org.antlr.runtime.IntStream)var9, 100);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    var0.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var22);
    var0.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var25 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var25.mCREATE_TABLE();
    var25.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var29 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var31 = var29.LT(10);
    var25.setCharStream((org.antlr.runtime.CharStream)var29);
    var0.consumeUntil((org.antlr.runtime.IntStream)var29, 1);
    org.databene.jdbacl.sql.parser.SQLLexer var35 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var29);
    var35.skip();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.mT__116();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 69);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test318");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var9 = var0.renderFetchSequenceValue("");
    java.lang.String var13 = var0.regexQuery("drop generator sequence", true, "hi!");
    boolean var15 = var0.isDeterministicPKName("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var17 = var0.isDeterministicFKName("SET GENERATOR . TO -1");
    boolean var19 = var0.isDeterministicPKName("DROP SEQUENCE select next value for SET GENERATOR.TO - 1 NOT REGEXP 'hi!' RESTRICT");
    boolean var20 = var0.supportsRegex();
    org.databene.jdbacl.dialect.Derby10_6Dialect var21 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var24 = var21.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var26 = var21.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var30.setName("10");
    java.math.BigInteger var33 = var30.getIncrement();
    java.lang.String var34 = var21.renderCreateSequence(var30);
    org.databene.jdbacl.model.DBSequence var38 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var39 = var38.dropDDL();
    java.math.BigInteger var40 = var38.getMinValueIfNotDefault();
    java.lang.String var41 = var38.getSchemaName();
    org.databene.jdbacl.model.DBSequence var45 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var46 = var45.dropDDL();
    java.math.BigInteger var47 = var45.getMinValueIfNotDefault();
    java.lang.String var48 = var45.getSchemaName();
    java.lang.Boolean var49 = var45.isOrder();
    org.databene.jdbacl.model.DBSequence var53 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var54 = var53.dropDDL();
    java.math.BigInteger var55 = var53.getMinValueIfNotDefault();
    java.math.BigInteger var56 = var53.getLastNumber();
    var45.setIncrement(var56);
    var38.setMaxValue(var56);
    java.lang.String var59 = var21.renderCreateSequence(var38);
    org.databene.jdbacl.model.DBSequence var63 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var63.setName("10");
    java.math.BigInteger var66 = var63.getIncrement();
    org.databene.jdbacl.model.DBSequence var70 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var70.setName("10");
    java.math.BigInteger var73 = var70.getIncrement();
    var63.setMaxValue(var73);
    var38.setStart(var73);
    java.math.BigInteger var76 = var38.getLastNumber();
    java.lang.String var77 = var0.renderCreateSequence(var38);
    java.lang.Boolean var78 = var38.isOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('')"+ "'", var9.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "NOT drop generator sequence ~ 'hi!'"+ "'", var13.equals("NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var26.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var34.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "drop sequence "+ "'", var39.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi! as 10 on . = 10."+ "'", var41.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "drop sequence "+ "'", var46.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi! as 10 on . = 10."+ "'", var48.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "drop sequence "+ "'", var54.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0"+ "'", var59.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "CREATE SEQUENCE  MAXVALUE 0"+ "'", var77.equals("CREATE SEQUENCE  MAXVALUE 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test319");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    org.databene.jdbacl.identity.xml.IdentityParseContext var12 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var10);
    var12.remove("drop sequence 10");
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    org.databene.jdbacl.identity.IdentityProvider var26 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var27 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var20, var26);
    org.databene.jdbacl.identity.xml.IdentityParseContext var28 = new org.databene.jdbacl.identity.xml.IdentityParseContext(var26);
    var12.set("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")", (java.lang.Object)var28);
    org.databene.jdbacl.identity.IdentityProvider var30 = var28.getIdentityProvider();
    var28.remove("h2");
    java.util.Set var33 = var28.keySet();
    java.util.Set var34 = var28.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test320");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    java.lang.String var5 = var0.setSequenceValue("", (-1L));
    boolean var8 = var0.isDefaultCatalog("sequence", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var9 = var0.isSequenceSupported();
    boolean var12 = var0.isDefaultCatalog("null[DROP SEQUENCE ] SIMILAR TO 'CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT'", "CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ().");
    boolean var13 = var0.isSequenceSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "alter sequence  restart with -1"+ "'", var5.equals("alter sequence  restart with -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test321");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    boolean var92 = var90.isUnique();
    var90.addColumnName("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT");
    java.lang.String var95 = var90.toString();
    boolean var96 = var90.isUnique();
    boolean var97 = var90.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)"+ "'", var95.equals("SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test322");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var1 = var0.getForeignKeyConstraints();
    var0.setDoc("drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    var5.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var9 = var8.getForeignKeyConstraints();
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var8);
    org.databene.jdbacl.model.DBDataType var13 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var14 = var13.isAlpha();
    java.lang.String var15 = var13.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var16 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var19 = var16.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var21 = var16.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var22 = var13.equals((java.lang.Object)var21);
    org.databene.jdbacl.model.DefaultDBColumn var25 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var8, var13, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    org.databene.jdbacl.model.DBSchema var33 = var26.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var41 = var40.getForeignKeyConstraints();
    var37.addReferrer((org.databene.jdbacl.model.DBTable)var40);
    org.databene.jdbacl.model.DBDataType var45 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var46 = var45.isAlpha();
    java.lang.String var47 = var45.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var48 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var51 = var48.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var53 = var48.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var54 = var45.equals((java.lang.Object)var53);
    org.databene.jdbacl.model.DefaultDBColumn var57 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var40, var45, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var58 = var57.getType();
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    var59.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var62 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var63 = var62.getForeignKeyConstraints();
    var59.addReferrer((org.databene.jdbacl.model.DBTable)var62);
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String[] var74 = new java.lang.String[] { ""};
    java.lang.String var75 = org.databene.jdbacl.SQLUtil.join("", "", var70, "hi!", "10", var74);
    org.databene.jdbacl.model.DBUniqueConstraint var76 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var62, "select nextval('')", false, var70);
    var76.addColumnName("sequence");
    var57.addUkConstraint(var76);
    java.lang.String[] var80 = var76.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var81 = new org.databene.jdbacl.model.DBUniqueIndex("select nextval('')", false, var76);
    var26.removeIndex((org.databene.jdbacl.model.DBIndex)var81);
    java.util.Set var84 = var26.getUniqueConstraints(false);
    java.util.Set var85 = var26.getForeignKeyConstraints();
    java.lang.String[] var90 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var91 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var90);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var92 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var26, "drop sequence 10", true, var90);
    var0.setPrimaryKey(var92);
    java.util.List var94 = var0.getColumns();
    var0.setDoc("DROP SEQUENCE select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; RESTRICT");
    org.databene.jdbacl.model.DBUniqueConstraint var98 = var0.getUniqueConstraint("alter sequence NO_ACTION restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DROP SEQUENCE "+ "'", var15.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var21.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "DROP SEQUENCE "+ "'", var47.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var53.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi! as 10 on . = 10."+ "'", var75.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test323");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    org.databene.jdbacl.model.DBCatalog var3 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var4 = var3.getName();
    org.databene.jdbacl.model.Database var5 = var3.getDatabase();
    java.lang.String var6 = var3.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var8 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var10 = var8.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    java.lang.String var13 = var8.formatValue((java.lang.Object)var11);
    var11.setName("'hi!'");
    java.util.List var16 = var11.getSchemas();
    org.databene.jdbacl.model.DBSchema var17 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var11);
    var3.removeSchema(var17);
    org.databene.jdbacl.dialect.DerbyDialect var21 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var23 = var21.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var24 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var21.formatValue((java.lang.Object)var24);
    var24.setName("'hi!'");
    java.util.List var29 = var24.getSchemas();
    org.databene.jdbacl.model.DBSchema var30 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var24);
    org.databene.jdbacl.model.DBTrigger var31 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var30);
    var31.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var34 = var31.getTriggerBody();
    java.lang.String var35 = var31.getColumnName();
    java.lang.String var36 = var31.getWhenClause();
    var17.addTrigger(var31);
    org.databene.jdbacl.model.DBTrigger var38 = new org.databene.jdbacl.model.DBTrigger("-1", var17);
    org.databene.jdbacl.dialect.DerbyDialect var42 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var44 = var42.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var45 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var46 = var45.getName();
    java.lang.String var47 = var42.formatValue((java.lang.Object)var45);
    var45.setName("'hi!'");
    java.util.List var50 = var45.getSchemas();
    org.databene.jdbacl.model.DBSchema var51 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var45);
    org.databene.jdbacl.model.DBTrigger var52 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var51);
    java.util.List var53 = var51.getPackages();
    org.databene.jdbacl.model.DBPackage var54 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var51);
    java.lang.String var55 = var54.getStatus();
    var17.addPackage(var54);
    java.lang.String var57 = var17.getObjectType();
    var1.removeSchema(var17);
    java.util.List var59 = var17.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "schema"+ "'", var57.equals("schema"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test324");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    var0.mALTER_TABLE();
    var0.emitErrorMessage("hi! as 10 on . = 10.");
    var0.reset();
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.join("", "", var33, "hi!", "10", var37);
    org.databene.jdbacl.model.DBUniqueConstraint var39 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var25, "select nextval('')", false, var33);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    java.lang.String var51 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var45);
    java.lang.String[] var58 = new java.lang.String[] { ""};
    java.lang.String[] var62 = new java.lang.String[] { ""};
    java.lang.String var63 = org.databene.jdbacl.SQLUtil.join("", "", var58, "hi!", "10", var62);
    java.lang.String var64 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var62);
    java.lang.String var65 = org.databene.jdbacl.SQLUtil.leftJoin("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", var45, "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1)", "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var62);
    org.databene.jdbacl.identity.NaturalPkIdentity var67 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    java.lang.String var68 = var67.getName();
    boolean var70 = var67.equals((java.lang.Object)(-1.0d));
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable();
    var71.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var74 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var75 = var74.getForeignKeyConstraints();
    var71.addReferrer((org.databene.jdbacl.model.DBTable)var74);
    java.lang.String[] var82 = new java.lang.String[] { ""};
    java.lang.String[] var86 = new java.lang.String[] { ""};
    java.lang.String var87 = org.databene.jdbacl.SQLUtil.join("", "", var82, "hi!", "10", var86);
    org.databene.jdbacl.model.DBUniqueConstraint var88 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var74, "select nextval('')", false, var82);
    java.lang.String var89 = var67.extractNK((java.lang.Object[])var82);
    java.lang.String var90 = org.databene.jdbacl.SQLUtil.renderQuery((org.databene.jdbacl.model.DBTable)var25, var45, (java.lang.Object[])var82);
    var0.traceIn("NO_ACTION", 14, (java.lang.Object)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__99();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi! as 10 on . = 10."+ "'", var38.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "."+ "'", var51.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi! as 10 on . = 10."+ "'", var63.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "."+ "'", var64.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var65.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi! as 10 on . = 10."+ "'", var87.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SELECT * FROM null WHERE  = ''"+ "'", var90.equals("SELECT * FROM null WHERE  = ''"));

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test325");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var3 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")");
    org.databene.jdbacl.model.xml.XMLModelImporter var4 = new org.databene.jdbacl.model.xml.XMLModelImporter(var1);
    var4.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test326");


    java.lang.String var1 = org.databene.jdbacl.SQLUtil.removeComments("alter sequence drop generator . restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "alter sequence drop generator . restart with 10"+ "'", var1.equals("alter sequence drop generator . restart with 10"));

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test327");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBTreeModel var10 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var0);
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    org.databene.jdbacl.model.DBTrigger var25 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var24);
    java.util.List var26 = var24.getPackages();
    org.databene.jdbacl.model.DBPackage var27 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var24);
    java.util.List var28 = var27.getComponents();
    org.databene.jdbacl.model.DBProcedure var29 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var27);
    java.lang.String var30 = var29.getSubProgramId();
    var29.setSubProgramId("jdbc:h2:mem:select next value for 10");
    java.lang.String var33 = var29.getSubProgramId();
    java.lang.String var34 = var29.getSubProgramId();
    boolean var35 = var10.isLeaf((org.databene.jdbacl.model.DBObject)var29);
    java.lang.String var36 = var29.getOverload();
    var29.setOverload("jdbc:hsqldb:mem:jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "jdbc:h2:mem:select next value for 10"+ "'", var33.equals("jdbc:h2:mem:select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "jdbc:h2:mem:select next value for 10"+ "'", var34.equals("jdbc:h2:mem:select next value for 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test328");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    java.lang.String var7 = var0.renderDropSequence("jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    var8.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var12 = var11.getForeignKeyConstraints();
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var11);
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    var15.setDoc(".");
    java.util.Set var19 = var15.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    boolean var24 = var22.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var27 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var15, var22, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var11.addColumn((org.databene.jdbacl.model.DBColumn)var27);
    org.databene.jdbacl.model.DBRow var29 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var11);
    java.lang.Object[] var30 = var29.getPKValues();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setCache((java.lang.Long)100L);
    java.lang.String var38 = var35.getObjectType();
    java.math.BigInteger var39 = var35.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var43.setName("10");
    java.math.BigInteger var46 = var43.getIncrement();
    java.math.BigInteger var47 = var43.getIncrement();
    var35.setLastNumber(var47);
    var35.setOrder((java.lang.Boolean)false);
    var29.setCellValue("alter sequence  restart with -1", (java.lang.Object)var35);
    java.lang.String var52 = var0.renderCreateSequence(var35);
    java.lang.String var54 = var0.renderFetchSequenceValue("call next value for 'hi!'");
    boolean var57 = var0.isDefaultCatalog("SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!'", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL");
    boolean var59 = var0.isDeterministicUKName("CREATE SEQUENCE  MAXVALUE 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"+ "'", var7.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "sequence"+ "'", var38.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var52.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "VALUES (NEXT VALUE FOR call next value for 'hi!')"+ "'", var54.equals("VALUES (NEXT VALUE FOR call next value for 'hi!')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test329");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var14 = var12.LT(10);
    boolean var16 = var10.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var12, 69);
    var10.endResync();
    org.databene.jdbacl.sql.parser.SQLLexer var18 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var20 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var20.release((-1));
    boolean var24 = var18.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var20, 0);
    int var25 = var18.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var27 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var18.consumeUntil((org.antlr.runtime.IntStream)var27, 100);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    var18.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var40);
    var18.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var43 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var43.mCREATE_TABLE();
    var43.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var47 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var49 = var47.LT(10);
    var43.setCharStream((org.antlr.runtime.CharStream)var47);
    var18.consumeUntil((org.antlr.runtime.IntStream)var47, 1);
    java.lang.String var53 = var47.toString();
    var47.setLine(14);
    var10.setCharStream((org.antlr.runtime.CharStream)var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.script.Expression var57 = org.databene.jdbacl.sql.SQLParserUtil.parseExpression((org.antlr.runtime.CharStream)var47);
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "DROP SEQUENCE "+ "'", var53.equals("DROP SEQUENCE "));

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test330");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var80 = new org.databene.jdbacl.ResultSetConverter(var78);
    java.lang.String var81 = var80.toString();
    java.lang.Class var82 = var80.getSourceType();
    java.lang.Class var83 = var80.getSourceType();
    org.databene.jdbacl.ResultSetConverter var85 = new org.databene.jdbacl.ResultSetConverter(var83, false);
    boolean var86 = var85.isThreadSafe();
    boolean var87 = var85.isParallelizable();
    boolean var88 = var85.isThreadSafe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "ResultSetConverter"+ "'", var81.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test331");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    java.lang.String var15 = var0.renderCreateSequence(var9);
    boolean var18 = var0.isDefaultSchema("drop generator sequence.NOT drop generator sequence ~ 'hi!'", "left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual.");
    boolean var20 = var0.isDeterministicFKName("index");
    boolean var22 = var0.isDeterministicIndexName("alter sequence call next value for 'hi!' restart with 100");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "CREATE SEQUENCE 10"+ "'", var15.equals("CREATE SEQUENCE 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test332");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setCache((java.lang.Long)100L);
    java.lang.String var12 = var9.getObjectType();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    boolean var16 = var0.isDefaultSchema("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0", "'\\n'");
    boolean var18 = var0.isDeterministicPKName("procedure CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var20 = var0.isDeterministicUKName("DROP SEQUENCE (100)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test333");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    java.lang.String var5 = var0.getDoc();
    var0.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    java.util.Collection var8 = var0.getReferrers();
    java.util.Set var9 = var0.getForeignKeyConstraints();
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    var11.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var14 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var15 = var14.getForeignKeyConstraints();
    var11.addReferrer((org.databene.jdbacl.model.DBTable)var14);
    org.databene.jdbacl.model.DBDataType var19 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var20 = var19.isAlpha();
    java.lang.String var21 = var19.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var22 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var25 = var22.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var27 = var22.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var28 = var19.equals((java.lang.Object)var27);
    org.databene.jdbacl.model.DefaultDBColumn var31 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var14, var19, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    var32.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var36 = var35.getForeignKeyConstraints();
    var32.addReferrer((org.databene.jdbacl.model.DBTable)var35);
    var14.addReferrer((org.databene.jdbacl.model.DBTable)var32);
    org.databene.jdbacl.model.DBIndex var40 = var32.getIndex("");
    java.util.List var41 = var32.getIndexes();
    java.util.Set var42 = var32.getForeignKeyConstraints();
    org.databene.jdbacl.model.TableContainer var47 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var48 = var47.getTables();
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var47);
    org.databene.jdbacl.model.DefaultDBTable var50 = new org.databene.jdbacl.model.DefaultDBTable();
    var50.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var53 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var54 = var53.getForeignKeyConstraints();
    var50.addReferrer((org.databene.jdbacl.model.DBTable)var53);
    var47.addTable((org.databene.jdbacl.model.DBTable)var53);
    java.lang.String[] var61 = new java.lang.String[] { ""};
    java.lang.String[] var65 = new java.lang.String[] { ""};
    java.lang.String var66 = org.databene.jdbacl.SQLUtil.join("", "", var61, "hi!", "10", var65);
    java.lang.String var67 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var61);
    org.databene.jdbacl.model.TableContainer var70 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var71 = var70.getTables();
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var70);
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    var73.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var76 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var77 = var76.getForeignKeyConstraints();
    var73.addReferrer((org.databene.jdbacl.model.DBTable)var76);
    var70.addTable((org.databene.jdbacl.model.DBTable)var76);
    java.lang.String[] var82 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var83 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var82);
    org.databene.jdbacl.model.DBForeignKeyConstraint var84 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var53, var61, (org.databene.jdbacl.model.DBTable)var76, var82);
    org.databene.jdbacl.model.DBTable var85 = var84.getRefereeTable();
    var32.addForeignKey(var84);
    java.lang.String var87 = var84.toString();
    var0.addForeignKey(var84);
    org.databene.jdbacl.model.FKChangeRule var89 = var84.getUpdateRule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "."+ "'", var5.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "DROP SEQUENCE "+ "'", var21.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var27.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi! as 10 on . = 10."+ "'", var66.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "."+ "'", var67.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var83.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"+ "'", var87.equals("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test334");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DBCatalog var15 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var16 = var15.getName();
    org.databene.jdbacl.model.Database var17 = var15.getDatabase();
    java.lang.String var18 = var15.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var20 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var22 = var20.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var23 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var20.formatValue((java.lang.Object)var23);
    var23.setName("'hi!'");
    java.util.List var28 = var23.getSchemas();
    org.databene.jdbacl.model.DBSchema var29 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var23);
    var15.removeSchema(var29);
    var15.setName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    var12.setCatalog(var15);
    java.util.List var34 = var12.getPackages();
    org.databene.jdbacl.model.DBTrigger var35 = new org.databene.jdbacl.model.DBTrigger("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", var12);
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var40 = var39.getMaxValue();
    java.lang.String var41 = var39.toString();
    org.databene.jdbacl.model.DBSequence var45 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var46 = var45.dropDDL();
    java.math.BigInteger var47 = var45.getMinValueIfNotDefault();
    java.math.BigInteger var48 = var45.getLastNumber();
    org.databene.jdbacl.model.DBSequence var52 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var52.setName("10");
    java.math.BigInteger var55 = var52.getIncrement();
    java.math.BigInteger var56 = var52.getIncrement();
    var45.setStart(var56);
    var39.setIncrement(var56);
    org.databene.jdbacl.model.CompositeDBObject var59 = var39.getOwner();
    var39.setOrder((java.lang.Boolean)true);
    var12.addSequence(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "drop sequence "+ "'", var46.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test335");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    java.lang.String var11 = var0.getDefaultDatabase();
    java.lang.String var12 = var0.getName();
    java.lang.String var13 = var0.getDefaultPort();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test336");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getMinValueIfNotDefault();
    java.math.BigInteger var6 = var3.getStartIfNotDefault();
    java.lang.Boolean var7 = var3.isOrder();
    org.databene.jdbacl.dialect.Derby10_6Dialect var8 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var11 = var8.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var13 = var8.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var14 = var8.isSequenceSupported();
    java.lang.String var16 = var8.renderDropSequence("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.model.DBSequence var20 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var20.setCache((java.lang.Long)100L);
    java.lang.String var23 = var20.getObjectType();
    java.math.BigInteger var24 = var20.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var28 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var28.setName("10");
    java.math.BigInteger var31 = var28.getIncrement();
    java.math.BigInteger var32 = var28.getIncrement();
    var20.setLastNumber(var32);
    java.lang.Long var34 = var20.getCache();
    java.lang.String var35 = var8.renderCreateSequence(var20);
    boolean var36 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var13.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. RESTRICT"+ "'", var16.equals("DROP SEQUENCE drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "sequence"+ "'", var23.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 100L+ "'", var34.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var35.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test337");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicPKName("10");
    boolean var5 = var0.isDefaultSchema("SET GENERATOR . TO -1", "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    boolean var8 = var0.isDefaultCatalog("10", "null[DROP SEQUENCE ]");
    boolean var10 = var0.isDeterministicFKName("NOT drop sequence  ~ 'alter sequence  restart with -1'");
    boolean var12 = var0.isDeterministicUKName("alter sequence CONSTRAINT \"select nextval('')\" UNIQUE () restart with -1");
    org.databene.jdbacl.model.TableContainer var19 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var20 = var19.getTables();
    org.databene.jdbacl.model.TableContainer var21 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var19);
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var19.addTable((org.databene.jdbacl.model.DBTable)var25);
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.join("", "", var33, "hi!", "10", var37);
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var33);
    org.databene.jdbacl.model.TableContainer var42 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var43 = var42.getTables();
    org.databene.jdbacl.model.TableContainer var44 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var42);
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    var45.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var49 = var48.getForeignKeyConstraints();
    var45.addReferrer((org.databene.jdbacl.model.DBTable)var48);
    var42.addTable((org.databene.jdbacl.model.DBTable)var48);
    java.lang.String[] var54 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var54);
    org.databene.jdbacl.model.DBForeignKeyConstraint var56 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var25, var33, (org.databene.jdbacl.model.DBTable)var48, var54);
    java.lang.String[] var57 = var56.getRefereeColumnNames();
    java.lang.String[] var58 = var56.getRefereeColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var59 = var0.renderCase("REGEXP_LIKE(CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT, 'DROP SEQUENCE (100)')", "jdbc:hsqldb:mem:VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", var58);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi! as 10 on . = 10."+ "'", var38.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "."+ "'", var39.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var55.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test338");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mARGUMENTS();
    org.databene.jdbacl.dialect.HSQL2Dialect var5 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var8 = var5.renderSequenceValue("hi!", 1L);
    java.lang.String var12 = var5.regexQuery("sequence", true, "");
    boolean var14 = var5.isDeterministicPKName("alter sequence hi! restart with 1");
    java.lang.String var16 = var5.renderDropSequence("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    var0.traceIn("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", 0, (java.lang.Object)var5);
    boolean var18 = var5.supportsRegex();
    boolean var19 = var5.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "alter sequence hi! restart with 1"+ "'", var8.equals("alter sequence hi! restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "NOT REGEXP_MATCHES(sequence, '')"+ "'", var12.equals("NOT REGEXP_MATCHES(sequence, '')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-."+ "'", var16.equals("drop sequence jdbc:h2:mem:hi! as 10 on . = 10.-identity-."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test339");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    java.lang.String[] var30 = var22.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var43 = var42.isAlpha();
    java.lang.String var44 = var42.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var45 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var48 = var45.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var50 = var45.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var51 = var42.equals((java.lang.Object)var50);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var37, var42, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = var54.getType();
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String[] var71 = new java.lang.String[] { ""};
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.join("", "", var67, "hi!", "10", var71);
    org.databene.jdbacl.model.DBUniqueConstraint var73 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var59, "select nextval('')", false, var67);
    var73.addColumnName("sequence");
    var54.addUkConstraint(var73);
    org.databene.jdbacl.model.DBUniqueIndex var77 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var73);
    var22.addIndex((org.databene.jdbacl.model.DBIndex)var77);
    org.databene.jdbacl.model.DBTable var79 = var77.getTable();
    org.databene.jdbacl.identity.NaturalPkIdentity var81 = new org.databene.jdbacl.identity.NaturalPkIdentity("hi!");
    boolean var83 = var81.equals((java.lang.Object)(short)(-1));
    java.lang.String var84 = var81.toString();
    java.lang.String var85 = var81.getTableName();
    boolean var86 = var77.equals((java.lang.Object)var81);
    java.lang.String var87 = var81.getTableName();
    java.lang.String var88 = var81.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "DROP SEQUENCE "+ "'", var44.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var50.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi! as 10 on . = 10."+ "'", var72.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "NaturalPkIdentity(hi!)"+ "'", var84.equals("NaturalPkIdentity(hi!)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test340");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_SEQUENCE();
    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    java.util.List var16 = var0.toStrings(var15);
    var0.mCREATE_SEQUENCE();
    var0.mALTER_TABLE();
    var0.mDROP_SEQUENCE();
    org.databene.jdbacl.sql.parser.SQLLexer var20 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var20.mCREATE_TABLE();
    var20.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var24 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var26 = var24.LT(10);
    var20.setCharStream((org.antlr.runtime.CharStream)var24);
    var24.reset();
    int var30 = var24.LA(79);
    var24.reset();
    int var33 = var24.LT(10);
    var0.consumeUntil((org.antlr.runtime.IntStream)var24, 10);
    int var36 = var24.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.script.Expression var37 = org.databene.jdbacl.sql.SQLParserUtil.parseExpression((org.antlr.runtime.CharStream)var24);
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 14);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test341");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var21 = var20.getTables();
    org.databene.jdbacl.model.TableContainer var22 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var20);
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var20.addTable((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var34);
    org.databene.jdbacl.model.TableContainer var43 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var44 = var43.getTables();
    org.databene.jdbacl.model.TableContainer var45 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var43);
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    var46.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var50 = var49.getForeignKeyConstraints();
    var46.addReferrer((org.databene.jdbacl.model.DBTable)var49);
    var43.addTable((org.databene.jdbacl.model.DBTable)var49);
    java.lang.String[] var55 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var55);
    org.databene.jdbacl.model.DBForeignKeyConstraint var57 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var26, var34, (org.databene.jdbacl.model.DBTable)var49, var55);
    java.lang.String[] var58 = var57.getForeignKeyColumnNames();
    var15.removeForeignKeyConstraint(var57);
    java.lang.String[] var60 = var57.getForeignKeyColumnNames();
    java.lang.String var61 = org.databene.jdbacl.SQLUtil.renderColumnNames(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "."+ "'", var40.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var56.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "()"+ "'", var61.equals("()"));

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test342");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    java.lang.String[] var30 = var22.getPKColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBNotNullConstraint var34 = new org.databene.jdbacl.model.DBNotNullConstraint((org.databene.jdbacl.model.DBTable)var22, "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", true, "CONSTRAINT \"REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')\" PRIMARY KEY ()");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test343");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    java.lang.String var7 = var0.renderDropSequence("jdbc:h2:mem:hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DefaultDBTable var8 = new org.databene.jdbacl.model.DefaultDBTable();
    var8.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var12 = var11.getForeignKeyConstraints();
    var8.addReferrer((org.databene.jdbacl.model.DBTable)var11);
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    var15.setDoc(".");
    java.util.Set var19 = var15.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    boolean var24 = var22.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var27 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var15, var22, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var11.addColumn((org.databene.jdbacl.model.DBColumn)var27);
    org.databene.jdbacl.model.DBRow var29 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var11);
    java.lang.Object[] var30 = var29.getPKValues();
    org.databene.jdbacl.model.DBSequence var35 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var35.setCache((java.lang.Long)100L);
    java.lang.String var38 = var35.getObjectType();
    java.math.BigInteger var39 = var35.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var43.setName("10");
    java.math.BigInteger var46 = var43.getIncrement();
    java.math.BigInteger var47 = var43.getIncrement();
    var35.setLastNumber(var47);
    var35.setOrder((java.lang.Boolean)false);
    var29.setCellValue("alter sequence  restart with -1", (java.lang.Object)var35);
    java.lang.String var52 = var0.renderCreateSequence(var35);
    var35.setCycle((java.lang.Boolean)true);
    java.math.BigInteger var55 = var35.getStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"+ "'", var7.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "sequence"+ "'", var38.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var52.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test344");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    boolean var7 = var0.isDeterministicFKName("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.String var9 = var0.renderFetchSequenceValue("");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", "hi! identity by primary key", "jdbc:h2:mem:select next value for 10");
    java.lang.String var14 = var0.renderCreateSequence(var13);
    var13.setName("DROP SEQUENCE -1 RESTRICT");
    var13.setCycle((java.lang.Boolean)true);
    org.databene.jdbacl.sql.ColumnExpression var22 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var25 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var26 = var25.getValue();
    org.databene.jdbacl.sql.ColumnExpression var29 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var30 = var29.getValue();
    org.databene.jdbacl.sql.BetweenExpression var31 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var22, (org.databene.script.Expression)var25, (org.databene.script.Expression)var29);
    java.lang.Object var32 = var22.getValue();
    org.databene.jdbacl.sql.ColumnExpression var35 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var36 = var35.getValue();
    org.databene.jdbacl.dialect.HSQL2Dialect var37 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var39 = var37.renderFetchSequenceValue("'hi!'");
    var35.setValue("'hi!'");
    boolean var41 = var35.isConstant();
    org.databene.jdbacl.sql.ColumnExpression var44 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    boolean var45 = var44.isConstant();
    java.lang.Object var46 = var44.getValue();
    org.databene.jdbacl.sql.BetweenExpression var47 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var22, (org.databene.script.Expression)var35, (org.databene.script.Expression)var44);
    org.databene.script.Expression[] var48 = var47.getSourceExpressions();
    org.databene.jdbacl.sql.FunctionInvocation var49 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'", var48);
    boolean var50 = var13.equals((java.lang.Object)"alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "select nextval('')"+ "'", var9.equals("select nextval('')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."+ "'", var14.equals("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "sequence"+ "'", var26.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "sequence"+ "'", var30.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "sequence"+ "'", var32.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "sequence"+ "'", var36.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "call next value for 'hi!'"+ "'", var39.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "sequence"+ "'", var46.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test345");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mEQ();
    var10.mVALUE_LIST();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test346");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    java.util.Set var28 = var24.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var31 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var32 = var31.isAlpha();
    boolean var33 = var31.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var24, var31, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var39 = new org.databene.jdbacl.model.DefaultDBColumn("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ", (org.databene.jdbacl.model.DBTable)var5, var31, (java.lang.Integer)3, (java.lang.Integer)69);
    int var40 = var31.getJdbcType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test347");


    java.lang.String[] var4 = new java.lang.String[] { ""};
    java.lang.String[] var8 = new java.lang.String[] { ""};
    java.lang.String var9 = org.databene.jdbacl.SQLUtil.join("", "", var4, "hi!", "10", var8);
    org.databene.jdbacl.identity.IdentityProvider var10 = new org.databene.jdbacl.identity.IdentityProvider();
    org.databene.jdbacl.identity.SubNkPkQueryIdentity var11 = new org.databene.jdbacl.identity.SubNkPkQueryIdentity("null", var4, var10);
    org.databene.jdbacl.identity.IdentityModel var14 = var10.getIdentity("SELECT * FROM null WHERE  = ''", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.identity.IdentityModel var16 = var10.getIdentity("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi! as 10 on . = 10."+ "'", var9.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test348");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("drop sequence ", "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "alter sequence drop sequence 10 restart with 0", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT", ".", "alter sequence hi! restart with 1");
    var6.setExcludeTables("call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    boolean var9 = var6.isImportingIndexes();
    boolean var10 = var6.isImportingPackages();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test349");


    org.databene.jdbacl.sql.ColumnExpression var2 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var6 = var5.getValue();
    org.databene.jdbacl.sql.ColumnExpression var9 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var10 = var9.getValue();
    org.databene.jdbacl.sql.BetweenExpression var11 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var2, (org.databene.script.Expression)var5, (org.databene.script.Expression)var9);
    java.lang.String var12 = var11.toString();
    org.databene.script.Expression[] var13 = var11.getSourceExpressions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "sequence"+ "'", var6.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "sequence"+ "'", var10.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var12.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test350");


    org.databene.jdbacl.model.TableContainerSupport var0 = new org.databene.jdbacl.model.TableContainerSupport();
    org.databene.jdbacl.model.TableContainer var3 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var4 = var3.getTables();
    org.databene.jdbacl.model.TableContainer var5 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var3);
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    java.util.List var16 = var5.getTables(false, var15);
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    org.databene.jdbacl.model.Database var21 = var19.getDatabase();
    java.lang.String var22 = var19.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var24 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var26 = var24.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = var24.formatValue((java.lang.Object)var27);
    var27.setName("'hi!'");
    java.util.List var32 = var27.getSchemas();
    org.databene.jdbacl.model.DBSchema var33 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var27);
    var19.removeSchema(var33);
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    org.databene.jdbacl.model.DBTrigger var47 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var46);
    var47.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var50 = var47.getTriggerBody();
    java.lang.String var51 = var47.getColumnName();
    java.lang.String var52 = var47.getWhenClause();
    var33.addTrigger(var47);
    org.databene.jdbacl.model.DBTrigger var54 = new org.databene.jdbacl.model.DBTrigger("-1", var33);
    java.util.List var56 = var33.getSequences(true);
    java.util.List var57 = var5.getSequences(true, var56);
    java.util.List var59 = var5.getSequences(true);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var61 = var60.getForeignKeyConstraints();
    var60.setDoc("drop sequence ");
    var60.setDoc("catalog");
    var5.removeTable((org.databene.jdbacl.model.DBTable)var60);
    var0.addSubContainer(var5);
    java.util.List var68 = var0.getTables();
    java.util.List var70 = var0.getSequences(false);
    java.util.List var71 = var0.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test351");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getMinValueIfNotDefault();
    java.math.BigInteger var6 = var3.getLastNumber();
    org.databene.jdbacl.model.DBSequence var10 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var10.setName("10");
    java.math.BigInteger var13 = var10.getIncrement();
    java.math.BigInteger var14 = var10.getIncrement();
    var3.setStart(var14);
    java.lang.Boolean var16 = var3.isCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test352");


    org.databene.jdbacl.dialect.H2Dialect var0 = new org.databene.jdbacl.dialect.H2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("SET GENERATOR . TO -1");
    boolean var3 = var0.isSequenceSupported();
    java.lang.String var7 = var0.regexQuery("CONSTRAINT hi! UNIQUE ()", false, "10");
    boolean var9 = var0.isDeterministicPKName("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ().");
    java.lang.String var12 = var0.setSequenceValue("drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER", (-1L));
    boolean var13 = var0.supportsRegex();
    boolean var14 = var0.isSequenceSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "select next value for SET GENERATOR . TO -1"+ "'", var2.equals("select next value for SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "CONSTRAINT hi! UNIQUE () REGEXP '10'"+ "'", var7.equals("CONSTRAINT hi! UNIQUE () REGEXP '10'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1"+ "'", var12.equals("alter sequence drop generator CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100NOORDER restart with -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test353");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    var10.mSLASH();
    var10.mT__113();
    var10.mT__109();
    var10.mOR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test354");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mOR();
    var10.mT__130();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test355");


    org.databene.jdbacl.sql.parser.SQLParser.column_name_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.column_name_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test356");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var4.setCache((java.lang.Long)100L);
    java.lang.String var7 = var4.getObjectType();
    java.math.BigInteger var8 = var4.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var12.setName("10");
    java.math.BigInteger var15 = var12.getIncrement();
    java.math.BigInteger var16 = var12.getIncrement();
    var4.setLastNumber(var16);
    java.lang.String var18 = var0.renderCreateSequence(var4);
    java.lang.String var22 = var0.regexQuery("select alter sequence drop sequence 10 restart with 0.nextval from dual", true, "CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    java.lang.String var24 = var0.renderFetchSequenceValue("REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')");
    boolean var26 = var0.isDeterministicPKName("Sub identity of ():\nalter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    boolean var27 = var0.supportsRegex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var18.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '"+ "'", var22.equals("NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')"+ "'", var24.equals("select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test357");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ");
    java.lang.String var9 = var0.regexQuery("DROP SEQUENCE EQUEN RESTRICT", true, "DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    boolean var12 = var0.isDefaultSchema("left join select next value for (\"sequence\") as (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1) on EQUEN.DROP SEQUENCE  = (NOT drop generator sequence ~ 'hi!', alter sequence CREATE GENERATOR drop sequence  restart with -1).DROP SEQUENCE ", "Sub identity of ():\nSET GENERATOR select gen_id(call next value for org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: , 1) from RDB$DATABASE; TO 99");
    boolean var14 = var0.isDeterministicUKName("org.firebirdsql.jdbc.FBDriver");
    boolean var16 = var0.isDeterministicIndexName("NO_ACTION");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "NOT REGEXP_MATCHES(DROP SEQUENCE EQUEN RESTRICT, 'DROP SEQUENCE CREATE GENERATOR  RESTRICT')"+ "'", var9.equals("NOT REGEXP_MATCHES(DROP SEQUENCE EQUEN RESTRICT, 'DROP SEQUENCE CREATE GENERATOR  RESTRICT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test358");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.setBacktrackingLevel(1);
    var0.mT__85();
    var0.mT__94();
    var0.mT__136();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test359");


    org.databene.jdbacl.sql.parser.SQLParser.value_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.value_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test360");


    org.databene.jdbacl.sql.parser.SQLParser.unary_expression_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.unary_expression_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test361");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.emitErrorMessage("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\"");
    var0.matchAny();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mROWID();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test362");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getIncrementIfNotDefault();
    java.math.BigInteger var6 = var3.getMinValue();
    var3.setCache((java.lang.Long)(-1L));
    java.lang.Boolean var9 = var3.isCycle();
    java.lang.String var10 = var3.getSchemaName();
    var3.setOrder((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi! as 10 on . = 10."+ "'", var10.equals("hi! as 10 on . = 10."));

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test363");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    java.lang.String var4 = var0.getDefaultSchema();
    var0.setDefaultPort("SET GENERATOR DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key TO 99");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test364");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    java.lang.String var3 = var0.getDoc();
    java.util.List var4 = var0.getSequences();
    org.databene.jdbacl.dialect.DerbyDialect var7 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var9 = var7.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var7.formatValue((java.lang.Object)var10);
    var10.setName("'hi!'");
    java.util.List var15 = var10.getSchemas();
    org.databene.jdbacl.model.DBSchema var16 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var10);
    org.databene.jdbacl.model.DBTrigger var17 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var16);
    org.databene.jdbacl.dialect.DerbyDialect var18 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var20 = var18.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var21 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var18.formatValue((java.lang.Object)var21);
    java.util.List var24 = var21.getComponents();
    var16.setCatalog(var21);
    var0.removeSchema(var16);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    var16.removeTable((org.databene.jdbacl.model.DBTable)var28);
    java.util.List var30 = var28.getIndexes();
    int var31 = var28.countProviders();
    org.databene.jdbacl.model.DefaultDBTable var33 = new org.databene.jdbacl.model.DefaultDBTable("select next value for SET GENERATOR . TO -1");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    java.lang.String[] var45 = new java.lang.String[] { ""};
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String var50 = org.databene.jdbacl.SQLUtil.join("", "", var45, "hi!", "10", var49);
    org.databene.jdbacl.model.DBUniqueConstraint var51 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var37, "select nextval('')", false, var45);
    java.lang.String var52 = var51.toString();
    boolean var53 = var51.isNameDeterministic();
    var33.addUniqueConstraint(var51);
    java.lang.String[] var55 = var51.getColumnNames();
    var51.addColumnName("'E'");
    var28.addUniqueConstraint(var51);
    org.databene.jdbacl.model.DBRow var59 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi! as 10 on . = 10."+ "'", var50.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var52.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test365");


    org.databene.jdbacl.dialect.MySQLDialect var0 = new org.databene.jdbacl.dialect.MySQLDialect();
    boolean var2 = var0.isDeterministicFKName("NaturalPkIdentity(hi!)");
    boolean var3 = var0.supportsRegex();
    boolean var4 = var0.supportsRegex();
    boolean var6 = var0.isDeterministicPKName("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    boolean var7 = var0.supportsRegex();
    boolean var9 = var0.isDeterministicFKName("CREATE SEQUENCE 10");
    boolean var11 = var0.isDeterministicIndexName("alter sequence drop generator . restart with 10");
    boolean var14 = var0.isDefaultSchema("NOT REGEXP_MATCHES (DROP SEQUENCE EQUEN RESTRICT, 'DROP SEQUENCE CREATE GENERATOR  RESTRICT')", "select nextval for  from left join CONSTRAINT \"hi! identity by primary key\"  as select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual on No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT.DROP SEQUENCE  = select hi! as 10 on . = 10..NOT drop generator sequence ~ 'hi!', hi! as 10 on . = 10..alter sequence CREATE GENERATOR drop sequence  restart with -1.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test366");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    var21.setDefaultValue(".");
    var21.setDefaultValue("alter sequence select next value for 10 restart with 100");
    org.databene.jdbacl.model.DBSequence var29 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var29.setName("10");
    java.math.BigInteger var32 = var29.getIncrement();
    java.math.BigInteger var33 = var29.getStartIfNotDefault();
    boolean var34 = var21.isEquivalent((org.databene.jdbacl.model.DBObject)var29);
    java.lang.Integer var35 = var21.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 0+ "'", var35.equals(0));

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test367");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var3 = var1.LT(10);
    int var4 = var1.mark();
    int var5 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 14);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test368");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.csv.CSVModelExporter var2 = new org.databene.jdbacl.model.csv.CSVModelExporter(var1);
    org.databene.jdbacl.model.csv.CSVModelExporter var3 = new org.databene.jdbacl.model.csv.CSVModelExporter(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test369");


    org.databene.jdbacl.model.TableContainer var2 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var3 = var2.getTables();
    org.databene.jdbacl.model.TableContainer var4 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var2);
    java.util.List var5 = var4.getTables();
    org.databene.jdbacl.model.DBCatalog var8 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var9 = var8.getName();
    org.databene.jdbacl.model.Database var10 = var8.getDatabase();
    java.lang.String var11 = var8.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    var8.removeSchema(var22);
    org.databene.jdbacl.dialect.DerbyDialect var26 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var28 = var26.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var29 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var26.formatValue((java.lang.Object)var29);
    var29.setName("'hi!'");
    java.util.List var34 = var29.getSchemas();
    org.databene.jdbacl.model.DBSchema var35 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var35);
    var36.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var39 = var36.getTriggerBody();
    java.lang.String var40 = var36.getColumnName();
    java.lang.String var41 = var36.getWhenClause();
    var22.addTrigger(var36);
    org.databene.jdbacl.model.DBTrigger var43 = new org.databene.jdbacl.model.DBTrigger("-1", var22);
    org.databene.jdbacl.model.DBSequence var44 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var22);
    boolean var45 = var4.isIdentical((org.databene.jdbacl.model.DBObject)var22);
    java.util.List var47 = var4.getSequences(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test370");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mIDENTIFIER();
    int var16 = var0.getCharPositionInLine();
    var0.mTABLE_NAME();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var19 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var21 = var19.LA(10);
    java.lang.String var22 = var19.getText();
    java.lang.String var23 = var19.getSourceName();
    var0.consumeUntil((org.antlr.runtime.IntStream)var19, 14);
    org.databene.jdbacl.model.DBSequence var31 = new org.databene.jdbacl.model.DBSequence("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", "Identity definition by unique key: select next value for 10", "()");
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var43 = var42.isAlpha();
    java.lang.String var44 = var42.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var45 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var48 = var45.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var50 = var45.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var51 = var42.equals((java.lang.Object)var50);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var37, var42, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBColumn var57 = new org.databene.jdbacl.model.DefaultDBColumn("NOT REGEXP_MATCHES(sequence, '')", (org.databene.jdbacl.model.DBTable)var37, (-1), "hi! identity by primary key");
    boolean var58 = var57.isNullable();
    var57.setNullable(true);
    boolean var61 = var31.isIdentical((org.databene.jdbacl.model.DBObject)var57);
    var0.traceIn("Identity definition by NK-PK query: call next value for SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1", 0, (java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "DROP SEQUENCE "+ "'", var22.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "DROP SEQUENCE "+ "'", var44.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var50.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test371");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var3.setName("10");
    java.math.BigInteger var6 = var3.getIncrement();
    java.lang.Boolean var7 = var3.isCycle();
    java.lang.String var8 = var3.dropDDL();
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var9.setDoc("drop sequence ");
    boolean var13 = var3.equals((java.lang.Object)"drop sequence ");
    java.lang.String var14 = var3.getCatalogName();
    org.databene.jdbacl.model.DBSequence var18 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var19 = var18.getMaxValue();
    java.lang.String var20 = var18.toString();
    org.databene.jdbacl.model.DBSequence var24 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var25 = var24.dropDDL();
    java.math.BigInteger var26 = var24.getMinValueIfNotDefault();
    java.math.BigInteger var27 = var24.getLastNumber();
    org.databene.jdbacl.model.DBSequence var31 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var31.setName("10");
    java.math.BigInteger var34 = var31.getIncrement();
    java.math.BigInteger var35 = var31.getIncrement();
    var24.setStart(var35);
    var18.setIncrement(var35);
    var3.setIncrement(var35);
    java.math.BigInteger var39 = var3.getStart();
    org.databene.jdbacl.model.DBSequence var43 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var43.setName("10");
    java.math.BigInteger var46 = var43.getIncrement();
    java.math.BigInteger var47 = var43.getIncrement();
    org.databene.jdbacl.model.DBSequence var51 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var52 = var51.dropDDL();
    java.math.BigInteger var53 = var51.getMinValueIfNotDefault();
    java.math.BigInteger var54 = var51.getLastNumber();
    var43.setStart(var54);
    java.lang.Boolean var56 = var43.isOrder();
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.typeAndName((org.databene.jdbacl.model.DBObject)var43);
    java.lang.String var58 = var43.getSchemaName();
    org.databene.jdbacl.model.DBSequence var62 = new org.databene.jdbacl.model.DBSequence("call next value for 'hi!'", "NOT REGEXP_MATCHES(sequence, '')", "'hi!'");
    java.math.BigInteger var63 = var62.getIncrement();
    var43.setMinValue(var63);
    java.math.BigInteger var65 = var43.getMinValue();
    var3.setMaxValue(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "drop sequence 10"+ "'", var8.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence "+ "'", var14.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "drop sequence "+ "'", var25.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "drop sequence "+ "'", var52.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "sequence 10"+ "'", var57.equals("sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi! as 10 on . = 10."+ "'", var58.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test372");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var4 = var3.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    org.databene.jdbacl.model.Database var7 = var5.getDatabase();
    java.lang.String var8 = var5.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var10 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var12 = var10.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var13 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var14 = var13.getName();
    java.lang.String var15 = var10.formatValue((java.lang.Object)var13);
    var13.setName("'hi!'");
    java.util.List var18 = var13.getSchemas();
    org.databene.jdbacl.model.DBSchema var19 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var13);
    var5.removeSchema(var19);
    org.databene.jdbacl.dialect.DerbyDialect var23 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var25 = var23.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var26 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var23.formatValue((java.lang.Object)var26);
    var26.setName("'hi!'");
    java.util.List var31 = var26.getSchemas();
    org.databene.jdbacl.model.DBSchema var32 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var26);
    org.databene.jdbacl.model.DBTrigger var33 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var32);
    var33.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var36 = var33.getTriggerBody();
    java.lang.String var37 = var33.getColumnName();
    java.lang.String var38 = var33.getWhenClause();
    var19.addTrigger(var33);
    boolean var40 = var3.isIdentical((org.databene.jdbacl.model.DBObject)var19);
    java.util.List var41 = var19.getPackages();
    org.databene.jdbacl.model.DBCatalog var42 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var43 = var42.getName();
    var19.setCatalog(var42);
    java.lang.String var45 = var42.getName();
    org.databene.jdbacl.model.DBCatalog var49 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var50 = var49.getName();
    org.databene.jdbacl.model.Database var51 = var49.getDatabase();
    java.lang.String var52 = var49.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var54 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var56 = var54.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var57 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var58 = var57.getName();
    java.lang.String var59 = var54.formatValue((java.lang.Object)var57);
    var57.setName("'hi!'");
    java.util.List var62 = var57.getSchemas();
    org.databene.jdbacl.model.DBSchema var63 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var57);
    var49.removeSchema(var63);
    var49.setName("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBSchema var67 = new org.databene.jdbacl.model.DBSchema("CREATE SEQUENCE call next value for 'hi!' MAXVALUE 1", var49);
    org.databene.jdbacl.model.DBTrigger var68 = new org.databene.jdbacl.model.DBTrigger("drop sequence select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;", var67);
    org.databene.jdbacl.model.DBCatalog var70 = new org.databene.jdbacl.model.DBCatalog("drop sequence alter sequence hi! restart with 1");
    var67.setCatalog(var70);
    org.databene.jdbacl.model.DBTrigger var72 = new org.databene.jdbacl.model.DBTrigger("CONSTRAINT \"select nextval('')\" UNIQUE () DROP SEQUENCE (100) NULL", var67);
    var42.removeSchema(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test373");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.util.Map var22 = var21.getCells();
    java.lang.String var23 = var21.toString();
    org.databene.jdbacl.model.DBTable var24 = var21.getTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "null[]"+ "'", var23.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test374");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.DBUtil.checkReadOnly("drop sequence.", true);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test375");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.util.List var6 = var3.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test376");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var1 = var0.supportsRegex();
    boolean var3 = var0.isDeterministicFKName("select next value for SET GENERATOR.TO - 1");
    boolean var4 = var0.isSequenceBoundarySupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test377");


    org.databene.jdbacl.version.QueryVersionProvider var1 = new org.databene.jdbacl.version.QueryVersionProvider("NOT drop generator sequence ~ 'hi!'");
    var1.setQuery("select nextval('')");
    var1.setQuery("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '");
    java.lang.String var6 = var1.getQuery();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '"+ "'", var6.equals("left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as CREATE GENERATOR  on jdbc:h2:mem:hi! as 10 on . = 10.-identity-..DROP SEQUENCE  = CREATE GENERATOR . REGEXP 'drop sequence '"));

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test378");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var35 = var34.getTables();
    org.databene.jdbacl.model.TableContainer var36 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var34);
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var41 = var40.getForeignKeyConstraints();
    var37.addReferrer((org.databene.jdbacl.model.DBTable)var40);
    var34.addTable((org.databene.jdbacl.model.DBTable)var40);
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.join("", "", var48, "hi!", "10", var52);
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var48);
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var58 = var57.getTables();
    org.databene.jdbacl.model.TableContainer var59 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var57);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    var60.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var64 = var63.getForeignKeyConstraints();
    var60.addReferrer((org.databene.jdbacl.model.DBTable)var63);
    var57.addTable((org.databene.jdbacl.model.DBTable)var63);
    java.lang.String[] var69 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var70 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var69);
    org.databene.jdbacl.model.DBForeignKeyConstraint var71 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var40, var48, (org.databene.jdbacl.model.DBTable)var63, var69);
    org.databene.jdbacl.model.DBTable var72 = var71.getRefereeTable();
    var5.addForeignKey(var71);
    java.lang.String[] var74 = var71.getColumnNames();
    org.databene.jdbacl.model.DBTable var75 = var71.getRefereeTable();
    org.databene.jdbacl.model.DefaultDBColumn var78 = new org.databene.jdbacl.model.DefaultDBColumn("select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')-identity-select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-", var75, 69, "'select next value for SET GENERATOR.TO - 1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi! as 10 on . = 10."+ "'", var53.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "."+ "'", var54.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var70.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test379");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__93();
    int var17 = var10.getLine();
    var10.matchAny();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test380");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var4.setCache((java.lang.Long)100L);
    java.lang.String var7 = var4.getObjectType();
    java.math.BigInteger var8 = var4.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var12.setName("10");
    java.math.BigInteger var15 = var12.getIncrement();
    java.math.BigInteger var16 = var12.getIncrement();
    var4.setLastNumber(var16);
    java.lang.String var18 = var0.renderCreateSequence(var4);
    java.lang.String var22 = var0.regexQuery("select alter sequence drop sequence 10 restart with 0.nextval from dual", true, "CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    java.lang.String var26 = var0.regexQuery("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')", false, "10");
    boolean var28 = var0.isDeterministicIndexName("hi! as 10 on . = 10. identity by primary key");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var18.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '"+ "'", var22.equals("NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ') ~ '10'"+ "'", var26.equals("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ') ~ '10'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test381");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    int var2 = var1.countProviders();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test382");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    var7.setDoc(".");
    java.util.Set var11 = var7.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    boolean var16 = var14.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var19 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var7, var14, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var3.addColumn((org.databene.jdbacl.model.DBColumn)var19);
    org.databene.jdbacl.model.DBRow var21 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var3);
    java.lang.Object[] var22 = var21.getPKValues();
    java.lang.String var23 = var21.toString();
    org.databene.jdbacl.dialect.DerbyDialect var27 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var29 = var27.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    java.lang.String var32 = var27.formatValue((java.lang.Object)var30);
    var30.setName("'hi!'");
    java.util.List var35 = var30.getSchemas();
    org.databene.jdbacl.model.DBSchema var36 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var36);
    java.util.List var38 = var36.getPackages();
    org.databene.jdbacl.model.DBPackage var39 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var36);
    java.lang.String var40 = var39.getStatus();
    java.util.List var41 = var39.getProcedures();
    java.lang.String var42 = var39.getStatus();
    var39.setStatus("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.setPKValue((java.lang.Object)"DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "null[]"+ "'", var23.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test383");


    org.databene.jdbacl.version.QueryVersionProvider var0 = new org.databene.jdbacl.version.QueryVersionProvider();
    var0.setQuery("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ");
    java.lang.String var3 = var0.getQuery();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "+ "'", var3.equals("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE "));

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test384");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var3 = var0.isDefaultSchema("select next value for 10", "NaturalPkIdentity(hi!)");
    boolean var5 = var0.isDeterministicPKName("EQUEN");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var15.setDoc("drop sequence ");
    boolean var19 = var9.equals((java.lang.Object)"drop sequence ");
    java.lang.String var20 = var9.getCatalogName();
    org.databene.jdbacl.model.DBSequence var24 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var25 = var24.getMaxValue();
    java.lang.String var26 = var24.toString();
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var31 = var30.dropDDL();
    java.math.BigInteger var32 = var30.getMinValueIfNotDefault();
    java.math.BigInteger var33 = var30.getLastNumber();
    org.databene.jdbacl.model.DBSequence var37 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var37.setName("10");
    java.math.BigInteger var40 = var37.getIncrement();
    java.math.BigInteger var41 = var37.getIncrement();
    var30.setStart(var41);
    var24.setIncrement(var41);
    var9.setIncrement(var41);
    java.lang.String var45 = var0.renderCreateSequence(var9);
    boolean var48 = var0.isDefaultSchema("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')", "NOT drop generator sequence ~ 'hi!'");
    java.lang.String var50 = var0.renderFetchSequenceValue("drop sequence DROP SEQUENCE (0,-1)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "drop sequence "+ "'", var20.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "drop sequence "+ "'", var31.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\""+ "'", var45.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "select drop sequence DROP SEQUENCE (0,-1).nextval from dual"+ "'", var50.equals("select drop sequence DROP SEQUENCE (0,-1).nextval from dual"));

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test385");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    java.lang.String var20 = var19.toString();
    boolean var21 = var19.isNameDeterministic();
    org.databene.jdbacl.model.DBUniqueIndex var22 = new org.databene.jdbacl.model.DBUniqueIndex("select next value for SET GENERATOR . TO -1", false, var19);
    java.lang.String var23 = var19.toString();
    java.lang.String[] var24 = var19.getColumnNames();
    org.databene.jdbacl.dialect.FirebirdDialect var25 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var28 = var25.renderSetSequenceValue(".", 0L);
    boolean var31 = var25.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    java.lang.String var33 = var25.renderDropSequence("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var35 = var25.isDeterministicFKName("CREATE GENERATOR ");
    org.databene.jdbacl.JDBCConnectData var42 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var43 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var42);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var44 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var42);
    org.databene.jdbacl.model.DBCatalog var46 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var47 = var46.getName();
    org.databene.jdbacl.model.Database var48 = var46.getDatabase();
    java.lang.String var49 = var46.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var51 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var53 = var51.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var54 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var55 = var54.getName();
    java.lang.String var56 = var51.formatValue((java.lang.Object)var54);
    var54.setName("'hi!'");
    java.util.List var59 = var54.getSchemas();
    org.databene.jdbacl.model.DBSchema var60 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var54);
    var46.removeSchema(var60);
    java.util.List var63 = var60.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var60);
    org.databene.jdbacl.model.jdbc.LazyTable var67 = new org.databene.jdbacl.model.jdbc.LazyTable(var44, var60, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var68 = var67.toString();
    org.databene.jdbacl.model.DBCatalog var69 = var67.getCatalog();
    java.lang.String var70 = var67.getDoc();
    org.databene.jdbacl.model.DBSchema var71 = var67.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var73 = new org.databene.jdbacl.model.DefaultDBTable();
    var73.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var76 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var77 = var76.getForeignKeyConstraints();
    var73.addReferrer((org.databene.jdbacl.model.DBTable)var76);
    org.databene.jdbacl.model.DBDataType var81 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var82 = var81.isAlpha();
    java.lang.String var83 = var81.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var84 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var87 = var84.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var89 = var84.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var90 = var81.equals((java.lang.Object)var89);
    org.databene.jdbacl.model.DefaultDBColumn var93 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var76, var81, (java.lang.Integer)0, (java.lang.Integer)(-1));
    java.util.List var94 = var93.getUkConstraints();
    java.lang.String var95 = var25.insert((org.databene.jdbacl.model.DBTable)var67, var94);
    var19.setTable((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String var97 = var67.getDoc();
    java.lang.String var98 = var67.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var20.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var23.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "SET GENERATOR . TO -1"+ "'", var28.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var33.equals("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var68.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var70.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "DROP SEQUENCE "+ "'", var83.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var89.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "insert into \"'hi!'\".\"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE \" () values ()"+ "'", var95.equals("insert into \"'hi!'\".\"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE \" () values ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var97.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var98.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test386");


    org.databene.jdbacl.sql.parser.SQLParser.partition_part_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.partition_part_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test387");


    org.databene.jdbacl.JDBCConnectData var7 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var9 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    java.util.List var28 = var25.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var25);
    org.databene.jdbacl.model.jdbc.LazyTable var32 = new org.databene.jdbacl.model.jdbc.LazyTable(var9, var25, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var33 = var32.getDoc();
    java.lang.String var34 = var32.getName();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("select nextval('')", (org.databene.jdbacl.model.CompositeDBObject)var32);
    java.lang.String var36 = var32.getObjectType();
    java.lang.String var37 = var32.getDoc();
    java.lang.String var38 = var32.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var33.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var34.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "table"+ "'", var36.equals("table"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var37.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var38.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test388");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mT__123();
    var0.mCREATE_TABLE();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mT__86();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test389");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.setBacktrackingLevel(10);
    var0.mTABLE_DETAILS();
    var0.beginResync();
    var0.mDROP_SEQUENCE();

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test390");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var36 = var35.getTables();
    org.databene.jdbacl.model.TableContainer var37 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var35);
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    var38.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var42 = var41.getForeignKeyConstraints();
    var38.addReferrer((org.databene.jdbacl.model.DBTable)var41);
    var35.addTable((org.databene.jdbacl.model.DBTable)var41);
    java.lang.String[] var49 = new java.lang.String[] { ""};
    java.lang.String[] var53 = new java.lang.String[] { ""};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.join("", "", var49, "hi!", "10", var53);
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var49);
    org.databene.jdbacl.model.TableContainer var58 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var59 = var58.getTables();
    org.databene.jdbacl.model.TableContainer var60 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var58);
    org.databene.jdbacl.model.DefaultDBTable var61 = new org.databene.jdbacl.model.DefaultDBTable();
    var61.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var65 = var64.getForeignKeyConstraints();
    var61.addReferrer((org.databene.jdbacl.model.DBTable)var64);
    var58.addTable((org.databene.jdbacl.model.DBTable)var64);
    java.lang.String[] var70 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var70);
    org.databene.jdbacl.model.DBForeignKeyConstraint var72 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var41, var49, (org.databene.jdbacl.model.DBTable)var64, var70);
    org.databene.jdbacl.model.DBTable var73 = var72.getRefereeTable();
    var6.addForeignKey(var72);
    org.databene.jdbacl.model.FKChangeRule var75 = var72.getDeleteRule();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    java.lang.Class var78 = var75.getDeclaringClass();
    org.databene.jdbacl.ColumnInfo var79 = new org.databene.jdbacl.ColumnInfo("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1", 10, var78);
    org.databene.jdbacl.ResultSetConverter var80 = new org.databene.jdbacl.ResultSetConverter(var78);
    java.lang.String var81 = var80.toString();
    java.lang.Class var82 = var80.getSourceType();
    java.lang.Class var83 = var80.getSourceType();
    org.databene.jdbacl.ResultSetConverter var85 = new org.databene.jdbacl.ResultSetConverter(var83, false);
    java.lang.Class var86 = var85.getSourceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi! as 10 on . = 10."+ "'", var54.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "."+ "'", var55.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var71.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "NO_ACTION"+ "'", var76.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NO_ACTION"+ "'", var77.equals("NO_ACTION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "ResultSetConverter"+ "'", var81.equals("ResultSetConverter"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test391");


    org.databene.jdbacl.JDBCConnectData var7 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var9 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    java.util.List var28 = var25.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var25);
    org.databene.jdbacl.model.jdbc.LazyTable var32 = new org.databene.jdbacl.model.jdbc.LazyTable(var9, var25, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var33 = var32.getDoc();
    java.lang.String var34 = var32.getName();
    org.databene.jdbacl.model.TableContainer var35 = new org.databene.jdbacl.model.TableContainer("select nextval('')", (org.databene.jdbacl.model.CompositeDBObject)var32);
    org.databene.jdbacl.model.DBSchema var36 = var32.getSchema();
    java.lang.String var37 = var32.getObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var33.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var34.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "table"+ "'", var37.equals("table"));

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test392");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.identity.mem.MapperState var1 = org.databene.jdbacl.identity.mem.MapperState.valueOf("DROP SEQUENCE NOT REGEXP_MATCHES(sequence, '') RESTRICT");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test393");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    java.lang.String var7 = var0.renderDropSequence("EQUEN");
    java.lang.String var9 = var0.renderDropSequence("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "DROP SEQUENCE EQUEN RESTRICT"+ "'", var7.equals("DROP SEQUENCE EQUEN RESTRICT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "DROP SEQUENCE drop sequence CONSTRAINT \"select nextval('')\" UNIQUE () RESTRICT"+ "'", var9.equals("DROP SEQUENCE drop sequence CONSTRAINT \"select nextval('')\" UNIQUE () RESTRICT"));

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test394");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var5 = var0.supportsRegex();
    boolean var6 = var0.isSequenceBoundarySupported();
    boolean var7 = var0.supportsRegex();
    boolean var9 = var0.isDeterministicPKName("drop sequence select gen_id('d', 1) from RDB$DATABASE;: class org.databene.jdbacl.model.FKChangeRule");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test395");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setTableName("sequence");
    var12.setTableName("'\u0000'");
    org.databene.jdbacl.model.TableContainer var19 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var20 = var19.getTables();
    org.databene.jdbacl.model.TableContainer var21 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var19);
    java.util.List var22 = var21.getTables();
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var26 = var25.getName();
    org.databene.jdbacl.model.Database var27 = var25.getDatabase();
    java.lang.String var28 = var25.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var30 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var32 = var30.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var33 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var34 = var33.getName();
    java.lang.String var35 = var30.formatValue((java.lang.Object)var33);
    var33.setName("'hi!'");
    java.util.List var38 = var33.getSchemas();
    org.databene.jdbacl.model.DBSchema var39 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var33);
    var25.removeSchema(var39);
    org.databene.jdbacl.dialect.DerbyDialect var43 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var45 = var43.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var46 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var47 = var46.getName();
    java.lang.String var48 = var43.formatValue((java.lang.Object)var46);
    var46.setName("'hi!'");
    java.util.List var51 = var46.getSchemas();
    org.databene.jdbacl.model.DBSchema var52 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var46);
    org.databene.jdbacl.model.DBTrigger var53 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var52);
    var53.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var56 = var53.getTriggerBody();
    java.lang.String var57 = var53.getColumnName();
    java.lang.String var58 = var53.getWhenClause();
    var39.addTrigger(var53);
    org.databene.jdbacl.model.DBTrigger var60 = new org.databene.jdbacl.model.DBTrigger("-1", var39);
    org.databene.jdbacl.model.DBSequence var61 = new org.databene.jdbacl.model.DBSequence("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", var39);
    boolean var62 = var21.isIdentical((org.databene.jdbacl.model.DBObject)var39);
    java.util.List var63 = var39.getComponents();
    org.databene.jdbacl.model.DBCatalog var64 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var65 = var64.getName();
    java.util.List var66 = var64.getComponents();
    org.databene.jdbacl.model.DBSchema var68 = var64.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var70 = var64.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    var39.setCatalog(var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setOwner((org.databene.jdbacl.model.CompositeDBObject)var64);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test396");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.setText("'SET GENERATOR catalog TO -2 (DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT)'");
    var10.skip();
    var10.mARGUMENTS();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test397");


    org.databene.jdbacl.dialect.FirebirdDialect var0 = new org.databene.jdbacl.dialect.FirebirdDialect();
    boolean var2 = var0.isDeterministicUKName("10");
    boolean var5 = var0.isDefaultCatalog("CREATE SEQUENCE 10", "left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ");
    boolean var7 = var0.isDeterministicUKName("select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;");
    boolean var8 = var0.isSequenceBoundarySupported();
    java.lang.String var11 = var0.renderSetSequenceValue("NOT drop sequence  ~ 'alter sequence  restart with -1'", 100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "SET GENERATOR NOT drop sequence  ~ 'alter sequence  restart with -1' TO 99"+ "'", var11.equals("SET GENERATOR NOT drop sequence  ~ 'alter sequence  restart with -1' TO 99"));

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test398");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    var4.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var8 = var7.getForeignKeyConstraints();
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var7);
    org.databene.jdbacl.model.DefaultDBTable var11 = new org.databene.jdbacl.model.DefaultDBTable();
    var11.setDoc(".");
    java.util.Set var15 = var11.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var18 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var19 = var18.isAlpha();
    boolean var20 = var18.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var11, var18, (java.lang.Integer)100, (java.lang.Integer)(-1));
    var7.addColumn((org.databene.jdbacl.model.DBColumn)var23);
    org.databene.jdbacl.model.DBRow var25 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var7);
    java.lang.Object[] var26 = var25.getPKValues();
    org.databene.jdbacl.model.DBSequence var31 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var31.setCache((java.lang.Long)100L);
    java.lang.String var34 = var31.getObjectType();
    java.math.BigInteger var35 = var31.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var39.setName("10");
    java.math.BigInteger var42 = var39.getIncrement();
    java.math.BigInteger var43 = var39.getIncrement();
    var31.setLastNumber(var43);
    var31.setOrder((java.lang.Boolean)false);
    var25.setCellValue("alter sequence  restart with -1", (java.lang.Object)var31);
    org.databene.jdbacl.model.TableContainer var52 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var53 = var52.getTables();
    org.databene.jdbacl.model.TableContainer var54 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var52);
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    var55.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var58 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var59 = var58.getForeignKeyConstraints();
    var55.addReferrer((org.databene.jdbacl.model.DBTable)var58);
    var52.addTable((org.databene.jdbacl.model.DBTable)var58);
    java.lang.String[] var66 = new java.lang.String[] { ""};
    java.lang.String[] var70 = new java.lang.String[] { ""};
    java.lang.String var71 = org.databene.jdbacl.SQLUtil.join("", "", var66, "hi!", "10", var70);
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var66);
    org.databene.jdbacl.model.TableContainer var75 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var76 = var75.getTables();
    org.databene.jdbacl.model.TableContainer var77 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var75);
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    var78.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var81 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var82 = var81.getForeignKeyConstraints();
    var78.addReferrer((org.databene.jdbacl.model.DBTable)var81);
    var75.addTable((org.databene.jdbacl.model.DBTable)var81);
    java.lang.String[] var87 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var88 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var87);
    org.databene.jdbacl.model.DBForeignKeyConstraint var89 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var58, var66, (org.databene.jdbacl.model.DBTable)var81, var87);
    boolean var90 = var89.isNameDeterministic();
    java.lang.Object[] var91 = var25.getFKComponents(var89);
    java.lang.Object[] var92 = var25.getPKValues();
    var0.set("drop sequence ", (java.lang.Object)var25);
    java.lang.Object[] var94 = var25.getPKValues();
    java.lang.String var95 = var25.toString();
    java.lang.Object var97 = var25.getCellValue("drop sequence DROP SEQUENCE CREATE GENERATOR  RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "sequence"+ "'", var34.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi! as 10 on . = 10."+ "'", var71.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "."+ "'", var72.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var88.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "null[]"+ "'", var95.equals("null[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test399");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    org.databene.jdbacl.model.DBSequence var4 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var4.setCache((java.lang.Long)100L);
    java.lang.String var7 = var4.getObjectType();
    java.math.BigInteger var8 = var4.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var12.setName("10");
    java.math.BigInteger var15 = var12.getIncrement();
    java.math.BigInteger var16 = var12.getIncrement();
    var4.setLastNumber(var16);
    java.lang.String var18 = var0.renderCreateSequence(var4);
    java.lang.String var22 = var0.regexQuery("select alter sequence drop sequence 10 restart with 0.nextval from dual", true, "CONSTRAINT \"CREATE GENERATOR drop sequence \" ");
    java.lang.String var24 = var0.renderFetchSequenceValue("REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')");
    boolean var26 = var0.isDeterministicPKName("Sub identity of ():\nalter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    boolean var27 = var0.isSequenceBoundarySupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "sequence"+ "'", var7.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CREATE SEQUENCE  CACHE 100"+ "'", var18.equals("CREATE SEQUENCE  CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '"+ "'", var22.equals("NOT select alter sequence drop sequence 10 restart with 0.nextval from dual ~ 'CONSTRAINT \"CREATE GENERATOR drop sequence \" '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')"+ "'", var24.equals("select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test400");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    var12.setColumnName("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    var12.setTriggerType("REGEXP_MATCHES(catalog, 'call next value for null[]')");
    java.lang.String var19 = var12.getWhenClause();
    java.lang.String var20 = var12.getActionType();
    var12.setStatus("left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    var12.setDescription("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test401");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    java.util.Set var6 = var2.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    boolean var11 = var9.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var14 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var2, var9, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var17 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var18 = var17.isAlpha();
    java.lang.String var19 = var17.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var20 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var23 = var20.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var25 = var20.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var26 = var17.equals((java.lang.Object)var25);
    boolean var27 = var17.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var28 = new org.databene.jdbacl.model.DefaultDBColumn("alter sequence CREATE GENERATOR drop sequence  restart with -1", (org.databene.jdbacl.model.DBTable)var2, var17);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    var29.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var32 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var33 = var32.getForeignKeyConstraints();
    var29.addReferrer((org.databene.jdbacl.model.DBTable)var32);
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String[] var44 = new java.lang.String[] { ""};
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.join("", "", var40, "hi!", "10", var44);
    org.databene.jdbacl.model.DBUniqueConstraint var46 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var32, "select nextval('')", false, var40);
    java.lang.String var47 = var46.toString();
    boolean var48 = var46.isNameDeterministic();
    var46.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    var2.addUniqueConstraint(var46);
    java.util.List var52 = var2.getComponents();
    org.databene.jdbacl.model.DefaultDBTable var53 = new org.databene.jdbacl.model.DefaultDBTable();
    var53.setDoc(".");
    java.util.Set var57 = var53.getUniqueConstraints(false);
    java.lang.String var58 = var53.getDoc();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "DROP SEQUENCE "+ "'", var19.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var25.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi! as 10 on . = 10."+ "'", var45.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var47.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "."+ "'", var58.equals("."));

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test402");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var3 = var0.isDefaultSchema("select next value for 10", "NaturalPkIdentity(hi!)");
    boolean var5 = var0.isDeterministicPKName("EQUEN");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setName("10");
    java.math.BigInteger var12 = var9.getIncrement();
    java.lang.Boolean var13 = var9.isCycle();
    java.lang.String var14 = var9.dropDDL();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var16 = var15.getForeignKeyConstraints();
    var15.setDoc("drop sequence ");
    boolean var19 = var9.equals((java.lang.Object)"drop sequence ");
    java.lang.String var20 = var9.getCatalogName();
    org.databene.jdbacl.model.DBSequence var24 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var25 = var24.getMaxValue();
    java.lang.String var26 = var24.toString();
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var31 = var30.dropDDL();
    java.math.BigInteger var32 = var30.getMinValueIfNotDefault();
    java.math.BigInteger var33 = var30.getLastNumber();
    org.databene.jdbacl.model.DBSequence var37 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var37.setName("10");
    java.math.BigInteger var40 = var37.getIncrement();
    java.math.BigInteger var41 = var37.getIncrement();
    var30.setStart(var41);
    var24.setIncrement(var41);
    var9.setIncrement(var41);
    java.lang.String var45 = var0.renderCreateSequence(var9);
    boolean var48 = var0.isDefaultSchema("REGEXP_LIKE(select alter sequence drop sequence 10 restart with 0.nextval from dual, 'CONSTRAINT \"hi! identity by primary key\" ')", "NOT drop generator sequence ~ 'hi!'");
    boolean var50 = var0.isDeterministicUKName("call next value for select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')");
    boolean var53 = var0.isDefaultCatalog("CONSTRAINT \"alter sequence drop sequence 10 restart with 0\" PRIMARY KEY (, sequence)", "CONSTRAINT \"select nextval('')\" UNIQUE (, sequence)");
    boolean var55 = var0.isDeterministicFKName("drop generator sequence");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "drop sequence 10"+ "'", var14.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "drop sequence "+ "'", var20.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "drop sequence "+ "'", var31.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\""+ "'", var45.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"10\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test403");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    var0.mCREATE_TABLE();
    var0.mCOMMENT_TABLE();
    var0.mDROP_TABLE();
    int var6 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.model.TableContainer var8 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var9 = var8.getTables();
    java.util.List var11 = var8.getTables(false);
    java.util.List var13 = var8.getSequences(false);
    java.util.List var14 = var0.toStrings(var13);
    org.databene.jdbacl.sql.parser.SQLLexer var15 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var15.mCREATE_TABLE();
    var15.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var19 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var21 = var19.LT(10);
    var15.setCharStream((org.antlr.runtime.CharStream)var19);
    int var24 = var19.LA(10);
    int var25 = var19.getLine();
    java.lang.String var26 = var19.toString();
    var19.consume();
    var0.matchAny((org.antlr.runtime.IntStream)var19);
    int var30 = var19.LT(41);
    var19.reset();
    int var32 = var19.index();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test404");


    org.databene.jdbacl.dialect.DerbyDialect var1 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var3 = var1.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var5 = var4.getName();
    java.lang.String var6 = var1.formatValue((java.lang.Object)var4);
    var4.setName("'hi!'");
    java.util.List var9 = var4.getSchemas();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var4);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DBTrigger var23 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var22);
    var10.addTrigger(var23);
    java.util.List var26 = var10.getSequences(false);
    org.databene.jdbacl.dialect.PostgreSQLDialect var27 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var30 = var27.isDefaultCatalog("", "");
    java.lang.String var32 = var27.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var33 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var34 = var27.formatValue((java.lang.Object)var33);
    var10.setCatalog(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.removeTable("SET GENERATOR alter sequence call next value for 'hi!' restart with 100 TO -1");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "drop sequence "+ "'", var32.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test405");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.renderDropSequence("");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var0.formatValue((java.lang.Object)var6);
    boolean var9 = var0.isDeterministicPKName("drop sequence ");
    boolean var11 = var0.isDeterministicFKName(".");
    java.lang.String var15 = var0.regexQuery("drop sequence left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR.", true, "drop sequence Identity definition by NK-PK query: NOT drop generator sequence ~ 'hi!'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "drop sequence "+ "'", var5.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "NOT drop sequence left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR. ~ 'drop sequence Identity definition by NK-PK query: NOT drop generator sequence ~ 'hi!''"+ "'", var15.equals("NOT drop sequence left join jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -.: DROP SEQUENCE (0, - 1) as CREATE GENERATOR on jdbc : h2 : mem : hi ! as 10 on.= 10.- identity -..DROP SEQUENCE = CREATE GENERATOR. ~ 'drop sequence Identity definition by NK-PK query: NOT drop generator sequence ~ 'hi!''"));

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test406");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE  = ''");
    boolean var7 = var0.isDeterministicUKName("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var10 = var0.isDefaultCatalog("select nextval('alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'')", "NaturalPkIdentity(hi!)");
    boolean var13 = var0.isDefaultCatalog("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "alter sequence hi! restart with 1");
    boolean var16 = var0.isDefaultSchema("CONSTRAINT \"select nextval('')\" ", "null [ false ]");
    boolean var18 = var0.isDeterministicPKName("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'");
    boolean var21 = var0.isDefaultSchema("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence, SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP ''HI!'') unique", "select next value for Sub identity of ():\nalter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0");
    boolean var23 = var0.isDeterministicFKName("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1 SIMILAR TO 'DROP SEQUENCE (0,-1)'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test407");


    org.databene.jdbacl.SQLScriptException var1 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var4 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var1, "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", 100);
    org.databene.jdbacl.SQLScriptException var6 = var1.withUri("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.SQLScriptException var8 = var1.withUri("drop generator left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    java.lang.Throwable[] var9 = var1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test408");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_SEQUENCE();
    org.databene.jdbacl.dialect.DerbyDialect var4 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var6 = var4.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var7 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var4.formatValue((java.lang.Object)var7);
    var7.setName("'hi!'");
    java.util.List var12 = var7.getSchemas();
    org.databene.jdbacl.model.DBSchema var13 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var7);
    org.databene.jdbacl.model.DBTrigger var14 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var13);
    java.util.List var15 = var13.getPackages();
    java.util.List var16 = var0.toStrings(var15);
    var0.mCREATE_SEQUENCE();
    var0.mALTER_TABLE();
    var0.mDROP_SEQUENCE();
    org.databene.jdbacl.sql.parser.SQLLexer var20 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var20.mCREATE_TABLE();
    var20.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var24 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var26 = var24.LT(10);
    var20.setCharStream((org.antlr.runtime.CharStream)var24);
    var24.reset();
    int var30 = var24.LA(79);
    var24.reset();
    int var33 = var24.LT(10);
    var0.consumeUntil((org.antlr.runtime.IntStream)var24, 10);
    java.lang.String var36 = var24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "DROP SEQUENCE "+ "'", var36.equals("DROP SEQUENCE "));

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test409");


    org.databene.jdbacl.identity.NkPkQueryIdentity var2 = new org.databene.jdbacl.identity.NkPkQueryIdentity("DROP SEQUENCE -1 RESTRICT", "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\"");
    java.lang.String var3 = var2.getDescription();
    var2.setNkPkQuery("CONSTRAINT \"select nextval('')\" UNIQUE ()");
    java.lang.String var6 = var2.getDescription();
    java.lang.String var7 = var2.getTableName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""+ "'", var3.equals("Identity definition by NK-PK query: VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Identity definition by NK-PK query: CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var6.equals("Identity definition by NK-PK query: CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "DROP SEQUENCE -1 RESTRICT"+ "'", var7.equals("DROP SEQUENCE -1 RESTRICT"));

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test410");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    var36.setBaseObjectType("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var36.setBaseObjectType("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    java.lang.String var41 = var36.getTriggerType();
    var36.setTriggerBody("null[DROP SEQUENCE ]");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var52 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var52.setFaultTolerant(true);
    org.databene.jdbacl.dialect.DerbyDialect var59 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var61 = var59.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var62 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var63 = var62.getName();
    java.lang.String var64 = var59.formatValue((java.lang.Object)var62);
    var62.setName("'hi!'");
    java.util.List var67 = var62.getSchemas();
    org.databene.jdbacl.model.DBSchema var68 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var62);
    org.databene.jdbacl.model.DBTrigger var69 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var68);
    java.lang.String var70 = var68.getName();
    org.databene.jdbacl.model.DefaultDBTable var71 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var68);
    org.databene.jdbacl.model.DBTrigger var72 = new org.databene.jdbacl.model.DBTrigger("CONSTRAINT \"CREATE GENERATOR drop sequence \" .", var68);
    org.databene.jdbacl.model.jdbc.LazyTable var75 = new org.databene.jdbacl.model.jdbc.LazyTable(var52, var68, "select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;", "catalog");
    var36.setOwner((org.databene.jdbacl.model.CompositeDBObject)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var70.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test411");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.mTABLE_DETAILS();
    int var16 = var0.getRuleMemoizationCacheSize();
    var0.matchRange(3, 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test412");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var2 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var2.release((-1));
    boolean var6 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var2, 0);
    int var7 = var0.getRuleMemoizationCacheSize();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var0.consumeUntil((org.antlr.runtime.IntStream)var9, 100);
    org.databene.jdbacl.dialect.DerbyDialect var14 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var16 = var14.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var17 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var14.formatValue((java.lang.Object)var17);
    var17.setName("'hi!'");
    java.util.List var22 = var17.getSchemas();
    var0.traceOut("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", 0, (java.lang.Object)var22);
    var0.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var25 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var25.mCREATE_TABLE();
    var25.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var29 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var31 = var29.LT(10);
    var25.setCharStream((org.antlr.runtime.CharStream)var29);
    var0.consumeUntil((org.antlr.runtime.IntStream)var29, 1);
    var0.mDROP_SEQUENCE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 69);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test413");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.model.DefaultDBTable var15 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var12);
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var21 = var20.getTables();
    org.databene.jdbacl.model.TableContainer var22 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var20);
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var20.addTable((org.databene.jdbacl.model.DBTable)var26);
    java.lang.String[] var34 = new java.lang.String[] { ""};
    java.lang.String[] var38 = new java.lang.String[] { ""};
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.join("", "", var34, "hi!", "10", var38);
    java.lang.String var40 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var34);
    org.databene.jdbacl.model.TableContainer var43 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var44 = var43.getTables();
    org.databene.jdbacl.model.TableContainer var45 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var43);
    org.databene.jdbacl.model.DefaultDBTable var46 = new org.databene.jdbacl.model.DefaultDBTable();
    var46.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var49 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var50 = var49.getForeignKeyConstraints();
    var46.addReferrer((org.databene.jdbacl.model.DBTable)var49);
    var43.addTable((org.databene.jdbacl.model.DBTable)var49);
    java.lang.String[] var55 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var56 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var55);
    org.databene.jdbacl.model.DBForeignKeyConstraint var57 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var26, var34, (org.databene.jdbacl.model.DBTable)var49, var55);
    java.lang.String[] var58 = var57.getForeignKeyColumnNames();
    var15.removeForeignKeyConstraint(var57);
    java.lang.String[] var60 = var15.getColumnNames();
    java.lang.String var61 = var15.getDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var14.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi! as 10 on . = 10."+ "'", var39.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "."+ "'", var40.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var56.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test414");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var3 = var0.isDefaultCatalog("", "");
    java.lang.String var5 = var0.formatValue((java.lang.Object)10);
    boolean var7 = var0.isDeterministicFKName("left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    boolean var9 = var0.isDeterministicUKName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MINVALUE 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test415");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    var10.mT__78();
    var10.mT__124();
    org.databene.jdbacl.sql.parser.SQLLexer var21 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var21.mCREATE_TABLE();
    var21.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var25 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var27 = var25.LT(10);
    var21.setCharStream((org.antlr.runtime.CharStream)var25);
    int var30 = var25.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var31 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var25);
    var25.release(0);
    int var34 = var25.getLine();
    java.lang.String var35 = var25.toString();
    var10.matchAny((org.antlr.runtime.IntStream)var25);
    var25.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "DROP SEQUENCE "+ "'", var35.equals("DROP SEQUENCE "));

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test416");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    var0.setDefaultUser("call next value for 'hi!'");
    java.lang.String var5 = var0.getDefaultPort();
    var0.setId("VALUES (NEXT VALUE FOR call next value for 'hi!') SIMILAR TO 'alter sequence CREATE GENERATOR drop sequence  restart with -1'");
    java.lang.String var8 = var0.getDefaultPort();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test417");


    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var1 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key");

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test418");


    java.lang.String var1 = org.databene.jdbacl.dialect.H2Util.getInMemoryURL("CONSTRAINT \"hi! identity by primary key\" ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "jdbc:h2:mem:CONSTRAINT \"hi! identity by primary key\" "+ "'", var1.equals("jdbc:h2:mem:CONSTRAINT \"hi! identity by primary key\" "));

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test419");


    org.databene.jdbacl.dialect.DerbyDialect var3 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var5 = var3.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var6 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var3.formatValue((java.lang.Object)var6);
    var6.setName("'hi!'");
    java.util.List var11 = var6.getSchemas();
    org.databene.jdbacl.model.DBSchema var12 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var6);
    org.databene.jdbacl.model.DBTrigger var13 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var12);
    java.util.List var14 = var12.getPackages();
    org.databene.jdbacl.model.DBPackage var15 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var12);
    java.util.List var16 = var15.getComponents();
    var15.setObjectType("-1");
    java.util.List var19 = var15.getComponents();
    java.lang.String var20 = var15.getObjectType();
    var15.setStatus("h2");
    org.databene.jdbacl.dialect.DerbyDialect var27 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var29 = var27.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var30 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var31 = var30.getName();
    java.lang.String var32 = var27.formatValue((java.lang.Object)var30);
    var30.setName("'hi!'");
    java.util.List var35 = var30.getSchemas();
    org.databene.jdbacl.model.DBSchema var36 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var30);
    org.databene.jdbacl.model.DBTrigger var37 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var36);
    java.util.List var38 = var36.getPackages();
    org.databene.jdbacl.model.DBPackage var39 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var36);
    java.util.List var40 = var39.getComponents();
    org.databene.jdbacl.model.DBProcedure var41 = new org.databene.jdbacl.model.DBProcedure("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var39);
    java.lang.String var42 = var41.getSubProgramId();
    var41.setSubProgramId("jdbc:h2:mem:select next value for 10");
    var41.setSubProgramId("NOT drop sequence  ~ 'alter sequence  restart with -1'");
    var41.setSubProgramId("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    java.lang.String var49 = var41.getOverload();
    var41.setSubProgramId("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    var15.addProcedure(var41);
    var15.setStatus("catalog");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "-1"+ "'", var20.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test420");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    java.util.Set var4 = var0.getUniqueConstraints(false);
    java.lang.String var5 = var0.getDoc();
    var0.setDoc("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    org.databene.jdbacl.JDBCConnectData var14 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var15 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var16 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var14);
    boolean var17 = var0.equals((java.lang.Object)var14);
    java.lang.String[] var18 = var0.getPKColumnNames();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var21 = var20.getTables();
    java.util.List var23 = var20.getSequences(false);
    boolean var24 = var0.equals((java.lang.Object)var20);
    java.lang.String[] var25 = var0.getColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "."+ "'", var5.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test421");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    java.util.Set var7 = var3.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    boolean var12 = var10.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var15 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var3, var10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    var15.setTable((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.dialect.DerbyDialect var32 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var34 = var32.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var35 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var32.formatValue((java.lang.Object)var35);
    var35.setName("'hi!'");
    java.util.List var40 = var35.getSchemas();
    org.databene.jdbacl.model.DBSchema var41 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var35);
    org.databene.jdbacl.model.DBTrigger var42 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var41);
    java.lang.String var43 = var41.getName();
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable("drop sequence 10", var41);
    org.databene.jdbacl.model.TableContainer var49 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var50 = var49.getTables();
    org.databene.jdbacl.model.TableContainer var51 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var49);
    org.databene.jdbacl.model.DefaultDBTable var52 = new org.databene.jdbacl.model.DefaultDBTable();
    var52.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var55 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var56 = var55.getForeignKeyConstraints();
    var52.addReferrer((org.databene.jdbacl.model.DBTable)var55);
    var49.addTable((org.databene.jdbacl.model.DBTable)var55);
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String var68 = org.databene.jdbacl.SQLUtil.join("", "", var63, "hi!", "10", var67);
    java.lang.String var69 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var63);
    org.databene.jdbacl.model.TableContainer var72 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var73 = var72.getTables();
    org.databene.jdbacl.model.TableContainer var74 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var72);
    org.databene.jdbacl.model.DefaultDBTable var75 = new org.databene.jdbacl.model.DefaultDBTable();
    var75.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var78 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var79 = var78.getForeignKeyConstraints();
    var75.addReferrer((org.databene.jdbacl.model.DBTable)var78);
    var72.addTable((org.databene.jdbacl.model.DBTable)var78);
    java.lang.String[] var84 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var85 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var84);
    org.databene.jdbacl.model.DBForeignKeyConstraint var86 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var55, var63, (org.databene.jdbacl.model.DBTable)var78, var84);
    java.lang.String[] var87 = var86.getForeignKeyColumnNames();
    var44.removeForeignKeyConstraint(var86);
    java.lang.String[] var89 = var44.getColumnNames();
    org.databene.jdbacl.model.DBNonUniqueIndex var90 = new org.databene.jdbacl.model.DBNonUniqueIndex("SET GENERATOR catalog TO -2", false, (org.databene.jdbacl.model.DBTable)var24, var89);
    boolean var91 = var90.isUnique();
    boolean var92 = var90.isUnique();
    boolean var93 = var90.isUnique();
    java.lang.String[] var94 = var90.getColumnNames();
    java.lang.String[] var95 = var90.getColumnNames();
    var90.addColumnName("select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')-identity-select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-");
    java.lang.String var98 = var90.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"+ "'", var43.equals("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi! as 10 on . = 10."+ "'", var68.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "."+ "'", var69.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var85.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "SET GENERATOR catalog TO -2"+ "'", var98.equals("SET GENERATOR catalog TO -2"));

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test422");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mT__126();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var18 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var18.reset();
    int var21 = var18.LA(3);
    java.lang.String var22 = var18.getText();
    int var23 = var18.getLine();
    var10.consumeUntil((org.antlr.runtime.IntStream)var18, 82);
    int var27 = var18.LA(80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "DROP SEQUENCE "+ "'", var22.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test423");


    java.lang.String var3 = org.databene.jdbacl.SQLUtil.substituteMarkers("jdbc:h2:mem:select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT') SIMILAR TO 'drop sequence select next value for CREATE GENERATOR  NOT REGEXP 'UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')''", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (java.lang.Object)"Identity definition by NK-PK query: CONSTRAINT \"select nextval('')\" UNIQUE ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "jdbc:h2:mem:select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT') SIMILAR TO 'drop sequence select next value for CREATE GENERATOR  NOT REGEXP 'UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join 'Identity definition by NK-PK query: CONSTRAINT \"select nextval('')\" UNIQUE ()' : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')''"+ "'", var3.equals("jdbc:h2:mem:select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT') SIMILAR TO 'drop sequence select next value for CREATE GENERATOR  NOT REGEXP 'UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join 'Identity definition by NK-PK query: CONSTRAINT \"select nextval('')\" UNIQUE ()' : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')''"));

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test424");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__93();
    var10.mCREATE_SEQUENCE();
    var10.mT__124();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test425");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    java.lang.String var5 = var0.renderFetchSequenceValue("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL");
    boolean var7 = var0.isDeterministicFKName("jdbc:hsqldb:mem:VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    boolean var10 = var0.isDefaultCatalog("VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)", "10");
    boolean var12 = var0.isDeterministicUKName("select select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-"+ "'", var5.equals("select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test426");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    java.util.List var19 = var16.getComponents();
    var11.setCatalog(var16);
    java.util.List var21 = var11.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test427");


    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var1 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    java.lang.String var2 = var1.getSourceName();
    int var4 = var1.LA(76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 46);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test428");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    org.databene.jdbacl.model.DefaultDBTable var13 = new org.databene.jdbacl.model.DefaultDBTable();
    var13.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var17 = var16.getForeignKeyConstraints();
    var13.addReferrer((org.databene.jdbacl.model.DBTable)var16);
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String[] var28 = new java.lang.String[] { ""};
    java.lang.String var29 = org.databene.jdbacl.SQLUtil.join("", "", var24, "hi!", "10", var28);
    org.databene.jdbacl.model.DBUniqueConstraint var30 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var16, "select nextval('')", false, var24);
    org.databene.jdbacl.model.DBCatalog var31 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var32 = var31.getName();
    java.util.List var33 = var31.getComponents();
    boolean var34 = var30.isIdentical((org.databene.jdbacl.model.DBObject)var31);
    boolean var35 = var12.equals((java.lang.Object)var34);
    var12.setDescription("'\u0135'.NOT drop generator sequence ~ 'hi!'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi! as 10 on . = 10."+ "'", var29.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test429");


    org.databene.jdbacl.model.jdbc.JDBCDBImporter var6 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var6.setImportingPackages(false);
    org.databene.jdbacl.model.cache.CachingDBImporter var10 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var6, "hi! as 10 on . = 10.");
    var6.setImportingTriggers(true);
    var6.setCatalogName("10");
    var6.setFaultTolerant(true);
    var6.setImportingTriggers(true);
    java.lang.String var19 = var6.getDatabaseProductName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test431");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    org.databene.jdbacl.model.DBCatalog var32 = var31.getCatalog();
    java.util.List var33 = var32.getTables();
    org.databene.jdbacl.JDBCConnectData var41 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var42 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var41);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var43 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var41);
    org.databene.jdbacl.model.DBCatalog var45 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var46 = var45.getName();
    org.databene.jdbacl.model.Database var47 = var45.getDatabase();
    java.lang.String var48 = var45.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var50 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var52 = var50.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var53 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var54 = var53.getName();
    java.lang.String var55 = var50.formatValue((java.lang.Object)var53);
    var53.setName("'hi!'");
    java.util.List var58 = var53.getSchemas();
    org.databene.jdbacl.model.DBSchema var59 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var53);
    var45.removeSchema(var59);
    java.util.List var62 = var59.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var59);
    org.databene.jdbacl.model.jdbc.LazyTable var66 = new org.databene.jdbacl.model.jdbc.LazyTable(var43, var59, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var67 = var66.getDoc();
    java.lang.String var68 = var66.getName();
    org.databene.jdbacl.model.TableContainer var69 = new org.databene.jdbacl.model.TableContainer("select nextval('')", (org.databene.jdbacl.model.CompositeDBObject)var66);
    org.databene.jdbacl.model.DBSchema var70 = var66.getSchema();
    var32.removeSchema(var70);
    org.databene.jdbacl.model.DBSequence var75 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var75.setName("10");
    java.math.BigInteger var78 = var75.getIncrement();
    java.lang.Boolean var79 = var75.isCycle();
    java.lang.String var80 = var75.dropDDL();
    org.databene.jdbacl.model.DefaultDBTable var81 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var82 = var81.getForeignKeyConstraints();
    var81.setDoc("drop sequence ");
    boolean var85 = var75.equals((java.lang.Object)"drop sequence ");
    java.lang.String var86 = var75.getCatalogName();
    var70.addSequence(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var67.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var68.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "drop sequence 10"+ "'", var80.equals("drop sequence 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "drop sequence "+ "'", var86.equals("drop sequence "));

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test432");


    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    var3.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var7 = var6.getForeignKeyConstraints();
    var3.addReferrer((org.databene.jdbacl.model.DBTable)var6);
    org.databene.jdbacl.model.DBDataType var11 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var12 = var11.isAlpha();
    java.lang.String var13 = var11.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var14 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var17 = var14.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var19 = var14.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var20 = var11.equals((java.lang.Object)var19);
    org.databene.jdbacl.model.DefaultDBColumn var23 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var6, var11, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    var24.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var28 = var27.getForeignKeyConstraints();
    var24.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    org.databene.jdbacl.model.DBSchema var31 = var24.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable();
    var35.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var38 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var39 = var38.getForeignKeyConstraints();
    var35.addReferrer((org.databene.jdbacl.model.DBTable)var38);
    org.databene.jdbacl.model.DBDataType var43 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var44 = var43.isAlpha();
    java.lang.String var45 = var43.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var46 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var49 = var46.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var51 = var46.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var52 = var43.equals((java.lang.Object)var51);
    org.databene.jdbacl.model.DefaultDBColumn var55 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var38, var43, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var56 = var55.getType();
    org.databene.jdbacl.model.DefaultDBTable var57 = new org.databene.jdbacl.model.DefaultDBTable();
    var57.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var61 = var60.getForeignKeyConstraints();
    var57.addReferrer((org.databene.jdbacl.model.DBTable)var60);
    java.lang.String[] var68 = new java.lang.String[] { ""};
    java.lang.String[] var72 = new java.lang.String[] { ""};
    java.lang.String var73 = org.databene.jdbacl.SQLUtil.join("", "", var68, "hi!", "10", var72);
    org.databene.jdbacl.model.DBUniqueConstraint var74 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var60, "select nextval('')", false, var68);
    var74.addColumnName("sequence");
    var55.addUkConstraint(var74);
    java.lang.String[] var78 = var74.getColumnNames();
    org.databene.jdbacl.model.DBUniqueIndex var79 = new org.databene.jdbacl.model.DBUniqueIndex("select nextval('')", false, var74);
    var24.removeIndex((org.databene.jdbacl.model.DBIndex)var79);
    java.util.Set var82 = var24.getUniqueConstraints(false);
    java.util.Set var83 = var24.getForeignKeyConstraints();
    java.lang.String[] var88 = new java.lang.String[] { "select next value for 10"};
    org.databene.jdbacl.identity.UniqueKeyIdentity var89 = new org.databene.jdbacl.identity.UniqueKeyIdentity("CREATE SEQUENCE 10", var88);
    org.databene.jdbacl.model.DBPrimaryKeyConstraint var90 = new org.databene.jdbacl.model.DBPrimaryKeyConstraint((org.databene.jdbacl.model.DBTable)var24, "drop sequence 10", true, var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.DBCheckConstraint var92 = new org.databene.jdbacl.model.DBCheckConstraint("jdbc:h2:mem:left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE : class org.databene.jdbacl.model.FKChangeRule", false, (org.databene.jdbacl.model.DBTable)var24, "left join DROP SEQUENCE CREATE GENERATOR  RESTRICT.DROP SEQUENCE  as select null.nextval from dual on ");
      fail("Expected exception of type org.databene.commons.ParseException");
    } catch (org.databene.commons.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DROP SEQUENCE "+ "'", var13.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var19.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "DROP SEQUENCE "+ "'", var45.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var51.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi! as 10 on . = 10."+ "'", var73.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test433");


    org.databene.jdbacl.JDBCConnectData var6 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var6);
    org.databene.jdbacl.model.DBCatalog var10 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var11 = var10.getName();
    org.databene.jdbacl.model.Database var12 = var10.getDatabase();
    java.lang.String var13 = var10.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var15 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var17 = var15.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var18 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var15.formatValue((java.lang.Object)var18);
    var18.setName("'hi!'");
    java.util.List var23 = var18.getSchemas();
    org.databene.jdbacl.model.DBSchema var24 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var18);
    var10.removeSchema(var24);
    java.util.List var27 = var24.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var28 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var24);
    org.databene.jdbacl.model.jdbc.LazyTable var31 = new org.databene.jdbacl.model.jdbc.LazyTable(var8, var24, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var32 = var31.toString();
    org.databene.jdbacl.model.DBCatalog var33 = var31.getCatalog();
    java.lang.String var34 = var31.getDoc();
    org.databene.jdbacl.model.DBSchema var35 = var31.getSchema();
    org.databene.jdbacl.model.DBSequence var39 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var39.setName("10");
    var39.setCycle((java.lang.Boolean)false);
    var35.addSequence(var39);
    org.databene.jdbacl.model.DBCatalog var45 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var46 = var45.getName();
    org.databene.jdbacl.model.Database var47 = var45.getDatabase();
    java.lang.String var48 = var45.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var50 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var52 = var50.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var53 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var54 = var53.getName();
    java.lang.String var55 = var50.formatValue((java.lang.Object)var53);
    var53.setName("'hi!'");
    java.util.List var58 = var53.getSchemas();
    org.databene.jdbacl.model.DBSchema var59 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var53);
    var45.removeSchema(var59);
    java.util.List var62 = var59.getSequences(true);
    org.databene.jdbacl.dialect.DerbyDialect var66 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var68 = var66.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var69 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var70 = var69.getName();
    java.lang.String var71 = var66.formatValue((java.lang.Object)var69);
    var69.setName("'hi!'");
    java.util.List var74 = var69.getSchemas();
    org.databene.jdbacl.model.DBSchema var75 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var69);
    org.databene.jdbacl.model.DBTrigger var76 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var75);
    java.util.List var77 = var75.getPackages();
    org.databene.jdbacl.model.DBPackage var78 = new org.databene.jdbacl.model.DBPackage("CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).", var75);
    java.util.List var79 = var78.getComponents();
    var59.addPackage(var78);
    java.lang.String var81 = var78.getStatus();
    var35.addPackage(var78);
    org.databene.jdbacl.model.DBCatalog var83 = var35.getCatalog();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var32.equals("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var34.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test434");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("hi! as 10 on . = 10.");
    java.util.List var2 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var1);
    org.databene.jdbacl.model.DBCatalog var4 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.util.List var7 = var5.getComponents();
    org.databene.jdbacl.model.DBSchema var9 = var5.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var11 = var5.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var12 = var5.getName();
    java.util.List var13 = var5.getSequences();
    java.util.List var14 = var5.getTables();
    org.databene.jdbacl.dialect.DerbyDialect var17 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var19 = var17.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var20 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var17.formatValue((java.lang.Object)var20);
    var20.setName("'hi!'");
    java.util.List var25 = var20.getSchemas();
    org.databene.jdbacl.model.DBSchema var26 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var20);
    org.databene.jdbacl.model.DBTrigger var27 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var26);
    java.util.List var28 = org.databene.jdbacl.DBUtil.dependencyOrderedTables((org.databene.jdbacl.model.TableHolder)var26);
    java.util.List var30 = var26.getSequences(false);
    var5.addSchema(var26);
    var4.addSchema(var26);
    boolean var33 = var1.isIdentical((org.databene.jdbacl.model.DBObject)var4);
    org.databene.jdbacl.model.DBTreeModel var34 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test435");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.JDBCConnectData var1 = org.databene.jdbacl.DBUtil.getConnectData("drop sequence alter sequence hi! restart with 1");
      fail("Expected exception of type org.databene.commons.ConfigurationError");
    } catch (org.databene.commons.ConfigurationError e) {
      // Expected exception.
    }

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test436");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    int var19 = var10.getBacktrackingLevel();
    var10.mCOMMENT_COLUMN();
    var10.mT__122();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var23 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var25 = var23.LT(10);
    int var26 = var23.mark();
    var10.setCharStream((org.antlr.runtime.CharStream)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test437");


    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    var4.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var7 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var8 = var7.getForeignKeyConstraints();
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var7);
    org.databene.jdbacl.model.DBDataType var12 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var13 = var12.isAlpha();
    java.lang.String var14 = var12.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var15 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var18 = var15.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var20 = var15.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var21 = var12.equals((java.lang.Object)var20);
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var7, var12, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var25 = var24.getType();
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String[] var41 = new java.lang.String[] { ""};
    java.lang.String var42 = org.databene.jdbacl.SQLUtil.join("", "", var37, "hi!", "10", var41);
    org.databene.jdbacl.model.DBUniqueConstraint var43 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var29, "select nextval('')", false, var37);
    var43.addColumnName("sequence");
    var24.addUkConstraint(var43);
    org.databene.jdbacl.model.DBUniqueIndex var47 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var43);
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable();
    var48.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var51 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var52 = var51.getForeignKeyConstraints();
    var48.addReferrer((org.databene.jdbacl.model.DBTable)var51);
    java.lang.String[] var59 = new java.lang.String[] { ""};
    java.lang.String[] var63 = new java.lang.String[] { ""};
    java.lang.String var64 = org.databene.jdbacl.SQLUtil.join("", "", var59, "hi!", "10", var63);
    org.databene.jdbacl.model.DBUniqueConstraint var65 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var51, "select nextval('')", false, var59);
    boolean var66 = var47.equals((java.lang.Object)false);
    java.lang.String[] var67 = var47.getColumnNames();
    org.databene.jdbacl.identity.UniqueKeyIdentity var68 = new org.databene.jdbacl.identity.UniqueKeyIdentity("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") null \"sequence\" null \"'hi!'\")", var67);
    org.databene.jdbacl.model.DBCheckConstraint var73 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    org.databene.jdbacl.model.DBCheckConstraint var78 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var79 = var78.getConditionText();
    org.databene.jdbacl.model.DBCheckConstraint var84 = new org.databene.jdbacl.model.DBCheckConstraint("column", true, "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')", "\"'hi!'\"");
    java.lang.String var85 = var84.getTableName();
    boolean var86 = var78.isEquivalent(var84);
    boolean var87 = var73.isEquivalent(var78);
    java.lang.String[] var88 = var73.getColumnNames();
    var68.setColumns(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "DROP SEQUENCE "+ "'", var14.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var20.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi! as 10 on . = 10."+ "'", var42.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi! as 10 on . = 10."+ "'", var64.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "\"'hi!'\""+ "'", var79.equals("\"'hi!'\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"+ "'", var85.equals("call next value for select nextval(''alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP ''alter sequence hi! restart with 1'''')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test438");


    org.databene.jdbacl.JDBCConnectData var4 = new org.databene.jdbacl.JDBCConnectData("org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  DROP SEQUENCE (3,69) NULL", "((\"sequence\") BETWEEN \"'hi!'\" AND \"sequence\")", "VALUES (NEXT VALUE FOR call next value for 'hi!')", "index");

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test439");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    var0.setDriverClass("hi!");
    java.lang.String var3 = var0.getUrlPattern();
    var0.setDefaultUser("hi! as 10 on . = 10.");
    var0.setDownloadUrl("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1'");
    java.lang.String var8 = var0.getDefaultPort();
    var0.setDefaultPort("select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test440");


    java.io.File var1 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.csv.CSVModelExporter var2 = new org.databene.jdbacl.model.csv.CSVModelExporter(var1);
    org.databene.jdbacl.model.xml.XMLModelExporter var4 = new org.databene.jdbacl.model.xml.XMLModelExporter(var1, "drop generator left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    org.databene.jdbacl.model.csv.CSVModelExporter var5 = new org.databene.jdbacl.model.csv.CSVModelExporter(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test441");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var7 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var7.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var10 = var0.equals((java.lang.Object)var7);
    var0.setName("");
    java.lang.String var13 = var0.getDefaultUser();
    java.lang.String var14 = var0.getDefaultSchema();
    java.lang.String var15 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test442");


    java.lang.String var1 = org.databene.jdbacl.DBUtil.escape("select nextval for catalog identity by primary key from sysibm.sysdummy1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "select nextval for catalog identity by primary key from sysibm.sysdummy1"+ "'", var1.equals("select nextval for catalog identity by primary key from sysibm.sysdummy1"));

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test443");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__91();
    var10.mT__127();
    var10.mNAME_LIST();
    var10.setText("select select gen_id(DROP SEQUENCE EQUEN RESTRICT, 1) from RDB$DATABASE;.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test444");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("VALUES (NEXT VALUE FOR call next value for 'hi!')", false, "alter sequence CREATE GENERATOR drop sequence  restart with -1");
    boolean var5 = var0.isSequenceBoundarySupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "VALUES (NEXT VALUE FOR call next value for 'hi!') SIMILAR TO 'alter sequence CREATE GENERATOR drop sequence  restart with -1'"+ "'", var4.equals("VALUES (NEXT VALUE FOR call next value for 'hi!') SIMILAR TO 'alter sequence CREATE GENERATOR drop sequence  restart with -1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test445");


    org.databene.jdbacl.identity.NKBuilder var0 = new org.databene.jdbacl.identity.NKBuilder();
    org.databene.jdbacl.sql.ColumnExpression var4 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var7 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var8 = var7.getValue();
    org.databene.jdbacl.sql.ColumnExpression var11 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var12 = var11.getValue();
    org.databene.jdbacl.sql.BetweenExpression var13 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var4, (org.databene.script.Expression)var7, (org.databene.script.Expression)var11);
    org.databene.jdbacl.sql.ColumnExpression var16 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var19 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var20 = var19.getValue();
    org.databene.jdbacl.sql.ColumnExpression var23 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var24 = var23.getValue();
    org.databene.jdbacl.sql.BetweenExpression var25 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var16, (org.databene.script.Expression)var19, (org.databene.script.Expression)var23);
    var13.addTerm((org.databene.script.Expression)var19);
    org.databene.script.Expression[] var27 = new org.databene.script.Expression[] { var13};
    org.databene.jdbacl.sql.FunctionInvocation var28 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var27);
    java.lang.String var29 = var28.getFunctionName();
    java.lang.String var30 = var28.toString();
    var0.addComponent((java.lang.Object)var28);
    org.databene.jdbacl.JDBCDriverInfo var32 = new org.databene.jdbacl.JDBCDriverInfo();
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var39 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("hi!", "hi!", "hi!", "hi!", "hi!", "");
    var39.setExcludeTables("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var42 = var32.equals((java.lang.Object)var39);
    var32.setDefaultDatabase("procedure CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    var0.addComponent((java.lang.Object)var32);
    java.lang.String var46 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "sequence"+ "'", var8.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "sequence"+ "'", var20.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "sequence"+ "'", var24.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "alter sequence drop sequence 10 restart with 0"+ "'", var29.equals("alter sequence drop sequence 10 restart with 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"+ "'", var30.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))|null"+ "'", var46.equals("((\"sequence\" BETWEEN \"sequence\" AND \"sequence\"))|null"));

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test446");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var9 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var9.setCache((java.lang.Long)100L);
    java.lang.String var12 = var9.getObjectType();
    java.lang.String var13 = var0.renderCreateSequence(var9);
    boolean var16 = var0.isDefaultSchema("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0", "'\\n'");
    java.lang.String var18 = var0.renderDropSequence("DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "sequence"+ "'", var12.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var13.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "DROP SEQUENCE DROP SEQUENCE  RESTRICT"+ "'", var18.equals("DROP SEQUENCE DROP SEQUENCE  RESTRICT"));

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test447");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    org.databene.jdbacl.model.DBDataType var10 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var11 = var10.isAlpha();
    java.lang.String var12 = var10.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var13 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var16 = var13.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var18 = var13.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var19 = var10.equals((java.lang.Object)var18);
    org.databene.jdbacl.model.DefaultDBColumn var22 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var5, var10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable();
    var23.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var27 = var26.getForeignKeyConstraints();
    var23.addReferrer((org.databene.jdbacl.model.DBTable)var26);
    var5.addReferrer((org.databene.jdbacl.model.DBTable)var23);
    org.databene.jdbacl.model.TableContainer var34 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var35 = var34.getTables();
    org.databene.jdbacl.model.TableContainer var36 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var34);
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    var37.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var40 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var41 = var40.getForeignKeyConstraints();
    var37.addReferrer((org.databene.jdbacl.model.DBTable)var40);
    var34.addTable((org.databene.jdbacl.model.DBTable)var40);
    java.lang.String[] var48 = new java.lang.String[] { ""};
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.join("", "", var48, "hi!", "10", var52);
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var48);
    org.databene.jdbacl.model.TableContainer var57 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var58 = var57.getTables();
    org.databene.jdbacl.model.TableContainer var59 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var57);
    org.databene.jdbacl.model.DefaultDBTable var60 = new org.databene.jdbacl.model.DefaultDBTable();
    var60.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var63 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var64 = var63.getForeignKeyConstraints();
    var60.addReferrer((org.databene.jdbacl.model.DBTable)var63);
    var57.addTable((org.databene.jdbacl.model.DBTable)var63);
    java.lang.String[] var69 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var70 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var69);
    org.databene.jdbacl.model.DBForeignKeyConstraint var71 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var40, var48, (org.databene.jdbacl.model.DBTable)var63, var69);
    org.databene.jdbacl.model.DBTable var72 = var71.getRefereeTable();
    var5.addForeignKey(var71);
    org.databene.jdbacl.model.DBDataType var76 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    org.databene.jdbacl.model.DefaultDBColumn var77 = new org.databene.jdbacl.model.DefaultDBColumn("select next value for SET GENERATOR . TO -1", (org.databene.jdbacl.model.DBTable)var5, var76);
    java.lang.String var78 = var5.getDoc();
    org.databene.jdbacl.model.DBRow var79 = new org.databene.jdbacl.model.DBRow((org.databene.jdbacl.model.DBTable)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DROP SEQUENCE "+ "'", var12.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var18.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi! as 10 on . = 10."+ "'", var53.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "."+ "'", var54.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var70.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test448");


    org.databene.jdbacl.dialect.DB2Dialect var0 = new org.databene.jdbacl.dialect.DB2Dialect();
    boolean var3 = var0.isDefaultSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY () ~ 'jdbc:h2:mem:hi! as 10 on . = 10.-identity-.'", "select next value for jdbc:h2:mem:select next value for 10");
    boolean var5 = var0.isDeterministicPKName("CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    boolean var7 = var0.isDeterministicIndexName("select Identity definition by unique key: select next value for 10.nextval from dual");
    boolean var9 = var0.isDeterministicPKName("jdbc:h2:mem:select next value for 10");
    boolean var11 = var0.isDeterministicIndexName("select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity- REGEXP 'DROP SEQUENCE CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")' RESTRICT'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test449");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.databene.jdbacl.model.FKChangeRule var1 = org.databene.jdbacl.model.FKChangeRule.valueOf("SET GENERATOR org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE  TO -1 SIMILAR TO 'DROP SEQUENCE (0,-1)'");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test450");


    org.databene.jdbacl.sql.parser.SQLParser.check_constraint_return var2 = new org.databene.jdbacl.sql.parser.SQLParser.check_constraint_return();
    org.databene.jdbacl.identity.mem.GlobalRowId var3 = new org.databene.jdbacl.identity.mem.GlobalRowId("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", ".", (java.lang.Object)var2);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable();
    var6.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var10 = var9.getForeignKeyConstraints();
    var6.addReferrer((org.databene.jdbacl.model.DBTable)var9);
    org.databene.jdbacl.model.DBDataType var14 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var15 = var14.isAlpha();
    java.lang.String var16 = var14.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var17 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var20 = var17.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var22 = var17.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var23 = var14.equals((java.lang.Object)var22);
    org.databene.jdbacl.model.DefaultDBColumn var26 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var9, var14, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var27 = new org.databene.jdbacl.model.DefaultDBTable();
    var27.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var30 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var31 = var30.getForeignKeyConstraints();
    var27.addReferrer((org.databene.jdbacl.model.DBTable)var30);
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var27);
    org.databene.jdbacl.model.TableContainer var38 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var39 = var38.getTables();
    org.databene.jdbacl.model.TableContainer var40 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var38);
    org.databene.jdbacl.model.DefaultDBTable var41 = new org.databene.jdbacl.model.DefaultDBTable();
    var41.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var45 = var44.getForeignKeyConstraints();
    var41.addReferrer((org.databene.jdbacl.model.DBTable)var44);
    var38.addTable((org.databene.jdbacl.model.DBTable)var44);
    java.lang.String[] var52 = new java.lang.String[] { ""};
    java.lang.String[] var56 = new java.lang.String[] { ""};
    java.lang.String var57 = org.databene.jdbacl.SQLUtil.join("", "", var52, "hi!", "10", var56);
    java.lang.String var58 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var52);
    org.databene.jdbacl.model.TableContainer var61 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var62 = var61.getTables();
    org.databene.jdbacl.model.TableContainer var63 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var61);
    org.databene.jdbacl.model.DefaultDBTable var64 = new org.databene.jdbacl.model.DefaultDBTable();
    var64.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var67 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var68 = var67.getForeignKeyConstraints();
    var64.addReferrer((org.databene.jdbacl.model.DBTable)var67);
    var61.addTable((org.databene.jdbacl.model.DBTable)var67);
    java.lang.String[] var73 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var74 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var73);
    org.databene.jdbacl.model.DBForeignKeyConstraint var75 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var44, var52, (org.databene.jdbacl.model.DBTable)var67, var73);
    org.databene.jdbacl.model.DBTable var76 = var75.getRefereeTable();
    var9.addForeignKey(var75);
    org.databene.jdbacl.model.DBDataType var80 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    org.databene.jdbacl.model.DefaultDBColumn var81 = new org.databene.jdbacl.model.DefaultDBColumn("select next value for SET GENERATOR . TO -1", (org.databene.jdbacl.model.DBTable)var9, var80);
    boolean var82 = var3.equals((java.lang.Object)var80);
    java.lang.String var83 = var3.toString();
    boolean var85 = var3.equals((java.lang.Object)"REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')");
    java.io.File var87 = org.databene.jdbacl.model.cache.CachingDBImporter.getCacheFile("SET GENERATOR . TO -1");
    org.databene.jdbacl.model.xml.XMLModelExporter var89 = new org.databene.jdbacl.model.xml.XMLModelExporter(var87, "sequence");
    org.databene.jdbacl.model.sql.CreateExporter var90 = new org.databene.jdbacl.model.sql.CreateExporter(var87);
    org.databene.jdbacl.model.xml.XMLModelImporter var91 = new org.databene.jdbacl.model.xml.XMLModelImporter(var87);
    org.databene.jdbacl.model.xml.XMLModelImporter var92 = new org.databene.jdbacl.model.xml.XMLModelImporter(var87);
    org.databene.jdbacl.model.sql.CreateExporter var93 = new org.databene.jdbacl.model.sql.CreateExporter(var87);
    boolean var94 = var3.equals((java.lang.Object)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "DROP SEQUENCE "+ "'", var16.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var22.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi! as 10 on . = 10."+ "'", var57.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "."+ "'", var58.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var74.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test451");


    org.databene.jdbacl.SQLScriptException var2 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var4 = var2.withUri("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.SQLScriptException var7 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var2, "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", (-1));
    int var8 = var7.getLineNo();
    int var9 = var7.getLineNo();
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var10 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("alter sequence drop sequence 10 restart with 0", (java.lang.Throwable)var7);
    java.lang.String var11 = var7.toString();
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var12 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError((java.lang.Throwable)var7);
    org.databene.jdbacl.SQLScriptException var14 = new org.databene.jdbacl.SQLScriptException(1);
    org.databene.jdbacl.SQLScriptException var17 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var14, "SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ", 100);
    org.databene.jdbacl.SQLScriptException var19 = var14.withUri("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    org.databene.jdbacl.SQLScriptException var21 = var14.withUri("drop generator left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    org.databene.jdbacl.SQLScriptException var24 = new org.databene.jdbacl.SQLScriptException((java.lang.Throwable)var21, 6);
    var12.addSuppressed((java.lang.Throwable)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "org.databene.jdbacl.SQLScriptException: Error in execution of script CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT line -1: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: "+ "'", var11.equals("org.databene.jdbacl.SQLScriptException: Error in execution of script CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT line -1: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test452");


    org.databene.jdbacl.dialect.UnknownDialect var1 = new org.databene.jdbacl.dialect.UnknownDialect("alter sequence call next value for 'hi!' restart with 100");
    boolean var3 = var1.isDeterministicIndexName("postgres");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test453");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.setBacktrackingLevel(10);
    var0.mTABLE_DETAILS();
    var0.mCREATE_TABLE();
    org.databene.jdbacl.sql.parser.SQLLexer var8 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var10 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var10.release((-1));
    boolean var14 = var8.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var10, 0);
    var10.setLine(3);
    var10.reset();
    var0.traceIn("NOT REGEXP_MATCHES(hi! as 10 on . = 10., 'jdbc:hsqldb:mem:call next value for 'hi!' identity by primary key')", 1, (java.lang.Object)var10);
    var10.setCharPositionInLine(309);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test454");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBSchema var11 = var0.getSchema("REGEXP_MATCHES(CONSTRAINT \"select nextval('')\" , 'CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).')");
    org.databene.jdbacl.model.DBSequence var17 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var18 = var17.getMaxValue();
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    org.databene.jdbacl.model.Database var21 = var19.getDatabase();
    java.lang.String var22 = var19.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var24 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var26 = var24.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var27 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = var24.formatValue((java.lang.Object)var27);
    var27.setName("'hi!'");
    java.util.List var32 = var27.getSchemas();
    org.databene.jdbacl.model.DBSchema var33 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var27);
    var19.removeSchema(var33);
    org.databene.jdbacl.dialect.DerbyDialect var37 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var39 = var37.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var40 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var41 = var40.getName();
    java.lang.String var42 = var37.formatValue((java.lang.Object)var40);
    var40.setName("'hi!'");
    java.util.List var45 = var40.getSchemas();
    org.databene.jdbacl.model.DBSchema var46 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var40);
    org.databene.jdbacl.model.DBTrigger var47 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var46);
    var47.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var50 = var47.getTriggerBody();
    java.lang.String var51 = var47.getColumnName();
    java.lang.String var52 = var47.getWhenClause();
    var33.addTrigger(var47);
    boolean var54 = var17.isIdentical((org.databene.jdbacl.model.DBObject)var33);
    java.util.List var55 = var33.getPackages();
    org.databene.jdbacl.model.DBSequence var56 = new org.databene.jdbacl.model.DBSequence("NO_ACTION", var33);
    org.databene.jdbacl.model.DBPackage var57 = new org.databene.jdbacl.model.DBPackage("jdbc:h2:mem:hi! as 10 on . = 10.-identity-. DROP SEQUENCE (0,-1) NULL", var33);
    var0.addSchema(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test455");


    java.lang.String var2 = org.databene.jdbacl.SQLUtil.normalize("drop generator org.firebirdsql.jdbc.FBDriver", true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "drop generator org.firebirdsql.jdbc.FBDriver"+ "'", var2.equals("drop generator org.firebirdsql.jdbc.FBDriver"));

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test456");


    org.databene.jdbacl.dialect.DerbyDialect var0 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var2 = var0.isDeterministicPKName("hi! as 10 on . = 10.");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var6 = var0.regexQuery("UniqueKeyIdentity(select next value for SET GENERATOR.TO - 1-identity-SubNkPkQueryIdentity(null) ~ 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10, alter sequence CREATE SEQUENCE DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1. restart with 1) unique')", true, "10");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test457");


    org.databene.jdbacl.identity.xml.IdentityParseContext var0 = new org.databene.jdbacl.identity.xml.IdentityParseContext();
    org.databene.jdbacl.identity.xml.IdentityParser var1 = new org.databene.jdbacl.identity.xml.IdentityParser();
    var0.addParser((org.databene.webdecs.xml.XMLElementParser)var1);
    java.lang.Object[] var4 = org.databene.jdbacl.SQLUtil.parseColumnTypeAndSize("drop sequence 10");
    java.lang.Object[] var6 = var0.createSubPath(var4, (java.lang.Object)(byte)(-1));
    java.util.Set var7 = var0.keySet();
    java.lang.Object var9 = var0.get("DROP SEQUENCE CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")' RESTRICT");
    var0.remove("CONSTRAINT \"select nextval('')\" UNIQUE (, NaturalPkIdentity(hi!))");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test458");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var5 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var6 = var5.getForeignKeyConstraints();
    var2.addReferrer((org.databene.jdbacl.model.DBTable)var5);
    java.lang.String[] var13 = new java.lang.String[] { ""};
    java.lang.String[] var17 = new java.lang.String[] { ""};
    java.lang.String var18 = org.databene.jdbacl.SQLUtil.join("", "", var13, "hi!", "10", var17);
    org.databene.jdbacl.model.DBUniqueConstraint var19 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var5, "select nextval('')", false, var13);
    org.databene.jdbacl.model.DBDataType var22 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var23 = var22.isAlpha();
    org.databene.jdbacl.model.DefaultDBColumn var24 = new org.databene.jdbacl.model.DefaultDBColumn("'hi!'", (org.databene.jdbacl.model.DBTable)var5, var22);
    org.databene.jdbacl.model.DefaultDBTable var26 = new org.databene.jdbacl.model.DefaultDBTable();
    var26.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var30 = var29.getForeignKeyConstraints();
    var26.addReferrer((org.databene.jdbacl.model.DBTable)var29);
    org.databene.jdbacl.model.DBDataType var34 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var35 = var34.isAlpha();
    java.lang.String var36 = var34.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var37 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var40 = var37.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var42 = var37.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var43 = var34.equals((java.lang.Object)var42);
    org.databene.jdbacl.model.DefaultDBColumn var46 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var29, var34, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var49 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var50 = var49.isTemporal();
    boolean var51 = var34.equals((java.lang.Object)var49);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.", (org.databene.jdbacl.model.DBTable)var5, var34, (java.lang.Integer)1, (java.lang.Integer)(-1));
    var54.setDefaultValue("null.jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    java.lang.Integer var57 = var54.getFractionDigits();
    org.databene.jdbacl.model.DBTable var58 = var54.getTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi! as 10 on . = 10."+ "'", var18.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "DROP SEQUENCE "+ "'", var36.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var42.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + (-1)+ "'", var57.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test459");


    org.databene.jdbacl.sql.parser.SQLParser.commands_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.commands_return();
    java.lang.Object var1 = var0.getTree();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test460");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var2 = var1.getName();
    org.databene.jdbacl.model.Database var3 = var1.getDatabase();
    java.lang.String var4 = var1.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var6 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var8 = var6.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var9 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var10 = var9.getName();
    java.lang.String var11 = var6.formatValue((java.lang.Object)var9);
    var9.setName("'hi!'");
    java.util.List var14 = var9.getSchemas();
    org.databene.jdbacl.model.DBSchema var15 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var9);
    var1.removeSchema(var15);
    org.databene.jdbacl.dialect.DerbyDialect var19 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var21 = var19.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var22 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var23 = var22.getName();
    java.lang.String var24 = var19.formatValue((java.lang.Object)var22);
    var22.setName("'hi!'");
    java.util.List var27 = var22.getSchemas();
    org.databene.jdbacl.model.DBSchema var28 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var22);
    org.databene.jdbacl.model.DBTrigger var29 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var28);
    var29.setDescription("CREATE GENERATOR drop sequence ");
    java.lang.String var32 = var29.getTriggerBody();
    java.lang.String var33 = var29.getColumnName();
    java.lang.String var34 = var29.getWhenClause();
    var15.addTrigger(var29);
    org.databene.jdbacl.model.DBTrigger var36 = new org.databene.jdbacl.model.DBTrigger("-1", var15);
    var36.setBaseObjectType("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    var36.setBaseObjectType("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    java.lang.String var41 = var36.getTriggeringEvent();
    var36.setTriggerBody("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    var36.setTriggerBody("select gen_id(select nextval('REGEXP_MATCHES(CREATE SEQUENCE  CACHE 100, '(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").')')-identity-select nextval for  DROP SEQUENCE (0,-1) NULL from jdbc:h2:mem:hi! as 10 on . = 10.-identity-.select next value for 10, 1) from RDB$DATABASE;");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test461");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.emitErrorMessage("CREATE SEQUENCE \"(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")\".\"NO_ACTION\"");
    var0.mCOLUMN_SPEC();
    org.databene.jdbacl.sql.parser.SQLLexer var20 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var20.mCREATE_TABLE();
    var20.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var24 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var26 = var24.LT(10);
    var20.setCharStream((org.antlr.runtime.CharStream)var24);
    int var29 = var24.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var30 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var24);
    var30.setText("select next value for SET GENERATOR.TO - 1");
    var30.setBacktrackingLevel(1);
    var30.mLE();
    var30.mT__100();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var38 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)");
    int var39 = var38.mark();
    int var40 = var38.getCharPositionInLine();
    int var41 = var38.getLine();
    var30.consumeUntil((org.antlr.runtime.IntStream)var38, 14);
    var30.traceIn("alter sequence -1 restart with 1", 1);
    var0.traceIn("CONSTRAINT \"CREATE GENERATOR drop sequence \" ", 79, (java.lang.Object)"alter sequence -1 restart with 1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test462");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.skip();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var5 = var3.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    org.databene.jdbacl.sql.parser.SQLLexer var7 = new org.databene.jdbacl.sql.parser.SQLLexer();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var9 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var9.release((-1));
    boolean var13 = var7.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var9, 0);
    var0.setCharStream((org.antlr.runtime.CharStream)var9);
    var0.setBacktrackingLevel(1);
    var0.mT__75();
    java.lang.String var19 = var0.getCharErrorDisplay(41);
    org.databene.jdbacl.identity.NkPkQueryIdentity var24 = new org.databene.jdbacl.identity.NkPkQueryIdentity("alter sequence hi! restart with 1", "\"'hi!'\" NOT REGEXP 'alter sequence NOT drop generator sequence ~ 'hi!' restart with 10'");
    var0.traceIn("NOT . ~ 'CREATE GENERATOR drop sequence '", 4, (java.lang.Object)var24);
    var0.mGE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "')'"+ "'", var19.equals("')'"));

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test463");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    java.lang.String var6 = var0.regexQuery("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", true, ".");
    java.lang.String var8 = var0.renderFetchSequenceValue("NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')");
    boolean var11 = var0.isDefaultSchema("alter sequence call next value for 'hi!' restart with 100", "CONSTRAINT \"select nextval('')\" UNIQUE (, sequence, drop generator DROP SEQUENCE catalog RESTRICT)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')"+ "'", var6.equals("NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "select NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.').nextval from dual"+ "'", var8.equals("select NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.').nextval from dual"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test464");


    org.databene.jdbacl.dialect.Firebird2_5Dialect var0 = new org.databene.jdbacl.dialect.Firebird2_5Dialect();
    java.lang.String var4 = var0.regexQuery("call next value for null[]", true, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ");
    boolean var5 = var0.supportsRegex();
    boolean var6 = var0.isSequenceBoundarySupported();
    boolean var7 = var0.supportsRegex();
    java.lang.String var11 = var0.regexQuery("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER", true, "jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")");
    boolean var12 = var0.supportsRegex();
    boolean var15 = var0.isDefaultCatalog("CONSTRAINT hi! ", "container");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"+ "'", var4.equals("call next value for null[] NOT SIMILAR TO 'drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE '"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")'"+ "'", var11.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER NOT SIMILAR TO 'jdbc:hsqldb:mem:((\"sequence\" BETWEEN \"sequence\" AND \"sequence\") BETWEEN \"sequence\" AND \"'hi!'\")'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test465");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var4 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var5 = var4.getForeignKeyConstraints();
    var1.addReferrer((org.databene.jdbacl.model.DBTable)var4);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    java.lang.String var11 = var9.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var12 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var15 = var12.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var17 = var12.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var18 = var9.equals((java.lang.Object)var17);
    org.databene.jdbacl.model.DefaultDBColumn var21 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var4, var9, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var4.addReferrer((org.databene.jdbacl.model.DBTable)var22);
    org.databene.jdbacl.model.DBSchema var29 = var22.getSchema();
    java.lang.String[] var30 = var22.getPKColumnNames();
    org.databene.jdbacl.model.DefaultDBTable var34 = new org.databene.jdbacl.model.DefaultDBTable();
    var34.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var37 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var38 = var37.getForeignKeyConstraints();
    var34.addReferrer((org.databene.jdbacl.model.DBTable)var37);
    org.databene.jdbacl.model.DBDataType var42 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var43 = var42.isAlpha();
    java.lang.String var44 = var42.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var45 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var48 = var45.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var50 = var45.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var51 = var42.equals((java.lang.Object)var50);
    org.databene.jdbacl.model.DefaultDBColumn var54 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var37, var42, (java.lang.Integer)0, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.DBDataType var55 = var54.getType();
    org.databene.jdbacl.model.DefaultDBTable var56 = new org.databene.jdbacl.model.DefaultDBTable();
    var56.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var59 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var60 = var59.getForeignKeyConstraints();
    var56.addReferrer((org.databene.jdbacl.model.DBTable)var59);
    java.lang.String[] var67 = new java.lang.String[] { ""};
    java.lang.String[] var71 = new java.lang.String[] { ""};
    java.lang.String var72 = org.databene.jdbacl.SQLUtil.join("", "", var67, "hi!", "10", var71);
    org.databene.jdbacl.model.DBUniqueConstraint var73 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var59, "select nextval('')", false, var67);
    var73.addColumnName("sequence");
    var54.addUkConstraint(var73);
    org.databene.jdbacl.model.DBUniqueIndex var77 = new org.databene.jdbacl.model.DBUniqueIndex("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", false, var73);
    var22.addIndex((org.databene.jdbacl.model.DBIndex)var77);
    org.databene.jdbacl.version.QueryVersionProvider var80 = new org.databene.jdbacl.version.QueryVersionProvider("SET GENERATOR . TO -1");
    var80.setQuery("10");
    boolean var83 = var77.equals((java.lang.Object)var80);
    var77.addColumnName("org.firebirdsql.jdbc.FBDriver");
    org.databene.jdbacl.model.DBTable var86 = var77.getTable();
    boolean var87 = var77.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "DROP SEQUENCE "+ "'", var11.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var17.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "DROP SEQUENCE "+ "'", var44.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var50.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi! as 10 on . = 10."+ "'", var72.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test466");


    org.databene.jdbacl.model.DBCatalog var2 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var3 = var2.getName();
    java.util.List var4 = var2.getComponents();
    org.databene.jdbacl.model.DBSchema var6 = var2.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var8 = var2.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var9 = var2.getName();
    org.databene.jdbacl.model.DBSchema var10 = new org.databene.jdbacl.model.DBSchema("CONSTRAINT \"hi! identity by primary key\" PRIMARY KEY ()", var2);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    java.util.List var28 = var25.getSequences(false);
    var2.removeSchema(var25);
    org.databene.jdbacl.model.DBSequence var30 = new org.databene.jdbacl.model.DBSequence("\"sequence\"", var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test467");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    var10.mIS();
    var10.mT__88();
    var10.mT__125();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test468");


    org.databene.jdbacl.model.DefaultDBTable var0 = new org.databene.jdbacl.model.DefaultDBTable();
    var0.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var3 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var4 = var3.getForeignKeyConstraints();
    var0.addReferrer((org.databene.jdbacl.model.DBTable)var3);
    java.lang.String[] var11 = new java.lang.String[] { ""};
    java.lang.String[] var15 = new java.lang.String[] { ""};
    java.lang.String var16 = org.databene.jdbacl.SQLUtil.join("", "", var11, "hi!", "10", var15);
    org.databene.jdbacl.model.DBUniqueConstraint var17 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var3, "select nextval('')", false, var11);
    java.lang.String var18 = var17.toString();
    boolean var19 = var17.isNameDeterministic();
    var17.setDoc("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var30 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "select next value for SET GENERATOR . TO -1", "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", "jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", "10", "hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", "select next value for SET GENERATOR . TO -1", false);
    var30.setSchemaName("alter sequence hi! restart with 1");
    boolean var33 = var17.equals((java.lang.Object)var30);
    org.databene.jdbacl.model.cache.CachingDBImporter var35 = new org.databene.jdbacl.model.cache.CachingDBImporter((org.databene.jdbacl.model.DBMetaDataImporter)var30, "CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).");
    var30.setCatalogName("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)");
    var30.setImportingPackages(false);
    var30.setIncludeTables("alter sequence CREATE GENERATOR drop sequence  restart with -1 DROP SEQUENCE  NULL");
    var30.setImportingSequences(false);
    var30.setImportingUKs(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi! as 10 on . = 10."+ "'", var16.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONSTRAINT \"select nextval('')\" UNIQUE ()"+ "'", var18.equals("CONSTRAINT \"select nextval('')\" UNIQUE ()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test469");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    java.lang.String var6 = var0.renderSequenceValue("CREATE SEQUENCE 10", 1L);
    java.lang.String var8 = var0.renderFetchSequenceValue("DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'");
    boolean var10 = var0.isDeterministicFKName("drop sequence CONSTRAINT \"select nextval('')\" UNIQUE (, sequence)");
    java.lang.String var13 = var0.renderSequenceValue("VALUES (NEXT VALUE FOR REGEXP_MATCHES(No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence CREATE SEQUENCE 10 restart with 1'))", 100L);
    java.lang.String var15 = var0.renderDropSequence("drop sequence Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "alter sequence CREATE SEQUENCE 10 restart with 1"+ "'", var6.equals("alter sequence CREATE SEQUENCE 10 restart with 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'"+ "'", var8.equals("call next value for DROP SEQUENCE  NOT REGEXP 'VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).)'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "alter sequence VALUES (NEXT VALUE FOR REGEXP_MATCHES(No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence CREATE SEQUENCE 10 restart with 1')) restart with 100"+ "'", var13.equals("alter sequence VALUES (NEXT VALUE FOR REGEXP_MATCHES(No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT, 'alter sequence CREATE SEQUENCE 10 restart with 1')) restart with 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "drop sequence drop sequence Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE "+ "'", var15.equals("drop sequence drop sequence Sub identity of ():\nnull-identity-VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).DROP SEQUENCE "));

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test470");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.setBacktrackingLevel(10);
    var0.mTABLE_DETAILS();
    var0.mORA_CONFIGS();
    org.databene.jdbacl.sql.parser.SQLLexer var6 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var6.mCREATE_TABLE();
    var6.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var10 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var12 = var10.LT(10);
    var6.setCharStream((org.antlr.runtime.CharStream)var10);
    int var15 = var10.LA(10);
    int var17 = var10.LT(3);
    int var18 = var10.mark();
    boolean var20 = var0.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var10, 4);
    int var22 = var10.LA(14);
    int var23 = var10.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 14);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test471");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    java.util.List var13 = var11.getPackages();
    org.databene.jdbacl.model.DBCatalog var14 = var11.getCatalog();
    var14.setName("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0-identity-NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')");
    org.databene.jdbacl.model.DBSchema var18 = var14.getSchema("null[DROP SEQUENCE ]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test472");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    org.databene.jdbacl.model.Database var2 = var0.getDatabase();
    org.databene.jdbacl.model.DBSequence var6 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var7 = var6.dropDDL();
    java.math.BigInteger var8 = var6.getMinValueIfNotDefault();
    boolean var9 = var0.isIdentical((org.databene.jdbacl.model.DBObject)var6);
    org.databene.jdbacl.model.DBTreeModel var10 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var0);
    org.databene.jdbacl.dialect.DerbyDialect var13 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var15 = var13.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var16 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var13.formatValue((java.lang.Object)var16);
    var16.setName("'hi!'");
    java.util.List var21 = var16.getSchemas();
    org.databene.jdbacl.model.DBSchema var22 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var16);
    org.databene.jdbacl.model.DefaultDBTable var23 = new org.databene.jdbacl.model.DefaultDBTable("select next value for 10", var22);
    org.databene.jdbacl.model.DBCatalog var25 = new org.databene.jdbacl.model.DBCatalog("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    int var26 = var10.getIndexOfChild((org.databene.jdbacl.model.DBObject)var23, (org.databene.jdbacl.model.DBObject)var25);
    java.util.List var27 = var25.getComponents();
    org.databene.jdbacl.model.DBTreeModel var28 = new org.databene.jdbacl.model.DBTreeModel((org.databene.jdbacl.model.CompositeDBObject)var25);
    java.lang.String var29 = var25.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "drop sequence "+ "'", var7.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var29.equals("drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test473");


    org.databene.jdbacl.model.DBCatalog var0 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var1 = var0.getName();
    java.util.List var2 = var0.getComponents();
    org.databene.jdbacl.model.DBSchema var4 = var0.getSchema("alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSchema var6 = var0.getSchema("jdbc:h2:mem:hi! as 10 on . = 10.");
    java.lang.String var7 = var0.getName();
    java.util.List var8 = var0.getSequences();
    java.util.List var9 = var0.getTables();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeTable("drop generator left join alter sequence CREATE GENERATOR drop sequence  restart with -1 as call next value for 'hi!' on jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: . = call next value for 'hi!'.DROP SEQUENCE ");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test474");


    org.databene.jdbacl.dialect.Derby10_6Dialect var0 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var3 = var0.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var5 = var0.isDeterministicUKName("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT");
    boolean var8 = var0.isDefaultSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\").", "DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test475");


    org.databene.jdbacl.JDBCConnectData var7 = new org.databene.jdbacl.JDBCConnectData("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)", "hi!", "hi!", "drop generator sequence", "'hi!'", "hi!");
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var8 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.jdbc.JDBCDBImporter var9 = new org.databene.jdbacl.model.jdbc.JDBCDBImporter(var7);
    org.databene.jdbacl.model.DBCatalog var11 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var12 = var11.getName();
    org.databene.jdbacl.model.Database var13 = var11.getDatabase();
    java.lang.String var14 = var11.getDoc();
    org.databene.jdbacl.dialect.DerbyDialect var16 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var18 = var16.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var19 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var16.formatValue((java.lang.Object)var19);
    var19.setName("'hi!'");
    java.util.List var24 = var19.getSchemas();
    org.databene.jdbacl.model.DBSchema var25 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var19);
    var11.removeSchema(var25);
    java.util.List var28 = var25.getTables(false);
    org.databene.jdbacl.model.DefaultDBTable var29 = new org.databene.jdbacl.model.DefaultDBTable("drop generator .", var25);
    org.databene.jdbacl.model.jdbc.LazyTable var32 = new org.databene.jdbacl.model.jdbc.LazyTable(var9, var25, "drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')");
    java.lang.String var33 = var32.getDoc();
    org.databene.jdbacl.model.DBSchema var34 = var32.getSchema();
    org.databene.jdbacl.model.DefaultDBTable var35 = new org.databene.jdbacl.model.DefaultDBTable("CONSTRAINT \"select nextval('')\" UNIQUE (, Sub identity of ():\nnull)", var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"+ "'", var33.equals("select nextval('CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test476");


    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var1 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.");
    org.databene.jdbacl.identity.InvalidIdentityDefinitionError var2 = new org.databene.jdbacl.identity.InvalidIdentityDefinitionError((java.lang.Throwable)var1);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test477");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var3 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    var3.setCharPositionInLine(1);
    java.lang.String var6 = var3.toString();
    var0.setCharStream((org.antlr.runtime.CharStream)var3);
    var0.mCOLUMN_SPEC();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mVARCHAR2();
      fail("Expected exception of type org.antlr.runtime.MismatchedTokenException");
    } catch (org.antlr.runtime.MismatchedTokenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "DROP SEQUENCE "+ "'", var6.equals("DROP SEQUENCE "));

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test478");


    org.databene.jdbacl.dialect.DerbyDialect var0 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var2 = var0.isDeterministicPKName("hi! as 10 on . = 10.");
    boolean var4 = var0.isDeterministicIndexName("sequence");
    boolean var6 = var0.isDeterministicFKName("10");
    boolean var9 = var0.isDefaultCatalog("CONSTRAINT \"CREATE GENERATOR drop sequence \" FOREIGN KEY () REFERENCES null(DROP SEQUENCE )", "jdbc:h2:mem:org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1: ");
    boolean var12 = var0.isDefaultSchema("select next value for jdbc:h2:mem:select next value for 10", "jdbc:hsqldb:mem:jdbc:h2:mem:hi! as 10 on . = 10.-identity-.");
    boolean var15 = var0.isDefaultCatalog("'\u0135'.NOT drop generator sequence ~ 'hi!'", "NOT drop sequence  ~ 'alter sequence  restart with -1'-identity-org.databene.jdbacl.SQLScriptException: Error in execution of script DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT line 1:  as null[DROP SEQUENCE ] on DROP SEQUENCE NOT drop generator sequence ~ 'hi!' RESTRICT identity by primary key. = null[DROP SEQUENCE ].DROP SEQUENCE ");
    boolean var17 = var0.isDeterministicFKName("No identity defined for table alter sequence drop generator sequence restart with 100");
    boolean var19 = var0.isDeterministicUKName("NOT REGEXP_MATCHES(hi! as 10 on . = 10., 'jdbc:hsqldb:mem:call next value for 'hi!' identity by primary key')");
    boolean var22 = var0.isDefaultCatalog("NaturalPkIdentity(hi!)-identity-jdbc:h2:mem:CONSTRAINT \"CREATE GENERATOR drop sequence \" ", "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test479");


    org.databene.jdbacl.JDBCDriverInfo var3 = new org.databene.jdbacl.JDBCDriverInfo("alter sequence CREATE GENERATOR drop sequence  restart with 10", "CONSTRAINT hi! UNIQUE ()", "postgres");
    java.lang.String var4 = var3.getDownloadUrl();
    org.databene.jdbacl.model.DefaultDBTable var9 = new org.databene.jdbacl.model.DefaultDBTable();
    var9.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var12 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var13 = var12.getForeignKeyConstraints();
    var9.addReferrer((org.databene.jdbacl.model.DBTable)var12);
    java.lang.String[] var20 = new java.lang.String[] { ""};
    java.lang.String[] var24 = new java.lang.String[] { ""};
    java.lang.String var25 = org.databene.jdbacl.SQLUtil.join("", "", var20, "hi!", "10", var24);
    org.databene.jdbacl.model.DBUniqueConstraint var26 = new org.databene.jdbacl.model.DBUniqueConstraint((org.databene.jdbacl.model.DBTable)var12, "select nextval('')", false, var20);
    var12.setDoc("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT");
    java.lang.String[] var31 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var32 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var31);
    org.databene.jdbacl.model.DBUniqueConstraint var33 = var12.getUniqueConstraint(var31);
    java.lang.String[] var40 = new java.lang.String[] { ""};
    java.lang.String[] var44 = new java.lang.String[] { ""};
    java.lang.String var45 = org.databene.jdbacl.SQLUtil.join("", "", var40, "hi!", "10", var44);
    java.lang.String var46 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var40);
    java.lang.String var47 = org.databene.jdbacl.SQLUtil.join("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT", "CREATE SEQUENCE 10", var31, "select next value for SET GENERATOR . TO -1", "select next value for SET GENERATOR . TO -1", var40);
    java.lang.String[] var51 = new java.lang.String[] { "NOT drop generator sequence ~ 'hi!'"};
    java.lang.String var52 = org.databene.jdbacl.SQLUtil.innerJoin("CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.", var40, "drop generator sequence", "catalog", var51);
    java.lang.String var53 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("drop generator sequence", var51);
    var3.setJars(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi! as 10 on . = 10."+ "'", var25.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var32.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi! as 10 on . = 10."+ "'", var45.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "."+ "'", var46.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."+ "'", var47.equals("DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'"+ "'", var52.equals("drop generator sequence as catalog on CREATE GENERATOR jdbc:h2:mem:hi! as 10 on . = 10.. = catalog.NOT drop generator sequence ~ 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "drop generator sequence.NOT drop generator sequence ~ 'hi!'"+ "'", var53.equals("drop generator sequence.NOT drop generator sequence ~ 'hi!'"));

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test480");


    org.databene.jdbacl.sql.parser.SQLParser.ora_partition_spec_return var0 = new org.databene.jdbacl.sql.parser.SQLParser.ora_partition_spec_return();
    java.lang.Object var1 = var0.getStart();
    java.lang.Object var2 = var0.getTree();
    java.lang.Object var3 = var0.getTree();
    java.lang.Object var4 = var0.getTree();
    java.lang.Object var5 = var0.getTree();
    java.lang.Object var6 = var0.getTree();
    java.lang.Object var7 = var0.getTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test481");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var2 = var1.getTables();
    java.util.List var4 = var1.getSequences(false);
    org.databene.jdbacl.model.DefaultDBTable var6 = new org.databene.jdbacl.model.DefaultDBTable("'E'");
    var1.addTable((org.databene.jdbacl.model.DBTable)var6);
    java.util.Collection var8 = var6.getReferrers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test482");


    org.databene.jdbacl.dialect.DerbyDialect var2 = new org.databene.jdbacl.dialect.DerbyDialect();
    boolean var4 = var2.isDeterministicIndexName(".");
    org.databene.jdbacl.model.DBCatalog var5 = new org.databene.jdbacl.model.DBCatalog();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var2.formatValue((java.lang.Object)var5);
    var5.setName("'hi!'");
    java.util.List var10 = var5.getSchemas();
    org.databene.jdbacl.model.DBSchema var11 = new org.databene.jdbacl.model.DBSchema("(\"sequence\" BETWEEN \"sequence\" AND \"sequence\")", var5);
    org.databene.jdbacl.model.DBTrigger var12 = new org.databene.jdbacl.model.DBTrigger("hi!-identity-CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT", var11);
    var12.setDescription("CREATE GENERATOR drop sequence ");
    org.databene.jdbacl.model.DefaultDBTable var16 = new org.databene.jdbacl.model.DefaultDBTable();
    var16.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var19 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var20 = var19.getForeignKeyConstraints();
    var16.addReferrer((org.databene.jdbacl.model.DBTable)var19);
    org.databene.jdbacl.model.DBDataType var24 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var25 = var24.isAlpha();
    java.lang.String var26 = var24.getName();
    org.databene.jdbacl.dialect.Derby10_6Dialect var27 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var30 = var27.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var32 = var27.renderFetchSequenceValue("hi! as 10 on . = 10.");
    boolean var33 = var24.equals((java.lang.Object)var32);
    org.databene.jdbacl.model.DefaultDBColumn var36 = new org.databene.jdbacl.model.DefaultDBColumn("jdbc:h2:mem:hi! as 10 on . = 10.-identity-.", (org.databene.jdbacl.model.DBTable)var19, var24, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean var37 = var12.isIdentical((org.databene.jdbacl.model.DBObject)var36);
    var12.setDescription("alter sequence alter sequence CREATE GENERATOR drop sequence  restart with -1 restart with 0 REGEXP 'alter sequence hi! restart with 1' ~ 'jdbc:h2:mem:select next value for 10'");
    var12.setTableName("select gen_id(CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)., 1) from RDB$DATABASE;");
    java.lang.String var42 = var12.getTriggerBody();
    var12.setActionType("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT MAXVALUE 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DROP SEQUENCE "+ "'", var26.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var32.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test483");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mLE();
    var10.mT__99();
    var10.mXOR();
    var10.mT__68();
    var10.mT__107();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test484");


    org.databene.jdbacl.identity.NkPkQueryIdentity var2 = new org.databene.jdbacl.identity.NkPkQueryIdentity("call next value for 'hi!' SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!' NULL", "VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) = \"sequence\" (select next value for 10) unique");

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test485");


    org.databene.jdbacl.JDBCDriverInfo var0 = new org.databene.jdbacl.JDBCDriverInfo();
    java.lang.String var1 = var0.getUrlPattern();
    org.databene.jdbacl.sql.ColumnExpression var5 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var8 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var9 = var8.getValue();
    org.databene.jdbacl.sql.ColumnExpression var12 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var13 = var12.getValue();
    org.databene.jdbacl.sql.BetweenExpression var14 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var5, (org.databene.script.Expression)var8, (org.databene.script.Expression)var12);
    org.databene.jdbacl.sql.ColumnExpression var17 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    org.databene.jdbacl.sql.ColumnExpression var20 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var21 = var20.getValue();
    org.databene.jdbacl.sql.ColumnExpression var24 = new org.databene.jdbacl.sql.ColumnExpression("sequence", true);
    java.lang.Object var25 = var24.getValue();
    org.databene.jdbacl.sql.BetweenExpression var26 = new org.databene.jdbacl.sql.BetweenExpression((org.databene.script.Expression)var17, (org.databene.script.Expression)var20, (org.databene.script.Expression)var24);
    var14.addTerm((org.databene.script.Expression)var20);
    org.databene.script.Expression[] var28 = new org.databene.script.Expression[] { var14};
    org.databene.jdbacl.sql.FunctionInvocation var29 = new org.databene.jdbacl.sql.FunctionInvocation("alter sequence drop sequence 10 restart with 0", var28);
    boolean var30 = var0.equals((java.lang.Object)var29);
    java.lang.String var31 = var0.getDefaultDatabase();
    java.lang.String var32 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "sequence"+ "'", var9.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "sequence"+ "'", var13.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "sequence"+ "'", var21.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "sequence"+ "'", var25.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test486");


    org.databene.jdbacl.model.DBCatalog var1 = new org.databene.jdbacl.model.DBCatalog("catalog null: interface java.sql.ResultSet");

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test487");


    org.databene.jdbacl.dialect.HSQL2Dialect var0 = new org.databene.jdbacl.dialect.HSQL2Dialect();
    java.lang.String var2 = var0.renderFetchSequenceValue("'hi!'");
    boolean var3 = var0.supportsRegex();
    boolean var5 = var0.isDeterministicUKName("SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ");
    boolean var7 = var0.isDeterministicFKName("left join VALUES (NEXT VALUE FOR CREATE SEQUENCE left join jdbc:h2:mem:hi! as 10 on . = 10.-identity-. : DROP SEQUENCE (0,-1) as drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.) on CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE . = drop generator VALUES (NEXT VALUE FOR hi! as 10 on . = 10.).) as drop sequence alter sequence hi! restart with 1 on jdbc:h2:mem:select next value for 10.select next value for 10 = drop sequence alter sequence hi! restart with 1.DROP SEQUENCE ");
    org.databene.jdbacl.dialect.FirebirdDialect var8 = new org.databene.jdbacl.dialect.FirebirdDialect();
    java.lang.String var11 = var8.renderSetSequenceValue(".", 0L);
    boolean var14 = var8.isDefaultCatalog("drop generator sequence", "alter sequence hi! restart with 1");
    org.databene.jdbacl.model.DBSequence var18 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var19 = var18.getMaxValue();
    java.lang.String var20 = var18.toString();
    org.databene.jdbacl.model.DBSequence var24 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var25 = var24.dropDDL();
    java.math.BigInteger var26 = var24.getMinValueIfNotDefault();
    java.math.BigInteger var27 = var24.getLastNumber();
    org.databene.jdbacl.model.DBSequence var31 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var31.setName("10");
    java.math.BigInteger var34 = var31.getIncrement();
    java.math.BigInteger var35 = var31.getIncrement();
    var24.setStart(var35);
    var18.setIncrement(var35);
    java.lang.String var38 = var8.renderCreateSequence(var18);
    org.databene.jdbacl.model.DBSequence var42 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var42.setName("10");
    java.math.BigInteger var45 = var42.getIncrement();
    java.math.BigInteger var46 = var42.getIncrement();
    org.databene.jdbacl.model.DBSequence var50 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var51 = var50.dropDDL();
    java.math.BigInteger var52 = var50.getMinValueIfNotDefault();
    java.math.BigInteger var53 = var50.getLastNumber();
    var42.setStart(var53);
    var18.setMinValue(var53);
    java.lang.String var56 = var0.renderCreateSequence(var18);
    java.lang.String var57 = var18.getCatalogName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "call next value for 'hi!'"+ "'", var2.equals("call next value for 'hi!'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "SET GENERATOR . TO -1"+ "'", var11.equals("SET GENERATOR . TO -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "drop sequence "+ "'", var25.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "CREATE GENERATOR "+ "'", var38.equals("CREATE GENERATOR "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "drop sequence "+ "'", var51.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "CREATE SEQUENCE  MINVALUE 0"+ "'", var56.equals("CREATE SEQUENCE  MINVALUE 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "drop sequence "+ "'", var57.equals("drop sequence "));

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test488");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable("CREATE SEQUENCE SELECT * FROM null WHERE DROP SEQUENCE  = 'hi!' : DROP SEQUENCE ");

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test489");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    java.util.Set var5 = var1.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var8 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var9 = var8.isAlpha();
    boolean var10 = var8.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var13 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var1, var8, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var18 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var19 = var18.getTables();
    org.databene.jdbacl.model.TableContainer var20 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var18);
    org.databene.jdbacl.model.DefaultDBTable var21 = new org.databene.jdbacl.model.DefaultDBTable();
    var21.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var24 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var25 = var24.getForeignKeyConstraints();
    var21.addReferrer((org.databene.jdbacl.model.DBTable)var24);
    var18.addTable((org.databene.jdbacl.model.DBTable)var24);
    java.lang.String[] var32 = new java.lang.String[] { ""};
    java.lang.String[] var36 = new java.lang.String[] { ""};
    java.lang.String var37 = org.databene.jdbacl.SQLUtil.join("", "", var32, "hi!", "10", var36);
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var32);
    org.databene.jdbacl.model.TableContainer var41 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var42 = var41.getTables();
    org.databene.jdbacl.model.TableContainer var43 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var41);
    org.databene.jdbacl.model.DefaultDBTable var44 = new org.databene.jdbacl.model.DefaultDBTable();
    var44.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var47 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var48 = var47.getForeignKeyConstraints();
    var44.addReferrer((org.databene.jdbacl.model.DBTable)var47);
    var41.addTable((org.databene.jdbacl.model.DBTable)var47);
    java.lang.String[] var53 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var54 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var53);
    org.databene.jdbacl.model.DBForeignKeyConstraint var55 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var24, var32, (org.databene.jdbacl.model.DBTable)var47, var53);
    boolean var56 = var55.isNameDeterministic();
    var1.removeForeignKeyConstraint(var55);
    org.databene.jdbacl.model.DBDataType var60 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var61 = var60.isAlpha();
    java.lang.String var62 = var60.getName();
    boolean var63 = var55.equals((java.lang.Object)var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var65 = var55.columnReferencedBy("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CYCLE CACHE 100NOORDER");
      fail("Expected exception of type org.databene.commons.ObjectNotFoundException");
    } catch (org.databene.commons.ObjectNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi! as 10 on . = 10."+ "'", var37.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "."+ "'", var38.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var54.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "DROP SEQUENCE "+ "'", var62.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test490");


    org.databene.jdbacl.model.DefaultDBTable var2 = new org.databene.jdbacl.model.DefaultDBTable();
    var2.setDoc(".");
    java.util.Set var6 = var2.getUniqueConstraints(false);
    org.databene.jdbacl.model.DBDataType var9 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var10 = var9.isAlpha();
    boolean var11 = var9.isLOB();
    org.databene.jdbacl.model.DefaultDBColumn var14 = new org.databene.jdbacl.model.DefaultDBColumn("NOT drop generator sequence ~ 'hi!'", (org.databene.jdbacl.model.DBTable)var2, var9, (java.lang.Integer)100, (java.lang.Integer)(-1));
    org.databene.jdbacl.model.TableContainer var19 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var20 = var19.getTables();
    org.databene.jdbacl.model.TableContainer var21 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var19);
    org.databene.jdbacl.model.DefaultDBTable var22 = new org.databene.jdbacl.model.DefaultDBTable();
    var22.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var25 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var26 = var25.getForeignKeyConstraints();
    var22.addReferrer((org.databene.jdbacl.model.DBTable)var25);
    var19.addTable((org.databene.jdbacl.model.DBTable)var25);
    java.lang.String[] var33 = new java.lang.String[] { ""};
    java.lang.String[] var37 = new java.lang.String[] { ""};
    java.lang.String var38 = org.databene.jdbacl.SQLUtil.join("", "", var33, "hi!", "10", var37);
    java.lang.String var39 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("", var33);
    org.databene.jdbacl.model.TableContainer var42 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var43 = var42.getTables();
    org.databene.jdbacl.model.TableContainer var44 = new org.databene.jdbacl.model.TableContainer("SET GENERATOR . TO -1", (org.databene.jdbacl.model.CompositeDBObject)var42);
    org.databene.jdbacl.model.DefaultDBTable var45 = new org.databene.jdbacl.model.DefaultDBTable();
    var45.setDoc(".");
    org.databene.jdbacl.model.DefaultDBTable var48 = new org.databene.jdbacl.model.DefaultDBTable();
    java.util.Set var49 = var48.getForeignKeyConstraints();
    var45.addReferrer((org.databene.jdbacl.model.DBTable)var48);
    var42.addTable((org.databene.jdbacl.model.DBTable)var48);
    java.lang.String[] var54 = new java.lang.String[] { "DROP SEQUENCE "};
    java.lang.String var55 = org.databene.jdbacl.SQLUtil.renderColumnListWithTableName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT", var54);
    org.databene.jdbacl.model.DBForeignKeyConstraint var56 = new org.databene.jdbacl.model.DBForeignKeyConstraint("CREATE GENERATOR drop sequence ", true, (org.databene.jdbacl.model.DBTable)var25, var33, (org.databene.jdbacl.model.DBTable)var48, var54);
    boolean var57 = var56.isNameDeterministic();
    var2.removeForeignKeyConstraint(var56);
    org.databene.jdbacl.model.DBDataType var61 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var62 = var61.isAlpha();
    java.lang.String var63 = var61.getName();
    boolean var64 = var56.equals((java.lang.Object)var63);
    java.lang.String[] var65 = var56.getColumnNames();
    java.lang.String[] var66 = var56.getForeignKeyColumnNames();
    org.databene.jdbacl.identity.UniqueKeyIdentity var67 = new org.databene.jdbacl.identity.UniqueKeyIdentity("select null.nextval from dual", var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi! as 10 on . = 10."+ "'", var38.equals("hi! as 10 on . = 10."));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "."+ "'", var39.equals("."));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "+ "'", var55.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "DROP SEQUENCE "+ "'", var63.equals("DROP SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test491");


    org.databene.jdbacl.dialect.PostgreSQLDialect var0 = new org.databene.jdbacl.dialect.PostgreSQLDialect();
    boolean var1 = var0.supportsRegex();
    java.lang.String var5 = var0.regexQuery("SELECT * FROM null WHERE  = ''", true, "alter sequence select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual restart with 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "NOT SELECT * FROM null WHERE  = '' ~ 'alter sequence select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual restart with 10'"+ "'", var5.equals("NOT SELECT * FROM null WHERE  = '' ~ 'alter sequence select CREATE SEQUENCE \"(\" sequence \" BETWEEN \" sequence \" AND \" sequence \")\".\"NO_ACTION\".nextval from dual restart with 10'"));

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test492");


    org.databene.jdbacl.model.TableContainer var1 = new org.databene.jdbacl.model.TableContainer("");
    java.util.List var2 = var1.getTables();
    org.databene.jdbacl.model.DBTable var4 = var1.getTable("VALUES (NEXT VALUE FOR call next value for 'hi!') SIMILAR TO 'alter sequence CREATE GENERATOR drop sequence  restart with -1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test493");


    org.databene.jdbacl.dialect.OracleDialect var0 = new org.databene.jdbacl.dialect.OracleDialect();
    boolean var2 = var0.isDeterministicUKName("alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1");
    java.lang.String var6 = var0.regexQuery("SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2", true, ".");
    boolean var8 = var0.isDeterministicPKName("No identity defined for table DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT");
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var12.setCache((java.lang.Long)100L);
    java.lang.String var15 = var12.getObjectType();
    java.math.BigInteger var16 = var12.getIncrementIfNotDefault();
    org.databene.jdbacl.model.DBSequence var20 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var20.setName("10");
    java.math.BigInteger var23 = var20.getIncrement();
    java.math.BigInteger var24 = var20.getIncrement();
    var12.setLastNumber(var24);
    java.lang.String var26 = var0.renderCreateSequence(var12);
    boolean var28 = var0.isDeterministicUKName("CREATE SEQUENCE call next value for 'hi!'");
    java.lang.String var30 = var0.renderFetchSequenceValue("  REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'");
    java.lang.String var32 = var0.renderFetchSequenceValue("null");
    java.lang.String var36 = var0.regexQuery("CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1.", false, "SET GENERATOR NOT drop sequence  ~ 'alter sequence  restart with -1' TO 99");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')"+ "'", var6.equals("NOT REGEXP_LIKE(SET GENERATOR alter sequence CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT restart with 1 TO -2, '.')"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "sequence"+ "'", var15.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100"+ "'", var26.equals("CREATE SEQUENCE \"hi! as 10 on . = 10.\".\"\" CACHE 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "select   REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'.nextval from dual"+ "'", var30.equals("select   REGEXP 'VALUES (NEXT VALUE FOR SET GENERATOR Sub identity of ():\nnull TO -1)'.nextval from dual"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "select null.nextval from dual"+ "'", var32.equals("select null.nextval from dual"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "REGEXP_LIKE(CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1., 'SET GENERATOR NOT drop sequence  ~ 'alter sequence  restart with -1' TO 99')"+ "'", var36.equals("REGEXP_LIKE(CREATE GENERATOR DROP SEQUENCE jdbc:h2:mem:hi! as 10 on . = 10. RESTRICT join select next value for SET GENERATOR . TO -1 as select next value for SET GENERATOR . TO -1 on CREATE SEQUENCE 10.DROP SEQUENCE  = select next value for SET GENERATOR . TO -1., 'SET GENERATOR NOT drop sequence  ~ 'alter sequence  restart with -1' TO 99')"));

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test494");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    var10.setText("select next value for SET GENERATOR.TO - 1");
    var10.setBacktrackingLevel(1);
    var10.mT__92();
    var10.mDROP_TABLE();
    var10.mT__124();
    var10.mDROP_TABLE();
    int var19 = var10.getBacktrackingLevel();
    var10.mT__119();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test495");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var2 = var0.isDeterministicPKName("10");
    boolean var4 = var0.isDeterministicFKName("sequence 10 ~ 'REGEXP_MATCHES(catalog, 'call next value for null[]')'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test496");


    org.databene.jdbacl.model.DefaultDBTable var1 = new org.databene.jdbacl.model.DefaultDBTable();
    var1.setDoc(".");
    org.databene.jdbacl.model.DBDataType var6 = org.databene.jdbacl.model.DBDataType.getInstance(1, "drop sequence ");
    boolean var7 = var6.isTemporal();
    boolean var8 = var6.isTemporal();
    org.databene.jdbacl.model.DefaultDBColumn var11 = new org.databene.jdbacl.model.DefaultDBColumn("drop generator CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT.DROP SEQUENCE ", (org.databene.jdbacl.model.DBTable)var1, var6, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean var12 = var6.isTemporal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test497");


    org.databene.jdbacl.sql.parser.SQLLexer var0 = new org.databene.jdbacl.sql.parser.SQLLexer();
    var0.mCREATE_TABLE();
    var0.mNAME_LIST();
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var4 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var6 = var4.LT(10);
    var0.setCharStream((org.antlr.runtime.CharStream)var4);
    int var9 = var4.LA(10);
    org.databene.jdbacl.sql.parser.SQLLexer var10 = new org.databene.jdbacl.sql.parser.SQLLexer((org.antlr.runtime.CharStream)var4);
    org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream var12 = new org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream("DROP SEQUENCE ");
    int var14 = var12.LT(10);
    boolean var16 = var10.mismatchIsUnwantedToken((org.antlr.runtime.IntStream)var12, 69);
    int var17 = var12.size();
    java.lang.String var18 = var12.getSourceName();
    int var19 = var12.index();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test498");


    org.databene.jdbacl.model.DBSequence var3 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.lang.String var4 = var3.dropDDL();
    java.math.BigInteger var5 = var3.getIncrementIfNotDefault();
    java.math.BigInteger var6 = var3.getMinValue();
    java.math.BigInteger var7 = var3.getMinValue();
    java.math.BigInteger var8 = var3.getStartIfNotDefault();
    org.databene.jdbacl.model.DBSequence var12 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    java.math.BigInteger var13 = var12.getMaxValue();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.dropDDL();
    java.lang.Boolean var16 = var12.isOrder();
    org.databene.jdbacl.model.DBSequence var20 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var20.setName("10");
    java.math.BigInteger var23 = var20.getIncrement();
    java.math.BigInteger var24 = var20.getIncrement();
    var12.setStart(var24);
    var3.setStart(var24);
    var3.setCache((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "drop sequence "+ "'", var4.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "drop sequence "+ "'", var15.equals("drop sequence "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test500");


    org.databene.jdbacl.dialect.SqlServerDialect var0 = new org.databene.jdbacl.dialect.SqlServerDialect();
    boolean var3 = var0.isDefaultSchema("hi! identity by primary key", "sequence");
    org.databene.jdbacl.dialect.Derby10_6Dialect var4 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var7 = var4.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    boolean var9 = var4.isDeterministicIndexName("select nextval('')");
    org.databene.jdbacl.model.DBSequence var13 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var13.setCache((java.lang.Long)100L);
    java.lang.String var16 = var13.getObjectType();
    java.lang.String var17 = var4.renderCreateSequence(var13);
    java.math.BigInteger var18 = var13.getMaxValueIfNotDefault();
    org.databene.jdbacl.dialect.Derby10_6Dialect var19 = new org.databene.jdbacl.dialect.Derby10_6Dialect();
    boolean var22 = var19.isDefaultCatalog("jdbc:h2:mem:hi! as 10 on . = 10.", "SET GENERATOR . TO -1");
    java.lang.String var24 = var19.renderFetchSequenceValue("hi! as 10 on . = 10.");
    org.databene.jdbacl.model.DBSequence var28 = new org.databene.jdbacl.model.DBSequence("", "drop sequence ", "hi! as 10 on . = 10.");
    var28.setName("10");
    java.math.BigInteger var31 = var28.getIncrement();
    java.math.BigInteger var32 = var28.getIncrement();
    java.lang.String var33 = var19.renderCreateSequence(var28);
    boolean var34 = var13.equals((java.lang.Object)var33);
    java.lang.String var35 = var0.renderCreateSequence(var13);
    boolean var37 = var0.isDeterministicUKName("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence, SELECT NEXT VALUE FOR SET GENERATOR.TO - 1 NOT REGEXP 'HI!') unique");
    boolean var39 = var0.isDeterministicIndexName("select CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT (, sequence) unique.nextval from dual");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "sequence"+ "'", var16.equals("sequence"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"+ "'", var17.equals("CREATE SEQUENCE hi! as 10 on . = 10.. AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"+ "'", var24.equals("VALUES (NEXT VALUE FOR hi! as 10 on . = 10.)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"+ "'", var33.equals("CREATE SEQUENCE hi! as 10 on . = 10..10 AS BIGINT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "CREATE SEQUENCE "+ "'", var35.equals("CREATE SEQUENCE "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

}
