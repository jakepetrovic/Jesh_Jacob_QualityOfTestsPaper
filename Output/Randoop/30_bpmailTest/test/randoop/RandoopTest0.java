package randoop;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var3 = var0.getNestedComponent(",");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    var0.endPageRender();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var4 = var0.getComponent("");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var3.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var7 = var3.getMessagesFromFolder("Dummy EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var7, "", "Dummy EmailFacade Impl");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test4");


    ch.bluepenguin.email.aop.FormatterMethodAdvice var0 = new ch.bluepenguin.email.aop.FormatterMethodAdvice();

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var15 = var8.getNestedComponent("Dummy EmailFacade Impl");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var3 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var4 = var3.getSeparator();
    java.util.Locale var5 = var3.getMyLocale();
    var0.setLocale(var5);
    org.apache.tapestry.engine.IScriptSource var7 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ","+ "'", var4.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test7");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    int var4 = var1.getDepth();
    var1.setIndex(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test8");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    java.lang.String var2 = var0.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var5 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var5.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var9 = var5.getMessagesFromFolder("Dummy EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var9, "hi!", "");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var8 = var3.getNestedComponent("Dummy EmailFacade Impl");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    var15.addComponent((org.apache.tapestry.IComponent)var18);
    var8.addBody((org.apache.tapestry.IRender)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var24 = var18.getNestedComponent("");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    var3.setId("(0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var11 = var3.getNestedComponent("(0) null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test14");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var3.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var6 = var3.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var7 = var3.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var7, "Default EmailFacade Impl", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    var15.addComponent((org.apache.tapestry.IComponent)var18);
    var8.addBody((org.apache.tapestry.IRender)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var24 = var18.getNestedComponent("hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test16");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var2 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var2.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var5 = var2.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var6 = var2.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var6, "Default EmailFacade Impl", "Default EmailFacade Impl");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    var0.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test18");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var4 = var0.getNestedComponent("hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    org.apache.tapestry.listener.ListenerMap var6 = var0.getListeners();
    org.apache.tapestry.listener.ListenerMap var7 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test20");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var3.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var6 = var3.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var7 = var3.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var7, "(0) null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var7 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var7.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var10 = var7.getMyLocale();
    var3.setLocale(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var13 = var3.getComponent("hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var3 = var0.getPropertySource();
    java.lang.Object var4 = var0.getGlobal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test23");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    var1.setName(",");
    var1.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test24");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var3.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage var3 = new ch.bluepenguin.email.client.MailMessage();
    var3.setBcc("Dummy EmailFacade Impl");
    var3.setTechnicalID(100);
    java.lang.String var8 = var3.getReplyTo();
    java.lang.String[] var10 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var3.setCc(var10);
    var3.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var3.getUniqueID();
    java.lang.String[] var15 = var3.getTo();
    ch.bluepenguin.email.client.MailMessage[] var16 = new ch.bluepenguin.email.client.MailMessage[] { var3};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var16, "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", "Default EmailFacade Impl");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test26");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var15 = var8.getComponent("hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Folder var7 = var0.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test28");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    var25.addComponent((org.apache.tapestry.IComponent)var28);
    java.lang.String var32 = var25.getIdPath();
    org.apache.tapestry.ILocation var33 = var25.getLocation();
    org.apache.tapestry.IEngine var34 = var25.getEngine();
    var25.beginPageRender();
    var23.setComponent((org.apache.tapestry.IComponent)var25);
    org.apache.tapestry.IRender[] var37 = var25.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setId("(0) null\n   (0) null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getVisit();
    org.apache.tapestry.engine.IComponentClassEnhancer var3 = var0.getComponentClassEnhancer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var0.setHyperlink("Default EmailFacade Impl");

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    org.apache.tapestry.engine.ITemplateSource var4 = var0.getTemplateSource();
    boolean var5 = var0.isDirty();
    var0.forgetPage("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isDirty();
    java.lang.String var4 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    java.lang.String var5 = var0.getName();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var7 = var6.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var7, "(0) null\n   (0) null", "(0) null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Dummy EmailFacade Impl"+ "'", var5.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var4 = var3.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var5 = var3.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var5, "Default EmailFacade Impl", "(0) null\n   (0) null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var3 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var3.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var3.reportException("", (java.lang.Throwable)var7);
    var0.reportException("hi!", (java.lang.Throwable)var7);
    org.apache.tapestry.engine.IPageSource var10 = var0.getPageSource();
    boolean var11 = var0.isDirty();
    org.apache.tapestry.engine.ITemplateSource var12 = var0.getTemplateSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var4 = var3.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var5 = var3.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var5, "Default EmailFacade Impl", "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var27 = var26.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    java.lang.String var29 = var26.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var30 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    java.util.Iterator var31 = var0.getMenuItemsDepthFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    var0.beginPageRender();
    org.apache.tapestry.ILocation var11 = var0.getLocation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var13 = var0.getComponent(",");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.engine.IPageSource var6 = var0.getPageSource();
    java.lang.String var7 = var0.toString();
    org.apache.tapestry.util.pool.Pool var8 = var0.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var7 = var6.getSpecification();
    java.lang.Object var8 = var6.getGlobal();
    java.lang.Object var9 = var6.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    var13.setText("hi!");
    var11.setContained((java.lang.Object)var13);
    var6.setVisit((java.lang.Object)var13);
    ch.bluepenguin.email.client.service.EmailFacadeException var23 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var6.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var23);
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", (java.lang.Throwable)var23);
    java.lang.Exception var26 = var23.getTechnicalException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var27 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var28 = var27.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var31 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var27.reportException("", (java.lang.Throwable)var31);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var34 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var35 = var34.getSuppressed();
    var31.addSuppressed((java.lang.Throwable)var34);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var38 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var39 = var38.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var40 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var41 = var40.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var43 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var44 = var43.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var47 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var43.reportException("", (java.lang.Throwable)var47);
    var40.reportException("hi!", (java.lang.Throwable)var47);
    var38.addSuppressed((java.lang.Throwable)var47);
    var31.addSuppressed((java.lang.Throwable)var47);
    var23.setTechnicalException((java.lang.Exception)var31);
    java.lang.Throwable[] var53 = var31.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    org.apache.tapestry.util.io.DataSqueezer var6 = var0.createDataSqueezer();
    java.lang.String var7 = var0.getServletPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var0.getUniqueID();
    var6.setId((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var7 = var6.getName();
    ch.bluepenguin.email.client.Folder var8 = var6.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var10 = var6.getMessagesFromFolder("Dummy EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var10, "Default EmailFacade Impl", "Dummy EmailFacade Impl");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Dummy EmailFacade Impl"+ "'", var7.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.getChildren();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    boolean var17 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    boolean var18 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var9.getParent();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    boolean var23 = var21.equals((java.lang.Object)(short)(-1));
    java.util.Collection var24 = var21.children();
    boolean var25 = var9.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var21);
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    var27.setFolder(var28);
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    var30.setFullName("hi!");
    var28.setParent(var30);
    ch.bluepenguin.email.client.Folder var35 = var30.getParent();
    var21.setFolder(var30);
    ch.bluepenguin.email.client.Account var37 = var30.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    var0.setState((java.lang.Integer)100, true);
    boolean var6 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    java.lang.Object var3 = var1.getContained();
    var1.setLeaf(true);
    int var6 = var1.getIndex();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var7 = var1.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 10.0f+ "'", var3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var8 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var8.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var12 = var8.getMessagesFromFolder("Dummy EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.copyMessages(var12, "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ", "(0) null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var2 = var1.getRenderer();
    var1.setName("Dummy EmailFacade Impl");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    java.util.Date var24 = var0.getSentDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    org.apache.tapestry.listener.ListenerMap var6 = var0.getListeners();
    org.apache.tapestry.util.pool.Pool var7 = var0.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var12.getUniqueID();
    var5.setAccount(var12);
    ch.bluepenguin.email.client.Person var15 = var12.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var12.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var12.getUniqueID();
    java.lang.Integer var18 = var17.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    org.apache.tapestry.INamespace var8 = var5.getNamespace();
    org.apache.tapestry.IPage var9 = var5.getPage();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var11 = var5.getComponent("");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    java.lang.String[] var12 = var0.getTo();
    java.lang.String var13 = var0.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    var0.setBcc(",");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var7 = var6.getName();
    ch.bluepenguin.email.client.Folder var8 = var6.getCurrentFolder();
    java.lang.Integer var9 = var8.getParentFolderId();
    var0.setFolder(var8);
    java.lang.String var11 = var8.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Dummy EmailFacade Impl"+ "'", var7.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Current Folder"+ "'", var11.equals("Current Folder"));

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var3.getUniqueID();
    var6.setId((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.setPageName("Dummy EmailFacade Impl");
    var0.setId("(0) null\n   (0) null");
    java.lang.String var5 = var0.getId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setId(",");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null\n   (0) null"+ "'", var5.equals("(0) null\n   (0) null"));

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var15 = var12.getFolder();
    int var16 = var12.getChildCount();
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    boolean var18 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    boolean var22 = var20.equals((java.lang.Object)(short)(-1));
    java.util.Collection var23 = var20.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var24 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var25 = var24.getBody();
    int var26 = var24.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    var24.addComponent((org.apache.tapestry.IComponent)var27);
    java.util.Map var31 = var27.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var32 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var32.forgetPage("");
    org.apache.tapestry.engine.IPageSource var35 = var32.getPageSource();
    org.apache.tapestry.engine.IPropertySource var36 = var32.getPropertySource();
    java.util.Collection var37 = var32.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var38 = var32.getComponentMessagesSource();
    var27.attach((org.apache.tapestry.IEngine)var32);
    boolean var40 = var20.equals((java.lang.Object)var32);
    ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper var41 = new ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper();
    boolean var42 = var20.equals((java.lang.Object)var41);
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var20);
    var20.removeFromParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var1 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var2 = var1.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var8 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var4.reportException("", (java.lang.Throwable)var8);
    var1.reportException("hi!", (java.lang.Throwable)var8);
    var0.setTechnicalException((java.lang.Exception)var8);
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var13 = var12.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var12.reportException("", (java.lang.Throwable)var16);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var16.addSuppressed((java.lang.Throwable)var19);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var23 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var26 = var25.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var28 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var29 = var28.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var32 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var28.reportException("", (java.lang.Throwable)var32);
    var25.reportException("hi!", (java.lang.Throwable)var32);
    var23.addSuppressed((java.lang.Throwable)var32);
    var16.addSuppressed((java.lang.Throwable)var32);
    var0.setTechnicalException((java.lang.Exception)var32);
    java.lang.Throwable[] var38 = var32.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var8.setStyleClass("Default EmailFacade Impl");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var18 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var19 = var18.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var20 = var18.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var22 = var18.getMessagesFromFolder("(0) null\n   (0) null");
    var8.setParameters((java.lang.Object[])var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.moveMessages(var22, "Current Folder", "Default EmailFacade Impl");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    var3.setId("(0) null");
    var3.beginPageRender();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var12 = var3.getNestedComponent("");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var3 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var2);
    var2.setParentFolderId((java.lang.Integer)1);
    var2.setParentFolderId((java.lang.Integer)0);
    var0.setParent(var2);
    var2.setName("(0) null");
    ch.bluepenguin.email.client.Folder var11 = var2.getParent();
    java.lang.String var12 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0) null"+ "'", var12.equals("(0) null"));

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var2 = var1.getRenderer();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    int var4 = var3.getChildrenSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    org.apache.tapestry.engine.IComponentClassEnhancer var22 = var13.getComponentClassEnhancer();
    var13.forgetPage(",");
    org.apache.tapestry.asset.ResourceChecksumSource var25 = var13.getResourceChecksumSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("");
    java.lang.String var3 = var0.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var4.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var7 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var7.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var15 = var10.getSentDate();
    ch.bluepenguin.email.client.MailMessage var16 = new ch.bluepenguin.email.client.MailMessage();
    var16.setBcc("Dummy EmailFacade Impl");
    var16.setTechnicalID(100);
    java.lang.String var21 = var16.getReplyTo();
    java.lang.String[] var23 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var16.setCc(var23);
    java.lang.String[] var26 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var16.setBcc(var26);
    var10.setCc(var26);
    java.lang.String var29 = var7.returnStringList(var26);
    java.lang.String[] var31 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var32 = var7.returnStringList(var31);
    java.lang.String var33 = var4.returnStringList(var31);
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    var34.setBcc("Dummy EmailFacade Impl");
    var34.setTechnicalID(100);
    var34.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var41 = new ch.bluepenguin.email.client.MailMessage();
    var41.setBcc("Dummy EmailFacade Impl");
    var41.setTechnicalID(100);
    java.lang.String var46 = var41.getReplyTo();
    java.lang.String[] var48 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var41.setCc(var48);
    var34.setBcc(var48);
    ch.bluepenguin.email.client.MailMessage var51 = new ch.bluepenguin.email.client.MailMessage();
    var51.setBcc("Dummy EmailFacade Impl");
    java.lang.String var54 = var51.getReplyTo();
    var51.setBcc(",");
    var34.copyTo((org.springframework.mail.MailMessage)var51);
    java.lang.String var58 = var34.getReplyTo();
    java.lang.String[] var59 = var34.getBcc();
    java.lang.String var60 = var4.returnStringList(var59);
    java.lang.String var61 = var0.returnStringList(var59);
    var0.setSeparator("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Dummy EmailFacade Impl"+ "'", var29.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var32.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var33.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var60.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var61.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    var6.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    ch.bluepenguin.email.client.tapestry.SpringEngine var7 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var7.forgetPage("");
    org.apache.tapestry.engine.IPageSource var10 = var7.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var11 = var7.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var12 = new ch.bluepenguin.email.client.Person();
    java.lang.String var13 = var12.getFirstname();
    var12.setLastname("(0) null");
    var12.setLastname("");
    var7.setVisit((java.lang.Object)var12);
    var0.setPerson(var12);
    java.lang.String var20 = var12.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.engine.IPageSource var6 = var0.getPageSource();
    boolean var7 = var0.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var3 = var0.getAllMessages();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var5 = var4.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var7.setIndex(10);
    var7.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var14 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var15 = var14.getSuppressed();
    var12.setParameters((java.lang.Object[])var15);
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    var12.setComponent((org.apache.tapestry.IComponent)var17);
    var4.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var12);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var22 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var23 = var22.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var22);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var25 = var24.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var26 = var24.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var27 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var4.addMenuItem(var26, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var27);
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    int var31 = var29.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    int var34 = var32.getBodyCount();
    var29.addComponent((org.apache.tapestry.IComponent)var32);
    java.lang.String var36 = var29.getIdPath();
    org.apache.tapestry.ILocation var37 = var29.getLocation();
    org.apache.tapestry.IEngine var38 = var29.getEngine();
    var29.beginPageRender();
    var27.setComponent((org.apache.tapestry.IComponent)var29);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var41 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var43 = var41.getMessagesFromFolder(",");
    var27.setParameters((java.lang.Object[])var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var43, "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null", "hi!");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var5 = var4.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var2.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.Object var8 = var4.getParent();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var11.setParent(var13);
    var4.setContained((java.lang.Object)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var4.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    boolean var22 = var4.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var4.setLeaf(false);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.Object var8 = var4.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    var1.setId((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var0.getUniqueID();
    var0.setFrom("(0) null");
    var0.setCc("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    java.lang.String var5 = var0.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Dummy EmailFacade Impl"+ "'", var5.equals("Dummy EmailFacade Impl"));

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    var0.setCc("(0) null");
    var0.setCc("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var22 = var17.getSentDate();
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    var23.setBcc("Dummy EmailFacade Impl");
    var23.setTechnicalID(100);
    java.lang.String var28 = var23.getReplyTo();
    java.lang.String[] var30 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var23.setCc(var30);
    java.lang.String[] var33 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var23.setBcc(var33);
    var17.setCc(var33);
    java.lang.String var36 = var14.returnStringList(var33);
    var0.setBcc(var33);
    var0.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    java.lang.String var10 = var2.getFullName();
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var2.getUniqueID();
    var11.setId((java.lang.Integer)0);
    java.lang.Integer var14 = var11.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var4 = var3.getMenuItem();
    int var5 = var3.getChildrenSize();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var8 = var7.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    java.util.Iterator var10 = var9.getChildrenIterator();
    var3.addChild(var9);
    int var12 = var3.getChildrenSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    ch.bluepenguin.email.client.AbstractUniqueID var0 = new ch.bluepenguin.email.client.AbstractUniqueID();
    var0.setId((java.lang.Integer)(-1));

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var35 = var32.getParent();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var39 = var37.equals((java.lang.Object)(short)(-1));
    java.util.Collection var40 = var37.getChildren();
    boolean var41 = var32.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var37);
    java.util.Collection var42 = var32.getChildren();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    org.apache.tapestry.contrib.tree.model.ITreeNode var44 = var1.getParent();
    ch.bluepenguin.email.client.Folder var45 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var46 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var47 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var46);
    boolean var49 = var47.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var50 = var47.getFolder();
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    boolean var53 = var52.isLeaf();
    var47.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var52);
    ch.bluepenguin.email.client.Folder var55 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var56 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var55);
    ch.bluepenguin.email.client.Folder var57 = new ch.bluepenguin.email.client.Folder();
    var56.setFolder(var57);
    ch.bluepenguin.email.client.Folder var59 = var56.getFolder();
    java.util.Collection var60 = var56.getChildren();
    var47.insert(var60);
    int var62 = var47.getChildCount();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var47);
    ch.bluepenguin.email.client.Folder var64 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var65 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var64);
    boolean var67 = var65.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var68 = var65.getFolder();
    var47.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    int var8 = var3.getBodyCount();
    java.util.Map var9 = var3.getAssets();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    var10.beginPageRender();
    java.util.Collection var12 = var10.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var13 = var10.getListeners();
    java.lang.String var14 = var10.getPageName();
    var3.setPage((org.apache.tapestry.IPage)var10);
    var10.setPageName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var19 = var10.getNestedComponent("Dummy EmailFacade Impl");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var6 = var0.getMessagesFromFolder("hi!");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var7 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var8 = var7.getName();
    ch.bluepenguin.email.client.MailMessage[] var9 = var7.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var9, "", "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Dummy EmailFacade Impl"+ "'", var8.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    java.lang.String var4 = var0.getName();
    var0.setParentFolderId((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage var4 = new ch.bluepenguin.email.client.MailMessage();
    var4.setBcc("Dummy EmailFacade Impl");
    var4.setTechnicalID(100);
    java.lang.String var9 = var4.getReplyTo();
    java.lang.String[] var11 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var4.setCc(var11);
    var4.setBcc("Dummy EmailFacade Impl");
    var4.setSubject("hi!");
    java.lang.String[] var17 = var4.getTo();
    ch.bluepenguin.email.client.MailMessage[] var18 = new ch.bluepenguin.email.client.MailMessage[] { var4};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var18, "Default EmailFacade Impl", "");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var16.addComponent((org.apache.tapestry.IComponent)var19);
    java.util.Map var23 = var19.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var24.forgetPage("");
    org.apache.tapestry.engine.IPageSource var27 = var24.getPageSource();
    org.apache.tapestry.engine.IPropertySource var28 = var24.getPropertySource();
    java.util.Collection var29 = var24.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var30 = var24.getComponentMessagesSource();
    var19.attach((org.apache.tapestry.IEngine)var24);
    boolean var32 = var12.equals((java.lang.Object)var24);
    org.apache.tapestry.engine.IComponentClassEnhancer var33 = var24.getComponentClassEnhancer();
    var5.attach((org.apache.tapestry.IEngine)var24);
    var5.beginPageRender();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var37 = var5.getComponent(",");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    java.lang.String var2 = var0.getName();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var3.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var7 = var3.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var9 = var3.getMessagesFromFolder("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var9, ",", "Dummy EmailFacade Impl");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Dummy EmailFacade Impl"+ "'", var2.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var3 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var3.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var6 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var6.setText("Dummy EmailFacade Impl");
    var6.setText(",");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var6);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var3);
    var3.setText("Default EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var16 = var15.displayMenuStructure();
    java.util.Iterator var17 = var15.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var21 = var20.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var22 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    var18.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = var15.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var20.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var3.setElement("Dummy EmailFacade Impl");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    var15.setBcc("Dummy EmailFacade Impl");
    java.lang.String var18 = var15.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var19 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var19.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var22 = var19.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var23 = var19.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    var24.setParentFolderId((java.lang.Integer)1);
    var24.setFullName("hi!");
    var23.setParent(var24);
    var15.setFolder(var24);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    var10.setFolder(var24);
    var24.setParentFolderId((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Account var24 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var25 = var24.getUniqueID();
    var17.setAccount(var24);
    ch.bluepenguin.email.client.Person var27 = var24.getPerson();
    var5.setAccount(var24);
    ch.bluepenguin.email.client.AbstractUniqueID var29 = var24.getUniqueID();
    var29.setId((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    java.lang.Integer var2 = var0.getParentFolderId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var5 = new ch.bluepenguin.email.client.Person();
    java.lang.String var6 = var5.getFirstname();
    var5.setLastname("(0) null");
    var5.setLastname("");
    var0.setVisit((java.lang.Object)var5);
    boolean var12 = var0.isResetServiceEnabled();
    var0.forgetPage("hi!");
    org.apache.tapestry.util.io.DataSqueezer var15 = var0.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    var0.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    var8.addComponent((org.apache.tapestry.IComponent)var11);
    java.util.Map var15 = var11.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    org.apache.tapestry.engine.IPropertySource var20 = var16.getPropertySource();
    java.util.Collection var21 = var16.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var22 = var16.getComponentMessagesSource();
    var11.attach((org.apache.tapestry.IEngine)var16);
    var0.addBody((org.apache.tapestry.IRender)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var26 = var11.getNestedComponent("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.event.ChangeObserver var6 = var0.getChangeObserver();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var8 = var0.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var10 = var9.getUniqueID();
    var9.setName("");
    ch.bluepenguin.email.client.Account var13 = var9.getAccount();
    ch.bluepenguin.email.client.Account var14 = var9.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    java.util.Date var2 = var0.getSentDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.getChildren();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    boolean var17 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    boolean var18 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var9.getParent();
    int var20 = var9.getChildCount();
    boolean var21 = var9.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.engine.IPropertySource var6 = var0.getPropertySource();
    java.lang.String var7 = var0.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Exception var1 = var0.getTechnicalException();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setCc("hi!");
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    java.util.Collection var12 = var9.children();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var13.setFullName("Dummy EmailFacade Impl");
    var9.setFolder(var13);
    ch.bluepenguin.email.client.Account var20 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var21 = var20.getUniqueID();
    var13.setAccount(var20);
    boolean var23 = var5.equals((java.lang.Object)var20);
    boolean var24 = var0.equals((java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var13 = var4.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    java.lang.Integer var4 = var0.getParentFolderId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + 1+ "'", var4.equals(1));

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    boolean var1 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    java.lang.String var6 = var3.getReserve();
    var3.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var9 = var3.getFirstname();
    var3.setNickname("Current Folder");
    java.lang.String var12 = var3.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    var7.setText("hi!");
    var5.setContained((java.lang.Object)var7);
    var0.setVisit((java.lang.Object)var7);
    ch.bluepenguin.email.client.service.EmailFacadeException var17 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var17);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var19 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var19.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var23 = new java.lang.String[] { "(0) null"};
    java.lang.String var24 = var19.returnStringList(var23);
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var25.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var28 = var25.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var29 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var29.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var32 = var29.getMyLocale();
    var25.setLocale(var32);
    var19.setMyLocale(var32);
    var0.setLocale(var32);
    org.apache.tapestry.engine.IPageSource var36 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    var40.beginPageRender();
    java.util.Collection var42 = var40.getBindingNames();
    var37.setPage((org.apache.tapestry.IPage)var40);
    org.apache.tapestry.listener.ListenerMap var44 = var40.getListeners();
    int var45 = var40.getBodyCount();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var46 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var47 = var46.getSeparator();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    var48.addComponent((org.apache.tapestry.IComponent)var51);
    java.lang.String var55 = var48.getIdPath();
    org.apache.tapestry.ILocation var56 = var48.getLocation();
    org.apache.tapestry.IEngine var57 = var48.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var58 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var58.setSeparator("");
    java.util.Locale var61 = var58.getMyLocale();
    var48.setLocale(var61);
    var46.setMyLocale(var61);
    var40.setLocale(var61);
    var0.setLocale(var61);
    org.apache.tapestry.util.io.DataSqueezer var66 = var0.createDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0) null"+ "'", var24.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ","+ "'", var47.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.asset.ResourceChecksumSource var4 = var0.getResourceChecksumSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    org.apache.tapestry.IAsset var9 = var3.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var10 = var3.toString();
    org.apache.tapestry.IEngine var11 = var3.getEngine();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var13 = var3.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.lang.String var2 = var0.toString();
    java.util.Collection var3 = var0.getBindingNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    java.util.Collection var5 = var0.getActivePageNames();
    org.apache.tapestry.engine.IComponentClassEnhancer var6 = var0.getComponentClassEnhancer();
    java.util.Locale var7 = var0.getLocale();
    java.lang.String var8 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    java.lang.Object var3 = var1.getContained();
    int var4 = var1.getIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 10.0f+ "'", var3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var1 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var2 = var1.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var8 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var4.reportException("", (java.lang.Throwable)var8);
    var1.reportException("hi!", (java.lang.Throwable)var8);
    var0.setTechnicalException((java.lang.Exception)var8);
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var13 = var12.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var12.reportException("", (java.lang.Throwable)var16);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var16.addSuppressed((java.lang.Throwable)var19);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var23 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var26 = var25.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var28 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var29 = var28.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var32 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var28.reportException("", (java.lang.Throwable)var32);
    var25.reportException("hi!", (java.lang.Throwable)var32);
    var23.addSuppressed((java.lang.Throwable)var32);
    var16.addSuppressed((java.lang.Throwable)var32);
    var0.setTechnicalException((java.lang.Exception)var32);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var39 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var41 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var42 = var41.getSuppressed();
    java.lang.Throwable[] var43 = var41.getSuppressed();
    var39.addSuppressed((java.lang.Throwable)var41);
    var0.setTechnicalException((java.lang.Exception)var39);
    java.lang.Exception var46 = var0.getTechnicalException();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var48 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("(0) null\n   (0) null");
    var0.setTechnicalException((java.lang.Exception)var48);
    java.lang.String var50 = var48.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null"+ "'", var50.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null"));

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var3 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var3.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var6 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var6.setText("Dummy EmailFacade Impl");
    var6.setText(",");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var6);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var3);
    var3.setText("Default EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var16 = var15.displayMenuStructure();
    java.util.Iterator var17 = var15.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var21 = var20.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var22 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    var18.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = var15.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var20.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var31 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var30);
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    var30.setStyleClass("(0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.ISpecificationSource var1 = var0.getSpecificationSource();
    java.lang.String var2 = var0.getServletPath();
    java.lang.Object var3 = var0.getGlobal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    java.util.Collection var14 = var8.getBindingNames();
    java.util.Collection var15 = var8.getBindingNames();
    java.lang.String var16 = var8.getPageName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var18 = var8.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var3 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var3.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var6 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var6.setText("Dummy EmailFacade Impl");
    var6.setText(",");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var6);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var3);
    var3.setText("Default EmailFacade Impl");
    var3.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    ch.bluepenguin.email.client.Folder var9 = var0.getFolder();
    java.lang.String[] var10 = var0.getBcc();
    var0.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var2 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var4 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var5 = var4.getSuppressed();
    var2.setParameters((java.lang.Object[])var5);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    var2.setComponent((org.apache.tapestry.IComponent)var7);
    var7.setId("Dummy EmailFacade Impl");
    int var12 = var7.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    ch.bluepenguin.email.client.tapestry.Home var21 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var22 = var21.getBody();
    int var23 = var21.getBodyCount();
    var21.setPageName("");
    var18.addBody((org.apache.tapestry.IRender)var21);
    org.apache.tapestry.IEngine var27 = var21.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var28.addComponent((org.apache.tapestry.IComponent)var31);
    var21.addBody((org.apache.tapestry.IRender)var31);
    org.apache.tapestry.IComponent var36 = var31.getContainer();
    org.apache.tapestry.event.ChangeObserver var37 = var31.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var38 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var38.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var41 = var38.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var42 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var43 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var44 = var43.getSeparator();
    java.util.Locale var45 = var43.getMyLocale();
    var42.setMyLocale(var45);
    var38.setMyLocale(var45);
    var31.setLocale(var45);
    var7.addBody((org.apache.tapestry.IRender)var31);
    var0.addComponent((org.apache.tapestry.IComponent)var31);
    var0.setPageName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IEngine var53 = var0.getEngine();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var55 = var0.getComponent(",");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ","+ "'", var44.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    org.apache.tapestry.engine.ITemplateSource var4 = var0.getTemplateSource();
    org.apache.tapestry.engine.IPropertySource var5 = var0.getPropertySource();
    org.apache.tapestry.engine.ISpecificationSource var6 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    java.lang.String var5 = var0.getContextPath();
    org.apache.tapestry.engine.IScriptSource var6 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    var0.setCc("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.lang.String var19 = var12.getIdPath();
    org.apache.tapestry.ILocation var20 = var12.getLocation();
    org.apache.tapestry.IEngine var21 = var12.getEngine();
    var12.beginPageRender();
    org.apache.tapestry.ILocation var23 = var12.getLocation();
    var10.setComponent((org.apache.tapestry.IComponent)var12);
    org.apache.tapestry.IAsset var26 = var12.getAsset("(0) null\n   (0) null");
    java.lang.String var27 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var4);
    java.lang.Object var6 = var5.getContained();
    var5.setName("(0) null\n   (0) null");
    java.lang.String var9 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null\n   (0) null"+ "'", var9.equals("(0) null\n   (0) null"));

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var2 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var2.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var6 = new java.lang.String[] { "(0) null"};
    java.lang.String var7 = var2.returnStringList(var6);
    java.util.Locale var8 = var2.getMyLocale();
    java.util.Locale var9 = var2.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getReplyTo();
    java.lang.String[] var17 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var10.setCc(var17);
    java.lang.String[] var20 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var10.setBcc(var20);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    var10.setBcc(var32);
    java.lang.String[] var35 = var10.getBcc();
    java.lang.String var36 = var2.returnStringList(var35);
    var0.setBcc(var35);
    java.lang.String var38 = var0.getSubject();
    java.lang.String var39 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var39.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test122");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    java.lang.String[] var2 = var0.getCc();
    java.lang.String var3 = var0.toString();
    var0.setCc("Current Folder");
    java.util.Date var6 = var0.getSentDate();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getText();
    java.lang.String var13 = var7.getSubject();
    java.lang.String var14 = var7.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var7);
    java.lang.String[] var16 = var7.getTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var3.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test123");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setBcc("Dummy EmailFacade Impl");
    java.lang.String var8 = var5.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var12 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var13 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    var14.setParentFolderId((java.lang.Integer)1);
    var14.setFullName("hi!");
    var13.setParent(var14);
    var5.setFolder(var14);
    var0.setFolder(var14);
    var14.setFullName("hi!");
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var27 = var26.isLeaf();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var31 = var29.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var32 = var29.getParent();
    var26.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    ch.bluepenguin.email.client.Folder var34 = var26.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var35 = var34.getUniqueID();
    var14.setParent(var34);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var37 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var37.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var40 = var37.getCurrentFolder();
    var14.setParent(var40);
    var14.setParentFolderId((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test124");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    ch.bluepenguin.email.client.MailMessage var4 = new ch.bluepenguin.email.client.MailMessage();
    var4.setBcc("Dummy EmailFacade Impl");
    var4.setTechnicalID(100);
    java.lang.String var9 = var4.getReplyTo();
    java.lang.String[] var11 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var4.setCc(var11);
    var4.setBcc("Dummy EmailFacade Impl");
    var4.setSubject("hi!");
    java.lang.String var17 = var4.toString();
    var0.setVisit((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var17.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test125");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var4.setLeaf(false);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    int var8 = var4.getIndex();
    java.lang.String var9 = var4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    var15.setParentFolderId((java.lang.Integer)1);
    var15.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var21 = var15.getAccount();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    java.util.Collection var26 = var23.children();
    boolean var27 = var23.getAllowsChildren();
    int var28 = var23.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    boolean var33 = var31.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var34 = var31.getParent();
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    boolean var38 = var36.equals((java.lang.Object)(short)(-1));
    java.util.Collection var39 = var36.getChildren();
    boolean var40 = var31.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var36);
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    var41.setFullName("hi!");
    var31.setFolder(var41);
    var29.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    boolean var48 = var6.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var5 = var4.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var2.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.Object var8 = var4.getParent();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var11.setParent(var13);
    var4.setContained((java.lang.Object)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var4.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var0.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test128");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.INamespace var7 = var0.getNamespace();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    var8.addComponent((org.apache.tapestry.IComponent)var11);
    java.lang.String var15 = var8.getIdPath();
    org.apache.tapestry.ILocation var16 = var8.getLocation();
    org.apache.tapestry.IEngine var17 = var8.getEngine();
    var8.beginPageRender();
    var0.addComponent((org.apache.tapestry.IComponent)var8);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var20 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var22 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    var20.setParameters((java.lang.Object[])var23);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    var20.setComponent((org.apache.tapestry.IComponent)var25);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    var28.setPageName("");
    var25.addBody((org.apache.tapestry.IRender)var28);
    var8.addComponent((org.apache.tapestry.IComponent)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var36 = var28.getComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test129");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setBcc("Dummy EmailFacade Impl");
    java.lang.String var8 = var5.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var12 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var13 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    var14.setParentFolderId((java.lang.Integer)1);
    var14.setFullName("hi!");
    var13.setParent(var14);
    var5.setFolder(var14);
    var0.setFolder(var14);
    var14.setName("Current Folder");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var4.setLeaf(false);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var11 = var10.getParent();
    java.lang.Object var12 = var10.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var10);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var14 = var10.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    java.lang.String var1 = var0.getUserID();
    var0.setUserID("");
    java.lang.String var4 = var0.getUserID();
    java.lang.String var5 = var0.getUserID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test132");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var2 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var4 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var5 = var4.getSuppressed();
    var2.setParameters((java.lang.Object[])var5);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    var2.setComponent((org.apache.tapestry.IComponent)var7);
    var7.setId("Dummy EmailFacade Impl");
    int var12 = var7.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    ch.bluepenguin.email.client.tapestry.Home var21 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var22 = var21.getBody();
    int var23 = var21.getBodyCount();
    var21.setPageName("");
    var18.addBody((org.apache.tapestry.IRender)var21);
    org.apache.tapestry.IEngine var27 = var21.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var28.addComponent((org.apache.tapestry.IComponent)var31);
    var21.addBody((org.apache.tapestry.IRender)var31);
    org.apache.tapestry.IComponent var36 = var31.getContainer();
    org.apache.tapestry.event.ChangeObserver var37 = var31.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var38 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var38.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var41 = var38.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var42 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var43 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var44 = var43.getSeparator();
    java.util.Locale var45 = var43.getMyLocale();
    var42.setMyLocale(var45);
    var38.setMyLocale(var45);
    var31.setLocale(var45);
    var7.addBody((org.apache.tapestry.IRender)var31);
    var0.addComponent((org.apache.tapestry.IComponent)var31);
    org.apache.tapestry.ILocation var51 = var31.getLocation();
    org.apache.tapestry.IPage var52 = var31.getPage();
    org.apache.tapestry.IRender[] var53 = var31.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ","+ "'", var44.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test133");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var1);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var3 = var2.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var0.getUniqueID();
    var0.setFullName("");
    var0.setName("Default EmailFacade Impl");
    java.lang.Integer var11 = var0.getParentFolderId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1+ "'", var11.equals(1));

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var12.getUniqueID();
    var5.setAccount(var12);
    ch.bluepenguin.email.client.Person var15 = var12.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var12.getUniqueID();
    var16.setId((java.lang.Integer)10);
    var16.setId((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test136");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    org.apache.tapestry.IPage var2 = var0.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    java.lang.Integer var5 = var4.getParentFolderId();
    var4.setParentFolderId((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test138");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var3 = var0.getPropertySource();
    org.apache.tapestry.asset.ResourceChecksumSource var4 = var0.getResourceChecksumSource();
    java.util.Locale var5 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var4 = var3.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var5 = var3.getMenuItem();
    java.lang.String var6 = var3.toString();
    int var7 = var3.getChildrenSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test140");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    var1.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var1.setIndex(100);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test141");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    java.lang.String var6 = var0.getName();
    ch.bluepenguin.email.client.Folder var7 = var0.getCurrentFolder();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var10 = var9.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var9);
    java.lang.String var12 = var11.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var12);
    java.lang.Object var14 = var13.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var16 = var15.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var18.setIndex(10);
    var18.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var23.setParameters((java.lang.Object[])var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    var23.setComponent((org.apache.tapestry.IComponent)var28);
    var15.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var34 = var33.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var33);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var36 = var35.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var37 = var35.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var38 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var15.addMenuItem(var37, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var38);
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var41 = var40.getBody();
    int var42 = var40.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var43 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var44 = var43.getBody();
    int var45 = var43.getBodyCount();
    var40.addComponent((org.apache.tapestry.IComponent)var43);
    java.lang.String var47 = var40.getIdPath();
    org.apache.tapestry.ILocation var48 = var40.getLocation();
    org.apache.tapestry.IEngine var49 = var40.getEngine();
    var40.beginPageRender();
    var38.setComponent((org.apache.tapestry.IComponent)var40);
    var13.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var38);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var53 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var54 = var53.getName();
    ch.bluepenguin.email.client.Folder var55 = var53.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var57 = var53.getMessagesFromFolder("Dummy EmailFacade Impl");
    var38.setParameters((java.lang.Object[])var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var57, ",", "ch.bluepenguin.email.client.service.EmailFacadeException");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0) null"+ "'", var12.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Dummy EmailFacade Impl"+ "'", var54.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test142");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Locale var7 = var0.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var9 = var0.getComponent("hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test143");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    ch.bluepenguin.email.client.Account var10 = var4.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test144");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setBcc("Dummy EmailFacade Impl");
    var5.setTechnicalID(100);
    java.lang.String var10 = var5.getReplyTo();
    java.lang.String[] var12 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var5.setCc(var12);
    java.lang.String[] var15 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var5.setBcc(var15);
    java.lang.String var17 = var5.getReplyTo();
    ch.bluepenguin.email.client.MailMessage[] var18 = new ch.bluepenguin.email.client.MailMessage[] { var5};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var18, "(0) null\n   (0) null\n   (0) null", "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test145");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var2 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.email.client.MailMessage[] var4 = var2.getAllMessages();
    boolean var5 = var0.equals((java.lang.Object)var2);
    java.lang.String var6 = var0.getSubject();
    var0.setText("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Dummy EmailFacade Impl"+ "'", var3.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test146");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    ch.bluepenguin.email.client.Folder[] var6 = var0.getAllFolders();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var7 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var7.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var10 = var7.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var10, "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test147");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var2 = var1.getRenderer();
    int var3 = var1.getDepth();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    java.util.Map var11 = var7.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var12.forgetPage("");
    org.apache.tapestry.engine.IPageSource var15 = var12.getPageSource();
    org.apache.tapestry.engine.IPropertySource var16 = var12.getPropertySource();
    java.util.Collection var17 = var12.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var18 = var12.getComponentMessagesSource();
    var7.attach((org.apache.tapestry.IEngine)var12);
    java.lang.Object var20 = var7.getVisit();
    var7.setPageName("Default EmailFacade Impl");
    var1.setParent((java.lang.Object)var7);
    int var24 = var7.getBodyCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var26 = var7.getComponent("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    var1.setId((java.lang.Integer)(-1));
    java.lang.Integer var4 = var1.getId();
    var1.setId((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1)+ "'", var4.equals((-1)));

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test149");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    boolean var3 = var0.isDirty((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test150");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    var0.setCc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var27 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.IAsset var11 = var0.getAsset("Dummy EmailFacade Impl");
    var0.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IRequestCycle var14 = var0.getRequestCycle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var16 = var0.getNestedComponent("");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test152");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var3 = var0.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var5 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var6 = var5.getSeparator();
    java.util.Locale var7 = var5.getMyLocale();
    var4.setMyLocale(var7);
    var0.setMyLocale(var7);
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ","+ "'", var6.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test153");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    java.lang.String var15 = var3.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setParent((java.lang.Object)100L);
    int var20 = var17.getDepth();
    int var21 = var17.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var22 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var22.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var25.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var28.setText("Dummy EmailFacade Impl");
    var28.setText(",");
    var25.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var28);
    var22.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setText("hi!");
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null\n   (0) null"+ "'", var15.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test154");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var4 = new java.lang.String[] { "(0) null"};
    java.lang.String var5 = var0.returnStringList(var4);
    java.util.Locale var6 = var0.getMyLocale();
    java.util.Locale var7 = var0.getMyLocale();
    java.lang.String var8 = var0.getSeparator();
    java.util.Locale var9 = var0.getMyLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var8.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test155");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var1 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var2 = var1.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var8 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var4.reportException("", (java.lang.Throwable)var8);
    var1.reportException("hi!", (java.lang.Throwable)var8);
    var0.setTechnicalException((java.lang.Exception)var8);
    java.lang.String var12 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ch.bluepenguin.email.client.service.EmailFacadeException"+ "'", var12.equals("ch.bluepenguin.email.client.service.EmailFacadeException"));

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test156");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    var3.endPageRender();
    java.lang.String var8 = var3.getIdPath();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var10 = var3.getComponent("hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var2 = var1.getRenderer();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    var1.setName("Current Folder");
    var1.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test158");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    java.lang.String var6 = var3.getReserve();
    var3.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var9 = var3.getFirstname();
    var3.setNickname("Current Folder");
    java.lang.String var12 = var3.getLastname();
    java.lang.String var13 = var3.getLastname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test159");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var4 = var3.getMenuItem();
    int var5 = var3.getChildrenSize();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var8 = var7.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    java.util.Iterator var10 = var9.getChildrenIterator();
    var3.addChild(var9);
    java.util.Iterator var12 = var9.getChildrenIterator();
    boolean var13 = var9.checkConsistency();
    boolean var14 = var9.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test160");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var6 = var5.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setIndex(10);
    var8.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    var5.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var13.setStyleClass(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    var28.beginPageRender();
    java.util.Collection var30 = var28.getBindingNames();
    var25.setPage((org.apache.tapestry.IPage)var28);
    org.apache.tapestry.listener.ListenerMap var32 = var28.getListeners();
    var13.setComponent((org.apache.tapestry.IComponent)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var35 = var28.getComponent("hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test161");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var3 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var3.setText("Dummy EmailFacade Impl");
    var3.setText(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var10 = var9.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var12.setIndex(10);
    var12.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var17 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var17.setParameters((java.lang.Object[])var20);
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    var17.setComponent((org.apache.tapestry.IComponent)var22);
    var9.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var17);
    var17.setStyleClass(",");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var17);
    var3.setText("(0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0) null"+ "'", var10.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var15 = var12.getFolder();
    int var16 = var12.getChildCount();
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.getChildren();
    boolean var28 = var19.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var24);
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var32 = var30.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var33 = var30.getFolder();
    int var34 = var30.getChildCount();
    var24.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var30);
    boolean var36 = var12.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var24);
    java.util.Collection var37 = var24.getChildren();
    ch.bluepenguin.email.client.Folder var38 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38);
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    var39.setFolder(var40);
    org.apache.tapestry.contrib.tree.model.ITreeNode var42 = var39.getParent();
    boolean var43 = var39.getAllowsChildren();
    var24.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var39);
    ch.bluepenguin.email.client.tapestry.SpringEngine var45 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var46 = var45.getPageSource();
    org.apache.tapestry.engine.IPageSource var47 = var45.getPageSource();
    java.util.Collection var48 = var45.getActivePageNames();
    var24.insert(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder[] var4 = var0.getAllFolders();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test164");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var5 = var4.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var2.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.Object var8 = var4.getParent();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var11.setParent(var13);
    var4.setContained((java.lang.Object)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var4.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var4.setDepth(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test165");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    int var8 = var3.getBodyCount();
    java.util.Map var9 = var3.getAssets();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    var10.beginPageRender();
    java.util.Collection var12 = var10.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var13 = var10.getListeners();
    java.lang.String var14 = var10.getPageName();
    var3.setPage((org.apache.tapestry.IPage)var10);
    org.apache.tapestry.ILocation var16 = var3.getLocation();
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    int var19 = var17.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    var20.beginPageRender();
    java.util.Collection var22 = var20.getBindingNames();
    var17.setPage((org.apache.tapestry.IPage)var20);
    org.apache.tapestry.listener.ListenerMap var24 = var20.getListeners();
    int var25 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    int var28 = var26.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    int var31 = var29.getBodyCount();
    var26.addComponent((org.apache.tapestry.IComponent)var29);
    java.lang.String var33 = var26.getIdPath();
    org.apache.tapestry.ILocation var34 = var26.getLocation();
    org.apache.tapestry.IEngine var35 = var26.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    var39.beginPageRender();
    java.util.Collection var41 = var39.getBindingNames();
    var36.setPage((org.apache.tapestry.IPage)var39);
    var26.addComponent((org.apache.tapestry.IComponent)var39);
    org.apache.tapestry.IAsset var45 = var26.getAsset("Dummy EmailFacade Impl");
    var20.setContainer((org.apache.tapestry.IComponent)var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setPage((org.apache.tapestry.IPage)var26);
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test166");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    var7.addComponent((org.apache.tapestry.IComponent)var10);
    java.lang.String var14 = var7.getIdPath();
    org.apache.tapestry.ILocation var15 = var7.getLocation();
    org.apache.tapestry.IEngine var16 = var7.getEngine();
    var7.beginPageRender();
    java.lang.String var18 = var7.toString();
    var3.setPage((org.apache.tapestry.IPage)var7);
    java.util.Map var20 = var3.getComponents();
    int var21 = var3.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    var25.beginPageRender();
    java.util.Collection var27 = var25.getBindingNames();
    var22.setPage((org.apache.tapestry.IPage)var25);
    org.apache.tapestry.listener.ListenerMap var29 = var25.getListeners();
    int var30 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    int var36 = var34.getBodyCount();
    var31.addComponent((org.apache.tapestry.IComponent)var34);
    java.lang.String var38 = var31.getIdPath();
    org.apache.tapestry.ILocation var39 = var31.getLocation();
    org.apache.tapestry.IEngine var40 = var31.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var41 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var42 = var41.getBody();
    int var43 = var41.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    var44.beginPageRender();
    java.util.Collection var46 = var44.getBindingNames();
    var41.setPage((org.apache.tapestry.IPage)var44);
    var31.addComponent((org.apache.tapestry.IComponent)var44);
    org.apache.tapestry.IAsset var50 = var31.getAsset("Dummy EmailFacade Impl");
    var25.setContainer((org.apache.tapestry.IComponent)var31);
    var25.setPageName("Default EmailFacade Impl");
    var3.addComponent((org.apache.tapestry.IComponent)var25);
    java.lang.String var55 = var3.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    java.lang.String var15 = var3.displayMenuStructure();
    java.lang.String var16 = var3.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = var3.getRootList();
    var3.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null\n   (0) null"+ "'", var15.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null\n   (0) null"+ "'", var16.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    org.apache.tapestry.listener.ListenerMap var7 = var0.getListeners();
    var0.forgetPage("Dummy EmailFacade Impl");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test169");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var13 = var0.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test170");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IEngine var3 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    var4.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.util.Map var19 = var15.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var20 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var20.forgetPage("");
    org.apache.tapestry.engine.IPageSource var23 = var20.getPageSource();
    org.apache.tapestry.engine.IPropertySource var24 = var20.getPropertySource();
    java.util.Collection var25 = var20.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var26 = var20.getComponentMessagesSource();
    var15.attach((org.apache.tapestry.IEngine)var20);
    var4.addBody((org.apache.tapestry.IRender)var15);
    var0.addComponent((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.listener.ListenerMap var30 = var4.getListeners();
    var4.setId("Default EmailFacade Impl");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test171");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    java.lang.Integer var4 = var3.getParentFolderId();
    java.lang.Integer var5 = var3.getParentFolderId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test172");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    var23.beginPageRender();
    java.util.Collection var25 = var23.getBindingNames();
    var20.setPage((org.apache.tapestry.IPage)var23);
    org.apache.tapestry.listener.ListenerMap var27 = var23.getListeners();
    org.apache.tapestry.event.ChangeObserver var28 = var23.getChangeObserver();
    var0.setPage((org.apache.tapestry.IPage)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var31 = var23.getComponent("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test173");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    org.apache.tapestry.engine.IPageSource var2 = var0.getPageSource();
    org.apache.tapestry.engine.IScriptSource var3 = var0.getScriptSource();
    var0.forgetPage("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test174");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    java.util.Collection var12 = var9.getChildren();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var15 = var14.isLeaf();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    boolean var19 = var17.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var20 = var17.getParent();
    var14.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var17);
    boolean var22 = var9.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    boolean var23 = var6.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    org.apache.tapestry.contrib.tree.model.ITreeNode var24 = var14.getParent();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    java.util.Collection var29 = var26.children();
    boolean var30 = var14.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var26);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    var32.setFolder(var33);
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    var35.setFullName("hi!");
    var33.setParent(var35);
    ch.bluepenguin.email.client.Folder var40 = var35.getParent();
    var26.setFolder(var35);
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    boolean var43 = var26.getAllowsChildren();
    java.util.Collection var44 = var26.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test175");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    java.lang.String[] var27 = var0.getBcc();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var30 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null"+ "'", var30.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null"));

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test176");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    int var4 = var1.getDepth();
    var1.setLeaf(true);
    var1.setLeaf(true);
    int var9 = var1.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test177");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.SpringEngine var7 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var7.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var10 = var7.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var11 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var11.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var14 = var11.getMyLocale();
    var7.setLocale(var14);
    var0.setLocale(var14);
    org.apache.tapestry.listener.ListenerMap var17 = var0.getListeners();
    java.util.Collection var18 = var0.getBindingNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test178");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var1);
    var2.setIndex((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var4 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var0.reportException("", (java.lang.Throwable)var4);
    ch.bluepenguin.email.client.tapestry.Home var6 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var7 = var6.getBody();
    int var8 = var6.getBodyCount();
    org.apache.tapestry.IAsset var10 = var6.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var11 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var13 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var14 = var13.getSuppressed();
    var11.setParameters((java.lang.Object[])var14);
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    var11.setComponent((org.apache.tapestry.IComponent)var16);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var19.setPageName("");
    var16.addBody((org.apache.tapestry.IRender)var19);
    var6.setContainer((org.apache.tapestry.IComponent)var19);
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    int var28 = var26.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    var29.beginPageRender();
    java.util.Collection var31 = var29.getBindingNames();
    var26.setPage((org.apache.tapestry.IPage)var29);
    org.apache.tapestry.listener.ListenerMap var33 = var29.getListeners();
    org.apache.tapestry.event.ChangeObserver var34 = var29.getChangeObserver();
    var6.setPage((org.apache.tapestry.IPage)var29);
    var0.setVisit((java.lang.Object)var6);
    org.apache.tapestry.engine.ITemplateSource var37 = var0.getTemplateSource();
    java.lang.String var38 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test180");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    java.lang.String var5 = var0.getName();
    ch.bluepenguin.email.client.MailMessage[] var7 = var0.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var9 = var8.toString();
    ch.bluepenguin.email.client.Folder var10 = var8.getFolder();
    ch.bluepenguin.email.client.MailMessage[] var11 = new ch.bluepenguin.email.client.MailMessage[] { var8};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var11, "", "(0) null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Dummy EmailFacade Impl"+ "'", var5.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var9.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    boolean var3 = var0.getHasVisit();
    boolean var4 = var0.isResetServiceEnabled();
    boolean var5 = var0.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test182");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    var4.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.children();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    var29.setFullName("hi!");
    var29.setFullName("Dummy EmailFacade Impl");
    var25.setFolder(var29);
    ch.bluepenguin.email.client.Account var36 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var36.getUniqueID();
    var29.setAccount(var36);
    ch.bluepenguin.email.client.Person var39 = var36.getPerson();
    var17.setAccount(var36);
    var4.setAccount(var36);
    ch.bluepenguin.email.client.Person var42 = new ch.bluepenguin.email.client.Person();
    java.lang.String var43 = var42.getFirstname();
    var42.setNickname("");
    var42.setLastname(",");
    var36.setPerson(var42);
    ch.bluepenguin.email.client.Person var49 = var36.getPerson();
    var49.setReserve("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.AbstractUniqueID var52 = var49.getUniqueID();
    java.lang.String var53 = var49.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test183");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var6 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var7 = var6.getBody();
    int var8 = var6.getBodyCount();
    var3.addComponent((org.apache.tapestry.IComponent)var6);
    java.util.Collection var10 = var6.getBindingNames();
    var6.beginPageRender();
    var0.setVisit((java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var14 = var6.getComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test184");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getNickname();
    java.lang.String var9 = var0.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.getPageName();
    var0.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    java.lang.String var4 = var0.getReplyTo();
    java.lang.String var5 = var0.getReplyTo();
    ch.bluepenguin.email.client.Folder var6 = var0.getFolder();
    java.lang.String var7 = var0.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test187");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setParentFolderId((java.lang.Integer)1);
    var5.setFullName("hi!");
    var4.setParent(var5);
    java.lang.Integer var12 = var5.getParentFolderId();
    java.lang.Integer var13 = var5.getParentFolderId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 1+ "'", var12.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 1+ "'", var13.equals(1));

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test188");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var3 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var3.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var3.reportException("", (java.lang.Throwable)var7);
    var0.reportException("hi!", (java.lang.Throwable)var7);
    ch.bluepenguin.email.client.tapestry.SpringEngine var10 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var10.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var14 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var10.reportException("", (java.lang.Throwable)var14);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var17 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    var14.addSuppressed((java.lang.Throwable)var17);
    var7.addSuppressed((java.lang.Throwable)var14);
    java.lang.Throwable[] var21 = var7.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test189");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    ch.bluepenguin.email.client.Person var7 = var0.getPerson();
    var7.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var10 = var7.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var4 = var3.displayMenuStructure();
    java.util.Iterator var5 = var3.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var9 = var8.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var6.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.email.client.tapestry.SpringEngine var14 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var15 = var14.getVisit();
    java.lang.String var16 = var14.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var14.setVisit((java.lang.Object)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var19 = var17.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var21 = var20.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var23 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var23.setIndex(10);
    var23.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var30 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var31 = var30.getSuppressed();
    var28.setParameters((java.lang.Object[])var31);
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    var28.setComponent((org.apache.tapestry.IComponent)var33);
    var20.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var23, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var28);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var39 = var38.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var40 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var41 = var40.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var42 = var40.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var43 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var20.addMenuItem(var42, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var43);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var46 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var47 = var46.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var48 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var46);
    java.lang.String var49 = var46.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var50 = var20.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var46);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var51 = var17.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var46);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var46);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var53 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    java.util.Iterator var54 = var0.getMenuItemsDepthFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0) null"+ "'", var21.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    var6.setCurrentFolder("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    java.lang.String var14 = var13.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var14);
    java.lang.Object var16 = var15.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var18 = var17.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var20.setIndex(10);
    var20.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var27 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var28 = var27.getSuppressed();
    var25.setParameters((java.lang.Object[])var28);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    var25.setComponent((org.apache.tapestry.IComponent)var30);
    var17.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var36 = var35.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var35);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var38 = var37.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var39 = var37.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var40 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var17.addMenuItem(var39, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var40);
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    int var44 = var42.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var46 = var45.getBody();
    int var47 = var45.getBodyCount();
    var42.addComponent((org.apache.tapestry.IComponent)var45);
    java.lang.String var49 = var42.getIdPath();
    org.apache.tapestry.ILocation var50 = var42.getLocation();
    org.apache.tapestry.IEngine var51 = var42.getEngine();
    var42.beginPageRender();
    var40.setComponent((org.apache.tapestry.IComponent)var42);
    var15.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var40);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var55 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var56 = var55.getName();
    ch.bluepenguin.email.client.Folder var57 = var55.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var59 = var55.getMessagesFromFolder("Dummy EmailFacade Impl");
    var40.setParameters((java.lang.Object[])var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.copyMessages(var59, "(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0) null"+ "'", var18.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Dummy EmailFacade Impl"+ "'", var56.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test192");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    boolean var3 = var0.isAllClean();
    boolean var5 = var0.isDirty((java.lang.Integer)100);
    var0.clear();
    boolean var8 = var0.isDirty((java.lang.Integer)10);
    boolean var9 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    ch.bluepenguin.email.client.Account var7 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var8 = var7.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var7.getUniqueID();
    ch.bluepenguin.email.client.Person var10 = new ch.bluepenguin.email.client.Person();
    java.lang.String var11 = var10.getFirstname();
    var7.setPerson(var10);
    java.lang.String var13 = var10.getReserve();
    var10.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var16 = var10.getFirstname();
    var0.setPerson(var10);
    ch.bluepenguin.email.client.AbstractUniqueID var18 = var0.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Dummy EmailFacade Impl"+ "'", var16.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test194");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.util.Iterator var4 = var3.getChildrenIterator();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var5 = var3.getMenuItem();
    boolean var6 = var3.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var7 = var3.getMenuItem();
    boolean var8 = var3.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var11 = var10.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var10);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var13 = var12.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var12.getMenuItem();
    java.lang.String var15 = var12.toString();
    var3.addChild(var12);
    boolean var17 = var3.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null"+ "'", var15.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var0.setPageName("(0) null\n   (0) null\n   (0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var13 = var0.getComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.engine.ITemplateSource var4 = var0.getTemplateSource();
    org.apache.tapestry.util.pool.Pool var5 = var0.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test197");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var8.forgetPage("");
    org.apache.tapestry.engine.IPageSource var11 = var8.getPageSource();
    org.apache.tapestry.engine.IPropertySource var12 = var8.getPropertySource();
    java.util.Collection var13 = var8.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var14 = var8.getComponentMessagesSource();
    var3.attach((org.apache.tapestry.IEngine)var8);
    java.lang.Object var16 = var3.getVisit();
    org.apache.tapestry.spec.IComponentSpecification var17 = var3.getSpecification();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    var18.beginPageRender();
    java.util.Collection var20 = var18.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var21 = var18.getListeners();
    java.lang.String var22 = var18.getPageName();
    var3.addComponent((org.apache.tapestry.IComponent)var18);
    var3.detach();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var26 = var3.getNestedComponent("Default EmailFacade Impl");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    var13.beginPageRender();
    java.util.Collection var15 = var13.getBindingNames();
    var10.setPage((org.apache.tapestry.IPage)var13);
    var0.addComponent((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var18 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var18.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var21 = var18.getMyLocale();
    var13.setLocale(var21);
    org.apache.tapestry.INamespace var23 = var13.getNamespace();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var25 = var13.getNestedComponent("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test199");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.event.ChangeObserver var9 = var0.getChangeObserver();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var11 = var0.getComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    java.util.Map var20 = var0.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test201");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    java.lang.String var5 = var0.getName();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var8 = var6.getMessagesFromFolder(",");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var8, ",", "Default EmailFacade Impl");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Dummy EmailFacade Impl"+ "'", var5.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var5 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder[] var6 = var0.getAllFolders();
    ch.bluepenguin.email.client.Folder var7 = var0.getCurrentFolder();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var9.setParent((java.lang.Object)100L);
    java.lang.String var12 = var9.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var9);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var14 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setContained((java.lang.Object)var14);
    var14.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var19 = var14.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var19, "Default EmailFacade Impl", "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test203");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var4);
    var5.setDepth(10);
    java.lang.String var8 = var5.toString();
    java.lang.Object var9 = var5.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test204");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var35 = var32.getParent();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var39 = var37.equals((java.lang.Object)(short)(-1));
    java.util.Collection var40 = var37.getChildren();
    boolean var41 = var32.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var37);
    java.util.Collection var42 = var32.getChildren();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    org.apache.tapestry.contrib.tree.model.ITreeNode var44 = var1.getParent();
    ch.bluepenguin.email.client.Folder var45 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var46 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var47 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var46);
    boolean var49 = var47.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var50 = var47.getFolder();
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    boolean var53 = var52.isLeaf();
    var47.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var52);
    ch.bluepenguin.email.client.Folder var55 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var56 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var55);
    ch.bluepenguin.email.client.Folder var57 = new ch.bluepenguin.email.client.Folder();
    var56.setFolder(var57);
    ch.bluepenguin.email.client.Folder var59 = var56.getFolder();
    java.util.Collection var60 = var56.getChildren();
    var47.insert(var60);
    int var62 = var47.getChildCount();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var47);
    java.util.Collection var64 = var1.getChildren();
    org.apache.tapestry.contrib.tree.model.ITreeNode var65 = var1.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    boolean var15 = var11.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test206");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("hi!");
    java.lang.String var6 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test207");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getFirstname();
    var0.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var11 = var0.getFirstname();
    ch.bluepenguin.email.client.AbstractUniqueID var12 = var0.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    java.lang.String var2 = var0.getName();
    var0.setCurrentFolder("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var5 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var6 = var5.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var7 = var5.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var9 = var5.getMessagesFromFolder("(0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var9, "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Dummy EmailFacade Impl"+ "'", var2.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var7 = var6.getSpecification();
    java.lang.Object var8 = var6.getGlobal();
    java.lang.Object var9 = var6.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    var13.setText("hi!");
    var11.setContained((java.lang.Object)var13);
    var6.setVisit((java.lang.Object)var13);
    ch.bluepenguin.email.client.service.EmailFacadeException var23 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var6.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var23);
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", (java.lang.Throwable)var23);
    org.apache.tapestry.asset.ResourceChecksumSource var26 = var0.getResourceChecksumSource();
    org.apache.tapestry.engine.ISpecificationSource var27 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test210");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var0.getUniqueID();
    var0.setFullName("");
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var10 = var9.getAllowsChildren();
    boolean var11 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    var13.setFolder(var14);
    boolean var16 = var9.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test211");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var5 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var5.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var8 = var5.getMyLocale();
    var0.setLocale(var8);
    org.apache.tapestry.asset.ResourceChecksumSource var10 = var0.getResourceChecksumSource();
    org.apache.tapestry.engine.IPageSource var11 = var0.getPageSource();
    var0.forgetPage("Dummy EmailFacade Impl");
    org.apache.tapestry.engine.ITemplateSource var14 = var0.getTemplateSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test212");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    java.lang.String var8 = var3.getPageName();
    java.lang.String var9 = var3.getIdPath();
    var3.setId("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test213");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    java.lang.String var14 = var0.getText();
    java.lang.String[] var15 = var0.getCc();
    java.lang.String var16 = var0.getFrom();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    var8.setFolder(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    var11.setFullName("hi!");
    var9.setParent(var11);
    var2.setContained((java.lang.Object)var11);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var17 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var2.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var17);
    java.lang.String var19 = var17.getHyperlink();
    var17.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var17.setHyperlink("Default EmailFacade Impl");
    var17.setHyperlink("(0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test215");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    java.lang.String var4 = var0.getReplyTo();
    java.lang.String var5 = var0.getReplyTo();
    ch.bluepenguin.email.client.Folder var6 = var0.getFolder();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setReplyTo("Dummy EmailFacade Impl");
    java.lang.String var12 = var7.getSubject();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    var13.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var20 = new ch.bluepenguin.email.client.MailMessage();
    var20.setBcc("Dummy EmailFacade Impl");
    var20.setTechnicalID(100);
    java.lang.String var25 = var20.getReplyTo();
    java.lang.String[] var27 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var20.setCc(var27);
    var13.setBcc(var27);
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    java.lang.String var33 = var30.getReplyTo();
    var30.setBcc(",");
    var13.copyTo((org.springframework.mail.MailMessage)var30);
    java.lang.String var37 = var13.getReplyTo();
    java.lang.String[] var38 = var13.getBcc();
    ch.bluepenguin.email.client.MailMessage var39 = new ch.bluepenguin.email.client.MailMessage();
    var39.setBcc("Dummy EmailFacade Impl");
    var39.setTechnicalID(100);
    java.lang.String var44 = var39.getReplyTo();
    java.lang.String[] var46 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var39.setCc(var46);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var48 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var48.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var51 = new ch.bluepenguin.email.client.MailMessage();
    var51.setBcc("Dummy EmailFacade Impl");
    var51.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var56 = var51.getSentDate();
    ch.bluepenguin.email.client.MailMessage var57 = new ch.bluepenguin.email.client.MailMessage();
    var57.setBcc("Dummy EmailFacade Impl");
    var57.setTechnicalID(100);
    java.lang.String var62 = var57.getReplyTo();
    java.lang.String[] var64 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var57.setCc(var64);
    java.lang.String[] var67 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var57.setBcc(var67);
    var51.setCc(var67);
    java.lang.String var70 = var48.returnStringList(var67);
    var39.setCc(var67);
    var13.setCc(var67);
    var7.setCc(var67);
    var0.setBcc(var67);
    ch.bluepenguin.email.client.tapestry.SpringEngine var75 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var76 = var75.getVisit();
    java.lang.String var77 = var75.toString();
    org.apache.tapestry.IResourceResolver var78 = var75.getResourceResolver();
    org.apache.tapestry.engine.ITemplateSource var79 = var75.getTemplateSource();
    var75.forgetPage("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    boolean var82 = var0.equals((java.lang.Object)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "Dummy EmailFacade Impl"+ "'", var70.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test216");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var23 = var0.getRootList();
    java.lang.String var24 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var27 = var26.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var29 = var28.getMenuItem();
    var0.addMenuItem(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var24.equals("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test217");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    var7.addComponent((org.apache.tapestry.IComponent)var10);
    java.lang.String var14 = var7.getIdPath();
    org.apache.tapestry.ILocation var15 = var7.getLocation();
    org.apache.tapestry.IEngine var16 = var7.getEngine();
    var7.beginPageRender();
    java.lang.String var18 = var7.toString();
    var3.setPage((org.apache.tapestry.IPage)var7);
    java.util.Map var20 = var3.getComponents();
    int var21 = var3.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    var25.beginPageRender();
    java.util.Collection var27 = var25.getBindingNames();
    var22.setPage((org.apache.tapestry.IPage)var25);
    org.apache.tapestry.listener.ListenerMap var29 = var25.getListeners();
    int var30 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    int var36 = var34.getBodyCount();
    var31.addComponent((org.apache.tapestry.IComponent)var34);
    java.lang.String var38 = var31.getIdPath();
    org.apache.tapestry.ILocation var39 = var31.getLocation();
    org.apache.tapestry.IEngine var40 = var31.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var41 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var42 = var41.getBody();
    int var43 = var41.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    var44.beginPageRender();
    java.util.Collection var46 = var44.getBindingNames();
    var41.setPage((org.apache.tapestry.IPage)var44);
    var31.addComponent((org.apache.tapestry.IComponent)var44);
    org.apache.tapestry.IAsset var50 = var31.getAsset("Dummy EmailFacade Impl");
    var25.setContainer((org.apache.tapestry.IComponent)var31);
    var25.setPageName("Default EmailFacade Impl");
    var3.addComponent((org.apache.tapestry.IComponent)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var56 = var3.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test218");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var11.setIndex(10);
    java.lang.String var14 = var11.getName();
    boolean var15 = var0.equals((java.lang.Object)var11);
    var11.setIndex(100);
    ch.bluepenguin.email.client.Person var18 = new ch.bluepenguin.email.client.Person();
    java.lang.String var19 = var18.getFirstname();
    var18.setLastname("(0) null");
    var18.setLastname("");
    java.lang.String var24 = var18.getReserve();
    var18.setNickname("");
    var11.setContained((java.lang.Object)var18);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var28 = var11.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var1 = var0.getSender();
    boolean var2 = var0.isDirty();
    java.util.logging.Logger var3 = var0.getLogger();
    java.lang.String var4 = var0.getName();
    ch.bluepenguin.email.client.cache.MailCache var5 = var0.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Default EmailFacade Impl"+ "'", var4.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test220");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var12.getUniqueID();
    var5.setAccount(var12);
    ch.bluepenguin.email.client.Person var15 = var12.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var12.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var12.getUniqueID();
    var17.setId((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test221");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var1 = var0.getSender();
    boolean var2 = var0.isDirty();
    org.springframework.mail.MailSender var3 = var0.getSender();
    ch.bluepenguin.email.client.cache.MailCache var5 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var6 = var5.getCache();
    var0.setCache(var5);
    org.springframework.mail.MailSender var8 = var0.getSender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test222");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    java.lang.String var6 = var3.getReserve();
    var3.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var9 = var3.getFirstname();
    var3.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var3.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test223");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(0);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var8.forgetPage("");
    org.apache.tapestry.engine.IPageSource var11 = var8.getPageSource();
    org.apache.tapestry.engine.IPropertySource var12 = var8.getPropertySource();
    java.util.Collection var13 = var8.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var14 = var8.getComponentMessagesSource();
    var3.attach((org.apache.tapestry.IEngine)var8);
    java.lang.Object var16 = var3.getVisit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var18 = var3.getComponent("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test225");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var5 = new ch.bluepenguin.email.client.Person();
    java.lang.String var6 = var5.getFirstname();
    var5.setLastname("(0) null");
    var5.setLastname("");
    var0.setVisit((java.lang.Object)var5);
    boolean var12 = var0.isResetServiceEnabled();
    var0.forgetPage("hi!");
    org.apache.tapestry.IResourceResolver var15 = var0.getResourceResolver();
    org.apache.tapestry.util.pool.Pool var16 = var0.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null");
    java.util.Date var13 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var17 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var17.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var20 = new ch.bluepenguin.email.client.MailMessage();
    var20.setBcc("Dummy EmailFacade Impl");
    var20.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var25 = var20.getSentDate();
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    var26.setTechnicalID(100);
    java.lang.String var31 = var26.getReplyTo();
    java.lang.String[] var33 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var26.setCc(var33);
    java.lang.String[] var36 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var26.setBcc(var36);
    var20.setCc(var36);
    java.lang.String var39 = var17.returnStringList(var36);
    java.lang.String[] var41 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var42 = var17.returnStringList(var41);
    java.lang.String var43 = var14.returnStringList(var41);
    var0.setTo(var41);
    java.lang.String[] var45 = var0.getCc();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var46 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var47 = var46.getName();
    ch.bluepenguin.email.client.Folder var48 = var46.getCurrentFolder();
    var0.setFolder(var48);
    ch.bluepenguin.email.client.Folder var50 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var51 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var50);
    ch.bluepenguin.email.client.Folder var52 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var53 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var52);
    var52.setParentFolderId((java.lang.Integer)1);
    var52.setParentFolderId((java.lang.Integer)0);
    var50.setParent(var52);
    ch.bluepenguin.email.client.Folder var59 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var60 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var59);
    ch.bluepenguin.email.client.Folder var61 = new ch.bluepenguin.email.client.Folder();
    var60.setFolder(var61);
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    var63.setFullName("hi!");
    var61.setParent(var63);
    var63.setParentFolderId((java.lang.Integer)100);
    var52.setParent(var63);
    var48.setParent(var52);
    ch.bluepenguin.email.client.Folder var72 = var52.getParent();
    ch.bluepenguin.email.client.Folder var73 = var72.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Dummy EmailFacade Impl"+ "'", var39.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var42.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var43.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Dummy EmailFacade Impl"+ "'", var47.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test227");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    var0.setCurrentFolder("(0) null\n   (0) null");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var7 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var9 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var10 = var9.getSuppressed();
    var7.setParameters((java.lang.Object[])var10);
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    var7.setComponent((org.apache.tapestry.IComponent)var12);
    var7.setStyleClass("Default EmailFacade Impl");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var17 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var18 = var17.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var19 = var17.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var21 = var17.getMessagesFromFolder("(0) null\n   (0) null");
    var7.setParameters((java.lang.Object[])var21);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var23.setParameters((java.lang.Object[])var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    var23.setComponent((org.apache.tapestry.IComponent)var28);
    var23.setStyleClass("Default EmailFacade Impl");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var33 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var34 = var33.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var35 = var33.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var37 = var33.getMessagesFromFolder("(0) null\n   (0) null");
    var23.setParameters((java.lang.Object[])var37);
    var7.setParameters((java.lang.Object[])var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var37, "Default EmailFacade Impl", "SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test228");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    java.lang.String var6 = var0.getName();
    var0.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var13 = var9.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var15 = var9.getMessagesFromFolder("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var15, "SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null", "ch.bluepenguin.email.client.service.EmailFacadeException");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test229");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    java.lang.Object var20 = var16.getGlobal();
    java.lang.Object var21 = var16.getGlobal();
    boolean var22 = var1.equals((java.lang.Object)var16);
    org.apache.tapestry.util.io.DataSqueezer var23 = var16.createDataSqueezer();
    org.apache.tapestry.util.pool.Pool var24 = var16.getPool();
    boolean var25 = var16.getHasVisit();
    org.apache.tapestry.util.io.DataSqueezer var26 = var16.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test230");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.util.Iterator var4 = var3.getChildrenIterator();
    java.util.Iterator var5 = var3.getChildrenIterator();
    java.util.Iterator var6 = var3.getChildrenIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null\n   (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var5 = var0.getUniqueID();
    var5.setId((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = var0.getRootList();
    int var4 = var3.getChildrenSize();
    java.lang.String var5 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var8 = var7.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    java.util.Iterator var10 = var9.getChildrenIterator();
    var3.addChild(var9);
    boolean var12 = var9.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test233");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.IAsset var7 = var0.getAsset(",");
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var8.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var11 = var8.getPropertySource();
    org.apache.tapestry.asset.ResourceChecksumSource var12 = var8.getResourceChecksumSource();
    var0.attach((org.apache.tapestry.IEngine)var8);
    org.apache.tapestry.INamespace var14 = var0.getNamespace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test234");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setReplyTo(",");
    var0.setSubject("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    java.lang.String[] var9 = var0.getBcc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    var0.setBcc(",");
    java.lang.String[] var6 = var0.getCc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var5 = var0.getSubject();
    java.util.Date var6 = var0.getSentDate();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    var8.setFolder(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    var11.setFullName("hi!");
    var9.setParent(var11);
    var11.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    var19.setFolder(var20);
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    boolean var23 = var19.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    boolean var25 = var0.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test237");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var3 = new ch.bluepenguin.email.client.MailMessage();
    var3.setBcc("Dummy EmailFacade Impl");
    var3.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var8 = var3.getSentDate();
    ch.bluepenguin.email.client.MailMessage var9 = new ch.bluepenguin.email.client.MailMessage();
    var9.setBcc("Dummy EmailFacade Impl");
    var9.setTechnicalID(100);
    java.lang.String var14 = var9.getReplyTo();
    java.lang.String[] var16 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var9.setCc(var16);
    java.lang.String[] var19 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var9.setBcc(var19);
    var3.setCc(var19);
    java.lang.String var22 = var0.returnStringList(var19);
    java.util.Locale var23 = var0.getMyLocale();
    java.util.Locale var24 = var0.getMyLocale();
    java.util.Locale var25 = var0.getMyLocale();
    java.lang.String var26 = var0.getSeparator();
    java.lang.String var27 = var0.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Dummy EmailFacade Impl"+ "'", var22.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var26.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var27.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    java.lang.String var2 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Current Folder"+ "'", var2.equals("Current Folder"));

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    var23.beginPageRender();
    java.util.Collection var25 = var23.getBindingNames();
    var20.setPage((org.apache.tapestry.IPage)var23);
    org.apache.tapestry.listener.ListenerMap var27 = var23.getListeners();
    org.apache.tapestry.event.ChangeObserver var28 = var23.getChangeObserver();
    var0.setPage((org.apache.tapestry.IPage)var23);
    var0.setPageName("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    int var34 = var32.getBodyCount();
    org.apache.tapestry.IEngine var35 = var32.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    int var41 = var39.getBodyCount();
    var36.addComponent((org.apache.tapestry.IComponent)var39);
    var36.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var45 = var44.getBody();
    int var46 = var44.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    int var49 = var47.getBodyCount();
    var44.addComponent((org.apache.tapestry.IComponent)var47);
    java.util.Map var51 = var47.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var52 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var52.forgetPage("");
    org.apache.tapestry.engine.IPageSource var55 = var52.getPageSource();
    org.apache.tapestry.engine.IPropertySource var56 = var52.getPropertySource();
    java.util.Collection var57 = var52.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var58 = var52.getComponentMessagesSource();
    var47.attach((org.apache.tapestry.IEngine)var52);
    var36.addBody((org.apache.tapestry.IRender)var47);
    var32.addComponent((org.apache.tapestry.IComponent)var36);
    ch.bluepenguin.email.client.tapestry.Home var62 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var63 = var62.getBody();
    int var64 = var62.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    int var67 = var65.getBodyCount();
    var62.addComponent((org.apache.tapestry.IComponent)var65);
    java.lang.String var69 = var62.getIdPath();
    org.apache.tapestry.ILocation var70 = var62.getLocation();
    var36.setPage((org.apache.tapestry.IPage)var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setPage((org.apache.tapestry.IPage)var36);
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    java.lang.Object var6 = var4.getGlobal();
    java.lang.Object var7 = var4.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var10 = var9.getParent();
    ch.bluepenguin.email.client.MailMessage var11 = new ch.bluepenguin.email.client.MailMessage();
    var11.setBcc("Dummy EmailFacade Impl");
    var11.setTechnicalID(100);
    var11.setText("hi!");
    var9.setContained((java.lang.Object)var11);
    var4.setVisit((java.lang.Object)var11);
    java.lang.String var20 = var11.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var11);
    java.lang.String[] var22 = var0.getBcc();
    java.lang.String var23 = var0.getReplyTo();
    var0.setReplyTo("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    var1.setIndex(10);
    int var5 = var1.getIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 10);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test242");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var4 = new java.lang.String[] { "(0) null"};
    java.lang.String var5 = var0.returnStringList(var4);
    java.util.Locale var6 = var0.getMyLocale();
    java.lang.String var7 = var0.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var7.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test243");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.util.Locale var2 = var0.getLocale();
    java.lang.Object var3 = var0.getGlobal();
    boolean var4 = var0.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null");
    java.util.Date var13 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var17 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var17.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var20 = new ch.bluepenguin.email.client.MailMessage();
    var20.setBcc("Dummy EmailFacade Impl");
    var20.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var25 = var20.getSentDate();
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    var26.setTechnicalID(100);
    java.lang.String var31 = var26.getReplyTo();
    java.lang.String[] var33 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var26.setCc(var33);
    java.lang.String[] var36 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var26.setBcc(var36);
    var20.setCc(var36);
    java.lang.String var39 = var17.returnStringList(var36);
    java.lang.String[] var41 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var42 = var17.returnStringList(var41);
    java.lang.String var43 = var14.returnStringList(var41);
    var0.setTo(var41);
    java.lang.String[] var45 = var0.getCc();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var46 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var47 = var46.getName();
    ch.bluepenguin.email.client.Folder var48 = var46.getCurrentFolder();
    var0.setFolder(var48);
    ch.bluepenguin.email.client.Folder var50 = var0.getFolder();
    java.lang.Integer var51 = var50.getParentFolderId();
    ch.bluepenguin.email.client.Account var52 = var50.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Dummy EmailFacade Impl"+ "'", var39.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var42.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var43.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Dummy EmailFacade Impl"+ "'", var47.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.children();
    boolean var12 = var8.getAllowsChildren();
    int var13 = var8.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var8);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var20 = var19.isLeaf();
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    boolean var24 = var22.equals((java.lang.Object)(short)(-1));
    java.util.Collection var25 = var22.getChildren();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    boolean var28 = var27.isLeaf();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var32 = var30.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var33 = var30.getParent();
    var27.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var30);
    boolean var35 = var22.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var27);
    boolean var36 = var19.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var27);
    var16.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var27);
    var8.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var27);
    ch.bluepenguin.email.client.Folder var39 = var8.getFolder();
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    boolean var43 = var41.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var44 = var41.getParent();
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    boolean var48 = var46.equals((java.lang.Object)(short)(-1));
    java.util.Collection var49 = var46.getChildren();
    boolean var50 = var41.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var46);
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    boolean var54 = var52.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var55 = var52.getFolder();
    int var56 = var52.getChildCount();
    var46.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var52);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var58 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var59 = var58.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var60 = var58.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var62 = var58.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var63 = var58.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var64 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var65 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var64);
    ch.bluepenguin.email.client.Folder var66 = new ch.bluepenguin.email.client.Folder();
    var65.setFolder(var66);
    ch.bluepenguin.email.client.Folder var68 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var69 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var68);
    var68.setFullName("hi!");
    var66.setParent(var68);
    var68.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var75 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var76 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var75);
    ch.bluepenguin.email.client.Folder var77 = new ch.bluepenguin.email.client.Folder();
    var76.setFolder(var77);
    org.apache.tapestry.contrib.tree.model.ITreeNode var79 = var76.getParent();
    boolean var80 = var76.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var81 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var68, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var76);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var82 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var76);
    var52.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var82);
    ch.bluepenguin.email.client.Folder var84 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var85 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var84);
    boolean var87 = var85.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var88 = var85.getFolder();
    int var89 = var85.getChildCount();
    boolean var90 = var52.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var85);
    var8.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test246");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.ISpecificationSource var1 = var0.getSpecificationSource();
    java.lang.Object var2 = var0.getGlobal();
    org.apache.tapestry.spec.IApplicationSpecification var3 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var10 = var9.getUniqueID();
    var9.setFullName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = var0.getRootList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkMenuModelHealth();
      fail("Expected exception of type ch.bluepenguin.tapestry.components.menu.model.MenuStructureException");
    } catch (ch.bluepenguin.tapestry.components.menu.model.MenuStructureException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test249");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    var6.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var11 = var6.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var6.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var14 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var15 = var14.getName();
    var14.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.MailMessage[] var18 = var14.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.moveMessages(var18, "ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]", ",");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Dummy EmailFacade Impl"+ "'", var15.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var1 = var0.getSeparator();
    java.util.Locale var2 = var0.getMyLocale();
    java.lang.String var3 = var0.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var5 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var6 = var5.getSeparator();
    java.util.Locale var7 = var5.getMyLocale();
    var4.setMyLocale(var7);
    ch.bluepenguin.email.client.MailMessage var9 = new ch.bluepenguin.email.client.MailMessage();
    var9.setBcc("Dummy EmailFacade Impl");
    var9.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var14 = var9.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var15 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var16 = var15.getReader();
    ch.bluepenguin.email.client.cache.MailCache var17 = var15.getCache();
    boolean var18 = var9.equals((java.lang.Object)var15);
    var9.setCc("(0) null");
    var9.setCc("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var23 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var23.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    var26.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var31 = var26.getSentDate();
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setTechnicalID(100);
    java.lang.String var37 = var32.getReplyTo();
    java.lang.String[] var39 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var32.setCc(var39);
    java.lang.String[] var42 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var32.setBcc(var42);
    var26.setCc(var42);
    java.lang.String var45 = var23.returnStringList(var42);
    var9.setBcc(var42);
    java.lang.String var47 = var4.returnStringList(var42);
    java.lang.String var48 = var0.returnStringList(var42);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var49 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var49.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var52 = new ch.bluepenguin.email.client.MailMessage();
    var52.setBcc("Dummy EmailFacade Impl");
    var52.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var57 = var52.getSentDate();
    ch.bluepenguin.email.client.MailMessage var58 = new ch.bluepenguin.email.client.MailMessage();
    var58.setBcc("Dummy EmailFacade Impl");
    var58.setTechnicalID(100);
    java.lang.String var63 = var58.getReplyTo();
    java.lang.String[] var65 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var58.setCc(var65);
    java.lang.String[] var68 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var58.setBcc(var68);
    var52.setCc(var68);
    java.lang.String var71 = var49.returnStringList(var68);
    java.util.Locale var72 = var49.getMyLocale();
    var0.setMyLocale(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ","+ "'", var1.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ","+ "'", var3.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ","+ "'", var6.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Dummy EmailFacade Impl"+ "'", var45.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Dummy EmailFacade Impl"+ "'", var47.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Dummy EmailFacade Impl"+ "'", var48.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Dummy EmailFacade Impl"+ "'", var71.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test251");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    var0.setUserID("");
    var0.setUserID("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var5 = var0.getUserID();
    java.lang.String var6 = var0.getUserID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var5.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var6.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var3 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var3.setText("Dummy EmailFacade Impl");
    var3.setText(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var10 = var9.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var12.setIndex(10);
    var12.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var17 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var17.setParameters((java.lang.Object[])var20);
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    var17.setComponent((org.apache.tapestry.IComponent)var22);
    var9.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var17);
    var17.setStyleClass(",");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var17);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var29 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var29.setText("Dummy EmailFacade Impl");
    var29.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var35 = var34.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var37.setIndex(10);
    var37.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var42 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var44 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var45 = var44.getSuppressed();
    var42.setParameters((java.lang.Object[])var45);
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    var42.setComponent((org.apache.tapestry.IComponent)var47);
    var34.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var37, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var42);
    var42.setStyleClass(",");
    var29.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var42);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var54 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var29.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var54);
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var29);
    var29.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0) null"+ "'", var10.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0) null"+ "'", var35.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test253");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    var0.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    java.lang.Object var6 = var4.getGlobal();
    java.lang.Object var7 = var4.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var10 = var9.getParent();
    ch.bluepenguin.email.client.MailMessage var11 = new ch.bluepenguin.email.client.MailMessage();
    var11.setBcc("Dummy EmailFacade Impl");
    var11.setTechnicalID(100);
    var11.setText("hi!");
    var9.setContained((java.lang.Object)var11);
    var4.setVisit((java.lang.Object)var11);
    java.lang.String var20 = var11.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var11);
    java.lang.String[] var22 = var0.getTo();
    java.lang.String[] var23 = var0.getCc();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test255");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var0.setLocale(",");
    java.lang.String var3 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ","+ "'", var3.equals(","));

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    org.apache.tapestry.engine.IComponentClassEnhancer var22 = var13.getComponentClassEnhancer();
    var13.forgetPage(",");
    org.apache.tapestry.engine.IScriptSource var25 = var13.getScriptSource();
    java.lang.String var26 = var13.getServletPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var5.setDepth(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test259");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var4.setLeaf(false);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var10.setName("");
    boolean var13 = var10.isLeaf();
    var10.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var17 = var16.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var18 = var16.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var19 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var22 = var21.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var23 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21);
    var19.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21);
    var16.setVisit((java.lang.Object)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var28 = var27.getParent();
    java.lang.Object var29 = var27.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var30 = var19.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var27);
    java.lang.String var31 = var19.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var33 = var32.displayMenuStructure();
    java.util.Iterator var34 = var32.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var38 = var37.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var39 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var37);
    var35.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var37);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var41 = var32.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var37);
    java.lang.String var42 = var37.getName();
    var37.setIndex(1);
    boolean var45 = var37.isLeaf();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var46 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var46.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var49 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var49.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var52 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var52.setText("Dummy EmailFacade Impl");
    var52.setText(",");
    var49.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var52);
    var46.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var49);
    var49.setText("hi!");
    var19.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var37, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var49);
    var49.setStyleClass("");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var10, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var49);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var66 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var66.setParent((java.lang.Object)100L);
    java.lang.String var69 = var66.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var71 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var72 = var71.getParent();
    java.lang.Object var73 = var71.getContained();
    var71.setLeaf(true);
    var66.setContained((java.lang.Object)var71);
    java.lang.Object var77 = var71.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var78 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var71);
    var71.setName("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 10.0f+ "'", var29.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0) null\n   (0) null"+ "'", var31.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0) null"+ "'", var33.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + 10.0f+ "'", var73.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test260");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    java.util.Collection var5 = var4.children();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    var6.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    var4.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var14 = var13.getName();
    var13.setIndex(10);
    ch.bluepenguin.email.client.tapestry.SpringEngine var17 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var17.forgetPage("");
    org.apache.tapestry.engine.IPageSource var20 = var17.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var21 = var17.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var23 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var24 = var23.getSpecification();
    java.lang.Object var25 = var23.getGlobal();
    java.lang.Object var26 = var23.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var29 = var28.getParent();
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setTechnicalID(100);
    var30.setText("hi!");
    var28.setContained((java.lang.Object)var30);
    var23.setVisit((java.lang.Object)var30);
    ch.bluepenguin.email.client.service.EmailFacadeException var40 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var23.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var40);
    var17.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", (java.lang.Throwable)var40);
    java.lang.Exception var43 = var40.getTechnicalException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var44 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var45 = var44.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var48 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var44.reportException("", (java.lang.Throwable)var48);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var51 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var52 = var51.getSuppressed();
    var48.addSuppressed((java.lang.Throwable)var51);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var55 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var56 = var55.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var57 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var58 = var57.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var60 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var61 = var60.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var64 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var60.reportException("", (java.lang.Throwable)var64);
    var57.reportException("hi!", (java.lang.Throwable)var64);
    var55.addSuppressed((java.lang.Throwable)var64);
    var48.addSuppressed((java.lang.Throwable)var64);
    var40.setTechnicalException((java.lang.Exception)var48);
    var13.setContained((java.lang.Object)var48);
    var13.setLeaf(false);
    boolean var73 = var4.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test261");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var0.setStyleClass("Default EmailFacade Impl");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var10 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var11 = var10.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var12 = var10.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var14 = var10.getMessagesFromFolder("(0) null\n   (0) null");
    var0.setParameters((java.lang.Object[])var14);
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    java.lang.String var18 = var16.getPageName();
    var16.endPageRender();
    org.apache.tapestry.spec.IComponentSpecification var20 = var16.getSpecification();
    var0.setComponent((org.apache.tapestry.IComponent)var16);
    java.util.Locale var22 = var16.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var24 = var16.getNestedComponent("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test262");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.lang.String var19 = var12.getIdPath();
    org.apache.tapestry.ILocation var20 = var12.getLocation();
    org.apache.tapestry.IEngine var21 = var12.getEngine();
    var12.beginPageRender();
    org.apache.tapestry.ILocation var23 = var12.getLocation();
    var10.setComponent((org.apache.tapestry.IComponent)var12);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var27 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var28 = var27.getSuppressed();
    var25.setParameters((java.lang.Object[])var28);
    var10.setParameters((java.lang.Object[])var28);
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    java.util.Map var32 = var31.getComponents();
    var10.setComponent((org.apache.tapestry.IComponent)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.setPageName("Dummy EmailFacade Impl");
    var0.setId("(0) null\n   (0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var6 = var0.getNestedComponent("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test264");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var14 = var11.getFolder();
    ch.bluepenguin.email.client.Folder var15 = var11.getFolder();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var24 = var23.isLeaf();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var29 = var26.getParent();
    var23.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    boolean var31 = var18.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var23);
    var11.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    boolean var33 = var11.getAllowsChildren();
    boolean var34 = var11.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    java.lang.String var24 = var0.getReplyTo();
    java.lang.String var25 = var0.getFrom();
    java.lang.String[] var26 = var0.getTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test266");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    java.lang.String var5 = var0.getFullName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test267");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    java.lang.String var1 = var0.getUserID();
    var0.setUserID("");
    java.lang.String var4 = var0.getUserID();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var9 = var0.getUserID();
    var0.setUserID("(0) null\n   (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var9.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test268");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    java.util.Locale var10 = var4.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var12 = var4.getComponent("(0) null\n   (0) null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test269");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.engine.IPageSource var6 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var9 = var8.getSpecification();
    java.lang.Object var10 = var8.getGlobal();
    java.lang.Object var11 = var8.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var14 = var13.getParent();
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    var15.setBcc("Dummy EmailFacade Impl");
    var15.setTechnicalID(100);
    var15.setText("hi!");
    var13.setContained((java.lang.Object)var15);
    var8.setVisit((java.lang.Object)var15);
    ch.bluepenguin.email.client.service.EmailFacadeException var25 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var8.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var25);
    var0.reportException(",", (java.lang.Throwable)var25);
    java.lang.Exception var28 = var25.getTechnicalException();
    java.lang.Exception var29 = var25.getTechnicalException();
    java.lang.Exception var30 = var25.getTechnicalException();
    ch.bluepenguin.email.client.service.EmailFacadeException var31 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var32 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var33 = var32.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var35 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var36 = var35.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var39 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var35.reportException("", (java.lang.Throwable)var39);
    var32.reportException("hi!", (java.lang.Throwable)var39);
    var31.setTechnicalException((java.lang.Exception)var39);
    ch.bluepenguin.email.client.tapestry.SpringEngine var43 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var44 = var43.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var47 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var43.reportException("", (java.lang.Throwable)var47);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var50 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var51 = var50.getSuppressed();
    var47.addSuppressed((java.lang.Throwable)var50);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var54 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var55 = var54.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var56 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var57 = var56.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var59 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var60 = var59.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var63 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var59.reportException("", (java.lang.Throwable)var63);
    var56.reportException("hi!", (java.lang.Throwable)var63);
    var54.addSuppressed((java.lang.Throwable)var63);
    var47.addSuppressed((java.lang.Throwable)var63);
    var31.setTechnicalException((java.lang.Exception)var63);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var70 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var72 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var73 = var72.getSuppressed();
    java.lang.Throwable[] var74 = var72.getSuppressed();
    var70.addSuppressed((java.lang.Throwable)var72);
    var31.setTechnicalException((java.lang.Exception)var70);
    java.lang.Exception var77 = var31.getTechnicalException();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var79 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("(0) null\n   (0) null");
    var31.setTechnicalException((java.lang.Exception)var79);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var82 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var83 = var82.getSuppressed();
    var79.addSuppressed((java.lang.Throwable)var82);
    var25.addSuppressed((java.lang.Throwable)var79);
    java.lang.Exception var86 = var25.getTechnicalException();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test270");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    java.lang.String var7 = var5.getPageName();
    java.lang.String var8 = var5.toString();
    org.apache.tapestry.IEngine var9 = var5.getEngine();
    var0.addBody((org.apache.tapestry.IRender)var5);
    java.lang.String var11 = var5.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var13 = var5.getNestedComponent("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var4 = var3.getMenuItem();
    int var5 = var3.getChildrenSize();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var8 = var7.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    java.util.Iterator var10 = var9.getChildrenIterator();
    var3.addChild(var9);
    java.util.Iterator var12 = var3.getChildrenIterator();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var14 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var14.setParent((java.lang.Object)100L);
    java.lang.String var17 = var14.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var14);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var19 = var14.getRenderer();
    java.lang.String var20 = var14.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var14);
    var3.addChild(var21);
    boolean var23 = var3.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test272");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var6 = var0.getMessagesFromFolder("hi!");
    ch.bluepenguin.email.client.MailMessage[] var8 = var0.getMessagesFromFolder("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.Folder var9 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var10 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var10.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var14 = var10.getMessagesFromFolder("Dummy EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var14, "hi!", "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test273");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    java.lang.String var8 = var3.getPageName();
    java.lang.String var9 = var3.getIdPath();
    org.apache.tapestry.event.ChangeObserver var10 = var3.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    java.lang.String[] var2 = var0.getCc();
    ch.bluepenguin.email.client.Folder var3 = var0.getFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test275");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var10 = var9.getUniqueID();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var13 = var12.isLeaf();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    boolean var17 = var15.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var18 = var15.getParent();
    var12.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var15);
    ch.bluepenguin.email.client.Folder var20 = var12.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var21 = var20.getUniqueID();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.getChildren();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var30 = var29.isLeaf();
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var35 = var32.getParent();
    var29.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    boolean var37 = var24.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var29);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var38 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var38.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var41 = var38.getCurrentFolder();
    var29.setFolder(var41);
    var20.setParent(var41);
    java.lang.String var44 = var41.getName();
    var9.setParent(var41);
    ch.bluepenguin.email.client.Account var46 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var47 = var46.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var48 = var46.getUniqueID();
    ch.bluepenguin.email.client.Person var49 = new ch.bluepenguin.email.client.Person();
    java.lang.String var50 = var49.getFirstname();
    var46.setPerson(var49);
    ch.bluepenguin.email.client.Person var52 = new ch.bluepenguin.email.client.Person();
    java.lang.String var53 = var52.getFirstname();
    var52.setNickname("");
    var52.setLastname(",");
    java.lang.String var58 = var52.getNickname();
    java.lang.String var59 = var52.getLastname();
    var46.setPerson(var52);
    ch.bluepenguin.email.client.AbstractUniqueID var61 = var46.getUniqueID();
    ch.bluepenguin.email.client.Person var62 = new ch.bluepenguin.email.client.Person();
    java.lang.String var63 = var62.getFirstname();
    var62.setNickname("");
    var62.setLastname(",");
    java.lang.String var68 = var62.getNickname();
    var46.setPerson(var62);
    var41.setAccount(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Current Folder"+ "'", var44.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ","+ "'", var59.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test276");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.lang.String var19 = var12.getIdPath();
    org.apache.tapestry.ILocation var20 = var12.getLocation();
    org.apache.tapestry.IEngine var21 = var12.getEngine();
    var12.beginPageRender();
    org.apache.tapestry.ILocation var23 = var12.getLocation();
    var10.setComponent((org.apache.tapestry.IComponent)var12);
    org.apache.tapestry.IAsset var26 = var12.getAsset("(0) null\n   (0) null");
    org.apache.tapestry.IRender[] var27 = var12.getBody();
    java.util.Collection var28 = var12.getBindingNames();
    var12.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    var31.beginPageRender();
    java.util.Collection var33 = var31.getBindingNames();
    org.apache.tapestry.IAsset var35 = var31.getAsset(",");
    var12.setPage((org.apache.tapestry.IPage)var31);
    org.apache.tapestry.IBinding var38 = var31.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test277");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    org.apache.tapestry.event.ChangeObserver var8 = var3.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.Home var9 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var10 = var9.getBody();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var11 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var13 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var14 = var13.getSuppressed();
    var11.setParameters((java.lang.Object[])var14);
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    var11.setComponent((org.apache.tapestry.IComponent)var16);
    var16.setId("Dummy EmailFacade Impl");
    int var21 = var16.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var22 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var24 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var25 = var24.getSuppressed();
    var22.setParameters((java.lang.Object[])var25);
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    var22.setComponent((org.apache.tapestry.IComponent)var27);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    var30.setPageName("");
    var27.addBody((org.apache.tapestry.IRender)var30);
    org.apache.tapestry.IEngine var36 = var30.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var41 = var40.getBody();
    int var42 = var40.getBodyCount();
    var37.addComponent((org.apache.tapestry.IComponent)var40);
    var30.addBody((org.apache.tapestry.IRender)var40);
    org.apache.tapestry.IComponent var45 = var40.getContainer();
    org.apache.tapestry.event.ChangeObserver var46 = var40.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var47 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var47.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var50 = var47.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var51 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var52 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var53 = var52.getSeparator();
    java.util.Locale var54 = var52.getMyLocale();
    var51.setMyLocale(var54);
    var47.setMyLocale(var54);
    var40.setLocale(var54);
    var16.addBody((org.apache.tapestry.IRender)var40);
    var9.addComponent((org.apache.tapestry.IComponent)var40);
    var3.setContainer((org.apache.tapestry.IComponent)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var62 = var9.getNestedComponent("hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ","+ "'", var53.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    org.apache.tapestry.IAsset var9 = var3.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var10 = var3.toString();
    java.util.Collection var11 = var3.getBindingNames();
    org.apache.tapestry.ILocation var12 = var3.getLocation();
    org.apache.tapestry.ILocation var13 = var3.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test279");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var4 = new java.lang.String[] { "(0) null"};
    java.lang.String var5 = var0.returnStringList(var4);
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var6.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var9 = var6.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var10 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var10.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var13 = var10.getMyLocale();
    var6.setLocale(var13);
    var0.setMyLocale(var13);
    java.util.Locale var16 = var0.getMyLocale();
    ch.bluepenguin.email.client.tapestry.SpringEngine var17 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var18 = var17.getVisit();
    java.lang.String var19 = var17.toString();
    boolean var20 = var17.isDirty();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var21 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var22 = var21.getSeparator();
    java.util.Locale var23 = var21.getMyLocale();
    var17.setLocale(var23);
    var0.setMyLocale(var23);
    java.lang.String var26 = var0.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ","+ "'", var22.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var26.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var4 = new java.lang.String[] { "(0) null"};
    java.lang.String var5 = var0.returnStringList(var4);
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var6.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var9 = var6.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var10 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var10.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var13 = var10.getMyLocale();
    var6.setLocale(var13);
    var0.setMyLocale(var13);
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    var19.beginPageRender();
    java.util.Collection var21 = var19.getBindingNames();
    var16.setPage((org.apache.tapestry.IPage)var19);
    org.apache.tapestry.listener.ListenerMap var23 = var19.getListeners();
    int var24 = var19.getBodyCount();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var25 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var26 = var25.getSeparator();
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    var27.addComponent((org.apache.tapestry.IComponent)var30);
    java.lang.String var34 = var27.getIdPath();
    org.apache.tapestry.ILocation var35 = var27.getLocation();
    org.apache.tapestry.IEngine var36 = var27.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var37 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var37.setSeparator("");
    java.util.Locale var40 = var37.getMyLocale();
    var27.setLocale(var40);
    var25.setMyLocale(var40);
    var19.setLocale(var40);
    var0.setMyLocale(var40);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var45 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var45.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var49 = new java.lang.String[] { "(0) null"};
    java.lang.String var50 = var45.returnStringList(var49);
    java.util.Locale var51 = var45.getMyLocale();
    java.util.Locale var52 = var45.getMyLocale();
    var0.setMyLocale(var52);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var54 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var55 = var54.getSeparator();
    java.util.Locale var56 = var54.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var57 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var57.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var61 = new java.lang.String[] { "(0) null"};
    java.lang.String var62 = var57.returnStringList(var61);
    ch.bluepenguin.email.client.tapestry.SpringEngine var63 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var63.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var66 = var63.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var67 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var67.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var70 = var67.getMyLocale();
    var63.setLocale(var70);
    var57.setMyLocale(var70);
    var54.setMyLocale(var70);
    var0.setMyLocale(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ","+ "'", var26.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0) null"+ "'", var50.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ","+ "'", var55.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0) null"+ "'", var62.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test281");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var3 = var0.getSeparator();
    var0.setSeparator("(0) null\n   (0) null");
    java.lang.String var6 = var0.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var7 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var7.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var11 = new java.lang.String[] { "(0) null"};
    java.lang.String var12 = var7.returnStringList(var11);
    java.util.Locale var13 = var7.getMyLocale();
    java.util.Locale var14 = var7.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    var15.setBcc("Dummy EmailFacade Impl");
    var15.setTechnicalID(100);
    java.lang.String var20 = var15.getReplyTo();
    java.lang.String[] var22 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var15.setCc(var22);
    java.lang.String[] var25 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var15.setBcc(var25);
    java.lang.String var27 = var7.returnStringList(var25);
    java.lang.String var28 = var0.returnStringList(var25);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var29 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var29.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var33 = new java.lang.String[] { "(0) null"};
    java.lang.String var34 = var29.returnStringList(var33);
    ch.bluepenguin.email.client.tapestry.SpringEngine var35 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var35.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var38 = var35.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var39 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var39.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var42 = var39.getMyLocale();
    var35.setLocale(var42);
    var29.setMyLocale(var42);
    java.util.Locale var45 = var29.getMyLocale();
    var0.setMyLocale(var45);
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setTechnicalID(100);
    java.lang.String var52 = var47.getReplyTo();
    java.lang.String[] var54 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var47.setCc(var54);
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setSubject("(0) null");
    java.util.Date var60 = var47.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var61 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var61.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var64 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var64.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var67 = new ch.bluepenguin.email.client.MailMessage();
    var67.setBcc("Dummy EmailFacade Impl");
    var67.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var72 = var67.getSentDate();
    ch.bluepenguin.email.client.MailMessage var73 = new ch.bluepenguin.email.client.MailMessage();
    var73.setBcc("Dummy EmailFacade Impl");
    var73.setTechnicalID(100);
    java.lang.String var78 = var73.getReplyTo();
    java.lang.String[] var80 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var73.setCc(var80);
    java.lang.String[] var83 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var73.setBcc(var83);
    var67.setCc(var83);
    java.lang.String var86 = var64.returnStringList(var83);
    java.lang.String[] var88 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var89 = var64.returnStringList(var88);
    java.lang.String var90 = var61.returnStringList(var88);
    var47.setTo(var88);
    java.lang.String var92 = var0.returnStringList(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var3.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null\n   (0) null"+ "'", var6.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0) null"+ "'", var12.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Dummy EmailFacade Impl"+ "'", var27.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Dummy EmailFacade Impl"+ "'", var28.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0) null"+ "'", var34.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "Dummy EmailFacade Impl"+ "'", var86.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var89.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var90.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var92.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    var5.setFolder(var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var6.setParent(var8);
    ch.bluepenguin.email.client.Account var13 = var8.getAccount();
    var8.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.setParent(var8);
    var0.setFullName("Default EmailFacade Impl");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test283");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    var0.setPageName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.util.Locale var8 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test284");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var3.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test285");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var7.setParent((java.lang.Object)100L);
    java.lang.String var10 = var7.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var12 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var7.setContained((java.lang.Object)var12);
    ch.bluepenguin.email.client.MailMessage[] var14 = var12.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var14, "ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]", "(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test286");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var10 = var9.getUniqueID();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var15 = var12.getFolder();
    var9.setParent(var15);
    var9.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    ch.bluepenguin.email.client.MailMessage[] var8 = var6.getAllMessages();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var11 = var10.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var10);
    java.lang.String var13 = var12.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var14 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var13);
    java.lang.Object var15 = var14.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var16 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var17 = var16.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var19 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var19.setIndex(10);
    var19.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var24 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var26 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var27 = var26.getSuppressed();
    var24.setParameters((java.lang.Object[])var27);
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    var24.setComponent((org.apache.tapestry.IComponent)var29);
    var16.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var19, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var35 = var34.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var34);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var37 = var36.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var38 = var36.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var39 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var16.addMenuItem(var38, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var39);
    ch.bluepenguin.email.client.tapestry.Home var41 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var42 = var41.getBody();
    int var43 = var41.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var45 = var44.getBody();
    int var46 = var44.getBodyCount();
    var41.addComponent((org.apache.tapestry.IComponent)var44);
    java.lang.String var48 = var41.getIdPath();
    org.apache.tapestry.ILocation var49 = var41.getLocation();
    org.apache.tapestry.IEngine var50 = var41.getEngine();
    var41.beginPageRender();
    var39.setComponent((org.apache.tapestry.IComponent)var41);
    var14.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var39);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var54 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var55 = var54.getName();
    ch.bluepenguin.email.client.Folder var56 = var54.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var58 = var54.getMessagesFromFolder("Dummy EmailFacade Impl");
    var39.setParameters((java.lang.Object[])var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.moveMessages(var58, "Default EmailFacade Impl", "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0) null"+ "'", var13.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null"+ "'", var15.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0) null"+ "'", var17.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Dummy EmailFacade Impl"+ "'", var55.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var11 = var0.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var4);
    java.lang.Object var6 = var5.getContained();
    var5.setName("(0) null\n   (0) null");
    java.lang.String var9 = var5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null\n   (0) null"+ "'", var9.equals("(0) null\n   (0) null"));

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    var14.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var21 = new ch.bluepenguin.email.client.MailMessage();
    var21.setBcc("Dummy EmailFacade Impl");
    var21.setTechnicalID(100);
    java.lang.String var26 = var21.getReplyTo();
    java.lang.String[] var28 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var21.setCc(var28);
    var14.setBcc(var28);
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    java.lang.String var34 = var31.getReplyTo();
    var31.setBcc(",");
    var14.copyTo((org.springframework.mail.MailMessage)var31);
    java.lang.String var38 = var14.getReplyTo();
    java.lang.String[] var39 = var14.getBcc();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var49 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var49.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var52 = new ch.bluepenguin.email.client.MailMessage();
    var52.setBcc("Dummy EmailFacade Impl");
    var52.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var57 = var52.getSentDate();
    ch.bluepenguin.email.client.MailMessage var58 = new ch.bluepenguin.email.client.MailMessage();
    var58.setBcc("Dummy EmailFacade Impl");
    var58.setTechnicalID(100);
    java.lang.String var63 = var58.getReplyTo();
    java.lang.String[] var65 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var58.setCc(var65);
    java.lang.String[] var68 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var58.setBcc(var68);
    var52.setCc(var68);
    java.lang.String var71 = var49.returnStringList(var68);
    var40.setCc(var68);
    var14.setCc(var68);
    var0.copyTo((org.springframework.mail.MailMessage)var14);
    java.util.Date var75 = var0.getSentDate();
    java.lang.String var76 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Dummy EmailFacade Impl"+ "'", var71.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    var0.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getAllMessages();
    var0.setCurrentFolder("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    var15.beginPageRender();
    java.util.Collection var17 = var15.getBindingNames();
    var12.setPage((org.apache.tapestry.IPage)var15);
    org.apache.tapestry.listener.ListenerMap var19 = var15.getListeners();
    int var20 = var15.getBodyCount();
    var15.endPageRender();
    java.lang.String var22 = var15.getExtendedId();
    var4.setPage((org.apache.tapestry.IPage)var15);
    java.lang.String var24 = var15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.engine.IPageSource var6 = var0.getPageSource();
    java.lang.String var7 = var0.toString();
    org.apache.tapestry.engine.IScriptSource var8 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var2 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var2.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var6 = new java.lang.String[] { "(0) null"};
    java.lang.String var7 = var2.returnStringList(var6);
    java.util.Locale var8 = var2.getMyLocale();
    java.util.Locale var9 = var2.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getReplyTo();
    java.lang.String[] var17 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var10.setCc(var17);
    java.lang.String[] var20 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var10.setBcc(var20);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    var10.setBcc(var32);
    java.lang.String[] var35 = var10.getBcc();
    java.lang.String var36 = var2.returnStringList(var35);
    var0.setBcc(var35);
    var0.setTechnicalID(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    boolean var31 = var25.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    boolean var35 = var33.equals((java.lang.Object)(short)(-1));
    java.util.Collection var36 = var33.getChildren();
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var39 = var38.isLeaf();
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    boolean var43 = var41.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var44 = var41.getParent();
    var38.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var41);
    boolean var46 = var33.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var38);
    ch.bluepenguin.email.client.Folder var47 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var48 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var47);
    boolean var49 = var48.isLeaf();
    ch.bluepenguin.email.client.Folder var50 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var51 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var50);
    boolean var53 = var51.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var54 = var51.getParent();
    var48.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var51);
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    boolean var59 = var57.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var60 = var57.getParent();
    var48.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var57);
    boolean var62 = var33.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var57);
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    boolean var66 = var64.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var67 = var64.getParent();
    ch.bluepenguin.email.client.Folder var68 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var69 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var68);
    boolean var71 = var69.equals((java.lang.Object)(short)(-1));
    java.util.Collection var72 = var69.getChildren();
    boolean var73 = var64.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var69);
    java.util.Collection var74 = var64.getChildren();
    var33.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var64);
    org.apache.tapestry.contrib.tree.model.ITreeNode var76 = var33.getParent();
    ch.bluepenguin.email.client.Folder var77 = var33.getFolder();
    ch.bluepenguin.email.client.Folder var78 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var79 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var78);
    boolean var81 = var79.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var82 = var79.getFolder();
    ch.bluepenguin.email.client.Folder var83 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var84 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var83);
    boolean var85 = var84.isLeaf();
    var79.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var84);
    ch.bluepenguin.email.client.Folder var87 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var88 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var87);
    ch.bluepenguin.email.client.Folder var89 = new ch.bluepenguin.email.client.Folder();
    var88.setFolder(var89);
    ch.bluepenguin.email.client.Folder var91 = var88.getFolder();
    java.util.Collection var92 = var88.getChildren();
    var79.insert(var92);
    int var94 = var79.getChildCount();
    var33.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var79);
    java.util.Collection var96 = var33.children();
    var25.insert(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setReplyTo("Default EmailFacade Impl");
    java.util.Date var21 = var0.getSentDate();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Date var24 = var0.getSentDate();
    java.lang.String[] var25 = var0.getBcc();
    java.lang.String var26 = var0.getFrom();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Account var6 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var7 = var6.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var6.getUniqueID();
    ch.bluepenguin.email.client.Person var9 = new ch.bluepenguin.email.client.Person();
    java.lang.String var10 = var9.getFirstname();
    var6.setPerson(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var12 = var9.getUniqueID();
    var0.setPerson(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var9.getUniqueID();
    java.lang.String var15 = var9.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var19 = var18.getParent();
    var18.setLeaf(false);
    var3.setContained((java.lang.Object)var18);
    java.lang.Object var23 = var18.getContained();
    var18.setLeaf(false);
    boolean var26 = var18.isLeaf();
    int var27 = var18.getIndex();
    int var28 = var18.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 10.0f+ "'", var23.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isResetServiceEnabled();
    org.apache.tapestry.util.io.DataSqueezer var5 = var0.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test300");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    ch.bluepenguin.email.client.tapestry.Home var2 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var3 = var2.getBody();
    int var4 = var2.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    var5.beginPageRender();
    java.util.Collection var7 = var5.getBindingNames();
    var2.setPage((org.apache.tapestry.IPage)var5);
    org.apache.tapestry.listener.ListenerMap var9 = var5.getListeners();
    int var10 = var5.getBodyCount();
    java.util.Map var11 = var5.getAssets();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    var12.beginPageRender();
    java.util.Collection var14 = var12.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var15 = var12.getListeners();
    java.lang.String var16 = var12.getPageName();
    var5.setPage((org.apache.tapestry.IPage)var12);
    var0.addComponent((org.apache.tapestry.IComponent)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var20 = var0.getNestedComponent("");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var6 = var1.getRenderer();
    java.lang.String var7 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var9 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var10.setText("Dummy EmailFacade Impl");
    var1.setParent((java.lang.Object)"Dummy EmailFacade Impl");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test302");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var7 = var6.getSpecification();
    java.lang.Object var8 = var6.getGlobal();
    java.lang.Object var9 = var6.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    var13.setText("hi!");
    var11.setContained((java.lang.Object)var13);
    var6.setVisit((java.lang.Object)var13);
    ch.bluepenguin.email.client.service.EmailFacadeException var23 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var6.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var23);
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", (java.lang.Throwable)var23);
    org.apache.tapestry.asset.ResourceChecksumSource var26 = var0.getResourceChecksumSource();
    java.lang.String var27 = var0.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test303");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    java.lang.String var6 = var0.getName();
    java.lang.String var7 = var0.getName();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var8 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var8.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var12 = var8.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var14 = var8.getMessagesFromFolder("hi!");
    ch.bluepenguin.email.client.MailMessage[] var16 = var8.getMessagesFromFolder("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.Folder var17 = var8.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var18 = var8.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var18, "Current Folder", "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Dummy EmailFacade Impl"+ "'", var7.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test304");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    var7.addComponent((org.apache.tapestry.IComponent)var10);
    java.lang.String var14 = var7.getIdPath();
    org.apache.tapestry.ILocation var15 = var7.getLocation();
    org.apache.tapestry.IEngine var16 = var7.getEngine();
    var7.beginPageRender();
    java.lang.String var18 = var7.toString();
    var3.setPage((org.apache.tapestry.IPage)var7);
    java.util.Map var20 = var3.getComponents();
    int var21 = var3.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    var25.beginPageRender();
    java.util.Collection var27 = var25.getBindingNames();
    var22.setPage((org.apache.tapestry.IPage)var25);
    org.apache.tapestry.listener.ListenerMap var29 = var25.getListeners();
    int var30 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    int var36 = var34.getBodyCount();
    var31.addComponent((org.apache.tapestry.IComponent)var34);
    java.lang.String var38 = var31.getIdPath();
    org.apache.tapestry.ILocation var39 = var31.getLocation();
    org.apache.tapestry.IEngine var40 = var31.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var41 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var42 = var41.getBody();
    int var43 = var41.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    var44.beginPageRender();
    java.util.Collection var46 = var44.getBindingNames();
    var41.setPage((org.apache.tapestry.IPage)var44);
    var31.addComponent((org.apache.tapestry.IComponent)var44);
    org.apache.tapestry.IAsset var50 = var31.getAsset("Dummy EmailFacade Impl");
    var25.setContainer((org.apache.tapestry.IComponent)var31);
    var25.setPageName("Default EmailFacade Impl");
    var3.addComponent((org.apache.tapestry.IComponent)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var56 = var3.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test305");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    var0.setAll(true);
    boolean var6 = var0.isDirty((java.lang.Integer)100);
    var0.setState((java.lang.Integer)(-1), false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test306");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = var0.getRootList();
    int var4 = var3.getChildrenSize();
    java.lang.String var5 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var8 = var7.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    java.util.Iterator var10 = var9.getChildrenIterator();
    var3.addChild(var9);
    int var12 = var3.getChildrenSize();
    java.util.Iterator var13 = var3.getChildrenIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test307");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var6 = var1.getRenderer();
    java.lang.String var7 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var9 = var1.getRenderer();
    int var10 = var1.getIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test308");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.listener.ListenerMap var2 = var0.getListeners();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var4 = var0.getComponentClassEnhancer();
    org.apache.tapestry.engine.IComponentMessagesSource var5 = var0.getComponentMessagesSource();
    org.apache.tapestry.IResourceResolver var6 = var0.getResourceResolver();
    boolean var7 = var0.isResetServiceEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test309");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder[] var4 = var0.getAllFolders();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var5 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.email.client.MailMessage[] var7 = var5.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var7, "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test310");


    ch.bluepenguin.email.client.cache.MailCache var1 = new ch.bluepenguin.email.client.cache.MailCache("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test311");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    org.apache.tapestry.util.pool.Pool var6 = var0.getPool();
    org.apache.tapestry.util.io.DataSqueezer var7 = var0.getDataSqueezer();
    var0.forgetPage("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var2 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.email.client.MailMessage[] var4 = var2.getAllMessages();
    boolean var5 = var0.equals((java.lang.Object)var2);
    java.lang.String var6 = var0.getFrom();
    ch.bluepenguin.email.client.AbstractUniqueID var7 = var0.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Dummy EmailFacade Impl"+ "'", var3.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test313");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    java.lang.Object var17 = var3.getContained();
    var3.setDepth(10);
    java.lang.Object var20 = var3.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + 10L+ "'", var20.equals(10L));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test314");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Account var6 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var7 = var6.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var6.getUniqueID();
    ch.bluepenguin.email.client.Person var9 = new ch.bluepenguin.email.client.Person();
    java.lang.String var10 = var9.getFirstname();
    var6.setPerson(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var12 = var9.getUniqueID();
    var0.setPerson(var9);
    var9.setNickname("");
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var9.getUniqueID();
    java.lang.Integer var17 = var16.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test315");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.util.Map var5 = var0.getAssets();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var7 = var6.getSpecification();
    java.lang.Object var8 = var6.getGlobal();
    java.lang.Object var9 = var6.getGlobal();
    var0.attach((org.apache.tapestry.IEngine)var6);
    var0.setId("Default EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var14 = var0.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test316");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    java.lang.Object var6 = var4.getGlobal();
    java.lang.Object var7 = var4.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var10 = var9.getParent();
    ch.bluepenguin.email.client.MailMessage var11 = new ch.bluepenguin.email.client.MailMessage();
    var11.setBcc("Dummy EmailFacade Impl");
    var11.setTechnicalID(100);
    var11.setText("hi!");
    var9.setContained((java.lang.Object)var11);
    var4.setVisit((java.lang.Object)var11);
    java.lang.String var20 = var11.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var11);
    java.lang.String var22 = var11.getFrom();
    var11.setTechnicalID(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test317");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    var1.setId((java.lang.Integer)0);
    java.lang.Integer var4 = var1.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + 0+ "'", var4.equals(0));

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test318");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var12.getUniqueID();
    var5.setAccount(var12);
    ch.bluepenguin.email.client.Person var15 = var12.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var12.getUniqueID();
    java.lang.Integer var17 = var16.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test319");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IPage var12 = var4.getPage();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    var13.addComponent((org.apache.tapestry.IComponent)var16);
    java.util.Map var20 = var16.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var21 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var21.forgetPage("");
    org.apache.tapestry.engine.IPageSource var24 = var21.getPageSource();
    org.apache.tapestry.engine.IPropertySource var25 = var21.getPropertySource();
    java.util.Collection var26 = var21.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var27 = var21.getComponentMessagesSource();
    var16.attach((org.apache.tapestry.IEngine)var21);
    java.lang.Object var29 = var16.getVisit();
    var16.setPageName("Default EmailFacade Impl");
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    java.lang.String var34 = var32.getPageName();
    java.lang.String var35 = var32.toString();
    org.apache.tapestry.IEngine var36 = var32.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    java.lang.String var39 = var37.getPageName();
    java.lang.String var40 = var37.toString();
    org.apache.tapestry.IEngine var41 = var37.getEngine();
    var32.addBody((org.apache.tapestry.IRender)var37);
    java.lang.String var43 = var37.toString();
    var16.addComponent((org.apache.tapestry.IComponent)var37);
    var4.addComponent((org.apache.tapestry.IComponent)var16);
    org.apache.tapestry.IComponent var46 = var4.getContainer();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var48 = var4.getComponent("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test320");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    var0.setTo("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setCc("hi!");
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.children();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    var16.setFullName("hi!");
    var16.setFullName("Dummy EmailFacade Impl");
    var12.setFolder(var16);
    ch.bluepenguin.email.client.Account var23 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var24 = var23.getUniqueID();
    var16.setAccount(var23);
    boolean var26 = var8.equals((java.lang.Object)var23);
    ch.bluepenguin.email.client.AbstractUniqueID var27 = var8.getUniqueID();
    var8.setFrom("(0) null");
    boolean var30 = var0.equals((java.lang.Object)var8);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var31 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var31.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    var34.setBcc("Dummy EmailFacade Impl");
    var34.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var39 = var34.getSentDate();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    java.lang.String[] var50 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var40.setBcc(var50);
    var34.setCc(var50);
    java.lang.String var53 = var31.returnStringList(var50);
    var0.setCc(var50);
    ch.bluepenguin.email.client.MailMessage var55 = new ch.bluepenguin.email.client.MailMessage();
    var55.setBcc("Dummy EmailFacade Impl");
    var55.setTechnicalID(100);
    java.lang.String var60 = var55.getReplyTo();
    var55.setTo("");
    ch.bluepenguin.email.client.MailMessage var63 = new ch.bluepenguin.email.client.MailMessage();
    var63.setCc("hi!");
    ch.bluepenguin.email.client.Folder var66 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var67 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var66);
    boolean var69 = var67.equals((java.lang.Object)(short)(-1));
    java.util.Collection var70 = var67.children();
    ch.bluepenguin.email.client.Folder var71 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var72 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var71);
    var71.setFullName("hi!");
    var71.setFullName("Dummy EmailFacade Impl");
    var67.setFolder(var71);
    ch.bluepenguin.email.client.Account var78 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var79 = var78.getUniqueID();
    var71.setAccount(var78);
    boolean var81 = var63.equals((java.lang.Object)var78);
    ch.bluepenguin.email.client.AbstractUniqueID var82 = var63.getUniqueID();
    var63.setFrom("(0) null");
    boolean var85 = var55.equals((java.lang.Object)var63);
    var55.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.copyTo((org.springframework.mail.MailMessage)var55);
    java.lang.String[] var89 = var55.getBcc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Dummy EmailFacade Impl"+ "'", var53.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test321");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    var8.endPageRender();
    var8.setId("(0) null\n   (0) null");
    java.util.Map var18 = var8.getAssets();
    java.lang.String var19 = var8.getExtendedId();
    java.lang.String var20 = var8.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0) null\n   (0) null"+ "'", var20.equals("(0) null\n   (0) null"));

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test322");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    java.lang.String var8 = var3.getPageName();
    java.lang.String var9 = var3.getIdPath();
    int var10 = var3.getBodyCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test323");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    var0.beginPageRender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test324");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var3 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var3.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var3.reportException("", (java.lang.Throwable)var7);
    var0.reportException("hi!", (java.lang.Throwable)var7);
    org.apache.tapestry.engine.IPageSource var10 = var0.getPageSource();
    org.apache.tapestry.listener.ListenerMap var11 = var0.getListeners();
    org.apache.tapestry.IResourceResolver var12 = var0.getResourceResolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test325");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var1 = var0.getSender();
    boolean var2 = var0.isDirty();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var4 = var3.getSender();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var5 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var7 = new ch.bluepenguin.email.client.cache.MailCache("");
    var5.setCache(var7);
    ch.bluepenguin.email.client.cache.MailCache var10 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var11 = var10.getCache();
    var5.setCache(var10);
    var3.setCache(var10);
    var0.setCache(var10);
    ch.bluepenguin.email.client.cache.MailCache var15 = var0.getCache();
    net.sf.ehcache.Cache var16 = var15.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test326");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkMenuModelHealth();
      fail("Expected exception of type ch.bluepenguin.tapestry.components.menu.model.MenuStructureException");
    } catch (ch.bluepenguin.tapestry.components.menu.model.MenuStructureException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test327");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var3 = var2.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var4 = var2.getDataSqueezer();
    var2.setVisit((java.lang.Object)0.0d);
    boolean var7 = var2.isStateful();
    org.apache.tapestry.engine.IPageSource var8 = var2.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var10 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var10.getSpecification();
    java.lang.Object var12 = var10.getGlobal();
    java.lang.Object var13 = var10.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var16 = var15.getParent();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    var17.setText("hi!");
    var15.setContained((java.lang.Object)var17);
    var10.setVisit((java.lang.Object)var17);
    ch.bluepenguin.email.client.service.EmailFacadeException var27 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var10.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var27);
    var2.reportException(",", (java.lang.Throwable)var27);
    var1.addSuppressed((java.lang.Throwable)var27);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var32 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var33 = var32.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var34 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var35 = var34.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var37 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var38 = var37.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var41 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var37.reportException("", (java.lang.Throwable)var41);
    var34.reportException("hi!", (java.lang.Throwable)var41);
    var32.addSuppressed((java.lang.Throwable)var41);
    var1.addSuppressed((java.lang.Throwable)var32);
    java.lang.String var46 = var32.toString();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var48 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var50 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var51 = var50.getSuppressed();
    java.lang.Throwable[] var52 = var50.getSuppressed();
    var48.addSuppressed((java.lang.Throwable)var50);
    var32.addSuppressed((java.lang.Throwable)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var46.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test328");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    java.lang.String var18 = var13.getReplyTo();
    java.lang.String[] var20 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var13.setCc(var20);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var22 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var22.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var25 = new ch.bluepenguin.email.client.MailMessage();
    var25.setBcc("Dummy EmailFacade Impl");
    var25.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var30 = var25.getSentDate();
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    var31.setTechnicalID(100);
    java.lang.String var36 = var31.getReplyTo();
    java.lang.String[] var38 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var31.setCc(var38);
    java.lang.String[] var41 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var31.setBcc(var41);
    var25.setCc(var41);
    java.lang.String var44 = var22.returnStringList(var41);
    var13.setCc(var41);
    var0.setBcc(var41);
    java.lang.String var47 = var0.getSubject();
    ch.bluepenguin.email.client.MailMessage var48 = new ch.bluepenguin.email.client.MailMessage();
    var48.setBcc("Dummy EmailFacade Impl");
    var48.setTechnicalID(100);
    java.lang.String var53 = var48.getReplyTo();
    var0.copyTo((org.springframework.mail.MailMessage)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Dummy EmailFacade Impl"+ "'", var44.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test329");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var11.setIndex(10);
    java.lang.String var14 = var11.getName();
    boolean var15 = var0.equals((java.lang.Object)var11);
    java.lang.String var16 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var18 = var17.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var20.setIndex(10);
    var20.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var27 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var28 = var27.getSuppressed();
    var25.setParameters((java.lang.Object[])var28);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    var25.setComponent((org.apache.tapestry.IComponent)var30);
    var17.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setStyleClass(",");
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    int var41 = var39.getBodyCount();
    var36.addComponent((org.apache.tapestry.IComponent)var39);
    java.lang.String var43 = var36.getIdPath();
    var36.endPageRender();
    var25.setComponent((org.apache.tapestry.IComponent)var36);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var46 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var46.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var49 = new ch.bluepenguin.email.client.MailMessage();
    var49.setBcc("Dummy EmailFacade Impl");
    java.lang.String var52 = var49.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var53 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var53.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var56 = var53.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var57 = var53.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    var58.setParentFolderId((java.lang.Integer)1);
    var58.setFullName("hi!");
    var57.setParent(var58);
    var49.setFolder(var58);
    var49.setTo("Dummy EmailFacade Impl");
    java.lang.String[] var68 = var49.getTo();
    java.lang.String var69 = var46.returnStringList(var68);
    var25.setParameters((java.lang.Object[])var68);
    var0.setTo(var68);
    java.lang.String var72 = var0.getFrom();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var16.equals("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0) null"+ "'", var18.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "Dummy EmailFacade Impl"+ "'", var69.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test330");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    java.lang.Object var3 = var1.getContained();
    java.lang.String var4 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var5 = var1.getRenderer();
    var1.setLeaf(false);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var8 = var1.getRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var9 = var1.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 10.0f+ "'", var3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test331");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    var6.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var29 = var26.getParent();
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    boolean var33 = var31.equals((java.lang.Object)(short)(-1));
    java.util.Collection var34 = var31.getChildren();
    boolean var35 = var26.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var31);
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var39 = var37.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var40 = var37.getFolder();
    int var41 = var37.getChildCount();
    var31.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var37);
    ch.bluepenguin.email.client.Folder var43 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var43);
    boolean var46 = var44.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var47 = var44.getParent();
    ch.bluepenguin.email.client.Folder var48 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var49 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var48);
    boolean var51 = var49.equals((java.lang.Object)(short)(-1));
    java.util.Collection var52 = var49.getChildren();
    boolean var53 = var44.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var49);
    ch.bluepenguin.email.client.Folder var54 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var55 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var54);
    boolean var57 = var55.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var58 = var55.getFolder();
    int var59 = var55.getChildCount();
    var49.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var55);
    boolean var61 = var37.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var49);
    java.util.Collection var62 = var49.getChildren();
    var6.insert(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test332");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    java.lang.String[] var2 = var0.getCc();
    java.lang.String var3 = var0.toString();
    var0.setCc("Current Folder");
    java.util.Date var6 = var0.getSentDate();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getText();
    java.lang.String var13 = var7.getSubject();
    java.lang.String var14 = var7.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var7);
    ch.bluepenguin.email.client.MailMessage var16 = new ch.bluepenguin.email.client.MailMessage();
    var16.setBcc("Dummy EmailFacade Impl");
    var16.setSubject("hi!");
    java.lang.String var21 = var16.getSubject();
    java.util.Date var22 = var16.getSentDate();
    var16.setFrom("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var25 = new ch.bluepenguin.email.client.MailMessage();
    var25.setBcc("Dummy EmailFacade Impl");
    var25.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var30 = var25.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var31 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var32 = var31.getReader();
    ch.bluepenguin.email.client.cache.MailCache var33 = var31.getCache();
    boolean var34 = var25.equals((java.lang.Object)var31);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var36.setIndex(10);
    java.lang.String var39 = var36.getName();
    boolean var40 = var25.equals((java.lang.Object)var36);
    java.lang.String var41 = var25.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var42 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var43 = var42.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var45 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var45.setIndex(10);
    var45.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var50 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var52 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var53 = var52.getSuppressed();
    var50.setParameters((java.lang.Object[])var53);
    ch.bluepenguin.email.client.tapestry.Home var55 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var56 = var55.getBody();
    var50.setComponent((org.apache.tapestry.IComponent)var55);
    var42.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var45, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var50);
    var50.setStyleClass(",");
    ch.bluepenguin.email.client.tapestry.Home var61 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var62 = var61.getBody();
    int var63 = var61.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var64 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var65 = var64.getBody();
    int var66 = var64.getBodyCount();
    var61.addComponent((org.apache.tapestry.IComponent)var64);
    java.lang.String var68 = var61.getIdPath();
    var61.endPageRender();
    var50.setComponent((org.apache.tapestry.IComponent)var61);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var71 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var71.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var74 = new ch.bluepenguin.email.client.MailMessage();
    var74.setBcc("Dummy EmailFacade Impl");
    java.lang.String var77 = var74.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var78 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var78.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var81 = var78.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var82 = var78.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var83 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var84 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var83);
    var83.setParentFolderId((java.lang.Integer)1);
    var83.setFullName("hi!");
    var82.setParent(var83);
    var74.setFolder(var83);
    var74.setTo("Dummy EmailFacade Impl");
    java.lang.String[] var93 = var74.getTo();
    java.lang.String var94 = var71.returnStringList(var93);
    var50.setParameters((java.lang.Object[])var93);
    var25.setTo(var93);
    var16.setBcc(var93);
    var0.setTo(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var3.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var41.equals("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0) null"+ "'", var43.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Dummy EmailFacade Impl"+ "'", var94.equals("Dummy EmailFacade Impl"));

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test333");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = var3.getRootList();
    boolean var16 = var15.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test334");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    java.lang.String var10 = var5.getName();
    var5.setIndex(1);
    var5.setLeaf(true);
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    var15.setBcc("Dummy EmailFacade Impl");
    var15.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var20 = var15.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var21 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var22 = var21.getReader();
    ch.bluepenguin.email.client.cache.MailCache var23 = var21.getCache();
    boolean var24 = var15.equals((java.lang.Object)var21);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var26.setIndex(10);
    java.lang.String var29 = var26.getName();
    boolean var30 = var15.equals((java.lang.Object)var26);
    var26.setIndex(100);
    ch.bluepenguin.email.client.Person var33 = new ch.bluepenguin.email.client.Person();
    java.lang.String var34 = var33.getFirstname();
    var33.setLastname("(0) null");
    var33.setLastname("");
    java.lang.String var39 = var33.getReserve();
    var33.setNickname("");
    var26.setContained((java.lang.Object)var33);
    var5.setContained((java.lang.Object)var33);
    var33.setReserve("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");
    ch.bluepenguin.email.client.AbstractUniqueID var46 = var33.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    java.lang.String var12 = var0.getReplyTo();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    var13.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var20 = new ch.bluepenguin.email.client.MailMessage();
    var20.setBcc("Dummy EmailFacade Impl");
    var20.setTechnicalID(100);
    java.lang.String var25 = var20.getReplyTo();
    java.lang.String[] var27 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var20.setCc(var27);
    var13.setBcc(var27);
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setTechnicalID(100);
    java.lang.String var35 = var30.getReplyTo();
    java.lang.String[] var37 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var30.setCc(var37);
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setSubject("(0) null");
    java.util.Date var43 = var30.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var44 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var44.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var47 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var47.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var50 = new ch.bluepenguin.email.client.MailMessage();
    var50.setBcc("Dummy EmailFacade Impl");
    var50.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var55 = var50.getSentDate();
    ch.bluepenguin.email.client.MailMessage var56 = new ch.bluepenguin.email.client.MailMessage();
    var56.setBcc("Dummy EmailFacade Impl");
    var56.setTechnicalID(100);
    java.lang.String var61 = var56.getReplyTo();
    java.lang.String[] var63 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var56.setCc(var63);
    java.lang.String[] var66 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var56.setBcc(var66);
    var50.setCc(var66);
    java.lang.String var69 = var47.returnStringList(var66);
    java.lang.String[] var71 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var72 = var47.returnStringList(var71);
    java.lang.String var73 = var44.returnStringList(var71);
    var30.setTo(var71);
    java.lang.String[] var75 = var30.getCc();
    var13.setTo(var75);
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    java.util.Date var78 = var0.getSentDate();
    var0.setFrom("(0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "Dummy EmailFacade Impl"+ "'", var69.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var72.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var73.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test336");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("(0) null\n   (0) null");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var5 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var6 = var5.getCurrentFolder();
    var5.setCurrentFolder("hi!");
    ch.bluepenguin.email.client.MailMessage[] var9 = var5.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var9, "Current Folder", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    int var8 = var3.getBodyCount();
    var3.endPageRender();
    java.lang.String var10 = var3.getExtendedId();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    java.lang.String var13 = var11.getPageName();
    java.lang.String var14 = var11.toString();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    java.lang.String var17 = var15.getPageName();
    java.lang.String var18 = var15.toString();
    org.apache.tapestry.IEngine var19 = var15.getEngine();
    var11.setContainer((org.apache.tapestry.IComponent)var15);
    java.lang.String var21 = var15.getPageName();
    org.apache.tapestry.IPage var22 = var15.getPage();
    java.lang.String var23 = var15.getId();
    org.apache.tapestry.IEngine var24 = var15.getEngine();
    var3.addBody((org.apache.tapestry.IRender)var15);
    org.apache.tapestry.IPage var26 = var15.getPage();
    var15.setId("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var15.setPageName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test338");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getMessagesFromFolder(",");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test339");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var24.setName("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var30.setIndex(10);
    var30.setParent((java.lang.Object)10L);
    java.lang.Object var35 = var30.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var30);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var37 = var0.getRootList();
    java.util.Iterator var38 = var0.getMenuItemsDepthFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test340");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.getChildren();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    boolean var17 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    boolean var18 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    java.lang.String var22 = var19.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var23 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var23.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var26 = var23.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var27 = var23.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    var28.setParentFolderId((java.lang.Integer)1);
    var28.setFullName("hi!");
    var27.setParent(var28);
    var19.setFolder(var28);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var37 = var1.equals((java.lang.Object)var28);
    java.lang.String var38 = var28.getFullName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    int var40 = var39.getChildCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test341");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    boolean var5 = var1.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    var7.setFolder(var8);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.getChildren();
    var10.insert(var15);
    var1.insert(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test342");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    java.lang.String var1 = var0.getLocale();
    var0.setLocale("hi!");
    java.lang.String var4 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test343");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.setAll(true);
    var0.clear();
    var0.clear();
    var0.setAll(false);
    boolean var9 = var0.isDirty((java.lang.Integer)1);
    boolean var11 = var0.isDirty((java.lang.Integer)0);
    var0.setState((java.lang.Integer)(-1), true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test344");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var4.setLeaf(false);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var11 = var10.getParent();
    java.lang.Object var12 = var10.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var10);
    var10.setLeaf(true);
    int var16 = var10.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test345");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    java.lang.String var4 = var0.getText();
    var0.setTechnicalID(100);
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    java.lang.String[] var17 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var7.setBcc(var17);
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    var19.setTechnicalID(100);
    java.lang.String var24 = var19.getReplyTo();
    java.lang.String[] var26 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var19.setCc(var26);
    java.lang.String[] var29 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var19.setBcc(var29);
    var7.setBcc(var29);
    int var32 = var7.getTechnicalID();
    var0.copyTo((org.springframework.mail.MailMessage)var7);
    var7.setSubject("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test346");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var0.setLocale("Default EmailFacade Impl");
    java.lang.String var3 = var0.getLocale();
    java.lang.String var4 = var0.getLocale();
    var0.setLocale("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Default EmailFacade Impl"+ "'", var3.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Default EmailFacade Impl"+ "'", var4.equals("Default EmailFacade Impl"));

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test347");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    org.apache.tapestry.IResourceResolver var6 = var0.getResourceResolver();
    java.lang.String var7 = var0.getContextPath();
    org.apache.tapestry.util.pool.Pool var8 = var0.getPool();
    java.lang.Object var9 = var0.getGlobal();
    org.apache.tapestry.engine.ISpecificationSource var10 = var0.getSpecificationSource();
    org.apache.tapestry.engine.ISpecificationSource var11 = var0.getSpecificationSource();
    java.util.Locale var12 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test348");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    var2.setFullName("hi!");
    ch.bluepenguin.email.client.Account var12 = var2.getAccount();
    java.lang.Integer var13 = var2.getParentFolderId();
    ch.bluepenguin.email.client.Account var14 = var2.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test349");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    java.util.Collection var19 = var16.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    int var25 = var23.getBodyCount();
    var20.addComponent((org.apache.tapestry.IComponent)var23);
    java.util.Map var27 = var23.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var28 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var28.forgetPage("");
    org.apache.tapestry.engine.IPageSource var31 = var28.getPageSource();
    org.apache.tapestry.engine.IPropertySource var32 = var28.getPropertySource();
    java.util.Collection var33 = var28.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var34 = var28.getComponentMessagesSource();
    var23.attach((org.apache.tapestry.IEngine)var28);
    boolean var36 = var16.equals((java.lang.Object)var28);
    ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper var37 = new ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper();
    boolean var38 = var16.equals((java.lang.Object)var37);
    var10.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    ch.bluepenguin.email.client.tapestry.SpringEngine var40 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var41 = var40.getVisit();
    java.lang.String var42 = var40.toString();
    org.apache.tapestry.IResourceResolver var43 = var40.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var44 = var40.getListeners();
    java.lang.String var45 = var40.getContextPath();
    org.apache.tapestry.asset.ResourceChecksumSource var46 = var40.getResourceChecksumSource();
    java.util.Collection var47 = var40.getActivePageNames();
    var10.insert(var47);
    boolean var49 = var10.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test350");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    var5.setFolder(var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var6.setParent(var8);
    ch.bluepenguin.email.client.Account var13 = var8.getAccount();
    var8.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.setParent(var8);
    java.lang.String var17 = var8.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var17.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test351");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    boolean var3 = var0.isAllClean();
    boolean var5 = var0.isDirty((java.lang.Integer)100);
    boolean var6 = var0.isAllClean();
    var0.clear();
    var0.setAll(true);
    boolean var10 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test352");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var4 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var4.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var7 = var4.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var8 = var4.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    var9.setParentFolderId((java.lang.Integer)1);
    var9.setFullName("hi!");
    var8.setParent(var9);
    var0.setFolder(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var9.getUniqueID();
    ch.bluepenguin.email.client.Account var18 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var19 = var18.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var20 = var18.getUniqueID();
    var9.setAccount(var18);
    ch.bluepenguin.email.client.Person var22 = var18.getPerson();
    ch.bluepenguin.email.client.Account var23 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var24 = var23.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var25 = var23.getUniqueID();
    ch.bluepenguin.email.client.Person var26 = new ch.bluepenguin.email.client.Person();
    java.lang.String var27 = var26.getFirstname();
    var23.setPerson(var26);
    java.lang.String var29 = var26.getReserve();
    java.lang.String var30 = var26.getNickname();
    var18.setPerson(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test353");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.spec.IApplicationSpecification var6 = var0.getSpecification();
    org.apache.tapestry.engine.IPageSource var7 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentClassEnhancer var8 = var0.getComponentClassEnhancer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test354");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.lang.String var19 = var12.getIdPath();
    org.apache.tapestry.ILocation var20 = var12.getLocation();
    org.apache.tapestry.IEngine var21 = var12.getEngine();
    var12.beginPageRender();
    org.apache.tapestry.ILocation var23 = var12.getLocation();
    var10.setComponent((org.apache.tapestry.IComponent)var12);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    java.lang.String var28 = var25.toString();
    var10.setComponent((org.apache.tapestry.IComponent)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var31 = var25.getNestedComponent("(0) null\n   (0) null\n   (0) null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test355");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var15 = var12.getFolder();
    int var16 = var12.getChildCount();
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.getChildren();
    boolean var28 = var19.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var24);
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var32 = var30.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var33 = var30.getFolder();
    int var34 = var30.getChildCount();
    var24.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var30);
    boolean var36 = var12.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var30);
    int var37 = var12.getChildCount();
    ch.bluepenguin.email.client.Folder var38 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38);
    var38.setParentFolderId((java.lang.Integer)1);
    var38.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var44 = var38.getAccount();
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    boolean var48 = var46.equals((java.lang.Object)(short)(-1));
    java.util.Collection var49 = var46.children();
    boolean var50 = var46.getAllowsChildren();
    int var51 = var46.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var46);
    ch.bluepenguin.email.client.Folder var53 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var54 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53);
    boolean var55 = var54.isLeaf();
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    boolean var58 = var57.isLeaf();
    ch.bluepenguin.email.client.Folder var59 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var60 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var59);
    boolean var62 = var60.equals((java.lang.Object)(short)(-1));
    java.util.Collection var63 = var60.getChildren();
    ch.bluepenguin.email.client.Folder var64 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var65 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var64);
    boolean var66 = var65.isLeaf();
    ch.bluepenguin.email.client.Folder var67 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var68 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var67);
    boolean var70 = var68.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var71 = var68.getParent();
    var65.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var68);
    boolean var73 = var60.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var65);
    boolean var74 = var57.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var65);
    var54.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var65);
    var46.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var65);
    boolean var77 = var65.getAllowsChildren();
    var12.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var65);
    ch.bluepenguin.email.client.Folder var79 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var80 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var79);
    ch.bluepenguin.email.client.Folder var81 = new ch.bluepenguin.email.client.Folder();
    var80.setFolder(var81);
    boolean var83 = var80.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var84 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var85 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var84);
    ch.bluepenguin.email.client.Folder var86 = new ch.bluepenguin.email.client.Folder();
    var85.setFolder(var86);
    ch.bluepenguin.email.client.Folder var88 = var85.getFolder();
    java.util.Collection var89 = var85.getChildren();
    var80.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var85);
    boolean var91 = var12.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test356");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    java.util.Collection var12 = var9.getChildren();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var15 = var14.isLeaf();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    boolean var19 = var17.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var20 = var17.getParent();
    var14.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var17);
    boolean var22 = var9.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    boolean var23 = var6.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    org.apache.tapestry.contrib.tree.model.ITreeNode var24 = var14.getParent();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    java.util.Collection var29 = var26.children();
    boolean var30 = var14.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var26);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    var32.setFolder(var33);
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    var35.setFullName("hi!");
    var33.setParent(var35);
    ch.bluepenguin.email.client.Folder var40 = var35.getParent();
    var26.setFolder(var35);
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    ch.bluepenguin.email.client.Folder var43 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var43);
    boolean var46 = var44.equals((java.lang.Object)(short)(-1));
    java.util.Collection var47 = var44.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    var48.addComponent((org.apache.tapestry.IComponent)var51);
    java.util.Map var55 = var51.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var56 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var56.forgetPage("");
    org.apache.tapestry.engine.IPageSource var59 = var56.getPageSource();
    org.apache.tapestry.engine.IPropertySource var60 = var56.getPropertySource();
    java.util.Collection var61 = var56.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var62 = var56.getComponentMessagesSource();
    var51.attach((org.apache.tapestry.IEngine)var56);
    boolean var64 = var44.equals((java.lang.Object)var56);
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test357");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.engine.IPageSource var6 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var9 = var8.getSpecification();
    java.lang.Object var10 = var8.getGlobal();
    java.lang.Object var11 = var8.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var14 = var13.getParent();
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    var15.setBcc("Dummy EmailFacade Impl");
    var15.setTechnicalID(100);
    var15.setText("hi!");
    var13.setContained((java.lang.Object)var15);
    var8.setVisit((java.lang.Object)var15);
    ch.bluepenguin.email.client.service.EmailFacadeException var25 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var8.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var25);
    var0.reportException(",", (java.lang.Throwable)var25);
    java.lang.String var28 = var0.getContextPath();
    org.apache.tapestry.asset.ResourceChecksumSource var29 = var0.getResourceChecksumSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test358");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    java.lang.Object var3 = var1.getParent();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DefaultMenuItemRenderer var4 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DefaultMenuItemRenderer();
    var4.setStyleClass("hi!");
    var1.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var4);
    var1.setLeaf(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test359");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    java.lang.String var10 = var2.getFullName();
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var2.getUniqueID();
    java.lang.Integer var12 = var11.getId();
    var11.setId((java.lang.Integer)0);
    var11.setId((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test360");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    var12.setFolder(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    var15.setFullName("hi!");
    var13.setParent(var15);
    var15.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    var23.setFolder(var24);
    org.apache.tapestry.contrib.tree.model.ITreeNode var26 = var23.getParent();
    boolean var27 = var23.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    ch.bluepenguin.email.client.Account var29 = var15.getAccount();
    var6.setFolder(var15);
    boolean var31 = var6.isLeaf();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var33 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var34 = var33.getSuppressed();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var36 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var37 = var36.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var38 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var39 = var38.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var41 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var42 = var41.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var45 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var41.reportException("", (java.lang.Throwable)var45);
    var38.reportException("hi!", (java.lang.Throwable)var45);
    var36.addSuppressed((java.lang.Throwable)var45);
    var33.addSuppressed((java.lang.Throwable)var36);
    boolean var50 = var6.equals((java.lang.Object)var33);
    java.lang.Throwable[] var51 = var33.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test361");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    ch.bluepenguin.email.client.MailMessage var3 = new ch.bluepenguin.email.client.MailMessage();
    var3.setBcc("Dummy EmailFacade Impl");
    var3.setTechnicalID(100);
    var3.setText("hi!");
    var1.setContained((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var11 = var1.getRenderer();
    var1.setDepth(0);
    java.lang.String var14 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var11 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var13 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var14 = var13.getSuppressed();
    var11.setParameters((java.lang.Object[])var14);
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    var11.setComponent((org.apache.tapestry.IComponent)var16);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var19.setPageName("");
    var16.addBody((org.apache.tapestry.IRender)var19);
    org.apache.tapestry.IEngine var25 = var19.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    int var28 = var26.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    int var31 = var29.getBodyCount();
    var26.addComponent((org.apache.tapestry.IComponent)var29);
    var19.addBody((org.apache.tapestry.IRender)var29);
    org.apache.tapestry.IComponent var34 = var29.getContainer();
    org.apache.tapestry.event.ChangeObserver var35 = var29.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var36 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var36.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var39 = var36.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var40 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var41 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var42 = var41.getSeparator();
    java.util.Locale var43 = var41.getMyLocale();
    var40.setMyLocale(var43);
    var36.setMyLocale(var43);
    var29.setLocale(var43);
    var5.addBody((org.apache.tapestry.IRender)var29);
    int var48 = var29.getBodyCount();
    org.apache.tapestry.IRequestCycle var49 = var29.getRequestCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ","+ "'", var42.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test363");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var0.setLocale("Default EmailFacade Impl");
    java.lang.String var3 = var0.getLocale();
    java.lang.String var4 = var0.getLocale();
    java.lang.String var5 = var0.getLocale();
    java.lang.String var6 = var0.getLocale();
    java.lang.String var7 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Default EmailFacade Impl"+ "'", var3.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Default EmailFacade Impl"+ "'", var4.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Default EmailFacade Impl"+ "'", var5.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Default EmailFacade Impl"+ "'", var6.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Default EmailFacade Impl"+ "'", var7.equals("Default EmailFacade Impl"));

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test364");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.engine.IPageSource var2 = var0.getPageSource();
    java.util.Collection var3 = var0.getActivePageNames();
    java.lang.String var4 = var0.getContextPath();
    org.apache.tapestry.IResourceResolver var5 = var0.getResourceResolver();
    org.apache.tapestry.engine.ITemplateSource var6 = var0.getTemplateSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test365");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    var2.setFullName("hi!");
    ch.bluepenguin.email.client.Account var12 = var2.getAccount();
    ch.bluepenguin.email.client.Account var13 = var2.getAccount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var2);
    ch.bluepenguin.email.client.Folder var15 = var14.getFolder();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    boolean var18 = var17.isLeaf();
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    boolean var22 = var20.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var23 = var20.getParent();
    var17.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var20);
    ch.bluepenguin.email.client.Folder var25 = var17.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var26 = var25.getUniqueID();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    var15.setParent(var25);
    ch.bluepenguin.email.client.Account var29 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var30 = var29.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var31 = var29.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var32 = var29.getUniqueID();
    ch.bluepenguin.email.client.Person var33 = new ch.bluepenguin.email.client.Person();
    java.lang.String var34 = var33.getFirstname();
    var33.setLastname("(0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var33.getUniqueID();
    var29.setPerson(var33);
    var15.setAccount(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test366");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isDirty();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var5 = var4.getSeparator();
    java.util.Locale var6 = var4.getMyLocale();
    var0.setLocale(var6);
    org.apache.tapestry.spec.IApplicationSpecification var8 = var0.getSpecification();
    org.apache.tapestry.IResourceResolver var9 = var0.getResourceResolver();
    java.lang.Object var10 = var0.getVisit();
    java.lang.Object var11 = var0.getVisit();
    org.apache.tapestry.util.io.DataSqueezer var12 = var0.createDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ","+ "'", var5.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test367");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var16.addComponent((org.apache.tapestry.IComponent)var19);
    java.util.Map var23 = var19.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var24.forgetPage("");
    org.apache.tapestry.engine.IPageSource var27 = var24.getPageSource();
    org.apache.tapestry.engine.IPropertySource var28 = var24.getPropertySource();
    java.util.Collection var29 = var24.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var30 = var24.getComponentMessagesSource();
    var19.attach((org.apache.tapestry.IEngine)var24);
    boolean var32 = var12.equals((java.lang.Object)var24);
    org.apache.tapestry.engine.IComponentClassEnhancer var33 = var24.getComponentClassEnhancer();
    var5.attach((org.apache.tapestry.IEngine)var24);
    ch.bluepenguin.email.client.tapestry.SpringEngine var35 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var36 = var35.getVisit();
    java.lang.String var37 = var35.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var35.setVisit((java.lang.Object)var38);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var40 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var40.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var44 = new java.lang.String[] { "(0) null"};
    java.lang.String var45 = var40.returnStringList(var44);
    java.util.Locale var46 = var40.getMyLocale();
    java.util.Locale var47 = var40.getMyLocale();
    var35.setLocale(var47);
    var5.setLocale(var47);
    java.lang.String var50 = var5.getIdPath();
    org.apache.tapestry.IBinding var52 = var5.getBinding(",");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0) null"+ "'", var45.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test368");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    java.lang.Object var3 = var1.getParent();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DefaultMenuItemRenderer var4 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DefaultMenuItemRenderer();
    var4.setStyleClass("hi!");
    var1.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var4);
    var4.setStyleClass("Default EmailFacade Impl");
    var4.setStyleClass("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test369");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    java.util.Locale var7 = var0.getLocale();
    org.apache.tapestry.engine.ISpecificationSource var8 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test370");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    org.apache.tapestry.IPage var20 = var0.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test371");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test372");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var12.getUniqueID();
    var5.setAccount(var12);
    ch.bluepenguin.email.client.Person var15 = var12.getPerson();
    ch.bluepenguin.email.client.Account var16 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var17 = var16.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var18 = var16.getUniqueID();
    ch.bluepenguin.email.client.Person var19 = new ch.bluepenguin.email.client.Person();
    java.lang.String var20 = var19.getFirstname();
    var16.setPerson(var19);
    java.lang.String var22 = var19.getReserve();
    java.lang.String var23 = var19.getNickname();
    var12.setPerson(var19);
    var19.setLastname("(0) (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test373");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    var0.setFrom("(0) null\n   (0) null");
    var0.setTechnicalID((-1));
    var0.setBcc("Default EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var13.getUniqueID();
    java.lang.String var15 = var13.getSubject();
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var13.getUniqueID();
    java.lang.String var18 = var13.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test374");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var3 = var2.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var4 = var2.getDataSqueezer();
    var2.setVisit((java.lang.Object)0.0d);
    boolean var7 = var2.isStateful();
    org.apache.tapestry.engine.IPageSource var8 = var2.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var10 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var10.getSpecification();
    java.lang.Object var12 = var10.getGlobal();
    java.lang.Object var13 = var10.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var16 = var15.getParent();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    var17.setText("hi!");
    var15.setContained((java.lang.Object)var17);
    var10.setVisit((java.lang.Object)var17);
    ch.bluepenguin.email.client.service.EmailFacadeException var27 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var10.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var27);
    var2.reportException(",", (java.lang.Throwable)var27);
    var1.addSuppressed((java.lang.Throwable)var27);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var32 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var33 = var32.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var34 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var35 = var34.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var37 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var38 = var37.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var41 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var37.reportException("", (java.lang.Throwable)var41);
    var34.reportException("hi!", (java.lang.Throwable)var41);
    var32.addSuppressed((java.lang.Throwable)var41);
    var1.addSuppressed((java.lang.Throwable)var32);
    java.lang.String var46 = var32.toString();
    java.lang.String var47 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var46.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var47.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test375");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IEngine var3 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    var4.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.util.Map var19 = var15.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var20 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var20.forgetPage("");
    org.apache.tapestry.engine.IPageSource var23 = var20.getPageSource();
    org.apache.tapestry.engine.IPropertySource var24 = var20.getPropertySource();
    java.util.Collection var25 = var20.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var26 = var20.getComponentMessagesSource();
    var15.attach((org.apache.tapestry.IEngine)var20);
    var4.addBody((org.apache.tapestry.IRender)var15);
    var0.addComponent((org.apache.tapestry.IComponent)var4);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    var30.addComponent((org.apache.tapestry.IComponent)var33);
    java.lang.String var37 = var30.getIdPath();
    org.apache.tapestry.ILocation var38 = var30.getLocation();
    var4.setPage((org.apache.tapestry.IPage)var30);
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var41 = var40.getBody();
    int var42 = var40.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var43 = new ch.bluepenguin.email.client.tapestry.Home();
    var43.beginPageRender();
    java.util.Collection var45 = var43.getBindingNames();
    var40.setPage((org.apache.tapestry.IPage)var43);
    org.apache.tapestry.INamespace var47 = var40.getNamespace();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    var48.addComponent((org.apache.tapestry.IComponent)var51);
    java.lang.String var55 = var48.getIdPath();
    org.apache.tapestry.ILocation var56 = var48.getLocation();
    org.apache.tapestry.IEngine var57 = var48.getEngine();
    var48.beginPageRender();
    var40.addComponent((org.apache.tapestry.IComponent)var48);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var60 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var62 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var63 = var62.getSuppressed();
    var60.setParameters((java.lang.Object[])var63);
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    var60.setComponent((org.apache.tapestry.IComponent)var65);
    ch.bluepenguin.email.client.tapestry.Home var68 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var69 = var68.getBody();
    int var70 = var68.getBodyCount();
    var68.setPageName("");
    var65.addBody((org.apache.tapestry.IRender)var68);
    var48.addComponent((org.apache.tapestry.IComponent)var68);
    var30.setContainer((org.apache.tapestry.IComponent)var48);
    var30.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test376");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var4 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var4.setText("Dummy EmailFacade Impl");
    var4.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var10 = var9.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var12.setIndex(10);
    var12.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var17 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var17.setParameters((java.lang.Object[])var20);
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    var17.setComponent((org.apache.tapestry.IComponent)var22);
    var9.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var17);
    var17.setStyleClass(",");
    var4.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var17);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var29 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var4.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var29);
    var29.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var33 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var33.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var37 = var33.getMessagesFromFolder("Dummy EmailFacade Impl");
    java.lang.String var38 = var33.getName();
    ch.bluepenguin.email.client.MailMessage[] var40 = var33.getMessagesFromFolder("(0) null\n   (0) null\n   (0) null");
    var29.setParameters((java.lang.Object[])var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var40, "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", "Default EmailFacade Impl");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0) null"+ "'", var10.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Dummy EmailFacade Impl"+ "'", var38.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test377");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var23 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = var0.getRootList();
    var0.checkMenuModelHealth();
    ch.bluepenguin.email.client.tapestry.SpringEngine var26 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var27 = var26.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var28 = var26.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var31 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var32 = var31.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var31);
    var29.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var31);
    var26.setVisit((java.lang.Object)var29);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var38 = var37.getParent();
    java.lang.Object var39 = var37.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var40 = var29.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var37);
    java.lang.String var41 = var29.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var43 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var43.setParent((java.lang.Object)100L);
    int var46 = var43.getDepth();
    int var47 = var43.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var48 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var48.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var51 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var51.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var54 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var54.setText("Dummy EmailFacade Impl");
    var54.setText(",");
    var51.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var54);
    var48.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var51);
    var51.setText("hi!");
    var29.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var43, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var51);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var64 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10.0f+ "'", var39.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0) null\n   (0) null"+ "'", var41.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test378");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    ch.bluepenguin.email.client.tapestry.SpringEngine var5 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var6 = var5.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var9 = var8.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var8.reportException("", (java.lang.Throwable)var12);
    var5.reportException("hi!", (java.lang.Throwable)var12);
    ch.bluepenguin.email.client.tapestry.SpringEngine var15 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var16 = var15.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var15.reportException("", (java.lang.Throwable)var19);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var22 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    var19.addSuppressed((java.lang.Throwable)var22);
    var12.addSuppressed((java.lang.Throwable)var19);
    java.lang.String var26 = var19.toString();
    var0.reportException("Default EmailFacade Impl", (java.lang.Throwable)var19);
    java.lang.String var28 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var26.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var28.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test379");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    var19.setTechnicalID(100);
    var19.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    var26.setTechnicalID(100);
    java.lang.String var31 = var26.getReplyTo();
    java.lang.String[] var33 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var26.setCc(var33);
    var19.setBcc(var33);
    ch.bluepenguin.email.client.MailMessage var36 = new ch.bluepenguin.email.client.MailMessage();
    var36.setBcc("Dummy EmailFacade Impl");
    java.lang.String var39 = var36.getReplyTo();
    var36.setBcc(",");
    var19.copyTo((org.springframework.mail.MailMessage)var36);
    java.lang.String var43 = var19.getReplyTo();
    java.lang.String[] var44 = var19.getBcc();
    ch.bluepenguin.email.client.MailMessage var45 = new ch.bluepenguin.email.client.MailMessage();
    var45.setBcc("Dummy EmailFacade Impl");
    var45.setTechnicalID(100);
    java.lang.String var50 = var45.getReplyTo();
    java.lang.String[] var52 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var45.setCc(var52);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var54 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var54.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var57 = new ch.bluepenguin.email.client.MailMessage();
    var57.setBcc("Dummy EmailFacade Impl");
    var57.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var62 = var57.getSentDate();
    ch.bluepenguin.email.client.MailMessage var63 = new ch.bluepenguin.email.client.MailMessage();
    var63.setBcc("Dummy EmailFacade Impl");
    var63.setTechnicalID(100);
    java.lang.String var68 = var63.getReplyTo();
    java.lang.String[] var70 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var63.setCc(var70);
    java.lang.String[] var73 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var63.setBcc(var73);
    var57.setCc(var73);
    java.lang.String var76 = var54.returnStringList(var73);
    var45.setCc(var73);
    var19.setCc(var73);
    var0.setTo(var73);
    java.lang.String var80 = var0.toString();
    java.lang.String var81 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Dummy EmailFacade Impl"+ "'", var76.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null"+ "'", var80.equals("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test380");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    boolean var3 = var0.isAllClean();
    boolean var5 = var0.isDirty((java.lang.Integer)100);
    var0.clear();
    boolean var8 = var0.isDirty((java.lang.Integer)10);
    var0.clear();
    boolean var10 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test381");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var3 = var0.getListeners();
    org.apache.tapestry.IRequestCycle var4 = var0.getRequestCycle();
    org.apache.tapestry.IRequestCycle var5 = var0.getRequestCycle();
    org.apache.tapestry.event.ChangeObserver var6 = var0.getChangeObserver();
    org.apache.tapestry.IRequestCycle var7 = var0.getRequestCycle();
    java.lang.String var8 = var0.getExtendedId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var10 = var0.getComponent("Dummy EmailFacade Impl");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test382");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    org.apache.tapestry.IBinding var6 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setPageName("hi!");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    var9.setParameters((java.lang.Object[])var12);
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    var9.setComponent((org.apache.tapestry.IComponent)var14);
    var0.addComponent((org.apache.tapestry.IComponent)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var19 = var0.getComponent("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test383");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    var13.beginPageRender();
    java.util.Collection var15 = var13.getBindingNames();
    var10.setPage((org.apache.tapestry.IPage)var13);
    var0.addComponent((org.apache.tapestry.IComponent)var13);
    org.apache.tapestry.IEngine var18 = var0.getEngine();
    org.apache.tapestry.IRequestCycle var19 = var0.getRequestCycle();
    org.apache.tapestry.event.ChangeObserver var20 = var0.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test384");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var3 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var3.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var6 = new ch.bluepenguin.email.client.MailMessage();
    var6.setBcc("Dummy EmailFacade Impl");
    var6.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var11 = var6.getSentDate();
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var6.setCc(var22);
    java.lang.String var25 = var3.returnStringList(var22);
    java.lang.String[] var27 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var28 = var3.returnStringList(var27);
    java.lang.String var29 = var0.returnStringList(var27);
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setTechnicalID(100);
    var30.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var37 = new ch.bluepenguin.email.client.MailMessage();
    var37.setBcc("Dummy EmailFacade Impl");
    var37.setTechnicalID(100);
    java.lang.String var42 = var37.getReplyTo();
    java.lang.String[] var44 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var37.setCc(var44);
    var30.setBcc(var44);
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    java.lang.String var50 = var47.getReplyTo();
    var47.setBcc(",");
    var30.copyTo((org.springframework.mail.MailMessage)var47);
    java.lang.String var54 = var30.getReplyTo();
    java.lang.String[] var55 = var30.getBcc();
    java.lang.String var56 = var0.returnStringList(var55);
    ch.bluepenguin.email.client.tapestry.Home var57 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var58 = var57.getBody();
    int var59 = var57.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var60 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var61 = var60.getBody();
    int var62 = var60.getBodyCount();
    var57.addComponent((org.apache.tapestry.IComponent)var60);
    java.lang.String var64 = var57.getIdPath();
    org.apache.tapestry.ILocation var65 = var57.getLocation();
    org.apache.tapestry.IEngine var66 = var57.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var67 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var67.setSeparator("");
    java.util.Locale var70 = var67.getMyLocale();
    var57.setLocale(var70);
    var0.setMyLocale(var70);
    var0.setSeparator("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Dummy EmailFacade Impl"+ "'", var25.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var28.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var29.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var56.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getFirstname();
    java.lang.String var9 = var0.getLastname();
    java.lang.String var10 = var0.getLastname();
    var0.setLastname("hi!");
    java.lang.String var13 = var0.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ","+ "'", var9.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ","+ "'", var10.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var7 = var6.getRenderer();
    int var8 = var6.getDepth();
    var6.setDepth(0);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    var6.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test387");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    var13.beginPageRender();
    java.util.Collection var15 = var13.getBindingNames();
    var10.setPage((org.apache.tapestry.IPage)var13);
    var0.addComponent((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var18 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var18.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var21 = var18.getMyLocale();
    var13.setLocale(var21);
    java.util.Map var23 = var13.getAssets();
    org.apache.tapestry.ILocation var24 = var13.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test388");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = var0.getRootList();
    int var4 = var3.getChildrenSize();
    int var5 = var3.getChildrenSize();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var8 = var7.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    java.lang.String var10 = var9.toString();
    java.util.Iterator var11 = var9.getChildrenIterator();
    var3.addChild(var9);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var16 = var15.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    var13.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    java.lang.Object var19 = var15.getParent();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    var21.setFolder(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    var24.setFullName("hi!");
    var22.setParent(var24);
    var15.setContained((java.lang.Object)var24);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var15.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    java.lang.String var32 = var15.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    var3.addChild(var33);
    int var35 = var3.getChildrenSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0) null"+ "'", var10.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    java.lang.String var6 = var3.getReserve();
    ch.bluepenguin.email.client.AbstractUniqueID var7 = var3.getUniqueID();
    java.lang.String var8 = var3.getLastname();
    java.lang.String var9 = var3.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test390");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var4 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var5 = var4.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var7 = var6.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var9 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var10 = var9.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var13 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var9.reportException("", (java.lang.Throwable)var13);
    var6.reportException("hi!", (java.lang.Throwable)var13);
    var4.addSuppressed((java.lang.Throwable)var13);
    var1.addSuppressed((java.lang.Throwable)var4);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var21 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.lang.Throwable[] var23 = var21.getSuppressed();
    var19.addSuppressed((java.lang.Throwable)var21);
    var1.addSuppressed((java.lang.Throwable)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test391");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var0.setHyperlink("(0) null");
    var0.setHyperlink("Dummy EmailFacade Impl");
    var0.setHyperlink("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.setStyleClass(",");
    java.lang.String var9 = var0.getHyperlink();
    java.lang.String var10 = var0.getHyperlink();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var9.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var10.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test392");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    var0.setTo("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test393");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var8.forgetPage("");
    org.apache.tapestry.engine.IPageSource var11 = var8.getPageSource();
    org.apache.tapestry.engine.IPropertySource var12 = var8.getPropertySource();
    java.util.Collection var13 = var8.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var14 = var8.getComponentMessagesSource();
    var3.attach((org.apache.tapestry.IEngine)var8);
    java.lang.Object var16 = var3.getGlobal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test394");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Account var24 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var25 = var24.getUniqueID();
    var17.setAccount(var24);
    ch.bluepenguin.email.client.Person var27 = var24.getPerson();
    var5.setAccount(var24);
    ch.bluepenguin.email.client.AbstractUniqueID var29 = var24.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var30 = var24.getUniqueID();
    java.lang.Integer var31 = var30.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test395");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setTechnicalID(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test396");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    java.lang.String var1 = var0.getUserID();
    var0.setUserID("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setUserID("(0) null\n   (0) null\n   (0) null");
    java.lang.String var6 = var0.getUserID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null\n   (0) null\n   (0) null"+ "'", var6.equals("(0) null\n   (0) null\n   (0) null"));

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test397");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    var0.setTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var12 = var0.getSubject();
    var0.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setTechnicalID(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test398");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var1 = var0.getRootList();
    var0.checkMenuModelHealth();
    var0.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test399");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var17 = var12.getSentDate();
    ch.bluepenguin.email.client.MailMessage var18 = new ch.bluepenguin.email.client.MailMessage();
    var18.setBcc("Dummy EmailFacade Impl");
    var18.setTechnicalID(100);
    java.lang.String var23 = var18.getReplyTo();
    java.lang.String[] var25 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var18.setCc(var25);
    java.lang.String[] var28 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var18.setBcc(var28);
    var12.setCc(var28);
    java.lang.String var31 = var9.returnStringList(var28);
    var0.setCc(var28);
    ch.bluepenguin.email.client.AbstractUniqueID var33 = var0.getUniqueID();
    var33.setId((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Dummy EmailFacade Impl"+ "'", var31.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test400");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var5 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.email.client.Folder var7 = var5.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var9 = var5.getMessagesFromFolder("Dummy EmailFacade Impl");
    var5.setCurrentFolder("(0) null\n   (0) null");
    ch.bluepenguin.email.client.MailMessage[] var13 = var5.getMessagesFromFolder("Default EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var13, "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test401");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isDirty();
    boolean var4 = var0.isStateful();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test402");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var16.addComponent((org.apache.tapestry.IComponent)var19);
    java.util.Map var23 = var19.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var24.forgetPage("");
    org.apache.tapestry.engine.IPageSource var27 = var24.getPageSource();
    org.apache.tapestry.engine.IPropertySource var28 = var24.getPropertySource();
    java.util.Collection var29 = var24.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var30 = var24.getComponentMessagesSource();
    var19.attach((org.apache.tapestry.IEngine)var24);
    boolean var32 = var12.equals((java.lang.Object)var24);
    org.apache.tapestry.engine.IComponentClassEnhancer var33 = var24.getComponentClassEnhancer();
    var5.attach((org.apache.tapestry.IEngine)var24);
    var24.forgetPage("hi!");
    boolean var37 = var24.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test403");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var7 = var6.getSpecification();
    java.lang.Object var8 = var6.getGlobal();
    java.lang.Object var9 = var6.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    var13.setText("hi!");
    var11.setContained((java.lang.Object)var13);
    var6.setVisit((java.lang.Object)var13);
    ch.bluepenguin.email.client.service.EmailFacadeException var23 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var6.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var23);
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", (java.lang.Throwable)var23);
    org.apache.tapestry.asset.ResourceChecksumSource var26 = var0.getResourceChecksumSource();
    org.apache.tapestry.asset.ResourceChecksumSource var27 = var0.getResourceChecksumSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test404");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    var15.beginPageRender();
    java.util.Collection var17 = var15.getBindingNames();
    var12.setPage((org.apache.tapestry.IPage)var15);
    org.apache.tapestry.listener.ListenerMap var19 = var15.getListeners();
    int var20 = var15.getBodyCount();
    var15.endPageRender();
    java.lang.String var22 = var15.getExtendedId();
    var4.setPage((org.apache.tapestry.IPage)var15);
    ch.bluepenguin.email.client.tapestry.Home var24 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var25 = var24.getBody();
    int var26 = var24.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    var24.addComponent((org.apache.tapestry.IComponent)var27);
    java.lang.String var31 = var24.getIdPath();
    org.apache.tapestry.ILocation var32 = var24.getLocation();
    java.lang.String var33 = var24.toString();
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    int var36 = var34.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    var34.addComponent((org.apache.tapestry.IComponent)var37);
    java.lang.String var41 = var34.getIdPath();
    org.apache.tapestry.ILocation var42 = var34.getLocation();
    org.apache.tapestry.IEngine var43 = var34.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var45 = var44.getBody();
    int var46 = var44.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    var47.beginPageRender();
    java.util.Collection var49 = var47.getBindingNames();
    var44.setPage((org.apache.tapestry.IPage)var47);
    var34.addComponent((org.apache.tapestry.IComponent)var47);
    var47.setPageName("hi!");
    int var54 = var47.getBodyCount();
    var24.setContainer((org.apache.tapestry.IComponent)var47);
    var15.addBody((org.apache.tapestry.IRender)var47);
    org.apache.tapestry.spec.IComponentSpecification var57 = var47.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test405");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getMessagesFromFolder(",");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var3.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var7 = var3.getMessagesFromFolder("Dummy EmailFacade Impl");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var7, "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null", "ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test406");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    ch.bluepenguin.email.client.Person var7 = new ch.bluepenguin.email.client.Person();
    java.lang.String var8 = var7.getFirstname();
    var7.setNickname("");
    var7.setLastname(",");
    java.lang.String var13 = var7.getFirstname();
    var0.setPerson(var7);
    var7.setFirstname("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test407");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    int var5 = var0.getTechnicalID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test408");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    int var4 = var1.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    int var6 = var5.getChildrenSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test409");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    var10.setParameters((java.lang.Object[])var13);
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    var10.setComponent((org.apache.tapestry.IComponent)var15);
    org.apache.tapestry.INamespace var18 = var15.getNamespace();
    var5.setContainer((org.apache.tapestry.IComponent)var15);
    org.apache.tapestry.IRequestCycle var20 = var15.getRequestCycle();
    org.apache.tapestry.IRequestCycle var21 = var15.getRequestCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test410");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var2 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.email.client.MailMessage[] var4 = var2.getAllMessages();
    boolean var5 = var0.equals((java.lang.Object)var2);
    ch.bluepenguin.email.client.Folder var6 = var2.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var7 = var6.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Dummy EmailFacade Impl"+ "'", var3.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test411");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var2 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.email.client.MailMessage[] var4 = var2.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var5 = var2.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var5, "ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]", "ch.bluepenguin.email.client.service.EmailFacadeException");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Dummy EmailFacade Impl"+ "'", var3.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test412");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    java.lang.Object var20 = var16.getGlobal();
    java.lang.Object var21 = var16.getGlobal();
    boolean var22 = var1.equals((java.lang.Object)var16);
    ch.bluepenguin.email.client.tapestry.SpringEngine var23 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var24 = var23.getPageSource();
    org.apache.tapestry.engine.IPageSource var25 = var23.getPageSource();
    java.util.Collection var26 = var23.getActivePageNames();
    org.apache.tapestry.spec.IApplicationSpecification var27 = var23.getSpecification();
    java.util.Collection var28 = var23.getActivePageNames();
    var1.insert(var28);
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    var30.setParentFolderId((java.lang.Integer)1);
    var30.setFullName("Dummy EmailFacade Impl");
    java.lang.String var36 = var30.getFullName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    var1.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test413");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    org.apache.tapestry.IComponent var7 = var0.getContainer();
    org.apache.tapestry.IAsset var9 = var0.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.detach();
    org.apache.tapestry.IPage var11 = var0.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test414");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    ch.bluepenguin.email.client.MailMessage var24 = new ch.bluepenguin.email.client.MailMessage();
    var24.setBcc("Dummy EmailFacade Impl");
    java.lang.String var27 = var24.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var28 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var28.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var31 = var28.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var32 = var28.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    var33.setParentFolderId((java.lang.Integer)1);
    var33.setFullName("hi!");
    var32.setParent(var33);
    var24.setFolder(var33);
    java.lang.String[] var41 = var24.getBcc();
    var17.setTo(var41);
    var17.setText("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    var4.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.children();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    var29.setFullName("hi!");
    var29.setFullName("Dummy EmailFacade Impl");
    var25.setFolder(var29);
    ch.bluepenguin.email.client.Account var36 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var36.getUniqueID();
    var29.setAccount(var36);
    ch.bluepenguin.email.client.Person var39 = var36.getPerson();
    var17.setAccount(var36);
    var4.setAccount(var36);
    ch.bluepenguin.email.client.Person var42 = new ch.bluepenguin.email.client.Person();
    java.lang.String var43 = var42.getFirstname();
    var42.setNickname("");
    var42.setLastname(",");
    var36.setPerson(var42);
    ch.bluepenguin.email.client.Person var49 = var36.getPerson();
    var49.setReserve("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    java.lang.String var52 = var49.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test416");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    java.lang.String var10 = var5.getName();
    var5.setIndex(1);
    var5.setLeaf(true);
    var5.setName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var17 = var5.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test417");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    java.lang.Object var20 = var16.getGlobal();
    java.lang.Object var21 = var16.getGlobal();
    boolean var22 = var1.equals((java.lang.Object)var16);
    org.apache.tapestry.util.io.DataSqueezer var23 = var16.createDataSqueezer();
    java.lang.Object var24 = var16.getGlobal();
    org.apache.tapestry.engine.IScriptSource var25 = var16.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var35 = var32.getParent();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var39 = var37.equals((java.lang.Object)(short)(-1));
    java.util.Collection var40 = var37.getChildren();
    boolean var41 = var32.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var37);
    java.util.Collection var42 = var32.getChildren();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    org.apache.tapestry.contrib.tree.model.ITreeNode var44 = var1.getParent();
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    ch.bluepenguin.email.client.Folder var47 = new ch.bluepenguin.email.client.Folder();
    var46.setFolder(var47);
    java.util.Collection var49 = var46.children();
    var1.insert(var49);
    ch.bluepenguin.email.client.tapestry.SpringEngine var51 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var51.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var54 = var51.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var55 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var55.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var58 = var55.getMyLocale();
    var51.setLocale(var58);
    org.apache.tapestry.engine.IComponentClassEnhancer var60 = var51.getComponentClassEnhancer();
    boolean var61 = var1.equals((java.lang.Object)var51);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var62 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var51);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var64 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var64.setLeaf(false);
    boolean var67 = var64.isLeaf();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var68 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var64);
    var62.setParent((java.lang.Object)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test419");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    int var8 = var3.getBodyCount();
    java.util.Map var9 = var3.getAssets();
    org.apache.tapestry.event.ChangeObserver var10 = var3.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test420");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    java.lang.String var4 = var0.getText();
    var0.setTechnicalID(100);
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    java.lang.String[] var17 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var7.setBcc(var17);
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    var19.setTechnicalID(100);
    java.lang.String var24 = var19.getReplyTo();
    java.lang.String[] var26 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var19.setCc(var26);
    java.lang.String[] var29 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var19.setBcc(var29);
    var7.setBcc(var29);
    int var32 = var7.getTechnicalID();
    var0.copyTo((org.springframework.mail.MailMessage)var7);
    int var34 = var7.getTechnicalID();
    java.lang.String[] var35 = var7.getTo();
    var7.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test421");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    org.apache.tapestry.asset.ResourceChecksumSource var3 = var0.getResourceChecksumSource();
    boolean var4 = var0.isResetServiceEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test422");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    java.lang.String var4 = var0.toString();
    var0.forgetPage("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test423");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    int var4 = var1.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var1.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var5);
    java.lang.Object var7 = var1.getParent();
    java.lang.Object var8 = var1.getContained();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var9.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    var12.setText(",");
    var9.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var12);
    var12.setElement("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var21 = var20.displayMenuStructure();
    java.util.Iterator var22 = var20.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var23 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var25 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var26 = var25.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var25);
    var23.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var25);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var29 = var20.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var25);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var25.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    var1.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    java.lang.Object var34 = var1.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 100L+ "'", var7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0) null"+ "'", var21.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 100L+ "'", var34.equals(100L));

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test424");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    var0.setAll(true);
    boolean var6 = var0.isDirty((java.lang.Integer)(-1));
    boolean var7 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test425");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    org.apache.tapestry.engine.IComponentMessagesSource var5 = var0.getComponentMessagesSource();
    boolean var6 = var0.isDirty();
    boolean var7 = var0.isResetServiceEnabled();
    org.apache.tapestry.util.pool.Pool var8 = var0.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test426");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    java.lang.String[] var12 = var0.getTo();
    java.lang.String var13 = var0.getText();
    java.util.Date var14 = var0.getSentDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test427");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setParentFolderId((java.lang.Integer)1);
    var5.setFullName("hi!");
    var4.setParent(var5);
    java.lang.Integer var12 = var4.getParentFolderId();
    ch.bluepenguin.email.client.Folder var13 = var4.getParent();
    var13.setParentFolderId((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    var0.setTo("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var13 = var8.getSentDate();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    java.lang.String[] var21 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var14.setCc(var21);
    java.lang.String[] var24 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var14.setBcc(var24);
    var8.setCc(var24);
    var0.copyTo((org.springframework.mail.MailMessage)var8);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var28 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var28.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    var31.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var36 = var31.getSentDate();
    ch.bluepenguin.email.client.MailMessage var37 = new ch.bluepenguin.email.client.MailMessage();
    var37.setBcc("Dummy EmailFacade Impl");
    var37.setTechnicalID(100);
    java.lang.String var42 = var37.getReplyTo();
    java.lang.String[] var44 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var37.setCc(var44);
    java.lang.String[] var47 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var37.setBcc(var47);
    var31.setCc(var47);
    java.lang.String var50 = var28.returnStringList(var47);
    java.lang.String[] var52 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var53 = var28.returnStringList(var52);
    var0.setTo(var52);
    java.lang.String var55 = var0.getSubject();
    java.lang.String var56 = var0.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Dummy EmailFacade Impl"+ "'", var50.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var53.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test429");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var1.toString();
    var1.setDepth((-1));
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test430");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var7.setName("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    java.util.Iterator var11 = var10.getChildrenIterator();
    boolean var12 = var10.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var13 = var10.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var16 = var15.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var18 = var17.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var19 = var17.getMenuItem();
    java.lang.String var20 = var17.toString();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var17.getMenuItem();
    int var22 = var17.getChildrenSize();
    var10.addChild(var17);
    int var24 = var10.getChildrenSize();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var25 = var10.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var26 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var26);
    var3.addMenuItem(var25, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var26);
    var3.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0) null"+ "'", var20.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test431");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var19 = var18.getParent();
    var18.setLeaf(false);
    var3.setContained((java.lang.Object)var18);
    java.lang.Object var23 = var18.getContained();
    var18.setLeaf(false);
    java.lang.Object var26 = var18.getParent();
    java.lang.Object var27 = var18.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 10.0f+ "'", var23.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10.0f+ "'", var27.equals(10.0f));

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test432");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var0.getUniqueID();
    var0.setFullName("");
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var10 = var9.getAllowsChildren();
    boolean var11 = var9.isLeaf();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    org.apache.tapestry.IAsset var16 = var12.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var17 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var17.setParameters((java.lang.Object[])var20);
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    var17.setComponent((org.apache.tapestry.IComponent)var22);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    var25.setPageName("");
    var22.addBody((org.apache.tapestry.IRender)var25);
    var12.setContainer((org.apache.tapestry.IComponent)var25);
    var12.setPageName("Dummy EmailFacade Impl");
    boolean var34 = var9.equals((java.lang.Object)"Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    var35.setParentFolderId((java.lang.Integer)1);
    var35.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var41 = var35.getUniqueID();
    var35.setFullName("");
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    boolean var45 = var44.getAllowsChildren();
    boolean var46 = var44.isLeaf();
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    int var49 = var47.getBodyCount();
    org.apache.tapestry.IAsset var51 = var47.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var52 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var54 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var55 = var54.getSuppressed();
    var52.setParameters((java.lang.Object[])var55);
    ch.bluepenguin.email.client.tapestry.Home var57 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var58 = var57.getBody();
    var52.setComponent((org.apache.tapestry.IComponent)var57);
    ch.bluepenguin.email.client.tapestry.Home var60 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var61 = var60.getBody();
    int var62 = var60.getBodyCount();
    var60.setPageName("");
    var57.addBody((org.apache.tapestry.IRender)var60);
    var47.setContainer((org.apache.tapestry.IComponent)var60);
    var47.setPageName("Dummy EmailFacade Impl");
    boolean var69 = var44.equals((java.lang.Object)"Dummy EmailFacade Impl");
    var9.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var44);
    int var71 = var44.getChildCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test433");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    java.util.Date var3 = var0.getSentDate();
    var0.setSubject("");
    java.lang.String[] var6 = var0.getBcc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test434");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    var1.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var6 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var6.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var9.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    var12.setText(",");
    var9.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var12);
    var6.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var9);
    var9.setText("Default EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var22 = var21.displayMenuStructure();
    java.util.Iterator var23 = var21.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var27 = var26.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    var24.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var30 = var21.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var31 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var26.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var31);
    var31.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var9.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var31);
    var1.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var31);
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    var40.beginPageRender();
    java.util.Collection var42 = var40.getBindingNames();
    var37.setPage((org.apache.tapestry.IPage)var40);
    org.apache.tapestry.INamespace var44 = var37.getNamespace();
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var46 = var45.getBody();
    int var47 = var45.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    var45.addComponent((org.apache.tapestry.IComponent)var48);
    java.lang.String var52 = var45.getIdPath();
    org.apache.tapestry.ILocation var53 = var45.getLocation();
    org.apache.tapestry.IEngine var54 = var45.getEngine();
    var45.beginPageRender();
    var37.addComponent((org.apache.tapestry.IComponent)var45);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var57 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var59 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var60 = var59.getSuppressed();
    var57.setParameters((java.lang.Object[])var60);
    ch.bluepenguin.email.client.tapestry.Home var62 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var63 = var62.getBody();
    var57.setComponent((org.apache.tapestry.IComponent)var62);
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    int var67 = var65.getBodyCount();
    var65.setPageName("");
    var62.addBody((org.apache.tapestry.IRender)var65);
    var45.addComponent((org.apache.tapestry.IComponent)var65);
    java.util.Locale var72 = var45.getLocale();
    var1.setParent((java.lang.Object)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0) null"+ "'", var22.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test435");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    java.util.Collection var9 = var4.children();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    java.util.Collection var14 = var11.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    var15.addComponent((org.apache.tapestry.IComponent)var18);
    java.util.Map var22 = var18.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var23 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var23.forgetPage("");
    org.apache.tapestry.engine.IPageSource var26 = var23.getPageSource();
    org.apache.tapestry.engine.IPropertySource var27 = var23.getPropertySource();
    java.util.Collection var28 = var23.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var29 = var23.getComponentMessagesSource();
    var18.attach((org.apache.tapestry.IEngine)var23);
    boolean var31 = var11.equals((java.lang.Object)var23);
    ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper var32 = new ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper();
    boolean var33 = var11.equals((java.lang.Object)var32);
    boolean var34 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var11);
    boolean var35 = var11.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test436");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    java.lang.String var6 = var0.getName();
    var0.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var9.setText("Dummy EmailFacade Impl");
    var9.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var14 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var15 = var14.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var22 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var24 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var25 = var24.getSuppressed();
    var22.setParameters((java.lang.Object[])var25);
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    var22.setComponent((org.apache.tapestry.IComponent)var27);
    var14.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var22);
    var22.setStyleClass(",");
    var9.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var22);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var34 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var9.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var36 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var37 = var36.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var38 = var36.getAllMessages();
    var34.setParameters((java.lang.Object[])var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var38, "SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null"+ "'", var15.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test437");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    java.util.Collection var5 = var0.getActivePageNames();
    org.apache.tapestry.engine.IComponentClassEnhancer var6 = var0.getComponentClassEnhancer();
    java.util.Locale var7 = var0.getLocale();
    org.apache.tapestry.engine.IComponentMessagesSource var8 = var0.getComponentMessagesSource();
    var0.forgetPage("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    org.apache.tapestry.spec.IApplicationSpecification var11 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    java.util.Collection var14 = var8.getBindingNames();
    org.apache.tapestry.ILocation var15 = var8.getLocation();
    var8.beginPageRender();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var18 = var8.getNestedComponent("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test439");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    java.lang.String var24 = var0.getReplyTo();
    java.lang.String[] var25 = var0.getCc();
    var0.setTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test440");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    java.lang.String var2 = var0.getName();
    ch.bluepenguin.email.client.MailMessage[] var3 = var0.getAllMessages();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Dummy EmailFacade Impl"+ "'", var2.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test441");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.lang.String var2 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = var0.getRootList();
    var0.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "(0) null"+ "'", var2.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test442");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    java.lang.Object var20 = var16.getGlobal();
    java.lang.Object var21 = var16.getGlobal();
    boolean var22 = var1.equals((java.lang.Object)var16);
    org.apache.tapestry.util.io.DataSqueezer var23 = var16.createDataSqueezer();
    org.apache.tapestry.util.pool.Pool var24 = var16.getPool();
    org.apache.tapestry.engine.IComponentClassEnhancer var25 = var16.getComponentClassEnhancer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test443");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isDirty();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var5 = var4.getSeparator();
    java.util.Locale var6 = var4.getMyLocale();
    var0.setLocale(var6);
    org.apache.tapestry.spec.IApplicationSpecification var8 = var0.getSpecification();
    org.apache.tapestry.IResourceResolver var9 = var0.getResourceResolver();
    java.lang.Object var10 = var0.getVisit();
    java.lang.Object var11 = var0.getVisit();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    var12.beginPageRender();
    java.util.Collection var14 = var12.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var15 = var12.getListeners();
    java.lang.String var16 = var12.getPageName();
    java.lang.String var17 = var12.getExtendedId();
    java.lang.String var18 = var12.toString();
    var0.setVisit((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ","+ "'", var5.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test444");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    java.util.Iterator var3 = var2.getChildrenIterator();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var4 = var2.getMenuItem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test445");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = var3.getRootList();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    org.apache.tapestry.IAsset var20 = var16.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var21 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var23 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    var21.setParameters((java.lang.Object[])var24);
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    var21.setComponent((org.apache.tapestry.IComponent)var26);
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    int var31 = var29.getBodyCount();
    var29.setPageName("");
    var26.addBody((org.apache.tapestry.IRender)var29);
    var16.setContainer((org.apache.tapestry.IComponent)var29);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var16);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test446");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    var0.setTo("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setCc("hi!");
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.children();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    var16.setFullName("hi!");
    var16.setFullName("Dummy EmailFacade Impl");
    var12.setFolder(var16);
    ch.bluepenguin.email.client.Account var23 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var24 = var23.getUniqueID();
    var16.setAccount(var23);
    boolean var26 = var8.equals((java.lang.Object)var23);
    ch.bluepenguin.email.client.AbstractUniqueID var27 = var8.getUniqueID();
    var8.setFrom("(0) null");
    boolean var30 = var0.equals((java.lang.Object)var8);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var31 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var31.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    var34.setBcc("Dummy EmailFacade Impl");
    var34.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var39 = var34.getSentDate();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    java.lang.String[] var50 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var40.setBcc(var50);
    var34.setCc(var50);
    java.lang.String var53 = var31.returnStringList(var50);
    var0.setCc(var50);
    ch.bluepenguin.email.client.MailMessage var55 = new ch.bluepenguin.email.client.MailMessage();
    var55.setBcc("Dummy EmailFacade Impl");
    var55.setTechnicalID(100);
    java.lang.String var60 = var55.getReplyTo();
    var55.setTo("");
    ch.bluepenguin.email.client.MailMessage var63 = new ch.bluepenguin.email.client.MailMessage();
    var63.setCc("hi!");
    ch.bluepenguin.email.client.Folder var66 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var67 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var66);
    boolean var69 = var67.equals((java.lang.Object)(short)(-1));
    java.util.Collection var70 = var67.children();
    ch.bluepenguin.email.client.Folder var71 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var72 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var71);
    var71.setFullName("hi!");
    var71.setFullName("Dummy EmailFacade Impl");
    var67.setFolder(var71);
    ch.bluepenguin.email.client.Account var78 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var79 = var78.getUniqueID();
    var71.setAccount(var78);
    boolean var81 = var63.equals((java.lang.Object)var78);
    ch.bluepenguin.email.client.AbstractUniqueID var82 = var63.getUniqueID();
    var63.setFrom("(0) null");
    boolean var85 = var55.equals((java.lang.Object)var63);
    var55.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.copyTo((org.springframework.mail.MailMessage)var55);
    int var89 = var0.getTechnicalID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Dummy EmailFacade Impl"+ "'", var53.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 100);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test447");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var0.setHyperlink("(0) null");
    var0.setHyperlink("Dummy EmailFacade Impl");
    var0.setHyperlink("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.setStyleClass(",");
    var0.setHyperlink("hi!");
    java.lang.String var11 = var0.getHyperlink();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test448");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setUserID("Default EmailFacade Impl");
    java.lang.String var7 = var0.getUserID();
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Default EmailFacade Impl"+ "'", var7.equals("Default EmailFacade Impl"));

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test449");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    var10.setParameters((java.lang.Object[])var13);
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    var10.setComponent((org.apache.tapestry.IComponent)var15);
    org.apache.tapestry.INamespace var18 = var15.getNamespace();
    var5.setContainer((org.apache.tapestry.IComponent)var15);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var15);
    org.apache.tapestry.ILocation var21 = var15.getLocation();
    org.apache.tapestry.ILocation var22 = var15.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test450");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var3 = var0.getAllMessages();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder[] var5 = var0.getAllFolders();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var6.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var10 = var6.getMessagesFromFolder("Dummy EmailFacade Impl");
    java.lang.String var11 = var6.getName();
    ch.bluepenguin.email.client.MailMessage[] var13 = var6.getMessagesFromFolder("(0) null\n   (0) null\n   (0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var13, ",", ",");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Dummy EmailFacade Impl"+ "'", var11.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test451");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    var0.setTo("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var13 = var8.getSentDate();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    java.lang.String[] var21 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var14.setCc(var21);
    java.lang.String[] var24 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var14.setBcc(var24);
    var8.setCc(var24);
    var0.copyTo((org.springframework.mail.MailMessage)var8);
    int var28 = var8.getTechnicalID();
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    var29.setTechnicalID(100);
    java.lang.String var34 = var29.getReplyTo();
    java.lang.String[] var36 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var29.setCc(var36);
    java.lang.String[] var39 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var29.setBcc(var39);
    ch.bluepenguin.email.client.MailMessage var41 = new ch.bluepenguin.email.client.MailMessage();
    var41.setBcc("Dummy EmailFacade Impl");
    var41.setTechnicalID(100);
    java.lang.String var46 = var41.getReplyTo();
    java.lang.String[] var48 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var41.setCc(var48);
    java.lang.String[] var51 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var41.setBcc(var51);
    var29.setBcc(var51);
    int var54 = var29.getTechnicalID();
    int var55 = var29.getTechnicalID();
    int var56 = var29.getTechnicalID();
    java.lang.String[] var57 = var29.getCc();
    var8.setCc(var57);
    var8.setText("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test452");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isDirty();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var5 = var4.getSeparator();
    java.util.Locale var6 = var4.getMyLocale();
    var0.setLocale(var6);
    org.apache.tapestry.spec.IApplicationSpecification var8 = var0.getSpecification();
    org.apache.tapestry.util.pool.Pool var9 = var0.getPool();
    java.util.Collection var10 = var0.getActivePageNames();
    ch.bluepenguin.email.client.service.impl.EmailFacadeState var11 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var11.clear();
    var11.clear();
    boolean var14 = var11.isAllClean();
    boolean var16 = var11.isDirty((java.lang.Integer)100);
    var11.clear();
    boolean var19 = var11.isDirty((java.lang.Integer)10);
    var11.setAll(false);
    var0.setVisit((java.lang.Object)false);
    boolean var23 = var0.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ","+ "'", var5.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test453");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.MailMessage var1 = new ch.bluepenguin.email.client.MailMessage();
    var1.setBcc("Dummy EmailFacade Impl");
    var1.setTechnicalID(100);
    java.lang.String var6 = var1.getReplyTo();
    java.lang.String[] var8 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var1.setCc(var8);
    java.lang.String var10 = var0.returnStringList(var8);
    var0.setSeparator("Dummy EmailFacade Impl");
    java.lang.String var13 = var0.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var10.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Dummy EmailFacade Impl"+ "'", var13.equals("Dummy EmailFacade Impl"));

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test454");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var5 = var0.getUserID();
    java.lang.String var6 = var0.getUserID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var5.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var6.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test455");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var5 = var4.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test456");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    var2.setLeaf(false);
    java.lang.String var9 = var2.toString();
    var2.setLeaf(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test457");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var16.addComponent((org.apache.tapestry.IComponent)var19);
    java.util.Map var23 = var19.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var24.forgetPage("");
    org.apache.tapestry.engine.IPageSource var27 = var24.getPageSource();
    org.apache.tapestry.engine.IPropertySource var28 = var24.getPropertySource();
    java.util.Collection var29 = var24.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var30 = var24.getComponentMessagesSource();
    var19.attach((org.apache.tapestry.IEngine)var24);
    boolean var32 = var12.equals((java.lang.Object)var24);
    org.apache.tapestry.engine.IComponentClassEnhancer var33 = var24.getComponentClassEnhancer();
    var5.attach((org.apache.tapestry.IEngine)var24);
    java.util.Locale var35 = var24.getLocale();
    boolean var36 = var24.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test458");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var6 = var0.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var7 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var8 = var0.getAllMessages();
    var0.setCurrentFolder("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test459");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    int var8 = var3.getBodyCount();
    java.util.Map var9 = var3.getAssets();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    var10.beginPageRender();
    java.util.Collection var12 = var10.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var13 = var10.getListeners();
    java.lang.String var14 = var10.getPageName();
    var3.setPage((org.apache.tapestry.IPage)var10);
    org.apache.tapestry.ILocation var16 = var3.getLocation();
    var3.endPageRender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test460");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var11 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var13 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var14 = var13.getSuppressed();
    var11.setParameters((java.lang.Object[])var14);
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    var11.setComponent((org.apache.tapestry.IComponent)var16);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var19.setPageName("");
    var16.addBody((org.apache.tapestry.IRender)var19);
    org.apache.tapestry.IEngine var25 = var19.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    int var28 = var26.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    int var31 = var29.getBodyCount();
    var26.addComponent((org.apache.tapestry.IComponent)var29);
    var19.addBody((org.apache.tapestry.IRender)var29);
    org.apache.tapestry.IComponent var34 = var29.getContainer();
    org.apache.tapestry.event.ChangeObserver var35 = var29.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var36 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var36.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var39 = var36.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var40 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var41 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var42 = var41.getSeparator();
    java.util.Locale var43 = var41.getMyLocale();
    var40.setMyLocale(var43);
    var36.setMyLocale(var43);
    var29.setLocale(var43);
    var5.addBody((org.apache.tapestry.IRender)var29);
    int var48 = var29.getBodyCount();
    ch.bluepenguin.email.client.tapestry.SpringEngine var49 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var49.forgetPage("");
    org.apache.tapestry.engine.IPageSource var52 = var49.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var53 = var49.getComponentMessagesSource();
    var29.attach((org.apache.tapestry.IEngine)var49);
    org.apache.tapestry.engine.ISpecificationSource var55 = var49.getSpecificationSource();
    org.apache.tapestry.util.pool.Pool var56 = var49.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ","+ "'", var42.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test461");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    java.lang.String var10 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    int var16 = var14.getBodyCount();
    var11.addComponent((org.apache.tapestry.IComponent)var14);
    ch.bluepenguin.email.client.tapestry.SpringEngine var18 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var18.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var21 = var18.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var22 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var22.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var25 = var22.getMyLocale();
    var18.setLocale(var25);
    var11.setLocale(var25);
    var0.setLocale(var25);
    java.lang.Object var29 = var0.getVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test462");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setLeaf(false);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var4.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var8 = new java.lang.String[] { "(0) null"};
    java.lang.String var9 = var4.returnStringList(var8);
    java.util.Locale var10 = var4.getMyLocale();
    java.util.Locale var11 = var4.getMyLocale();
    var4.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var22 = var17.getSentDate();
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    var23.setBcc("Dummy EmailFacade Impl");
    var23.setTechnicalID(100);
    java.lang.String var28 = var23.getReplyTo();
    java.lang.String[] var30 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var23.setCc(var30);
    java.lang.String[] var33 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var23.setBcc(var33);
    var17.setCc(var33);
    java.lang.String var36 = var14.returnStringList(var33);
    java.util.Locale var37 = var14.getMyLocale();
    java.util.Locale var38 = var14.getMyLocale();
    java.util.Locale var39 = var14.getMyLocale();
    var4.setMyLocale(var39);
    var1.setParent((java.lang.Object)var4);
    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var42 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var1.setContained((java.lang.Object)var42);
    var42.setLocale("(0) null\n   (0) null\n   (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test463");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    org.apache.tapestry.contrib.tree.model.ITreeNode var5 = var1.getParent();
    ch.bluepenguin.email.client.Folder var6 = var1.getFolder();
    java.lang.String var7 = var6.getFullName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test464");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var14 = var11.getFolder();
    ch.bluepenguin.email.client.Folder var15 = var11.getFolder();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var24 = var23.isLeaf();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var29 = var26.getParent();
    var23.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    boolean var31 = var18.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var23);
    var11.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    var34.setFolder(var35);
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    var37.setFullName("hi!");
    var35.setParent(var37);
    ch.bluepenguin.email.client.Account var42 = var35.getAccount();
    var11.setFolder(var35);
    ch.bluepenguin.email.client.tapestry.SpringEngine var44 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var45 = var44.getVisit();
    java.lang.String var46 = var44.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var47 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var44.setVisit((java.lang.Object)var47);
    org.apache.tapestry.engine.IComponentClassEnhancer var49 = var44.getComponentClassEnhancer();
    java.util.Collection var50 = var44.getActivePageNames();
    var11.insert(var50);
    ch.bluepenguin.email.client.Folder var52 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var53 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var52);
    ch.bluepenguin.email.client.Folder var54 = new ch.bluepenguin.email.client.Folder();
    var53.setFolder(var54);
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    var56.setFullName("hi!");
    var54.setParent(var56);
    var56.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    ch.bluepenguin.email.client.Folder var65 = new ch.bluepenguin.email.client.Folder();
    var64.setFolder(var65);
    org.apache.tapestry.contrib.tree.model.ITreeNode var67 = var64.getParent();
    boolean var68 = var64.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var69 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var64);
    ch.bluepenguin.email.client.Account var70 = var56.getAccount();
    var11.setFolder(var56);
    ch.bluepenguin.email.client.Folder var72 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var73 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var72);
    boolean var75 = var73.equals((java.lang.Object)(short)(-1));
    boolean var76 = var73.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var77 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var78 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var77);
    boolean var80 = var78.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var81 = var78.getParent();
    ch.bluepenguin.email.client.Folder var82 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var83 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var82);
    boolean var85 = var83.equals((java.lang.Object)(short)(-1));
    java.util.Collection var86 = var83.getChildren();
    boolean var87 = var78.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var83);
    java.util.Collection var88 = var78.getChildren();
    var73.insert(var88);
    org.apache.tapestry.contrib.tree.model.ITreeNode var90 = var73.getParent();
    var11.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test465");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    var7.addComponent((org.apache.tapestry.IComponent)var10);
    java.lang.String var14 = var7.getIdPath();
    org.apache.tapestry.ILocation var15 = var7.getLocation();
    org.apache.tapestry.IEngine var16 = var7.getEngine();
    var7.beginPageRender();
    java.lang.String var18 = var7.toString();
    var3.setPage((org.apache.tapestry.IPage)var7);
    org.apache.tapestry.listener.ListenerMap var20 = var7.getListeners();
    org.apache.tapestry.IRequestCycle var21 = var7.getRequestCycle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var23 = var7.getNestedComponent("(0) (0) null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test466");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    var0.forgetPage("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test467");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.listener.ListenerMap var2 = var0.getListeners();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var4 = var0.getComponentClassEnhancer();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var0.getSpecification();
    java.lang.String var6 = var0.getContextPath();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var9 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("Default EmailFacade Impl");
    var0.reportException(",", (java.lang.Throwable)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test468");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    var2.setFullName("hi!");
    ch.bluepenguin.email.client.Account var12 = var2.getAccount();
    ch.bluepenguin.email.client.Account var13 = var2.getAccount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var2);
    ch.bluepenguin.email.client.Folder var15 = var14.getFolder();
    java.lang.Integer var16 = var15.getParentFolderId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test469");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("Dummy EmailFacade Impl");
    java.lang.String var6 = var0.getFullName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var0.getUniqueID();
    ch.bluepenguin.email.client.Account var9 = var0.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test470");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var0.setHyperlink("(0) null");
    var0.setStyleClass("ch.bluepenguin.email.client.service.EmailFacadeException");

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test471");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var5 = new ch.bluepenguin.email.client.Person();
    java.lang.String var6 = var5.getFirstname();
    var5.setLastname("(0) null");
    var5.setLastname("");
    var0.setVisit((java.lang.Object)var5);
    org.apache.tapestry.spec.IApplicationSpecification var12 = var0.getSpecification();
    org.apache.tapestry.util.pool.Pool var13 = var0.getPool();
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    var14.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var17 = var16.getVisit();
    org.apache.tapestry.engine.IPageSource var18 = var16.getPageSource();
    java.lang.String var19 = var16.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var20 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var20.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var23 = var20.getMyLocale();
    var16.setLocale(var23);
    var14.setLocale(var23);
    var0.setLocale(var23);
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    boolean var30 = var28.equals((java.lang.Object)(short)(-1));
    java.util.Collection var31 = var28.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    int var34 = var32.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    int var37 = var35.getBodyCount();
    var32.addComponent((org.apache.tapestry.IComponent)var35);
    java.util.Map var39 = var35.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var40 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var40.forgetPage("");
    org.apache.tapestry.engine.IPageSource var43 = var40.getPageSource();
    org.apache.tapestry.engine.IPropertySource var44 = var40.getPropertySource();
    java.util.Collection var45 = var40.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var46 = var40.getComponentMessagesSource();
    var35.attach((org.apache.tapestry.IEngine)var40);
    boolean var48 = var28.equals((java.lang.Object)var40);
    org.apache.tapestry.engine.IComponentClassEnhancer var49 = var40.getComponentClassEnhancer();
    java.lang.String var50 = var40.getContextPath();
    boolean var51 = var40.getHasVisit();
    org.apache.tapestry.listener.ListenerMap var52 = var40.getListeners();
    java.util.Locale var53 = var40.getLocale();
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    var54.beginPageRender();
    java.lang.String var56 = var54.toString();
    ch.bluepenguin.email.client.tapestry.SpringEngine var57 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var57.forgetPage("");
    org.apache.tapestry.engine.IPageSource var60 = var57.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var61 = var57.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var62 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var62.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var65 = var62.getMyLocale();
    var57.setLocale(var65);
    var54.setLocale(var65);
    var40.setLocale(var65);
    var0.setLocale(var65);
    org.apache.tapestry.engine.ITemplateSource var70 = var0.getTemplateSource();
    org.apache.tapestry.util.io.DataSqueezer var71 = var0.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test472");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    boolean var3 = var0.isAllClean();
    boolean var5 = var0.isDirty((java.lang.Integer)100);
    var0.clear();
    boolean var8 = var0.isDirty((java.lang.Integer)10);
    var0.clear();
    var0.setAll(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test473");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.IEngine var8 = var0.getEngine();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    var9.setParameters((java.lang.Object[])var12);
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    var9.setComponent((org.apache.tapestry.IComponent)var14);
    var14.detach();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var20 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var21 = var20.getSuppressed();
    var18.setParameters((java.lang.Object[])var21);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    var18.setComponent((org.apache.tapestry.IComponent)var23);
    var23.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var30 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var31 = var30.getSuppressed();
    var28.setParameters((java.lang.Object[])var31);
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    var28.setComponent((org.apache.tapestry.IComponent)var33);
    org.apache.tapestry.INamespace var36 = var33.getNamespace();
    var23.setContainer((org.apache.tapestry.IComponent)var33);
    var14.setPage((org.apache.tapestry.IPage)var33);
    org.apache.tapestry.IPage var39 = var14.getPage();
    var0.addComponent((org.apache.tapestry.IComponent)var39);
    var0.detach();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test474");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isDirty();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var5 = var4.getSeparator();
    java.util.Locale var6 = var4.getMyLocale();
    var0.setLocale(var6);
    org.apache.tapestry.spec.IApplicationSpecification var8 = var0.getSpecification();
    java.lang.Object var9 = var0.getVisit();
    java.lang.Object var10 = var0.getVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ","+ "'", var5.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test475");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var2 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var2.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var6 = new java.lang.String[] { "(0) null"};
    java.lang.String var7 = var2.returnStringList(var6);
    java.util.Locale var8 = var2.getMyLocale();
    java.util.Locale var9 = var2.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getReplyTo();
    java.lang.String[] var17 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var10.setCc(var17);
    java.lang.String[] var20 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var10.setBcc(var20);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    var10.setBcc(var32);
    java.lang.String[] var35 = var10.getBcc();
    java.lang.String var36 = var2.returnStringList(var35);
    var0.setBcc(var35);
    java.lang.String var38 = var0.getFrom();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var39 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var39.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var43 = new java.lang.String[] { "(0) null"};
    java.lang.String var44 = var39.returnStringList(var43);
    java.util.Locale var45 = var39.getMyLocale();
    java.util.Locale var46 = var39.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setTechnicalID(100);
    java.lang.String var52 = var47.getReplyTo();
    java.lang.String[] var54 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var47.setCc(var54);
    java.lang.String[] var57 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var47.setBcc(var57);
    ch.bluepenguin.email.client.MailMessage var59 = new ch.bluepenguin.email.client.MailMessage();
    var59.setBcc("Dummy EmailFacade Impl");
    var59.setTechnicalID(100);
    java.lang.String var64 = var59.getReplyTo();
    java.lang.String[] var66 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var59.setCc(var66);
    java.lang.String[] var69 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var59.setBcc(var69);
    var47.setBcc(var69);
    java.lang.String[] var72 = var47.getBcc();
    java.lang.String var73 = var39.returnStringList(var72);
    var0.setBcc(var72);
    var0.setTechnicalID(0);
    ch.bluepenguin.email.client.AbstractUniqueID var77 = var0.getUniqueID();
    java.lang.Integer var78 = var77.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0) null"+ "'", var44.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "Dummy EmailFacade Impl"+ "'", var73.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test476");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var4 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var4.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var7 = var4.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var8 = var4.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    var9.setParentFolderId((java.lang.Integer)1);
    var9.setFullName("hi!");
    var8.setParent(var9);
    var0.setFolder(var9);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var18 = var17.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    var20.setFolder(var21);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    var23.setFullName("hi!");
    var21.setParent(var23);
    var23.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    var31.setFolder(var32);
    org.apache.tapestry.contrib.tree.model.ITreeNode var34 = var31.getParent();
    boolean var35 = var31.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    ch.bluepenguin.email.client.Account var37 = var23.getAccount();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var38 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var39 = var38.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    boolean var43 = var41.equals((java.lang.Object)(short)(-1));
    java.util.Collection var44 = var41.children();
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    var45.setFullName("hi!");
    var45.setFullName("Dummy EmailFacade Impl");
    var41.setFolder(var45);
    java.util.Collection var52 = var41.getChildren();
    ch.bluepenguin.email.client.Folder var53 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var54 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53);
    ch.bluepenguin.email.client.Folder var55 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var56 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var55);
    var55.setParentFolderId((java.lang.Integer)1);
    var55.setParentFolderId((java.lang.Integer)0);
    var53.setParent(var55);
    var41.setFolder(var55);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var63 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var39, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var41);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var41);
    var17.setFolder(var23);
    ch.bluepenguin.email.client.Folder var66 = var23.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test477");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    var8.endPageRender();
    org.apache.tapestry.IPage var16 = var8.getPage();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var17 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var17.setParameters((java.lang.Object[])var20);
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    var17.setComponent((org.apache.tapestry.IComponent)var22);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    var25.setPageName("");
    var22.addBody((org.apache.tapestry.IRender)var25);
    org.apache.tapestry.IEngine var31 = var25.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    int var34 = var32.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    int var37 = var35.getBodyCount();
    var32.addComponent((org.apache.tapestry.IComponent)var35);
    var25.addBody((org.apache.tapestry.IRender)var35);
    org.apache.tapestry.IComponent var40 = var35.getContainer();
    org.apache.tapestry.event.ChangeObserver var41 = var35.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var42 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var42.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var45 = var42.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var46 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var47 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var48 = var47.getSeparator();
    java.util.Locale var49 = var47.getMyLocale();
    var46.setMyLocale(var49);
    var42.setMyLocale(var49);
    var35.setLocale(var49);
    var8.addBody((org.apache.tapestry.IRender)var35);
    org.apache.tapestry.ILocation var54 = var35.getLocation();
    var35.setId("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ","+ "'", var48.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test478");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var6);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = var10.getFolder();
    java.util.Collection var14 = var10.getChildren();
    var1.insert(var14);
    int var16 = var1.getChildCount();
    java.util.Collection var17 = var1.children();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test479");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var12.getUniqueID();
    var5.setAccount(var12);
    ch.bluepenguin.email.client.Folder var15 = var5.getParent();
    var5.setFullName("hi!");
    ch.bluepenguin.email.client.Account var18 = var5.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test480");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    var2.setFullName("hi!");
    ch.bluepenguin.email.client.AbstractUniqueID var12 = var2.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test481");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    org.apache.tapestry.util.pool.Pool var5 = var0.getPool();
    java.util.Locale var6 = var0.getLocale();
    org.apache.tapestry.IResourceResolver var7 = var0.getResourceResolver();
    org.apache.tapestry.engine.IComponentClassEnhancer var8 = var0.getComponentClassEnhancer();
    boolean var9 = var0.getHasVisit();
    org.apache.tapestry.spec.IApplicationSpecification var10 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test482");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    java.lang.String var5 = var0.getName();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var7 = var6.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var8 = var6.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var10 = var6.getMessagesFromFolder("(0) null\n   (0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var10, "hi!", "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Dummy EmailFacade Impl"+ "'", var5.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test483");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var3 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var4 = new ch.bluepenguin.email.client.Person();
    java.lang.String var5 = var4.getFirstname();
    var4.setLastname("(0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var4.getUniqueID();
    var0.setPerson(var4);
    var4.setReserve("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test484");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.getExtendedId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test485");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    int var5 = var0.getBodyCount();
    java.util.Map var6 = var0.getComponents();
    var0.detach();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var9 = var0.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test486");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null");
    java.util.Date var13 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var17 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var17.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var20 = new ch.bluepenguin.email.client.MailMessage();
    var20.setBcc("Dummy EmailFacade Impl");
    var20.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var25 = var20.getSentDate();
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    var26.setTechnicalID(100);
    java.lang.String var31 = var26.getReplyTo();
    java.lang.String[] var33 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var26.setCc(var33);
    java.lang.String[] var36 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var26.setBcc(var36);
    var20.setCc(var36);
    java.lang.String var39 = var17.returnStringList(var36);
    java.lang.String[] var41 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var42 = var17.returnStringList(var41);
    java.lang.String var43 = var14.returnStringList(var41);
    var0.setTo(var41);
    java.lang.String[] var45 = var0.getCc();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var46 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var47 = var46.getName();
    ch.bluepenguin.email.client.Folder var48 = var46.getCurrentFolder();
    var0.setFolder(var48);
    ch.bluepenguin.email.client.Folder var50 = var0.getFolder();
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    boolean var54 = var52.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var55 = var52.getFolder();
    java.lang.Integer var56 = var55.getParentFolderId();
    var50.setParent(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Dummy EmailFacade Impl"+ "'", var39.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var42.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var43.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Dummy EmailFacade Impl"+ "'", var47.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test487");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    java.lang.String[] var24 = var17.getTo();
    var17.setTo("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test488");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var27 = var26.getParent();
    java.lang.Object var28 = var26.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var29 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    java.lang.String var30 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var32.setParent((java.lang.Object)100L);
    int var35 = var32.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    boolean var37 = var36.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var37);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var39 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var41 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var42 = var41.getSuppressed();
    var39.setParameters((java.lang.Object[])var42);
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var45 = var44.getBody();
    var39.setComponent((org.apache.tapestry.IComponent)var44);
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    int var49 = var47.getBodyCount();
    var47.setPageName("");
    var44.addBody((org.apache.tapestry.IRender)var47);
    java.util.Collection var53 = var47.getBindingNames();
    org.apache.tapestry.ILocation var54 = var47.getLocation();
    var38.setContained((java.lang.Object)var47);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var56 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var56.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var59 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var59.setText("Dummy EmailFacade Impl");
    var59.setText(",");
    var56.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var59);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var59);
    var38.setIndex(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0) null\n   (0) null\n   (0) null"+ "'", var30.equals("(0) null\n   (0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test489");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var1 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var2 = var1.getSuppressed();
    var0.setTechnicalException((java.lang.Exception)var1);
    java.lang.Exception var4 = var0.getTechnicalException();
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ch.bluepenguin.email.client.service.EmailFacadeException"+ "'", var5.equals("ch.bluepenguin.email.client.service.EmailFacadeException"));

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test490");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var4);
    java.lang.Object var6 = var5.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var8 = var7.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var10.setIndex(10);
    var10.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var15 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var17 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    var15.setParameters((java.lang.Object[])var18);
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    var15.setComponent((org.apache.tapestry.IComponent)var20);
    var7.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var10, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var15);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var25 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var26 = var25.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var25);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var28 = var27.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var29 = var27.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var7.addMenuItem(var29, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    int var34 = var32.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    int var37 = var35.getBodyCount();
    var32.addComponent((org.apache.tapestry.IComponent)var35);
    java.lang.String var39 = var32.getIdPath();
    org.apache.tapestry.ILocation var40 = var32.getLocation();
    org.apache.tapestry.IEngine var41 = var32.getEngine();
    var32.beginPageRender();
    var30.setComponent((org.apache.tapestry.IComponent)var32);
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    var5.setIndex(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0) null"+ "'", var8.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test491");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var11.setIndex(10);
    java.lang.String var14 = var11.getName();
    boolean var15 = var0.equals((java.lang.Object)var11);
    var11.setIndex(100);
    ch.bluepenguin.email.client.Person var18 = new ch.bluepenguin.email.client.Person();
    java.lang.String var19 = var18.getFirstname();
    var18.setLastname("(0) null");
    var18.setLastname("");
    java.lang.String var24 = var18.getReserve();
    var18.setNickname("");
    var11.setContained((java.lang.Object)var18);
    java.lang.String var28 = var11.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test492");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var17 = var12.getSentDate();
    ch.bluepenguin.email.client.MailMessage var18 = new ch.bluepenguin.email.client.MailMessage();
    var18.setBcc("Dummy EmailFacade Impl");
    var18.setTechnicalID(100);
    java.lang.String var23 = var18.getReplyTo();
    java.lang.String[] var25 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var18.setCc(var25);
    java.lang.String[] var28 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var18.setBcc(var28);
    var12.setCc(var28);
    java.lang.String var31 = var9.returnStringList(var28);
    var0.setCc(var28);
    ch.bluepenguin.email.client.AbstractUniqueID var33 = var0.getUniqueID();
    java.lang.String[] var34 = var0.getCc();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var35 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var36 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var37 = var36.getSeparator();
    java.util.Locale var38 = var36.getMyLocale();
    var35.setMyLocale(var38);
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var45 = var40.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var46 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var47 = var46.getReader();
    ch.bluepenguin.email.client.cache.MailCache var48 = var46.getCache();
    boolean var49 = var40.equals((java.lang.Object)var46);
    var40.setCc("(0) null");
    var40.setCc("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var54 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var54.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var57 = new ch.bluepenguin.email.client.MailMessage();
    var57.setBcc("Dummy EmailFacade Impl");
    var57.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var62 = var57.getSentDate();
    ch.bluepenguin.email.client.MailMessage var63 = new ch.bluepenguin.email.client.MailMessage();
    var63.setBcc("Dummy EmailFacade Impl");
    var63.setTechnicalID(100);
    java.lang.String var68 = var63.getReplyTo();
    java.lang.String[] var70 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var63.setCc(var70);
    java.lang.String[] var73 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var63.setBcc(var73);
    var57.setCc(var73);
    java.lang.String var76 = var54.returnStringList(var73);
    var40.setBcc(var73);
    java.lang.String var78 = var35.returnStringList(var73);
    var0.setTo(var73);
    ch.bluepenguin.email.client.AbstractUniqueID var80 = var0.getUniqueID();
    var80.setId((java.lang.Integer)0);
    var80.setId((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Dummy EmailFacade Impl"+ "'", var31.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ","+ "'", var37.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Dummy EmailFacade Impl"+ "'", var76.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "Dummy EmailFacade Impl"+ "'", var78.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test493");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var3 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var3.setText("Dummy EmailFacade Impl");
    var3.setText(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var3);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    var9.setParameters((java.lang.Object[])var12);
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    var9.setComponent((org.apache.tapestry.IComponent)var14);
    var9.setStyleClass("Default EmailFacade Impl");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var19 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var20 = var19.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var21 = var19.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var23 = var19.getMessagesFromFolder("(0) null\n   (0) null");
    var9.setParameters((java.lang.Object[])var23);
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var9);
    var3.setElement("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test494");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    org.apache.tapestry.IResourceResolver var6 = var0.getResourceResolver();
    java.lang.String var7 = var0.getContextPath();
    org.apache.tapestry.util.pool.Pool var8 = var0.getPool();
    org.apache.tapestry.engine.IScriptSource var9 = var0.getScriptSource();
    org.apache.tapestry.asset.ResourceChecksumSource var10 = var0.getResourceChecksumSource();
    boolean var11 = var0.getHasVisit();
    org.apache.tapestry.spec.IApplicationSpecification var12 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test495");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test496");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.INamespace var10 = var4.getNamespace();
    org.apache.tapestry.event.ChangeObserver var11 = var4.getChangeObserver();
    var4.detach();
    org.apache.tapestry.event.ChangeObserver var13 = var4.getChangeObserver();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var14 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    var14.setParameters((java.lang.Object[])var17);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    var14.setComponent((org.apache.tapestry.IComponent)var19);
    var19.setId("Dummy EmailFacade Impl");
    int var24 = var19.getBodyCount();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    java.util.Collection var29 = var26.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    var30.addComponent((org.apache.tapestry.IComponent)var33);
    java.util.Map var37 = var33.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var38 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var38.forgetPage("");
    org.apache.tapestry.engine.IPageSource var41 = var38.getPageSource();
    org.apache.tapestry.engine.IPropertySource var42 = var38.getPropertySource();
    java.util.Collection var43 = var38.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var44 = var38.getComponentMessagesSource();
    var33.attach((org.apache.tapestry.IEngine)var38);
    boolean var46 = var26.equals((java.lang.Object)var38);
    org.apache.tapestry.engine.IComponentClassEnhancer var47 = var38.getComponentClassEnhancer();
    var19.attach((org.apache.tapestry.IEngine)var38);
    var19.beginPageRender();
    var4.addComponent((org.apache.tapestry.IComponent)var19);
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    int var56 = var54.getBodyCount();
    var51.addComponent((org.apache.tapestry.IComponent)var54);
    java.util.Map var58 = var54.getComponents();
    java.lang.String var59 = var54.getPageName();
    var54.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var19.setContainer((org.apache.tapestry.IComponent)var54);
    org.apache.tapestry.IAsset var64 = var54.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test497");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var3 = var0.getPropertySource();
    org.apache.tapestry.asset.ResourceChecksumSource var4 = var0.getResourceChecksumSource();
    java.lang.String var5 = var0.toString();
    boolean var6 = var0.isResetServiceEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test498");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.getChildren();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    boolean var17 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    boolean var18 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var9.getParent();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    boolean var23 = var21.equals((java.lang.Object)(short)(-1));
    java.util.Collection var24 = var21.children();
    org.apache.tapestry.contrib.tree.model.ITreeNode var25 = var21.getParent();
    java.util.Collection var26 = var21.getChildren();
    var9.insert(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test499");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.children();
    boolean var12 = var8.getAllowsChildren();
    int var13 = var8.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var8);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var20 = var19.isLeaf();
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    boolean var24 = var22.equals((java.lang.Object)(short)(-1));
    java.util.Collection var25 = var22.getChildren();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    boolean var28 = var27.isLeaf();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var32 = var30.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var33 = var30.getParent();
    var27.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var30);
    boolean var35 = var22.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var27);
    boolean var36 = var19.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var27);
    var16.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var27);
    var8.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var27);
    boolean var39 = var27.getAllowsChildren();
    boolean var40 = var27.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test500");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    var4.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.children();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    var29.setFullName("hi!");
    var29.setFullName("Dummy EmailFacade Impl");
    var25.setFolder(var29);
    ch.bluepenguin.email.client.Account var36 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var36.getUniqueID();
    var29.setAccount(var36);
    ch.bluepenguin.email.client.Person var39 = var36.getPerson();
    var17.setAccount(var36);
    var4.setAccount(var36);
    ch.bluepenguin.email.client.Person var42 = new ch.bluepenguin.email.client.Person();
    java.lang.String var43 = var42.getFirstname();
    var42.setNickname("");
    var42.setLastname(",");
    var36.setPerson(var42);
    var42.setReserve("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var51 = var42.getLastname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ","+ "'", var51.equals(","));

  }

}
