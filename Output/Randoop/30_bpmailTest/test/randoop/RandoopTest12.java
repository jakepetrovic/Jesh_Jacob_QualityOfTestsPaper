package randoop;

import junit.framework.*;

public class RandoopTest12 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test1");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IComponent var12 = var4.getContainer();
    int var13 = var4.getBodyCount();
    var4.beginPageRender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test2");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    int var27 = var0.getTechnicalID();
    ch.bluepenguin.email.client.MailMessage var28 = new ch.bluepenguin.email.client.MailMessage();
    var28.setBcc("Dummy EmailFacade Impl");
    var28.setSubject("hi!");
    var0.copyTo((org.springframework.mail.MailMessage)var28);
    var28.setTechnicalID(1);
    java.lang.String var36 = var28.toString();
    var28.setCc("Dummy EmailFacade Impl");
    java.util.Date var39 = var28.getSentDate();
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    boolean var43 = var41.equals((java.lang.Object)(short)(-1));
    java.util.Collection var44 = var41.children();
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    var45.setFullName("hi!");
    var45.setFullName("Dummy EmailFacade Impl");
    var41.setFolder(var45);
    ch.bluepenguin.email.client.Account var52 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var53 = var52.getUniqueID();
    var45.setAccount(var52);
    ch.bluepenguin.email.client.Folder var55 = var45.getParent();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var56 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    var28.setFolder(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var36.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test3");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = var3.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = var3.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = var3.getRootList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test4");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    java.lang.String var6 = var0.getName();
    ch.bluepenguin.email.client.Folder var7 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var9 = var0.getMessagesFromFolder("hi!");
    java.lang.String var10 = var0.getName();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var11 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var11.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var14 = var11.getCurrentFolder();
    var11.setCurrentFolder("");
    java.lang.String var17 = var11.getName();
    ch.bluepenguin.email.client.Folder var18 = var11.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var20 = var11.getMessagesFromFolder("hi!");
    ch.bluepenguin.email.client.MailMessage[] var21 = var11.getAllMessages();
    ch.bluepenguin.email.client.Folder var22 = var11.getCurrentFolder();
    java.lang.String var23 = var11.getName();
    ch.bluepenguin.email.client.Folder var24 = var11.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var26 = var11.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var26, "SimpleMailMessage: from=null; replyTo=null; to=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; cc=hi!; bcc=; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Dummy EmailFacade Impl"+ "'", var10.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Dummy EmailFacade Impl"+ "'", var17.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Dummy EmailFacade Impl"+ "'", var23.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test5");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setDepth((-1));
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var4.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var8 = new java.lang.String[] { "(0) null"};
    java.lang.String var9 = var4.returnStringList(var8);
    ch.bluepenguin.email.client.tapestry.SpringEngine var10 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var10.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var13 = var10.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var17 = var14.getMyLocale();
    var10.setLocale(var17);
    var4.setMyLocale(var17);
    java.util.Locale var20 = var4.getMyLocale();
    ch.bluepenguin.email.client.tapestry.SpringEngine var21 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var22 = var21.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var23 = var21.getDataSqueezer();
    var21.setVisit((java.lang.Object)0.0d);
    boolean var26 = var21.isStateful();
    org.apache.tapestry.util.io.DataSqueezer var27 = var21.getDataSqueezer();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var28 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var28.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var31 = var28.getMyLocale();
    var21.setLocale(var31);
    var4.setMyLocale(var31);
    java.util.Locale var34 = var4.getMyLocale();
    var1.setParent((java.lang.Object)var34);
    int var36 = var1.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test6");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setLeaf(false);
    boolean var4 = var1.isLeaf();
    var1.setIndex(1);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    var1.setContained((java.lang.Object)var7);
    var1.setIndex(0);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var14 = var13.getParent();
    java.lang.Object var15 = var13.getContained();
    var13.setLeaf(true);
    int var18 = var13.getIndex();
    boolean var19 = var13.isLeaf();
    var1.setContained((java.lang.Object)var19);
    boolean var21 = var1.isLeaf();
    int var22 = var1.getIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10.0f+ "'", var15.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test7");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    java.lang.String var8 = var3.getIdPath();
    org.apache.tapestry.listener.ListenerMap var9 = var3.getListeners();
    java.util.Collection var10 = var3.getBindingNames();
    org.apache.tapestry.IBinding var12 = var3.getBinding("SimpleMailMessage: from=hi!; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test8");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    java.lang.String var24 = var17.getFrom();
    var17.setText("ch.bluepenguin.email.client.service.EmailFacadeException");
    ch.bluepenguin.email.client.AbstractUniqueID var27 = var17.getUniqueID();
    ch.bluepenguin.email.client.MailMessage var28 = new ch.bluepenguin.email.client.MailMessage();
    var28.setBcc("Dummy EmailFacade Impl");
    var28.setTechnicalID(100);
    java.lang.String var33 = var28.getReplyTo();
    java.lang.String[] var35 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var28.setCc(var35);
    java.lang.String[] var38 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var28.setBcc(var38);
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    java.lang.String[] var50 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var40.setBcc(var50);
    var28.setBcc(var50);
    int var53 = var28.getTechnicalID();
    int var54 = var28.getTechnicalID();
    int var55 = var28.getTechnicalID();
    java.lang.String[] var56 = var28.getCc();
    var17.copyTo((org.springframework.mail.MailMessage)var28);
    ch.bluepenguin.email.client.AbstractUniqueID var58 = var17.getUniqueID();
    var58.setId((java.lang.Integer)1);
    java.lang.Integer var61 = var58.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + 1+ "'", var61.equals(1));

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test9");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var24.setName("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var31 = var30.getParent();
    java.lang.Object var32 = var30.getContained();
    java.lang.String var33 = var30.getName();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var30);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var36 = var35.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var37 = var35.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var39 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var39.setLeaf(false);
    var35.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var39);
    var35.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var45 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var46 = var45.getParent();
    java.lang.Object var47 = var45.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var48 = var35.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var45);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var49 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var51 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var52 = var51.getSuppressed();
    var49.setParameters((java.lang.Object[])var52);
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    var49.setComponent((org.apache.tapestry.IComponent)var54);
    var54.setId("Dummy EmailFacade Impl");
    int var59 = var54.getBodyCount();
    ch.bluepenguin.email.client.Folder var60 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var61 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var60);
    boolean var63 = var61.equals((java.lang.Object)(short)(-1));
    java.util.Collection var64 = var61.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    int var67 = var65.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var68 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var69 = var68.getBody();
    int var70 = var68.getBodyCount();
    var65.addComponent((org.apache.tapestry.IComponent)var68);
    java.util.Map var72 = var68.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var73 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var73.forgetPage("");
    org.apache.tapestry.engine.IPageSource var76 = var73.getPageSource();
    org.apache.tapestry.engine.IPropertySource var77 = var73.getPropertySource();
    java.util.Collection var78 = var73.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var79 = var73.getComponentMessagesSource();
    var68.attach((org.apache.tapestry.IEngine)var73);
    boolean var81 = var61.equals((java.lang.Object)var73);
    org.apache.tapestry.engine.IComponentClassEnhancer var82 = var73.getComponentClassEnhancer();
    var54.attach((org.apache.tapestry.IEngine)var73);
    org.apache.tapestry.engine.ITemplateSource var84 = var73.getTemplateSource();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var85 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var73);
    var35.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var85);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var85);
    java.util.Iterator var88 = var0.getMenuItemsDepthFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10.0f+ "'", var32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0) null"+ "'", var36.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test10");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    java.lang.String var12 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    var16.beginPageRender();
    java.util.Collection var18 = var16.getBindingNames();
    var13.setPage((org.apache.tapestry.IPage)var16);
    org.apache.tapestry.listener.ListenerMap var20 = var16.getListeners();
    int var21 = var16.getBodyCount();
    var16.endPageRender();
    java.lang.String var23 = var16.getExtendedId();
    java.lang.String var24 = var16.getPageName();
    var0.setPage((org.apache.tapestry.IPage)var16);
    org.apache.tapestry.IComponent var26 = var16.getContainer();
    org.apache.tapestry.IRender[] var27 = var16.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test11");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var4.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    var9.setFolder(var10);
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    var14.setFolder(var15);
    org.apache.tapestry.contrib.tree.model.ITreeNode var17 = var14.getParent();
    var6.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var14);
    java.util.Collection var19 = var14.children();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test12");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    ch.bluepenguin.email.client.tapestry.SpringEngine var14 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var15 = var14.getVisit();
    org.apache.tapestry.engine.IPageSource var16 = var14.getPageSource();
    java.lang.String var17 = var14.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var18 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var18.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var21 = var18.getMyLocale();
    var14.setLocale(var21);
    var5.setLocale(var21);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var21);
    int var25 = var24.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test13");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    boolean var10 = var1.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test14");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getText();
    java.lang.String var6 = var0.getSubject();
    var0.setTechnicalID(1);
    int var9 = var0.getTechnicalID();
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getText();
    java.lang.String var16 = var10.getSubject();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var18 = var17.getUniqueID();
    java.lang.String[] var19 = var17.getCc();
    java.lang.String var20 = var17.toString();
    var17.setCc("Current Folder");
    var17.setCc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.MailMessage var25 = new ch.bluepenguin.email.client.MailMessage();
    var25.setBcc("Dummy EmailFacade Impl");
    var25.setTechnicalID(100);
    var25.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setTechnicalID(100);
    java.lang.String var37 = var32.getReplyTo();
    java.lang.String[] var39 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var32.setCc(var39);
    var25.setBcc(var39);
    ch.bluepenguin.email.client.MailMessage var42 = new ch.bluepenguin.email.client.MailMessage();
    var42.setBcc("Dummy EmailFacade Impl");
    var42.setTechnicalID(100);
    java.lang.String var47 = var42.getReplyTo();
    java.lang.String[] var49 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var42.setCc(var49);
    var42.setBcc("Dummy EmailFacade Impl");
    var42.setSubject("(0) null");
    java.util.Date var55 = var42.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var56 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var56.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var59 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var59.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var62 = new ch.bluepenguin.email.client.MailMessage();
    var62.setBcc("Dummy EmailFacade Impl");
    var62.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var67 = var62.getSentDate();
    ch.bluepenguin.email.client.MailMessage var68 = new ch.bluepenguin.email.client.MailMessage();
    var68.setBcc("Dummy EmailFacade Impl");
    var68.setTechnicalID(100);
    java.lang.String var73 = var68.getReplyTo();
    java.lang.String[] var75 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var68.setCc(var75);
    java.lang.String[] var78 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var68.setBcc(var78);
    var62.setCc(var78);
    java.lang.String var81 = var59.returnStringList(var78);
    java.lang.String[] var83 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var84 = var59.returnStringList(var83);
    java.lang.String var85 = var56.returnStringList(var83);
    var42.setTo(var83);
    java.lang.String[] var87 = var42.getCc();
    var25.setTo(var87);
    var17.setBcc(var87);
    var10.setBcc(var87);
    ch.bluepenguin.email.client.AbstractUniqueID var91 = var10.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var92 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var10);
    var0.copyTo((org.springframework.mail.MailMessage)var10);
    var10.setSubject("(0) (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var20.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Dummy EmailFacade Impl"+ "'", var81.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var84.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var85.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test15");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("");
    java.lang.String var17 = var14.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var18 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var18.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var21 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var21.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var24 = new ch.bluepenguin.email.client.MailMessage();
    var24.setBcc("Dummy EmailFacade Impl");
    var24.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var29 = var24.getSentDate();
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setTechnicalID(100);
    java.lang.String var35 = var30.getReplyTo();
    java.lang.String[] var37 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var30.setCc(var37);
    java.lang.String[] var40 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var30.setBcc(var40);
    var24.setCc(var40);
    java.lang.String var43 = var21.returnStringList(var40);
    java.lang.String[] var45 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var46 = var21.returnStringList(var45);
    java.lang.String var47 = var18.returnStringList(var45);
    ch.bluepenguin.email.client.MailMessage var48 = new ch.bluepenguin.email.client.MailMessage();
    var48.setBcc("Dummy EmailFacade Impl");
    var48.setTechnicalID(100);
    var48.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var55 = new ch.bluepenguin.email.client.MailMessage();
    var55.setBcc("Dummy EmailFacade Impl");
    var55.setTechnicalID(100);
    java.lang.String var60 = var55.getReplyTo();
    java.lang.String[] var62 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var55.setCc(var62);
    var48.setBcc(var62);
    ch.bluepenguin.email.client.MailMessage var65 = new ch.bluepenguin.email.client.MailMessage();
    var65.setBcc("Dummy EmailFacade Impl");
    java.lang.String var68 = var65.getReplyTo();
    var65.setBcc(",");
    var48.copyTo((org.springframework.mail.MailMessage)var65);
    java.lang.String var72 = var48.getReplyTo();
    java.lang.String[] var73 = var48.getBcc();
    java.lang.String var74 = var18.returnStringList(var73);
    java.lang.String var75 = var14.returnStringList(var73);
    var0.setCc(var73);
    ch.bluepenguin.email.client.AbstractUniqueID var77 = var0.getUniqueID();
    var0.setBcc("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "Dummy EmailFacade Impl"+ "'", var43.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var46.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var47.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var74.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var75.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test16");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    var7.addComponent((org.apache.tapestry.IComponent)var10);
    java.lang.String var14 = var7.getIdPath();
    org.apache.tapestry.ILocation var15 = var7.getLocation();
    org.apache.tapestry.IEngine var16 = var7.getEngine();
    var7.beginPageRender();
    java.lang.String var18 = var7.toString();
    var3.setPage((org.apache.tapestry.IPage)var7);
    java.util.Collection var20 = var7.getBindingNames();
    ch.bluepenguin.email.client.tapestry.SpringEngine var21 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var22 = var21.getPageSource();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    org.apache.tapestry.engine.ISpecificationSource var25 = var21.getSpecificationSource();
    boolean var26 = var21.isResetServiceEnabled();
    var7.attach((org.apache.tapestry.IEngine)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test17");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = var3.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var7.setParent((java.lang.Object)100L);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    var7.setName("Current Folder");
    var7.setLeaf(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test18");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    java.lang.String var10 = var0.getReplyTo();
    ch.bluepenguin.email.client.MailMessage var11 = new ch.bluepenguin.email.client.MailMessage();
    var11.setBcc("Dummy EmailFacade Impl");
    var11.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var16 = var11.getSentDate();
    ch.bluepenguin.email.client.Folder var17 = var11.getFolder();
    ch.bluepenguin.email.client.MailMessage var18 = new ch.bluepenguin.email.client.MailMessage();
    var18.setBcc("Dummy EmailFacade Impl");
    var18.setTechnicalID(100);
    java.lang.String var23 = var18.getReplyTo();
    java.lang.String[] var25 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var18.setCc(var25);
    var18.setBcc("Dummy EmailFacade Impl");
    var18.setSubject("hi!");
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    var31.setTechnicalID(100);
    java.lang.String var36 = var31.getReplyTo();
    java.lang.String[] var38 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var31.setCc(var38);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var40 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var40.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var43 = new ch.bluepenguin.email.client.MailMessage();
    var43.setBcc("Dummy EmailFacade Impl");
    var43.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var48 = var43.getSentDate();
    ch.bluepenguin.email.client.MailMessage var49 = new ch.bluepenguin.email.client.MailMessage();
    var49.setBcc("Dummy EmailFacade Impl");
    var49.setTechnicalID(100);
    java.lang.String var54 = var49.getReplyTo();
    java.lang.String[] var56 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var49.setCc(var56);
    java.lang.String[] var59 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var49.setBcc(var59);
    var43.setCc(var59);
    java.lang.String var62 = var40.returnStringList(var59);
    var31.setCc(var59);
    var18.setBcc(var59);
    var11.setCc(var59);
    var0.setBcc(var59);
    java.lang.String var67 = var0.getFrom();
    java.lang.String var68 = var0.getFrom();
    java.lang.String var69 = var0.getFrom();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Dummy EmailFacade Impl"+ "'", var10.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Dummy EmailFacade Impl"+ "'", var62.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test19");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("");
    java.lang.String var3 = var0.getSeparator();
    java.lang.String var4 = var0.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var5 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var5.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var9 = new java.lang.String[] { "(0) null"};
    java.lang.String var10 = var5.returnStringList(var9);
    java.util.Locale var11 = var5.getMyLocale();
    java.util.Locale var12 = var5.getMyLocale();
    var5.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var15 = var5.getSeparator();
    java.util.Locale var16 = var5.getMyLocale();
    var0.setMyLocale(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0) null"+ "'", var10.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var15.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test20");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var10 = var9.getUniqueID();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var13 = var12.isLeaf();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    boolean var17 = var15.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var18 = var15.getParent();
    var12.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var15);
    ch.bluepenguin.email.client.Folder var20 = var12.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var21 = var20.getUniqueID();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.getChildren();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var30 = var29.isLeaf();
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var35 = var32.getParent();
    var29.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    boolean var37 = var24.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var29);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var38 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var38.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var41 = var38.getCurrentFolder();
    var29.setFolder(var41);
    var20.setParent(var41);
    java.lang.String var44 = var41.getName();
    var9.setParent(var41);
    var9.setParentFolderId((java.lang.Integer)(-1));
    java.lang.Integer var48 = var9.getParentFolderId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Current Folder"+ "'", var44.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + (-1)+ "'", var48.equals((-1)));

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test21");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    org.apache.tapestry.engine.IScriptSource var5 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test22");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    var2.setLeaf(false);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("");
    java.lang.String var12 = var9.getSeparator();
    var2.setContained((java.lang.Object)var9);
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    java.lang.String[] var21 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var14.setCc(var21);
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setSubject("(0) null");
    java.util.Date var27 = var14.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var28 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var28.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var31 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var31.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    var34.setBcc("Dummy EmailFacade Impl");
    var34.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var39 = var34.getSentDate();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    java.lang.String[] var50 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var40.setBcc(var50);
    var34.setCc(var50);
    java.lang.String var53 = var31.returnStringList(var50);
    java.lang.String[] var55 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var56 = var31.returnStringList(var55);
    java.lang.String var57 = var28.returnStringList(var55);
    var14.setTo(var55);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var59 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var59.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var62 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var62.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var65 = new ch.bluepenguin.email.client.MailMessage();
    var65.setBcc("Dummy EmailFacade Impl");
    var65.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var70 = var65.getSentDate();
    ch.bluepenguin.email.client.MailMessage var71 = new ch.bluepenguin.email.client.MailMessage();
    var71.setBcc("Dummy EmailFacade Impl");
    var71.setTechnicalID(100);
    java.lang.String var76 = var71.getReplyTo();
    java.lang.String[] var78 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var71.setCc(var78);
    java.lang.String[] var81 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var71.setBcc(var81);
    var65.setCc(var81);
    java.lang.String var84 = var62.returnStringList(var81);
    java.lang.String[] var86 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var87 = var62.returnStringList(var86);
    java.lang.String var88 = var59.returnStringList(var86);
    var14.setTo(var86);
    java.lang.String var90 = var9.returnStringList(var86);
    java.util.Locale var91 = var9.getMyLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Dummy EmailFacade Impl"+ "'", var53.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var56.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var57.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Dummy EmailFacade Impl"+ "'", var84.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var87.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var88.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var90.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test23");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var1 = var0.getSeparator();
    java.util.Locale var2 = var0.getMyLocale();
    java.lang.String var3 = var0.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var5 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var6 = var5.getSeparator();
    java.util.Locale var7 = var5.getMyLocale();
    var4.setMyLocale(var7);
    ch.bluepenguin.email.client.MailMessage var9 = new ch.bluepenguin.email.client.MailMessage();
    var9.setBcc("Dummy EmailFacade Impl");
    var9.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var14 = var9.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var15 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var16 = var15.getReader();
    ch.bluepenguin.email.client.cache.MailCache var17 = var15.getCache();
    boolean var18 = var9.equals((java.lang.Object)var15);
    var9.setCc("(0) null");
    var9.setCc("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var23 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var23.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    var26.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var31 = var26.getSentDate();
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setTechnicalID(100);
    java.lang.String var37 = var32.getReplyTo();
    java.lang.String[] var39 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var32.setCc(var39);
    java.lang.String[] var42 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var32.setBcc(var42);
    var26.setCc(var42);
    java.lang.String var45 = var23.returnStringList(var42);
    var9.setBcc(var42);
    java.lang.String var47 = var4.returnStringList(var42);
    java.lang.String var48 = var0.returnStringList(var42);
    java.lang.String var49 = var0.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ","+ "'", var1.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ","+ "'", var3.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ","+ "'", var6.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Dummy EmailFacade Impl"+ "'", var45.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Dummy EmailFacade Impl"+ "'", var47.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Dummy EmailFacade Impl"+ "'", var48.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ","+ "'", var49.equals(","));

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test24");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.engine.IPageSource var6 = var0.getPageSource();
    java.lang.String var7 = var0.toString();
    java.lang.String var8 = var0.toString();
    org.apache.tapestry.engine.ITemplateSource var9 = var0.getTemplateSource();
    org.apache.tapestry.engine.ITemplateSource var10 = var0.getTemplateSource();
    boolean var11 = var0.isStateful();
    org.apache.tapestry.engine.IScriptSource var12 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test25");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var3 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var4 = var3.getSeparator();
    java.util.Locale var5 = var3.getMyLocale();
    var0.setLocale(var5);
    org.apache.tapestry.util.pool.Pool var7 = var0.getPool();
    org.apache.tapestry.asset.ResourceChecksumSource var8 = var0.getResourceChecksumSource();
    org.apache.tapestry.engine.IComponentMessagesSource var9 = var0.getComponentMessagesSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ","+ "'", var4.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test26");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    java.lang.String var12 = var0.toString();
    org.apache.tapestry.ILocation var13 = var0.getLocation();
    org.apache.tapestry.IPage var14 = var0.getPage();
    java.util.Collection var15 = var0.getBindingNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test27");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    java.lang.String var1 = var0.getUserID();
    java.lang.String var2 = var0.getUserID();
    java.lang.String var3 = var0.getUserID();
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var0.setUserID(",");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test28");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    var13.beginPageRender();
    java.util.Collection var15 = var13.getBindingNames();
    var10.setPage((org.apache.tapestry.IPage)var13);
    var0.addComponent((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    org.apache.tapestry.IAsset var22 = var18.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var23.setParameters((java.lang.Object[])var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    var23.setComponent((org.apache.tapestry.IComponent)var28);
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var31.setPageName("");
    var28.addBody((org.apache.tapestry.IRender)var31);
    var18.setContainer((org.apache.tapestry.IComponent)var31);
    var0.addComponent((org.apache.tapestry.IComponent)var18);
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    int var41 = var39.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    int var44 = var42.getBodyCount();
    var39.addComponent((org.apache.tapestry.IComponent)var42);
    java.util.Map var46 = var42.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var47 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var47.forgetPage("");
    org.apache.tapestry.engine.IPageSource var50 = var47.getPageSource();
    org.apache.tapestry.engine.IPropertySource var51 = var47.getPropertySource();
    java.util.Collection var52 = var47.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var53 = var47.getComponentMessagesSource();
    var42.attach((org.apache.tapestry.IEngine)var47);
    java.lang.Object var55 = var42.getVisit();
    var42.setPageName("Default EmailFacade Impl");
    var18.addBody((org.apache.tapestry.IRender)var42);
    var18.setPageName("(0) null\n   (0) null\n   (0) null\n   (0) null");
    java.lang.String var61 = var18.getPageName();
    var18.endPageRender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0) null\n   (0) null\n   (0) null\n   (0) null"+ "'", var61.equals("(0) null\n   (0) null\n   (0) null\n   (0) null"));

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test29");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    java.util.Locale var7 = var0.getLocale();
    java.lang.String var8 = var0.toString();
    java.lang.Object var9 = var0.getVisit();
    java.lang.Object var10 = var0.getVisit();
    org.apache.tapestry.util.io.DataSqueezer var11 = var0.createDataSqueezer();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var12 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var12.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var16 = var12.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var17 = var12.getAllMessages();
    var12.setCurrentFolder(",");
    java.lang.String var20 = var12.getName();
    ch.bluepenguin.email.client.Folder var21 = var12.getCurrentFolder();
    var0.setVisit((java.lang.Object)var21);
    var21.setFullName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    java.lang.String var25 = var21.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10.0f+ "'", var9.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10.0f+ "'", var10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Dummy EmailFacade Impl"+ "'", var20.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Current Folder"+ "'", var25.equals("Current Folder"));

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test30");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    boolean var3 = var0.isAllClean();
    boolean var5 = var0.isDirty((java.lang.Integer)100);
    boolean var6 = var0.isAllClean();
    var0.clear();
    boolean var8 = var0.isAllClean();
    var0.setAll(false);
    var0.setState((java.lang.Integer)2, true);
    boolean var14 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test31");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    org.apache.tapestry.IRender[] var15 = var8.getBody();
    org.apache.tapestry.spec.IComponentSpecification var16 = var8.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test32");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var4);
    var5.setDepth(10);
    int var8 = var5.getIndex();
    java.lang.Object var9 = var5.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test33");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    java.util.Locale var8 = var3.getLocale();
    org.apache.tapestry.IBinding var10 = var3.getBinding("Dummy EmailFacade Impl");
    java.lang.String var11 = var3.getPageName();
    java.util.Locale var12 = var3.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test34");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.INamespace var6 = var0.getNamespace();
    java.lang.String var7 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var9 = var8.displayMenuStructure();
    java.util.Iterator var10 = var8.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var14 = var13.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    var11.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = var8.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var13.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    int var25 = var23.getBodyCount();
    var20.addComponent((org.apache.tapestry.IComponent)var23);
    java.lang.String var27 = var20.getIdPath();
    org.apache.tapestry.ILocation var28 = var20.getLocation();
    org.apache.tapestry.IEngine var29 = var20.getEngine();
    var20.beginPageRender();
    org.apache.tapestry.ILocation var31 = var20.getLocation();
    var18.setComponent((org.apache.tapestry.IComponent)var20);
    org.apache.tapestry.IAsset var34 = var20.getAsset("(0) null\n   (0) null");
    var0.setContainer((org.apache.tapestry.IComponent)var20);
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    var39.beginPageRender();
    java.util.Collection var41 = var39.getBindingNames();
    var36.setPage((org.apache.tapestry.IPage)var39);
    org.apache.tapestry.listener.ListenerMap var43 = var39.getListeners();
    int var44 = var39.getBodyCount();
    var39.endPageRender();
    java.lang.String var46 = var39.getExtendedId();
    java.lang.String var47 = var39.getPageName();
    var20.setPage((org.apache.tapestry.IPage)var39);
    org.apache.tapestry.spec.IComponentSpecification var49 = var39.getSpecification();
    java.lang.String var50 = var39.toString();
    ch.bluepenguin.email.client.tapestry.SpringEngine var51 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var51.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var54 = var51.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var55 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var55.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var58 = var55.getMyLocale();
    var51.setLocale(var58);
    var39.setLocale(var58);
    org.apache.tapestry.IComponent var61 = var39.getContainer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test35");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    var2.setFullName("hi!");
    ch.bluepenguin.email.client.Account var12 = var2.getAccount();
    ch.bluepenguin.email.client.Account var13 = var2.getAccount();
    java.lang.String var14 = var2.getName();
    var2.setFullName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    var2.setName("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=,");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test36");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    org.apache.tapestry.engine.IComponentClassEnhancer var22 = var13.getComponentClassEnhancer();
    java.util.Locale var23 = var13.getLocale();
    boolean var24 = var13.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test37");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.setAll(false);
    boolean var4 = var0.isDirty((java.lang.Integer)0);
    boolean var5 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test38");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var4 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var4.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var7 = var4.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var8 = var4.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    var9.setParentFolderId((java.lang.Integer)1);
    var9.setFullName("hi!");
    var8.setParent(var9);
    var0.setFolder(var9);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var18 = var17.getAllowsChildren();
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var17.getParent();
    org.apache.tapestry.contrib.tree.model.ITreeNode var20 = var17.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test39");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.engine.IPageSource var2 = var0.getPageSource();
    java.util.Collection var3 = var0.getActivePageNames();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var0.getSpecification();
    var0.forgetPage("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var7 = var0.getContextPath();
    boolean var8 = var0.getHasVisit();
    java.lang.String var9 = var0.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test40");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var0.setLocale("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test41");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    ch.bluepenguin.email.client.MailMessage var24 = new ch.bluepenguin.email.client.MailMessage();
    var24.setBcc("Dummy EmailFacade Impl");
    java.lang.String var27 = var24.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var28 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var28.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var31 = var28.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var32 = var28.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    var33.setParentFolderId((java.lang.Integer)1);
    var33.setFullName("hi!");
    var32.setParent(var33);
    var24.setFolder(var33);
    java.lang.String[] var41 = var24.getBcc();
    var17.setTo(var41);
    java.util.Date var43 = var17.getSentDate();
    java.lang.String var44 = var17.getSubject();
    java.util.Date var45 = var17.getSentDate();
    ch.bluepenguin.email.client.Folder var46 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var47 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var46);
    var46.setParentFolderId((java.lang.Integer)1);
    var46.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var52 = var46.getUniqueID();
    ch.bluepenguin.email.client.MailMessage var53 = new ch.bluepenguin.email.client.MailMessage();
    var53.setBcc("Dummy EmailFacade Impl");
    var53.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var58 = new ch.bluepenguin.email.client.MailMessage();
    var58.setBcc("Dummy EmailFacade Impl");
    java.lang.String var61 = var58.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var62 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var62.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var65 = var62.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var66 = var62.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var67 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var68 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var67);
    var67.setParentFolderId((java.lang.Integer)1);
    var67.setFullName("hi!");
    var66.setParent(var67);
    var58.setFolder(var67);
    var53.setFolder(var67);
    var67.setFullName("hi!");
    ch.bluepenguin.email.client.Folder var78 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var79 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var78);
    boolean var80 = var79.isLeaf();
    ch.bluepenguin.email.client.Folder var81 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var82 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var81);
    boolean var84 = var82.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var85 = var82.getParent();
    var79.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var82);
    ch.bluepenguin.email.client.Folder var87 = var79.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var88 = var87.getUniqueID();
    var67.setParent(var87);
    var46.setParent(var87);
    var17.setFolder(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test42");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    java.lang.Integer var2 = var1.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test43");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    org.apache.tapestry.IBinding var6 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setPageName("hi!");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    var9.setParameters((java.lang.Object[])var12);
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    var9.setComponent((org.apache.tapestry.IComponent)var14);
    var0.addComponent((org.apache.tapestry.IComponent)var14);
    org.apache.tapestry.IBinding var19 = var0.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var20 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var22 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    var20.setParameters((java.lang.Object[])var23);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    var20.setComponent((org.apache.tapestry.IComponent)var25);
    var25.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var32 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var33 = var32.getSuppressed();
    var30.setParameters((java.lang.Object[])var33);
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    var30.setComponent((org.apache.tapestry.IComponent)var35);
    org.apache.tapestry.INamespace var38 = var35.getNamespace();
    var25.setContainer((org.apache.tapestry.IComponent)var35);
    org.apache.tapestry.IRequestCycle var40 = var35.getRequestCycle();
    var0.setContainer((org.apache.tapestry.IComponent)var35);
    java.util.Map var42 = var0.getAssets();
    org.apache.tapestry.IRequestCycle var43 = var0.getRequestCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test44");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    java.lang.String var8 = var3.getPageName();
    java.lang.String var9 = var3.getIdPath();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var14 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var15 = var14.getSuppressed();
    var12.setParameters((java.lang.Object[])var15);
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    var12.setComponent((org.apache.tapestry.IComponent)var17);
    var17.setId("Dummy EmailFacade Impl");
    int var22 = var17.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var23.setParameters((java.lang.Object[])var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    var23.setComponent((org.apache.tapestry.IComponent)var28);
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var31.setPageName("");
    var28.addBody((org.apache.tapestry.IRender)var31);
    org.apache.tapestry.IEngine var37 = var31.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var38 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var39 = var38.getBody();
    int var40 = var38.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var41 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var42 = var41.getBody();
    int var43 = var41.getBodyCount();
    var38.addComponent((org.apache.tapestry.IComponent)var41);
    var31.addBody((org.apache.tapestry.IRender)var41);
    org.apache.tapestry.IComponent var46 = var41.getContainer();
    org.apache.tapestry.event.ChangeObserver var47 = var41.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var48 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var48.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var51 = var48.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var52 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var53 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var54 = var53.getSeparator();
    java.util.Locale var55 = var53.getMyLocale();
    var52.setMyLocale(var55);
    var48.setMyLocale(var55);
    var41.setLocale(var55);
    var17.addBody((org.apache.tapestry.IRender)var41);
    var10.addComponent((org.apache.tapestry.IComponent)var41);
    var3.addBody((org.apache.tapestry.IRender)var10);
    org.apache.tapestry.IAsset var63 = var3.getAsset(",");
    org.apache.tapestry.IPage var64 = var3.getPage();
    org.apache.tapestry.IRequestCycle var65 = var3.getRequestCycle();
    java.lang.String var66 = var3.getIdPath();
    java.lang.String var67 = var3.getIdPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ","+ "'", var54.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test45");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    var8.endPageRender();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var16 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var17 = var16.displayMenuStructure();
    java.util.Iterator var18 = var16.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var19 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var22 = var21.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var23 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21);
    var19.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var25 = var16.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var26 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var21.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var28.addComponent((org.apache.tapestry.IComponent)var31);
    java.lang.String var35 = var28.getIdPath();
    org.apache.tapestry.ILocation var36 = var28.getLocation();
    org.apache.tapestry.IEngine var37 = var28.getEngine();
    var28.beginPageRender();
    org.apache.tapestry.ILocation var39 = var28.getLocation();
    var26.setComponent((org.apache.tapestry.IComponent)var28);
    org.apache.tapestry.IAsset var42 = var28.getAsset("(0) null\n   (0) null");
    org.apache.tapestry.IRender[] var43 = var28.getBody();
    java.util.Collection var44 = var28.getBindingNames();
    var28.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IComponent var47 = var28.getContainer();
    var8.addComponent((org.apache.tapestry.IComponent)var28);
    java.lang.String var49 = var8.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0) null"+ "'", var17.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test46");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var4 = var3.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var5 = var3.getUniqueID();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    var6.setParentFolderId((java.lang.Integer)1);
    var6.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var12 = var6.getUniqueID();
    var6.setFullName("");
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    ch.bluepenguin.email.client.Folder var16 = var15.getFolder();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    var18.setFolder(var19);
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    var21.setFullName("hi!");
    var19.setParent(var21);
    ch.bluepenguin.email.client.Account var26 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var27 = var26.getPerson();
    var19.setAccount(var26);
    var16.setAccount(var26);
    var3.setAccount(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test47");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    var4.setFullName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.getChildren();
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var14 = var13.isLeaf();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var16.getParent();
    var13.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    boolean var21 = var8.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var13);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var26 = var23.getFolder();
    int var27 = var23.getChildCount();
    boolean var28 = var13.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var23);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    var29.removeFromParent();
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var35 = var32.getFolder();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var38 = var37.isLeaf();
    var32.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var37);
    boolean var40 = var37.getAllowsChildren();
    var29.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test48");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    java.lang.String var4 = var0.getName();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var9 = var6.getParent();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    java.util.Collection var14 = var11.getChildren();
    boolean var15 = var6.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var11);
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    var17.setFolder(var18);
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    var20.setFullName("hi!");
    var18.setParent(var20);
    var20.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    var28.setFolder(var29);
    org.apache.tapestry.contrib.tree.model.ITreeNode var31 = var28.getParent();
    boolean var32 = var28.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var28);
    ch.bluepenguin.email.client.Account var34 = var20.getAccount();
    var11.setFolder(var20);
    boolean var36 = var11.isLeaf();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var38 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var39 = var38.getSuppressed();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var41 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var42 = var41.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var43 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var44 = var43.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var46 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var47 = var46.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var50 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var46.reportException("", (java.lang.Throwable)var50);
    var43.reportException("hi!", (java.lang.Throwable)var50);
    var41.addSuppressed((java.lang.Throwable)var50);
    var38.addSuppressed((java.lang.Throwable)var41);
    boolean var55 = var11.equals((java.lang.Object)var38);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var56 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var57 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var58 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var57);
    var57.setParentFolderId((java.lang.Integer)1);
    var57.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var63 = var57.getAccount();
    ch.bluepenguin.email.client.Folder var64 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var65 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var64);
    boolean var67 = var65.equals((java.lang.Object)(short)(-1));
    java.util.Collection var68 = var65.children();
    boolean var69 = var65.getAllowsChildren();
    int var70 = var65.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var71 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var57, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var65);
    ch.bluepenguin.email.client.Folder var72 = var71.getFolder();
    java.util.Collection var73 = var71.getChildren();
    java.util.Collection var74 = var71.children();
    var11.insert(var74);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var76 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test49");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    java.util.Map var1 = var0.getComponents();
    org.apache.tapestry.spec.IComponentSpecification var2 = var0.getSpecification();
    org.apache.tapestry.listener.ListenerMap var3 = var0.getListeners();
    org.apache.tapestry.IPage var4 = var0.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test50");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    ch.bluepenguin.email.client.Folder var9 = var0.getFolder();
    java.lang.String[] var10 = var0.getBcc();
    var0.setReplyTo("(1) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test51");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Account var24 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var25 = var24.getUniqueID();
    var17.setAccount(var24);
    ch.bluepenguin.email.client.Person var27 = var24.getPerson();
    var5.setAccount(var24);
    ch.bluepenguin.email.client.AbstractUniqueID var29 = var24.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var30 = var24.getUniqueID();
    ch.bluepenguin.email.client.Person var31 = var24.getPerson();
    ch.bluepenguin.email.client.Person var32 = new ch.bluepenguin.email.client.Person();
    var32.setReserve("(0) null\n   (0) null\n   (0) null");
    java.lang.String var35 = var32.getReserve();
    var24.setPerson(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0) null\n   (0) null\n   (0) null"+ "'", var35.equals("(0) null\n   (0) null\n   (0) null"));

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test52");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var7 = var6.getRenderer();
    int var8 = var6.getDepth();
    var6.setDepth(0);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var13.setName("(0) null");
    java.lang.Object var16 = var13.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var19 = var18.getRenderer();
    int var20 = var18.getDepth();
    var18.setDepth(0);
    boolean var23 = var18.isLeaf();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var24 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var24.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.MailMessage var27 = new ch.bluepenguin.email.client.MailMessage();
    var27.setBcc("Dummy EmailFacade Impl");
    var27.setReplyTo("Dummy EmailFacade Impl");
    java.lang.String var32 = var27.getSubject();
    ch.bluepenguin.email.client.MailMessage var33 = new ch.bluepenguin.email.client.MailMessage();
    var33.setBcc("Dummy EmailFacade Impl");
    var33.setTechnicalID(100);
    var33.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    var33.setBcc(var47);
    ch.bluepenguin.email.client.MailMessage var50 = new ch.bluepenguin.email.client.MailMessage();
    var50.setBcc("Dummy EmailFacade Impl");
    java.lang.String var53 = var50.getReplyTo();
    var50.setBcc(",");
    var33.copyTo((org.springframework.mail.MailMessage)var50);
    java.lang.String var57 = var33.getReplyTo();
    java.lang.String[] var58 = var33.getBcc();
    ch.bluepenguin.email.client.MailMessage var59 = new ch.bluepenguin.email.client.MailMessage();
    var59.setBcc("Dummy EmailFacade Impl");
    var59.setTechnicalID(100);
    java.lang.String var64 = var59.getReplyTo();
    java.lang.String[] var66 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var59.setCc(var66);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var68 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var68.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var71 = new ch.bluepenguin.email.client.MailMessage();
    var71.setBcc("Dummy EmailFacade Impl");
    var71.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var76 = var71.getSentDate();
    ch.bluepenguin.email.client.MailMessage var77 = new ch.bluepenguin.email.client.MailMessage();
    var77.setBcc("Dummy EmailFacade Impl");
    var77.setTechnicalID(100);
    java.lang.String var82 = var77.getReplyTo();
    java.lang.String[] var84 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var77.setCc(var84);
    java.lang.String[] var87 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var77.setBcc(var87);
    var71.setCc(var87);
    java.lang.String var90 = var68.returnStringList(var87);
    var59.setCc(var87);
    var33.setCc(var87);
    var27.setCc(var87);
    var24.setParameters((java.lang.Object[])var87);
    var18.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var24);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var24);
    var13.setName("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var99 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "Dummy EmailFacade Impl"+ "'", var90.equals("Dummy EmailFacade Impl"));

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test53");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    java.util.Date var3 = var0.getSentDate();
    java.lang.String var4 = var0.getFrom();
    var0.setCc("");
    java.lang.String[] var7 = var0.getCc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test54");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var5 = var0.getCurrentFolder();
    var5.setFullName("(0) null");
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    ch.bluepenguin.email.client.MailMessage var9 = new ch.bluepenguin.email.client.MailMessage();
    var9.setBcc("Dummy EmailFacade Impl");
    var9.setTechnicalID(100);
    var9.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var16 = new ch.bluepenguin.email.client.MailMessage();
    var16.setBcc("Dummy EmailFacade Impl");
    var16.setTechnicalID(100);
    java.lang.String var21 = var16.getReplyTo();
    java.lang.String[] var23 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var16.setCc(var23);
    var9.setBcc(var23);
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    java.lang.String var29 = var26.getReplyTo();
    var26.setBcc(",");
    var9.copyTo((org.springframework.mail.MailMessage)var26);
    java.lang.String var33 = var9.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var34 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var35 = var34.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var36 = var34.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var38 = var34.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var39 = var34.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    var41.setFolder(var42);
    ch.bluepenguin.email.client.Folder var44 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var44);
    var44.setFullName("hi!");
    var42.setParent(var44);
    var44.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    ch.bluepenguin.email.client.Folder var53 = new ch.bluepenguin.email.client.Folder();
    var52.setFolder(var53);
    org.apache.tapestry.contrib.tree.model.ITreeNode var55 = var52.getParent();
    boolean var56 = var52.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var44, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var52);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var58 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var39, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var52);
    var9.setFolder(var39);
    ch.bluepenguin.email.client.Account var60 = var39.getAccount();
    var39.setParentFolderId((java.lang.Integer)2);
    var8.setFolder(var39);
    ch.bluepenguin.email.client.Folder var64 = var8.getFolder();
    boolean var65 = var8.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test55");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    java.lang.String var12 = var5.getName();
    java.lang.String var13 = var5.getName();
    java.lang.Integer var14 = var5.getParentFolderId();
    ch.bluepenguin.email.client.Folder var15 = var5.getParent();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var5.getUniqueID();
    var16.setId((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test56");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var5 = var3.getMenuItem();
    java.lang.String var6 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var7 = var3.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var10 = var9.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var9);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var12 = var11.getMenuItem();
    int var13 = var11.getChildrenSize();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var16 = var15.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    java.util.Iterator var18 = var17.getChildrenIterator();
    var11.addChild(var17);
    java.util.Iterator var20 = var11.getChildrenIterator();
    var3.addChild(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test57");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    var1.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var6);
    java.util.Collection var10 = var1.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test58");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var14 = var11.getFolder();
    ch.bluepenguin.email.client.Folder var15 = var11.getFolder();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var24 = var23.isLeaf();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var29 = var26.getParent();
    var23.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    boolean var31 = var18.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var23);
    var11.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    var35.setParentFolderId((java.lang.Integer)1);
    var35.setParentFolderId((java.lang.Integer)0);
    var33.setParent(var35);
    var18.setFolder(var35);
    org.apache.tapestry.contrib.tree.model.ITreeNode var43 = var18.getParent();
    ch.bluepenguin.email.client.Folder var44 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var44);
    boolean var47 = var45.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var48 = var45.getFolder();
    ch.bluepenguin.email.client.Folder var49 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var50 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var49);
    boolean var51 = var50.isLeaf();
    ch.bluepenguin.email.client.Folder var52 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var53 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var52);
    boolean var55 = var53.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var56 = var53.getParent();
    var50.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var53);
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    boolean var61 = var59.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var62 = var59.getFolder();
    var50.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var59);
    boolean var64 = var45.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var59);
    var18.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var45);
    org.apache.tapestry.contrib.tree.model.ITreeNode var66 = var45.getParent();
    ch.bluepenguin.email.client.Folder var67 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var68 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var67);
    var67.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var71 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var67);
    ch.bluepenguin.email.client.Folder var72 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var73 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var72);
    var71.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var73);
    org.apache.tapestry.contrib.tree.model.ITreeNode var75 = var71.getParent();
    ch.bluepenguin.email.client.Folder var76 = var71.getFolder();
    var45.setFolder(var76);
    java.lang.Integer var78 = var76.getParentFolderId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + 1+ "'", var78.equals(1));

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test59");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.IAsset var11 = var0.getAsset("Dummy EmailFacade Impl");
    org.apache.tapestry.IBinding var13 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    org.apache.tapestry.IComponent var14 = var0.getContainer();
    org.apache.tapestry.listener.ListenerMap var15 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test60");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getFirstname();
    var0.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.setReserve("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.setNickname("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test61");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setLastname("(0) null");
    var0.setLastname("");
    java.lang.String var6 = var0.getReserve();
    java.lang.String var7 = var0.getNickname();
    java.lang.String var8 = var0.getLastname();
    java.lang.String var9 = var0.getLastname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test62");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    var3.endPageRender();
    java.lang.String var8 = var3.getIdPath();
    org.apache.tapestry.ILocation var9 = var3.getLocation();
    java.util.Map var10 = var3.getAssets();
    org.apache.tapestry.INamespace var11 = var3.getNamespace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test63");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    org.apache.tapestry.engine.IComponentMessagesSource var5 = var0.getComponentMessagesSource();
    org.apache.tapestry.util.io.DataSqueezer var6 = var0.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test64");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    java.lang.String var15 = var3.displayMenuStructure();
    java.util.Iterator var16 = var3.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = var3.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var18 = var17.getMenuItem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null\n   (0) null"+ "'", var15.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test65");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    var0.setDirty(false);
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var4 = var3.getSender();
    boolean var5 = var3.isDirty();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var7 = var6.getSender();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var8 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var10 = new ch.bluepenguin.email.client.cache.MailCache("");
    var8.setCache(var10);
    ch.bluepenguin.email.client.cache.MailCache var13 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var14 = var13.getCache();
    var8.setCache(var13);
    var6.setCache(var13);
    var3.setCache(var13);
    var0.setCache(var13);
    java.util.logging.Logger var19 = var0.getLogger();
    boolean var20 = var0.isDirty();
    ch.bluepenguin.email.client.cache.MailCache var21 = var0.getCache();
    java.util.logging.Logger var22 = var0.getLogger();
    java.lang.String var23 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Default EmailFacade Impl"+ "'", var23.equals("Default EmailFacade Impl"));

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test66");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var5 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var7 = var0.getMessagesFromFolder(",");
    var0.setCurrentFolder("SimpleMailMessage: from=Dummy EmailFacade Impl; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test67");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var0.setLocale("Dummy EmailFacade Impl");
    var0.setLocale("(0) null\n   (0) null\n   (0) null\n   (0) null");
    var0.setLocale("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.setLocale("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=Dummy EmailFacade Impl; text=SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test68");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var5 = var3.getMenuItem();
    java.util.Iterator var6 = var3.getChildrenIterator();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var9.setIndex(10);
    java.lang.String var12 = var9.getName();
    var9.setDepth(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = var7.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var9);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setParent((java.lang.Object)100L);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = var7.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    var3.addChild(var21);
    boolean var23 = var3.checkConsistency();
    boolean var24 = var3.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test69");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    var0.beginPageRender();
    org.apache.tapestry.ILocation var11 = var0.getLocation();
    java.util.Locale var12 = var0.getLocale();
    var0.beginPageRender();
    int var14 = var0.getBodyCount();
    var0.setId("(1) null");
    org.apache.tapestry.IEngine var17 = var0.getEngine();
    int var18 = var0.getBodyCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test70");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var27 = var26.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    java.lang.String var29 = var26.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var30 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var33.setLeaf(false);
    boolean var36 = var33.isLeaf();
    var33.setIndex(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var39 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var33);
    java.lang.String var40 = var33.toString();
    var33.setName("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var33.setName("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test71");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var4);
    java.lang.Object var6 = var5.getContained();
    var5.setName("(0) null\n   (0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"(0) null\n   (0) null");
    java.lang.Object var10 = var9.getParent();
    java.lang.Object var11 = var9.getContained();
    java.lang.Object var12 = var9.getContained();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var13 = var9.getRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var14 = var9.getRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var15 = var9.getRenderer();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var16 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var17 = var16.getSender();
    boolean var18 = var16.isDirty();
    org.springframework.mail.MailSender var19 = var16.getSender();
    boolean var20 = var16.isDirty();
    var9.setContained((java.lang.Object)var16);
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var22 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var23 = var22.getSender();
    boolean var24 = var22.isDirty();
    org.springframework.mail.MailSender var25 = var22.getSender();
    boolean var26 = var22.isDirty();
    org.springframework.mail.MailSender var27 = var22.getSender();
    java.lang.String var28 = var22.getName();
    org.springframework.mail.javamail.JavaMailReader var29 = var22.getReader();
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var35 = var30.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var36 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var37 = var36.getReader();
    ch.bluepenguin.email.client.cache.MailCache var38 = var36.getCache();
    boolean var39 = var30.equals((java.lang.Object)var36);
    ch.bluepenguin.email.client.cache.MailCache var40 = var36.getCache();
    var36.setDirty(false);
    ch.bluepenguin.email.client.MailMessage var43 = new ch.bluepenguin.email.client.MailMessage();
    var43.setBcc("Dummy EmailFacade Impl");
    var43.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var48 = var43.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var49 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var50 = var49.getReader();
    ch.bluepenguin.email.client.cache.MailCache var51 = var49.getCache();
    boolean var52 = var43.equals((java.lang.Object)var49);
    ch.bluepenguin.email.client.cache.MailCache var53 = var49.getCache();
    var49.setDirty(false);
    ch.bluepenguin.email.client.cache.MailCache var57 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var58 = var57.getCache();
    var49.setCache(var57);
    var36.setCache(var57);
    var22.setCache(var57);
    ch.bluepenguin.email.client.cache.MailCache var62 = var22.getCache();
    var16.setCache(var62);
    org.springframework.mail.javamail.JavaMailReader var64 = var16.getReader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null\n   (0) null"+ "'", var11.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0) null\n   (0) null"+ "'", var12.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Default EmailFacade Impl"+ "'", var28.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test72");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    java.lang.String var7 = var5.getPageName();
    java.lang.String var8 = var5.toString();
    org.apache.tapestry.IEngine var9 = var5.getEngine();
    var0.addBody((org.apache.tapestry.IRender)var5);
    java.util.Locale var11 = var5.getLocale();
    java.lang.String var12 = var5.getId();
    java.lang.String var13 = var5.getExtendedId();
    java.util.Map var14 = var5.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test73");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setReplyTo("Default EmailFacade Impl");
    java.util.Date var21 = var0.getSentDate();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Date var24 = var0.getSentDate();
    java.lang.String[] var25 = var0.getTo();
    var0.setFrom("hi!");
    java.lang.String[] var28 = var0.getCc();
    java.util.Date var29 = var0.getSentDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test74");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    java.lang.String var15 = var3.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setParent((java.lang.Object)100L);
    int var20 = var17.getDepth();
    int var21 = var17.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var22 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var22.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var25.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var28.setText("Dummy EmailFacade Impl");
    var28.setText(",");
    var25.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var28);
    var22.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setText("hi!");
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setElement("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null\n   (0) null"+ "'", var15.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test75");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.Folder var6 = var0.getFolder();
    var0.setTechnicalID(10);
    java.lang.String var9 = var0.getSubject();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    var10.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    ch.bluepenguin.email.client.Account var15 = var10.getAccount();
    var10.setParentFolderId((java.lang.Integer)0);
    var0.setFolder(var10);
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    var19.setTechnicalID(100);
    java.lang.String var24 = var19.getReplyTo();
    java.lang.String[] var26 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var19.setCc(var26);
    java.lang.String[] var29 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var19.setBcc(var29);
    java.lang.String var31 = var19.getReplyTo();
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setTechnicalID(100);
    var32.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var39 = new ch.bluepenguin.email.client.MailMessage();
    var39.setBcc("Dummy EmailFacade Impl");
    var39.setTechnicalID(100);
    java.lang.String var44 = var39.getReplyTo();
    java.lang.String[] var46 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var39.setCc(var46);
    var32.setBcc(var46);
    ch.bluepenguin.email.client.MailMessage var49 = new ch.bluepenguin.email.client.MailMessage();
    var49.setBcc("Dummy EmailFacade Impl");
    var49.setTechnicalID(100);
    java.lang.String var54 = var49.getReplyTo();
    java.lang.String[] var56 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var49.setCc(var56);
    var49.setBcc("Dummy EmailFacade Impl");
    var49.setSubject("(0) null");
    java.util.Date var62 = var49.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var63 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var63.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var66 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var66.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var69 = new ch.bluepenguin.email.client.MailMessage();
    var69.setBcc("Dummy EmailFacade Impl");
    var69.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var74 = var69.getSentDate();
    ch.bluepenguin.email.client.MailMessage var75 = new ch.bluepenguin.email.client.MailMessage();
    var75.setBcc("Dummy EmailFacade Impl");
    var75.setTechnicalID(100);
    java.lang.String var80 = var75.getReplyTo();
    java.lang.String[] var82 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var75.setCc(var82);
    java.lang.String[] var85 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var75.setBcc(var85);
    var69.setCc(var85);
    java.lang.String var88 = var66.returnStringList(var85);
    java.lang.String[] var90 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var91 = var66.returnStringList(var90);
    java.lang.String var92 = var63.returnStringList(var90);
    var49.setTo(var90);
    java.lang.String[] var94 = var49.getCc();
    var32.setTo(var94);
    var19.copyTo((org.springframework.mail.MailMessage)var32);
    java.lang.String var97 = var32.getFrom();
    java.lang.String[] var98 = var32.getBcc();
    var0.setBcc(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "Dummy EmailFacade Impl"+ "'", var88.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var91.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var92.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test76");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    java.lang.String var24 = var17.getFrom();
    var17.setText("ch.bluepenguin.email.client.service.EmailFacadeException");
    var17.setCc("(0) null\n   (0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var29 = var17.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test77");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var0.setHyperlink("(0) null");
    java.lang.String var3 = var0.getHyperlink();
    var0.setHyperlink("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0) null"+ "'", var3.equals("(0) null"));

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test78");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setBcc("Dummy EmailFacade Impl");
    java.lang.String var8 = var5.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var12 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var13 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    var14.setParentFolderId((java.lang.Integer)1);
    var14.setFullName("hi!");
    var13.setParent(var14);
    var5.setFolder(var14);
    var0.setFolder(var14);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    var23.setParentFolderId((java.lang.Integer)1);
    var23.setFullName("Dummy EmailFacade Impl");
    java.lang.String var29 = var23.getFullName();
    var0.setFolder(var23);
    ch.bluepenguin.email.client.Account var31 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var32 = var31.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var33 = var31.getUniqueID();
    ch.bluepenguin.email.client.Person var34 = new ch.bluepenguin.email.client.Person();
    java.lang.String var35 = var34.getFirstname();
    var31.setPerson(var34);
    ch.bluepenguin.email.client.Person var37 = new ch.bluepenguin.email.client.Person();
    java.lang.String var38 = var37.getFirstname();
    var37.setNickname("");
    var37.setLastname(",");
    java.lang.String var43 = var37.getNickname();
    java.lang.String var44 = var37.getLastname();
    var31.setPerson(var37);
    ch.bluepenguin.email.client.AbstractUniqueID var46 = var31.getUniqueID();
    ch.bluepenguin.email.client.Person var47 = new ch.bluepenguin.email.client.Person();
    java.lang.String var48 = var47.getFirstname();
    var47.setNickname("");
    var47.setLastname(",");
    java.lang.String var53 = var47.getNickname();
    var31.setPerson(var47);
    var23.setAccount(var31);
    ch.bluepenguin.email.client.AbstractUniqueID var56 = var31.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var57 = var31.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var58 = var31.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Dummy EmailFacade Impl"+ "'", var29.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ","+ "'", var44.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test79");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    var1.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var6);
    java.util.Collection var10 = var1.children();
    boolean var11 = var1.isLeaf();
    java.util.Collection var12 = var1.children();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    boolean var19 = var14.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var16);
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    boolean var22 = var21.isLeaf();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.getChildren();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var30 = var29.isLeaf();
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var35 = var32.getParent();
    var29.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    boolean var37 = var24.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var29);
    boolean var38 = var21.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var29);
    java.util.Collection var39 = var21.getChildren();
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    var41.setFolder(var42);
    ch.bluepenguin.email.client.Folder var44 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var44);
    var44.setFullName("hi!");
    var42.setParent(var44);
    ch.bluepenguin.email.client.AbstractUniqueID var49 = var42.getUniqueID();
    java.lang.String var50 = var42.getFullName();
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    boolean var54 = var52.equals((java.lang.Object)(short)(-1));
    java.util.Collection var55 = var52.children();
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    var56.setFullName("hi!");
    var56.setFullName("Dummy EmailFacade Impl");
    var52.setFolder(var56);
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    boolean var66 = var64.equals((java.lang.Object)(short)(-1));
    java.util.Collection var67 = var64.children();
    ch.bluepenguin.email.client.Folder var68 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var69 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var68);
    var68.setFullName("hi!");
    var68.setFullName("Dummy EmailFacade Impl");
    var64.setFolder(var68);
    ch.bluepenguin.email.client.Account var75 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var76 = var75.getUniqueID();
    var68.setAccount(var75);
    ch.bluepenguin.email.client.Person var78 = var75.getPerson();
    var56.setAccount(var75);
    var42.setAccount(var75);
    var21.setFolder(var42);
    java.lang.String var82 = var42.getName();
    var16.setFolder(var42);
    var1.setFolder(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test80");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    int var10 = var4.getBodyCount();
    java.lang.String var11 = var4.getId();
    org.apache.tapestry.IBinding var13 = var4.getBinding("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    int var16 = var14.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    int var19 = var17.getBodyCount();
    var14.addComponent((org.apache.tapestry.IComponent)var17);
    org.apache.tapestry.IComponent var21 = var17.getContainer();
    org.apache.tapestry.spec.IComponentSpecification var22 = var17.getSpecification();
    java.util.Collection var23 = var17.getBindingNames();
    var4.setContainer((org.apache.tapestry.IComponent)var17);
    var4.setId("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test81");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    java.lang.String var8 = var5.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var10 = var9.getMenuItem();
    int var11 = var9.getChildrenSize();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var13.setParent((java.lang.Object)100L);
    int var16 = var13.getDepth();
    var13.setLeaf(true);
    var13.setLeaf(true);
    var13.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var23 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    var9.addChild(var23);
    boolean var25 = var23.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test82");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.lang.String var5 = var0.getSubject();
    ch.bluepenguin.email.client.MailMessage var6 = new ch.bluepenguin.email.client.MailMessage();
    var6.setBcc("Dummy EmailFacade Impl");
    var6.setTechnicalID(100);
    var6.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    java.lang.String var18 = var13.getReplyTo();
    java.lang.String[] var20 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var13.setCc(var20);
    var6.setBcc(var20);
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    var23.setBcc("Dummy EmailFacade Impl");
    java.lang.String var26 = var23.getReplyTo();
    var23.setBcc(",");
    var6.copyTo((org.springframework.mail.MailMessage)var23);
    java.lang.String var30 = var6.getReplyTo();
    java.lang.String[] var31 = var6.getBcc();
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setTechnicalID(100);
    java.lang.String var37 = var32.getReplyTo();
    java.lang.String[] var39 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var32.setCc(var39);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var41 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var41.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var44 = new ch.bluepenguin.email.client.MailMessage();
    var44.setBcc("Dummy EmailFacade Impl");
    var44.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var49 = var44.getSentDate();
    ch.bluepenguin.email.client.MailMessage var50 = new ch.bluepenguin.email.client.MailMessage();
    var50.setBcc("Dummy EmailFacade Impl");
    var50.setTechnicalID(100);
    java.lang.String var55 = var50.getReplyTo();
    java.lang.String[] var57 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var50.setCc(var57);
    java.lang.String[] var60 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var50.setBcc(var60);
    var44.setCc(var60);
    java.lang.String var63 = var41.returnStringList(var60);
    var32.setCc(var60);
    var6.setCc(var60);
    var0.setCc(var60);
    var0.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setText("(2) null");
    var0.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Dummy EmailFacade Impl"+ "'", var63.equals("Dummy EmailFacade Impl"));

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test83");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    boolean var2 = var0.isStateful();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var6 = var4.getDataSqueezer();
    var4.setVisit((java.lang.Object)0.0d);
    boolean var9 = var4.isStateful();
    org.apache.tapestry.engine.IPageSource var10 = var4.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var13 = var12.getSpecification();
    java.lang.Object var14 = var12.getGlobal();
    java.lang.Object var15 = var12.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var18 = var17.getParent();
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    var19.setTechnicalID(100);
    var19.setText("hi!");
    var17.setContained((java.lang.Object)var19);
    var12.setVisit((java.lang.Object)var19);
    ch.bluepenguin.email.client.service.EmailFacadeException var29 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var12.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var29);
    var4.reportException(",", (java.lang.Throwable)var29);
    java.lang.Exception var32 = var29.getTechnicalException();
    java.lang.Exception var33 = var29.getTechnicalException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var29);
    org.apache.tapestry.engine.ISpecificationSource var35 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test84");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    var1.setParent((java.lang.Object)10L);
    int var6 = var1.getDepth();
    var1.setName("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    var9.setParentFolderId((java.lang.Integer)1);
    var9.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var15 = var9.getUniqueID();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var16 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var16.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var19 = var16.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var20 = var16.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    var21.setParentFolderId((java.lang.Integer)1);
    var21.setFullName("hi!");
    var20.setParent(var21);
    java.lang.Integer var28 = var20.getParentFolderId();
    ch.bluepenguin.email.client.Folder var29 = var20.getParent();
    var9.setParent(var20);
    var1.setParent((java.lang.Object)var9);
    var1.setLeaf(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test85");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    var0.setBcc(",");
    java.lang.String var6 = var0.getSubject();
    var0.setBcc("ch.bluepenguin.email.client.service.EmailFacadeException");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var10 = var9.getSeparator();
    java.util.Locale var11 = var9.getMyLocale();
    java.lang.String var12 = var9.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var13 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var15 = var14.getSeparator();
    java.util.Locale var16 = var14.getMyLocale();
    var13.setMyLocale(var16);
    ch.bluepenguin.email.client.MailMessage var18 = new ch.bluepenguin.email.client.MailMessage();
    var18.setBcc("Dummy EmailFacade Impl");
    var18.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var23 = var18.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var24 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var25 = var24.getReader();
    ch.bluepenguin.email.client.cache.MailCache var26 = var24.getCache();
    boolean var27 = var18.equals((java.lang.Object)var24);
    var18.setCc("(0) null");
    var18.setCc("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var32 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var32.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var35 = new ch.bluepenguin.email.client.MailMessage();
    var35.setBcc("Dummy EmailFacade Impl");
    var35.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var40 = var35.getSentDate();
    ch.bluepenguin.email.client.MailMessage var41 = new ch.bluepenguin.email.client.MailMessage();
    var41.setBcc("Dummy EmailFacade Impl");
    var41.setTechnicalID(100);
    java.lang.String var46 = var41.getReplyTo();
    java.lang.String[] var48 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var41.setCc(var48);
    java.lang.String[] var51 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var41.setBcc(var51);
    var35.setCc(var51);
    java.lang.String var54 = var32.returnStringList(var51);
    var18.setBcc(var51);
    java.lang.String var56 = var13.returnStringList(var51);
    java.lang.String var57 = var9.returnStringList(var51);
    var0.setTo(var51);
    java.lang.String var59 = var0.getReplyTo();
    java.lang.String var60 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ","+ "'", var10.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ","+ "'", var12.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ","+ "'", var15.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Dummy EmailFacade Impl"+ "'", var54.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Dummy EmailFacade Impl"+ "'", var56.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Dummy EmailFacade Impl"+ "'", var57.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test86");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    org.apache.tapestry.listener.ListenerMap var2 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test87");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var16.addComponent((org.apache.tapestry.IComponent)var19);
    java.util.Map var23 = var19.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var24.forgetPage("");
    org.apache.tapestry.engine.IPageSource var27 = var24.getPageSource();
    org.apache.tapestry.engine.IPropertySource var28 = var24.getPropertySource();
    java.util.Collection var29 = var24.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var30 = var24.getComponentMessagesSource();
    var19.attach((org.apache.tapestry.IEngine)var24);
    boolean var32 = var12.equals((java.lang.Object)var24);
    org.apache.tapestry.engine.IComponentClassEnhancer var33 = var24.getComponentClassEnhancer();
    var5.attach((org.apache.tapestry.IEngine)var24);
    var5.beginPageRender();
    java.lang.String var36 = var5.toString();
    org.apache.tapestry.IPage var37 = var5.getPage();
    java.util.Collection var38 = var5.getBindingNames();
    org.apache.tapestry.spec.IComponentSpecification var39 = var5.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test88");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var23 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var25 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var28 = var27.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var27);
    var25.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var27);
    java.lang.Object var31 = var27.getParent();
    var27.setLeaf(false);
    java.lang.String var34 = var27.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var35 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var27);
    java.lang.String var36 = var27.toString();
    java.lang.Object var37 = var27.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test89");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    java.lang.String var4 = var0.getText();
    var0.setTechnicalID(0);
    java.util.Date var7 = var0.getSentDate();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Folder var17 = var9.getFolder();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var22 = var19.getFolder();
    ch.bluepenguin.email.client.Folder var23 = var19.getFolder();
    var9.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    java.util.Collection var25 = var9.children();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    boolean var28 = var27.isLeaf();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var32 = var30.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var33 = var30.getParent();
    var27.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var30);
    java.util.Collection var35 = var30.children();
    boolean var36 = var30.getAllowsChildren();
    var9.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var30);
    ch.bluepenguin.email.client.Folder var38 = var30.getFolder();
    var0.setFolder(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test90");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    ch.bluepenguin.email.client.MailMessage[] var8 = var6.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var9 = var6.getAllMessages();
    var6.setCurrentFolder("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    ch.bluepenguin.email.client.MailMessage[] var12 = var6.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var13 = var6.getAllMessages();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test91");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.IAsset var11 = var0.getAsset("Dummy EmailFacade Impl");
    var0.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IRequestCycle var14 = var0.getRequestCycle();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    java.lang.String var17 = var15.getPageName();
    java.lang.String var18 = var15.toString();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    java.lang.String var21 = var19.getPageName();
    java.lang.String var22 = var19.toString();
    org.apache.tapestry.IEngine var23 = var19.getEngine();
    var15.setContainer((org.apache.tapestry.IComponent)var19);
    java.lang.String var25 = var19.getPageName();
    org.apache.tapestry.IPage var26 = var19.getPage();
    java.lang.String var27 = var19.getId();
    var0.addComponent((org.apache.tapestry.IComponent)var19);
    org.apache.tapestry.listener.ListenerMap var29 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test92");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setReplyTo(",");
    var0.setSubject("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.MailMessage var9 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var10 = var9.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var11 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var11.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var15 = new java.lang.String[] { "(0) null"};
    java.lang.String var16 = var11.returnStringList(var15);
    java.util.Locale var17 = var11.getMyLocale();
    java.util.Locale var18 = var11.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    var19.setTechnicalID(100);
    java.lang.String var24 = var19.getReplyTo();
    java.lang.String[] var26 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var19.setCc(var26);
    java.lang.String[] var29 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var19.setBcc(var29);
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    var31.setTechnicalID(100);
    java.lang.String var36 = var31.getReplyTo();
    java.lang.String[] var38 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var31.setCc(var38);
    java.lang.String[] var41 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var31.setBcc(var41);
    var19.setBcc(var41);
    java.lang.String[] var44 = var19.getBcc();
    java.lang.String var45 = var11.returnStringList(var44);
    var9.setBcc(var44);
    var0.setBcc(var44);
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    var48.addComponent((org.apache.tapestry.IComponent)var51);
    java.util.Map var55 = var51.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var56 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var56.forgetPage("");
    org.apache.tapestry.engine.IPageSource var59 = var56.getPageSource();
    org.apache.tapestry.engine.IPropertySource var60 = var56.getPropertySource();
    java.util.Collection var61 = var56.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var62 = var56.getComponentMessagesSource();
    var51.attach((org.apache.tapestry.IEngine)var56);
    java.lang.Object var64 = var51.getVisit();
    var51.setPageName("Default EmailFacade Impl");
    org.apache.tapestry.IComponent var67 = var51.getContainer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var68 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var51);
    boolean var69 = var0.equals((java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var10.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Dummy EmailFacade Impl"+ "'", var45.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test93");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IRender[] var4 = var0.getBody();
    var0.setId("hi!");
    java.util.Locale var7 = var0.getLocale();
    int var8 = var0.getBodyCount();
    org.apache.tapestry.IAsset var10 = var0.getAsset("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var12 = var0.getComponent("(0) null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test94");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var15 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var11.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var15);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var18.setParent((java.lang.Object)100L);
    int var21 = var18.getDepth();
    int var22 = var18.getDepth();
    int var23 = var18.getIndex();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var24 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var24.setHyperlink("(0) null");
    var18.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var24);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var28.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var31 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var31.setText("Dummy EmailFacade Impl");
    var31.setText(",");
    var28.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var31);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var38 = var37.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var40 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var40.setIndex(10);
    var40.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var45 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var47 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    var45.setParameters((java.lang.Object[])var48);
    ch.bluepenguin.email.client.tapestry.Home var50 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var51 = var50.getBody();
    var45.setComponent((org.apache.tapestry.IComponent)var50);
    var37.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var40, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var45);
    var45.setStyleClass(",");
    var31.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var45);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var57 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var57.setText("Dummy EmailFacade Impl");
    var57.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var62 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var63 = var62.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var65 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var65.setIndex(10);
    var65.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var70 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var72 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var73 = var72.getSuppressed();
    var70.setParameters((java.lang.Object[])var73);
    ch.bluepenguin.email.client.tapestry.Home var75 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var76 = var75.getBody();
    var70.setComponent((org.apache.tapestry.IComponent)var75);
    var62.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var65, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var70);
    var70.setStyleClass(",");
    var57.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var70);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var82 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var57.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var82);
    var31.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var57);
    var18.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var31);
    var31.setText("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var31.setStyleClass("SimpleMailMessage: from=(0) null\n   (0) null\n   (0) null\n   (0) null; replyTo=hi!; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var15.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var31);
    var15.setText("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0) null"+ "'", var38.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0) null"+ "'", var63.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test95");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    java.lang.String var8 = var3.getPageName();
    java.lang.String var9 = var3.getIdPath();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var14 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var15 = var14.getSuppressed();
    var12.setParameters((java.lang.Object[])var15);
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    var12.setComponent((org.apache.tapestry.IComponent)var17);
    var17.setId("Dummy EmailFacade Impl");
    int var22 = var17.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var23.setParameters((java.lang.Object[])var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    var23.setComponent((org.apache.tapestry.IComponent)var28);
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var31.setPageName("");
    var28.addBody((org.apache.tapestry.IRender)var31);
    org.apache.tapestry.IEngine var37 = var31.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var38 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var39 = var38.getBody();
    int var40 = var38.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var41 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var42 = var41.getBody();
    int var43 = var41.getBodyCount();
    var38.addComponent((org.apache.tapestry.IComponent)var41);
    var31.addBody((org.apache.tapestry.IRender)var41);
    org.apache.tapestry.IComponent var46 = var41.getContainer();
    org.apache.tapestry.event.ChangeObserver var47 = var41.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var48 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var48.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var51 = var48.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var52 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var53 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var54 = var53.getSeparator();
    java.util.Locale var55 = var53.getMyLocale();
    var52.setMyLocale(var55);
    var48.setMyLocale(var55);
    var41.setLocale(var55);
    var17.addBody((org.apache.tapestry.IRender)var41);
    var10.addComponent((org.apache.tapestry.IComponent)var41);
    var3.addBody((org.apache.tapestry.IRender)var10);
    org.apache.tapestry.IAsset var63 = var3.getAsset(",");
    org.apache.tapestry.IPage var64 = var3.getPage();
    org.apache.tapestry.IRequestCycle var65 = var3.getRequestCycle();
    java.lang.String var66 = var3.getId();
    java.lang.String var67 = var3.getExtendedId();
    ch.bluepenguin.email.client.tapestry.Home var68 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var69 = var68.getBody();
    java.lang.String var70 = var68.getPageName();
    java.lang.String var71 = var68.toString();
    ch.bluepenguin.email.client.tapestry.Home var72 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var73 = var72.getBody();
    java.lang.String var74 = var72.getPageName();
    java.lang.String var75 = var72.toString();
    org.apache.tapestry.IEngine var76 = var72.getEngine();
    var68.setContainer((org.apache.tapestry.IComponent)var72);
    org.apache.tapestry.IAsset var79 = var68.getAsset("Dummy EmailFacade Impl");
    org.apache.tapestry.IBinding var81 = var68.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Map var82 = var68.getAssets();
    org.apache.tapestry.event.ChangeObserver var83 = var68.getChangeObserver();
    java.lang.String var84 = var68.getPageName();
    ch.bluepenguin.email.client.tapestry.Home var85 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var86 = var85.getBody();
    java.lang.String var87 = var85.getPageName();
    java.lang.String var88 = var85.toString();
    org.apache.tapestry.IEngine var89 = var85.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var90 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var91 = var90.getBody();
    java.lang.String var92 = var90.getPageName();
    java.lang.String var93 = var90.toString();
    org.apache.tapestry.IEngine var94 = var90.getEngine();
    var85.addBody((org.apache.tapestry.IRender)var90);
    java.util.Locale var96 = var90.getLocale();
    java.lang.String var97 = var90.getId();
    var68.setPage((org.apache.tapestry.IPage)var90);
    var3.setPage((org.apache.tapestry.IPage)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ","+ "'", var54.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test96");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    org.apache.tapestry.engine.IComponentClassEnhancer var5 = var0.getComponentClassEnhancer();
    java.util.Collection var6 = var0.getActivePageNames();
    boolean var7 = var0.isDirty();
    org.apache.tapestry.IResourceResolver var8 = var0.getResourceResolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test97");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    var0.setBcc(",");
    java.lang.String var6 = var0.getSubject();
    var0.setBcc("ch.bluepenguin.email.client.service.EmailFacadeException");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var10 = var9.getSeparator();
    java.util.Locale var11 = var9.getMyLocale();
    java.lang.String var12 = var9.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var13 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var15 = var14.getSeparator();
    java.util.Locale var16 = var14.getMyLocale();
    var13.setMyLocale(var16);
    ch.bluepenguin.email.client.MailMessage var18 = new ch.bluepenguin.email.client.MailMessage();
    var18.setBcc("Dummy EmailFacade Impl");
    var18.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var23 = var18.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var24 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var25 = var24.getReader();
    ch.bluepenguin.email.client.cache.MailCache var26 = var24.getCache();
    boolean var27 = var18.equals((java.lang.Object)var24);
    var18.setCc("(0) null");
    var18.setCc("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var32 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var32.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var35 = new ch.bluepenguin.email.client.MailMessage();
    var35.setBcc("Dummy EmailFacade Impl");
    var35.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var40 = var35.getSentDate();
    ch.bluepenguin.email.client.MailMessage var41 = new ch.bluepenguin.email.client.MailMessage();
    var41.setBcc("Dummy EmailFacade Impl");
    var41.setTechnicalID(100);
    java.lang.String var46 = var41.getReplyTo();
    java.lang.String[] var48 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var41.setCc(var48);
    java.lang.String[] var51 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var41.setBcc(var51);
    var35.setCc(var51);
    java.lang.String var54 = var32.returnStringList(var51);
    var18.setBcc(var51);
    java.lang.String var56 = var13.returnStringList(var51);
    java.lang.String var57 = var9.returnStringList(var51);
    var0.setTo(var51);
    java.lang.String var59 = var0.getReplyTo();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var60 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var60.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var64 = new java.lang.String[] { "(0) null"};
    java.lang.String var65 = var60.returnStringList(var64);
    ch.bluepenguin.email.client.tapestry.SpringEngine var66 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var66.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var69 = var66.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var70 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var70.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var73 = var70.getMyLocale();
    var66.setLocale(var73);
    var60.setMyLocale(var73);
    java.util.Locale var76 = var60.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var77 = new ch.bluepenguin.email.client.MailMessage();
    var77.setBcc("Dummy EmailFacade Impl");
    var77.setTechnicalID(100);
    java.lang.String var82 = var77.getReplyTo();
    java.lang.String[] var84 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var77.setCc(var84);
    ch.bluepenguin.email.client.Folder var86 = var77.getFolder();
    java.lang.String[] var87 = var77.getBcc();
    java.lang.String var88 = var60.returnStringList(var87);
    var0.setTo(var87);
    java.lang.String[] var90 = var0.getBcc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ","+ "'", var10.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ","+ "'", var12.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ","+ "'", var15.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Dummy EmailFacade Impl"+ "'", var54.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Dummy EmailFacade Impl"+ "'", var56.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Dummy EmailFacade Impl"+ "'", var57.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0) null"+ "'", var65.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "Dummy EmailFacade Impl"+ "'", var88.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test98");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    java.lang.String var10 = var4.getPageName();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    java.lang.String var13 = var11.getPageName();
    java.lang.String var14 = var11.toString();
    org.apache.tapestry.IEngine var15 = var11.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    java.lang.String var18 = var16.getPageName();
    java.lang.String var19 = var16.toString();
    org.apache.tapestry.IEngine var20 = var16.getEngine();
    var11.addBody((org.apache.tapestry.IRender)var16);
    java.lang.String var22 = var16.toString();
    var4.setContainer((org.apache.tapestry.IComponent)var16);
    var4.detach();
    java.lang.String var25 = var4.getExtendedId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test99");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    var0.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.setText("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var0.getUniqueID();
    var0.setText("SimpleMailMessage: from=null; replyTo=SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null; to=; cc=hi!; bcc=(0) null\n   (0) null\n   (0) null\n   (0) null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test100");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var1);
    var2.setDepth((-1));
    int var5 = var2.getIndex();
    java.lang.String var6 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test101");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    var0.endPageRender();
    var0.setId("Dummy EmailFacade Impl");
    java.lang.String var6 = var0.toString();
    org.apache.tapestry.ILocation var7 = var0.getLocation();
    java.lang.String var8 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test102");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.getIdPath();
    java.util.Locale var8 = var0.getLocale();
    org.apache.tapestry.IRequestCycle var9 = var0.getRequestCycle();
    org.apache.tapestry.listener.ListenerMap var10 = var0.getListeners();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var13 = var12.getPageSource();
    org.apache.tapestry.listener.ListenerMap var14 = var12.getListeners();
    java.lang.String var15 = var12.toString();
    java.lang.String var16 = var12.toString();
    var0.attach((org.apache.tapestry.IEngine)var12);
    ch.bluepenguin.email.client.tapestry.SpringEngine var18 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var19 = var18.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var21 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var22 = var21.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var21.reportException("", (java.lang.Throwable)var25);
    var18.reportException("hi!", (java.lang.Throwable)var25);
    org.apache.tapestry.engine.IPageSource var28 = var18.getPageSource();
    org.apache.tapestry.spec.IApplicationSpecification var29 = var18.getSpecification();
    boolean var30 = var18.isResetServiceEnabled();
    org.apache.tapestry.engine.ITemplateSource var31 = var18.getTemplateSource();
    org.apache.tapestry.engine.IPageSource var32 = var18.getPageSource();
    var0.attach((org.apache.tapestry.IEngine)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test103");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    java.util.Collection var9 = var4.children();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    var10.setParentFolderId((java.lang.Integer)1);
    var10.setParentFolderId((java.lang.Integer)0);
    var4.setFolder(var10);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    var18.setFolder(var19);
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    var21.setFullName("hi!");
    var19.setParent(var21);
    ch.bluepenguin.email.client.AbstractUniqueID var26 = var19.getUniqueID();
    var19.setFullName("hi!");
    ch.bluepenguin.email.client.Account var29 = var19.getAccount();
    ch.bluepenguin.email.client.Account var30 = var19.getAccount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    var32.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    var36.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    java.util.Collection var40 = var38.getChildren();
    var31.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    var4.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test104");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    var7.addComponent((org.apache.tapestry.IComponent)var10);
    java.lang.String var14 = var7.getIdPath();
    org.apache.tapestry.ILocation var15 = var7.getLocation();
    org.apache.tapestry.IEngine var16 = var7.getEngine();
    var7.beginPageRender();
    java.lang.String var18 = var7.toString();
    var3.setPage((org.apache.tapestry.IPage)var7);
    java.util.Map var20 = var3.getComponents();
    int var21 = var3.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    var25.beginPageRender();
    java.util.Collection var27 = var25.getBindingNames();
    var22.setPage((org.apache.tapestry.IPage)var25);
    org.apache.tapestry.listener.ListenerMap var29 = var25.getListeners();
    int var30 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    int var36 = var34.getBodyCount();
    var31.addComponent((org.apache.tapestry.IComponent)var34);
    java.lang.String var38 = var31.getIdPath();
    org.apache.tapestry.ILocation var39 = var31.getLocation();
    org.apache.tapestry.IEngine var40 = var31.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var41 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var42 = var41.getBody();
    int var43 = var41.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    var44.beginPageRender();
    java.util.Collection var46 = var44.getBindingNames();
    var41.setPage((org.apache.tapestry.IPage)var44);
    var31.addComponent((org.apache.tapestry.IComponent)var44);
    org.apache.tapestry.IAsset var50 = var31.getAsset("Dummy EmailFacade Impl");
    var25.setContainer((org.apache.tapestry.IComponent)var31);
    var25.setPageName("Default EmailFacade Impl");
    var3.addComponent((org.apache.tapestry.IComponent)var25);
    org.apache.tapestry.listener.ListenerMap var55 = var25.getListeners();
    var25.setId("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test105");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    java.lang.String var4 = var0.getReplyTo();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var5 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var5.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var13 = var8.getSentDate();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    java.lang.String[] var21 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var14.setCc(var21);
    java.lang.String[] var24 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var14.setBcc(var24);
    var8.setCc(var24);
    java.lang.String var27 = var5.returnStringList(var24);
    var0.setCc(var24);
    var0.setSubject("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Dummy EmailFacade Impl"+ "'", var27.equals("Dummy EmailFacade Impl"));

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test106");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    java.lang.String var10 = var2.getFullName();
    var2.setFullName("(0) null\n   (0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var16 = var14.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var17 = var14.getFolder();
    ch.bluepenguin.email.client.Folder var18 = var14.getFolder();
    var18.setFullName("Default EmailFacade Impl");
    var2.setParent(var18);
    ch.bluepenguin.email.client.AbstractUniqueID var22 = var18.getUniqueID();
    var18.setParentFolderId((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test107");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = new ch.bluepenguin.email.client.Person();
    java.lang.String var7 = var6.getFirstname();
    var6.setNickname("");
    var6.setLastname(",");
    java.lang.String var12 = var6.getNickname();
    java.lang.String var13 = var6.getLastname();
    var0.setPerson(var6);
    ch.bluepenguin.email.client.AbstractUniqueID var15 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var16 = new ch.bluepenguin.email.client.Person();
    java.lang.String var17 = var16.getFirstname();
    var16.setNickname("");
    var16.setLastname(",");
    java.lang.String var22 = var16.getNickname();
    var0.setPerson(var16);
    var16.setReserve("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var26 = var16.getNickname();
    java.lang.String var27 = var16.getLastname();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ","+ "'", var13.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ","+ "'", var27.equals(","));

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test108");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var5 = var0.getSubject();
    java.lang.String[] var6 = var0.getCc();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var8 = var7.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var13 = new java.lang.String[] { "(0) null"};
    java.lang.String var14 = var9.returnStringList(var13);
    java.util.Locale var15 = var9.getMyLocale();
    java.util.Locale var16 = var9.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    java.lang.String var22 = var17.getReplyTo();
    java.lang.String[] var24 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var17.setCc(var24);
    java.lang.String[] var27 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var17.setBcc(var27);
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    var29.setTechnicalID(100);
    java.lang.String var34 = var29.getReplyTo();
    java.lang.String[] var36 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var29.setCc(var36);
    java.lang.String[] var39 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var29.setBcc(var39);
    var17.setBcc(var39);
    java.lang.String[] var42 = var17.getBcc();
    java.lang.String var43 = var9.returnStringList(var42);
    var7.setBcc(var42);
    var0.setTo(var42);
    ch.bluepenguin.email.client.MailMessage var46 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var47 = var46.toString();
    ch.bluepenguin.email.client.Folder var48 = var46.getFolder();
    java.util.Date var49 = var46.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var50 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var51 = var50.getSpecification();
    java.lang.Object var52 = var50.getGlobal();
    java.lang.Object var53 = var50.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var55 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var56 = var55.getParent();
    ch.bluepenguin.email.client.MailMessage var57 = new ch.bluepenguin.email.client.MailMessage();
    var57.setBcc("Dummy EmailFacade Impl");
    var57.setTechnicalID(100);
    var57.setText("hi!");
    var55.setContained((java.lang.Object)var57);
    var50.setVisit((java.lang.Object)var57);
    java.lang.String var66 = var57.getText();
    var46.copyTo((org.springframework.mail.MailMessage)var57);
    var0.copyTo((org.springframework.mail.MailMessage)var46);
    ch.bluepenguin.email.client.AbstractUniqueID var69 = var46.getUniqueID();
    var46.setFrom("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var8.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "Dummy EmailFacade Impl"+ "'", var43.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var47.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test109");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var14 = var11.getFolder();
    ch.bluepenguin.email.client.Folder var15 = var11.getFolder();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var24 = var23.isLeaf();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var29 = var26.getParent();
    var23.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    boolean var31 = var18.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var23);
    var11.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    var34.setFolder(var35);
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    var37.setFullName("hi!");
    var35.setParent(var37);
    ch.bluepenguin.email.client.Account var42 = var35.getAccount();
    var11.setFolder(var35);
    ch.bluepenguin.email.client.tapestry.SpringEngine var44 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var45 = var44.getVisit();
    java.lang.String var46 = var44.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var47 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var44.setVisit((java.lang.Object)var47);
    org.apache.tapestry.engine.IComponentClassEnhancer var49 = var44.getComponentClassEnhancer();
    java.util.Collection var50 = var44.getActivePageNames();
    var11.insert(var50);
    ch.bluepenguin.email.client.Folder var52 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var53 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var52);
    ch.bluepenguin.email.client.Folder var54 = new ch.bluepenguin.email.client.Folder();
    var53.setFolder(var54);
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    var56.setFullName("hi!");
    var54.setParent(var56);
    var56.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    ch.bluepenguin.email.client.Folder var65 = new ch.bluepenguin.email.client.Folder();
    var64.setFolder(var65);
    org.apache.tapestry.contrib.tree.model.ITreeNode var67 = var64.getParent();
    boolean var68 = var64.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var69 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var64);
    ch.bluepenguin.email.client.Account var70 = var56.getAccount();
    var11.setFolder(var56);
    ch.bluepenguin.email.client.Account var72 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var73 = var72.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var74 = var72.getUniqueID();
    ch.bluepenguin.email.client.Person var75 = new ch.bluepenguin.email.client.Person();
    java.lang.String var76 = var75.getFirstname();
    var72.setPerson(var75);
    ch.bluepenguin.email.client.Person var78 = new ch.bluepenguin.email.client.Person();
    java.lang.String var79 = var78.getFirstname();
    var78.setNickname("");
    var78.setLastname(",");
    java.lang.String var84 = var78.getNickname();
    java.lang.String var85 = var78.getLastname();
    var72.setPerson(var78);
    ch.bluepenguin.email.client.Person var87 = var72.getPerson();
    ch.bluepenguin.email.client.Person var88 = var72.getPerson();
    var56.setAccount(var72);
    java.lang.String var90 = var56.getFullName();
    ch.bluepenguin.email.client.AbstractUniqueID var91 = var56.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ","+ "'", var85.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test110");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var1 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var2 = var1.getSuppressed();
    var0.setTechnicalException((java.lang.Exception)var1);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    int var5 = var4.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test111");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    java.lang.String var15 = var3.displayMenuStructure();
    java.lang.String var16 = var3.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = var3.getRootList();
    java.lang.String var18 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null\n   (0) null"+ "'", var15.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null\n   (0) null"+ "'", var16.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0) null"+ "'", var18.equals("(0) null"));

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test112");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    ch.bluepenguin.email.client.tapestry.SpringEngine var14 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var15 = var14.getVisit();
    org.apache.tapestry.engine.IPageSource var16 = var14.getPageSource();
    java.lang.String var17 = var14.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var18 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var18.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var21 = var18.getMyLocale();
    var14.setLocale(var21);
    var5.setLocale(var21);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var21);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var25.setText("Dummy EmailFacade Impl");
    var25.setText(",");
    var25.setText("(0) null");
    var25.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var25.setElement("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!");
    var24.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var39 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var40 = var39.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var41 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var39);
    var37.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var39);
    java.lang.Object var43 = var39.getParent();
    ch.bluepenguin.email.client.Folder var44 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var44);
    ch.bluepenguin.email.client.Folder var46 = new ch.bluepenguin.email.client.Folder();
    var45.setFolder(var46);
    ch.bluepenguin.email.client.Folder var48 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var49 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var48);
    var48.setFullName("hi!");
    var46.setParent(var48);
    var39.setContained((java.lang.Object)var48);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var54 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var39.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var54);
    java.lang.String var56 = var54.getHyperlink();
    var54.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var54.setHyperlink("Default EmailFacade Impl");
    var54.setHyperlink("(0) null");
    var54.setHyperlink("hi!");
    var54.setHyperlink("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var25.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var54);
    java.lang.String var68 = var54.getHyperlink();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var68.equals("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test113");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var3 = var0.getUniqueID();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var4 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var4.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var8 = var4.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var10 = var4.getMessagesFromFolder("hi!");
    boolean var11 = var0.equals((java.lang.Object)var10);
    java.lang.String[] var12 = var0.getBcc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test114");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    var0.setTo("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var13 = var8.getSentDate();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    java.lang.String[] var21 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var14.setCc(var21);
    java.lang.String[] var24 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var14.setBcc(var24);
    var8.setCc(var24);
    var0.copyTo((org.springframework.mail.MailMessage)var8);
    java.lang.String[] var28 = var0.getBcc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test115");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    java.lang.String var7 = var6.getNickname();
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var6.getUniqueID();
    var6.setLastname("hi!");
    java.lang.String var11 = var6.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test116");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var4.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var6);
    org.apache.tapestry.contrib.tree.model.ITreeNode var8 = var4.getParent();
    java.util.Collection var9 = var4.children();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    boolean var14 = var11.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    var11.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    ch.bluepenguin.email.client.Folder var31 = var25.getFolder();
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    boolean var35 = var33.equals((java.lang.Object)(short)(-1));
    java.util.Collection var36 = var33.children();
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    var37.setFullName("hi!");
    var37.setFullName("Dummy EmailFacade Impl");
    var33.setFolder(var37);
    java.lang.String var44 = var37.getName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    var37.setParentFolderId((java.lang.Integer)(-1));
    var37.setParentFolderId((java.lang.Integer)0);
    var25.setFolder(var37);
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    var51.setParentFolderId((java.lang.Integer)1);
    var51.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var57 = var51.getAccount();
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    boolean var61 = var59.equals((java.lang.Object)(short)(-1));
    java.util.Collection var62 = var59.children();
    boolean var63 = var59.getAllowsChildren();
    int var64 = var59.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var65 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var59);
    var51.setName("");
    ch.bluepenguin.email.client.Account var68 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var69 = var68.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var70 = var68.getUniqueID();
    ch.bluepenguin.email.client.Person var71 = new ch.bluepenguin.email.client.Person();
    java.lang.String var72 = var71.getFirstname();
    var68.setPerson(var71);
    ch.bluepenguin.email.client.Person var74 = var68.getPerson();
    var51.setAccount(var68);
    ch.bluepenguin.email.client.Person var76 = new ch.bluepenguin.email.client.Person();
    java.lang.String var77 = var76.getFirstname();
    var76.setLastname("(0) null");
    java.lang.String var80 = var76.getReserve();
    var76.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var83 = var76.getLastname();
    var68.setPerson(var76);
    boolean var85 = var25.equals((java.lang.Object)var76);
    var4.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    java.util.Collection var87 = var25.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(0) null"+ "'", var83.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test117");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var6 = var5.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setIndex(10);
    var8.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    var5.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var13.setStyleClass(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var0.setElement(",");
    var0.setText("");
    var0.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var33 = var32.getParent();
    java.lang.Object var34 = var32.getContained();
    java.lang.String var35 = var32.getName();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var36 = var32.getRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var39 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    var37.setParameters((java.lang.Object[])var40);
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    var37.setComponent((org.apache.tapestry.IComponent)var42);
    var37.setStyleClass("Default EmailFacade Impl");
    var32.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    ch.bluepenguin.email.client.tapestry.Home var49 = new ch.bluepenguin.email.client.tapestry.Home();
    java.util.Map var50 = var49.getComponents();
    org.apache.tapestry.spec.IComponentSpecification var51 = var49.getSpecification();
    org.apache.tapestry.listener.ListenerMap var52 = var49.getListeners();
    var37.setComponent((org.apache.tapestry.IComponent)var49);
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    int var56 = var54.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var57 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var58 = var57.getBody();
    int var59 = var57.getBodyCount();
    var54.addComponent((org.apache.tapestry.IComponent)var57);
    java.lang.String var61 = var54.getIdPath();
    org.apache.tapestry.ILocation var62 = var54.getLocation();
    java.lang.String var63 = var54.toString();
    ch.bluepenguin.email.client.tapestry.Home var64 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var65 = var64.getBody();
    int var66 = var64.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var67 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var68 = var67.getBody();
    int var69 = var67.getBodyCount();
    var64.addComponent((org.apache.tapestry.IComponent)var67);
    java.lang.String var71 = var64.getIdPath();
    org.apache.tapestry.ILocation var72 = var64.getLocation();
    org.apache.tapestry.IEngine var73 = var64.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var74 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var75 = var74.getBody();
    int var76 = var74.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var77 = new ch.bluepenguin.email.client.tapestry.Home();
    var77.beginPageRender();
    java.util.Collection var79 = var77.getBindingNames();
    var74.setPage((org.apache.tapestry.IPage)var77);
    var64.addComponent((org.apache.tapestry.IComponent)var77);
    var77.setPageName("hi!");
    int var84 = var77.getBodyCount();
    var54.setContainer((org.apache.tapestry.IComponent)var77);
    org.apache.tapestry.spec.IComponentSpecification var86 = var77.getSpecification();
    var77.beginPageRender();
    java.lang.String var88 = var77.getExtendedId();
    var37.setComponent((org.apache.tapestry.IComponent)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 10.0f+ "'", var34.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test118");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = var3.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = var3.getRootList();
    int var7 = var6.getChildrenSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test119");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    java.lang.String var7 = var5.getPageName();
    java.lang.String var8 = var5.toString();
    org.apache.tapestry.IEngine var9 = var5.getEngine();
    var0.addBody((org.apache.tapestry.IRender)var5);
    java.util.Locale var11 = var5.getLocale();
    var5.setId("(0) null");
    java.lang.String var14 = var5.toString();
    var5.endPageRender();
    int var16 = var5.getBodyCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test120");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    java.lang.String[] var12 = var0.getTo();
    var0.setReplyTo("hi!");
    java.lang.String var15 = var0.getText();
    var0.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test121");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    java.lang.String var4 = var1.getName();
    int var5 = var1.getDepth();
    java.lang.String var6 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test122");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var1 = var0.getSender();
    boolean var2 = var0.isDirty();
    org.springframework.mail.MailSender var3 = var0.getSender();
    ch.bluepenguin.email.client.cache.MailCache var5 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var6 = var5.getCache();
    var0.setCache(var5);
    java.util.logging.Logger var8 = var0.getLogger();
    boolean var9 = var0.isDirty();
    boolean var10 = var0.isDirty();
    ch.bluepenguin.email.client.cache.MailCache var11 = var0.getCache();
    var0.setDirty(true);
    ch.bluepenguin.email.client.cache.MailCache var14 = var0.getCache();
    boolean var15 = var0.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test123");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    java.util.Locale var5 = var0.getLocale();
    java.util.Map var6 = var0.getAssets();
    java.lang.String var7 = var0.getId();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    java.lang.String var10 = var8.getPageName();
    java.lang.String var11 = var8.toString();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    java.lang.String var14 = var12.getPageName();
    java.lang.String var15 = var12.toString();
    org.apache.tapestry.IEngine var16 = var12.getEngine();
    var8.setContainer((org.apache.tapestry.IComponent)var12);
    org.apache.tapestry.IAsset var19 = var8.getAsset("Dummy EmailFacade Impl");
    var8.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    org.apache.tapestry.spec.IComponentSpecification var22 = var8.getSpecification();
    org.apache.tapestry.IPage var23 = var8.getPage();
    var0.setContainer((org.apache.tapestry.IComponent)var8);
    var8.beginPageRender();
    java.lang.String var26 = var8.getExtendedId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test124");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var1 = var0.getSeparator();
    java.util.Locale var2 = var0.getMyLocale();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var6 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var7 = var6.getBody();
    int var8 = var6.getBodyCount();
    var3.addComponent((org.apache.tapestry.IComponent)var6);
    java.lang.String var10 = var3.getIdPath();
    org.apache.tapestry.ILocation var11 = var3.getLocation();
    org.apache.tapestry.IEngine var12 = var3.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    var16.beginPageRender();
    java.util.Collection var18 = var16.getBindingNames();
    var13.setPage((org.apache.tapestry.IPage)var16);
    var3.addComponent((org.apache.tapestry.IComponent)var16);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var21 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var21.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var24 = var21.getMyLocale();
    var16.setLocale(var24);
    var0.setMyLocale(var24);
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    var27.addComponent((org.apache.tapestry.IComponent)var30);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var34 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var34.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var37 = var34.getMyLocale();
    var30.setLocale(var37);
    var0.setMyLocale(var37);
    java.util.Locale var40 = var0.getMyLocale();
    var0.setSeparator("(0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ","+ "'", var1.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test125");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    var1.setIndex(3);
    boolean var6 = var1.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test126");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    java.lang.String var7 = var5.getPageName();
    java.lang.String var8 = var5.toString();
    org.apache.tapestry.IEngine var9 = var5.getEngine();
    var0.addBody((org.apache.tapestry.IRender)var5);
    org.apache.tapestry.IBinding var12 = var5.getBinding("(0) null\n   (0) null\n   (0) null");
    var5.detach();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test127");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var11 = var0.getUserID();
    java.lang.String var12 = var0.getUserID();
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var11.equals("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var12.equals("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test128");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var12 = var11.isLeaf();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var16 = var14.equals((java.lang.Object)(short)(-1));
    java.util.Collection var17 = var14.getChildren();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var20 = var19.isLeaf();
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    boolean var24 = var22.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var25 = var22.getParent();
    var19.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var22);
    boolean var27 = var14.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var19);
    boolean var28 = var11.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var19);
    org.apache.tapestry.contrib.tree.model.ITreeNode var29 = var19.getParent();
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    boolean var33 = var31.equals((java.lang.Object)(short)(-1));
    java.util.Collection var34 = var31.children();
    boolean var35 = var19.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var31);
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    ch.bluepenguin.email.client.Folder var38 = new ch.bluepenguin.email.client.Folder();
    var37.setFolder(var38);
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    var40.setFullName("hi!");
    var38.setParent(var40);
    ch.bluepenguin.email.client.Folder var45 = var40.getParent();
    var31.setFolder(var40);
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    java.util.Collection var48 = var31.getChildren();
    java.util.Collection var49 = var31.children();
    boolean var50 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test129");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    org.apache.tapestry.contrib.tree.model.ITreeNode var5 = var1.getParent();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    var6.setParentFolderId((java.lang.Integer)1);
    var6.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var12 = var6.getAccount();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var16 = var14.equals((java.lang.Object)(short)(-1));
    java.util.Collection var17 = var14.children();
    boolean var18 = var14.getAllowsChildren();
    int var19 = var14.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var14);
    ch.bluepenguin.email.client.Folder var21 = var6.getParent();
    var6.setFullName("hi!");
    var1.setFolder(var6);
    java.util.Collection var25 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    var27.setFolder(var28);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    ch.bluepenguin.email.client.Folder var31 = var30.getFolder();
    var1.setFolder(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test130");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var4 = var3.displayMenuStructure();
    java.util.Iterator var5 = var3.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var9 = var8.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var6.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var16 = var15.getParent();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    var17.setText("hi!");
    var15.setContained((java.lang.Object)var17);
    java.lang.Object var25 = var15.getContained();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var28.setParent((java.lang.Object)100L);
    int var31 = var28.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    boolean var33 = var32.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var33);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var34);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var34);
    boolean var37 = var34.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test131");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var1 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.MailMessage var2 = new ch.bluepenguin.email.client.MailMessage();
    var2.setBcc("Dummy EmailFacade Impl");
    var2.setTechnicalID(100);
    java.lang.String var7 = var2.getReplyTo();
    var2.setTo("");
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var15 = var10.getSentDate();
    ch.bluepenguin.email.client.MailMessage var16 = new ch.bluepenguin.email.client.MailMessage();
    var16.setBcc("Dummy EmailFacade Impl");
    var16.setTechnicalID(100);
    java.lang.String var21 = var16.getReplyTo();
    java.lang.String[] var23 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var16.setCc(var23);
    java.lang.String[] var26 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var16.setBcc(var26);
    var10.setCc(var26);
    var2.copyTo((org.springframework.mail.MailMessage)var10);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var30 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var30.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var33 = new ch.bluepenguin.email.client.MailMessage();
    var33.setBcc("Dummy EmailFacade Impl");
    var33.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var38 = var33.getSentDate();
    ch.bluepenguin.email.client.MailMessage var39 = new ch.bluepenguin.email.client.MailMessage();
    var39.setBcc("Dummy EmailFacade Impl");
    var39.setTechnicalID(100);
    java.lang.String var44 = var39.getReplyTo();
    java.lang.String[] var46 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var39.setCc(var46);
    java.lang.String[] var49 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var39.setBcc(var49);
    var33.setCc(var49);
    java.lang.String var52 = var30.returnStringList(var49);
    java.lang.String[] var54 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var55 = var30.returnStringList(var54);
    var2.setTo(var54);
    java.lang.String var57 = var1.returnStringList(var54);
    ch.bluepenguin.email.client.tapestry.SpringEngine var58 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var58.forgetPage("");
    org.apache.tapestry.engine.IPageSource var61 = var58.getPageSource();
    org.apache.tapestry.engine.IPropertySource var62 = var58.getPropertySource();
    org.apache.tapestry.util.pool.Pool var63 = var58.getPool();
    org.apache.tapestry.engine.IScriptSource var64 = var58.getScriptSource();
    org.apache.tapestry.engine.ITemplateSource var65 = var58.getTemplateSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var66 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var67 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var68 = var67.getSeparator();
    java.util.Locale var69 = var67.getMyLocale();
    var66.setMyLocale(var69);
    var58.setLocale(var69);
    var1.setMyLocale(var69);
    var0.setMyLocale(var69);
    var0.setSeparator("(0) null\n   (0) null\n   (0) ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Dummy EmailFacade Impl"+ "'", var52.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var55.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var57.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ","+ "'", var68.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test132");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    var0.forgetPage(",");
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    java.lang.Object var6 = var0.getGlobal();
    boolean var7 = var0.isStateful();
    java.lang.String var8 = var0.getServletPath();
    boolean var9 = var0.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test133");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    java.lang.Integer var5 = var4.getParentFolderId();
    java.lang.String var6 = var4.getFullName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test134");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setCc("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    java.lang.String var18 = var13.getReplyTo();
    java.lang.String[] var20 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var13.setCc(var20);
    java.lang.String[] var23 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var13.setBcc(var23);
    ch.bluepenguin.email.client.MailMessage var25 = new ch.bluepenguin.email.client.MailMessage();
    var25.setBcc("Dummy EmailFacade Impl");
    var25.setTechnicalID(100);
    java.lang.String var30 = var25.getReplyTo();
    java.lang.String[] var32 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var25.setCc(var32);
    java.lang.String[] var35 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var25.setBcc(var35);
    var13.setBcc(var35);
    int var38 = var13.getTechnicalID();
    int var39 = var13.getTechnicalID();
    int var40 = var13.getTechnicalID();
    java.lang.String[] var41 = var13.getCc();
    ch.bluepenguin.email.client.Folder var42 = var13.getFolder();
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    ch.bluepenguin.email.client.MailMessage var44 = new ch.bluepenguin.email.client.MailMessage();
    var44.setBcc("Dummy EmailFacade Impl");
    var44.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var49 = new ch.bluepenguin.email.client.MailMessage();
    var49.setBcc("Dummy EmailFacade Impl");
    java.lang.String var52 = var49.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var53 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var53.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var56 = var53.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var57 = var53.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    var58.setParentFolderId((java.lang.Integer)1);
    var58.setFullName("hi!");
    var57.setParent(var58);
    var49.setFolder(var58);
    var44.setFolder(var58);
    ch.bluepenguin.email.client.Folder var67 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var68 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var67);
    var67.setParentFolderId((java.lang.Integer)1);
    var67.setFullName("Dummy EmailFacade Impl");
    java.lang.String var73 = var67.getFullName();
    var44.setFolder(var67);
    var44.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var13.copyTo((org.springframework.mail.MailMessage)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "Dummy EmailFacade Impl"+ "'", var73.equals("Dummy EmailFacade Impl"));

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test135");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    ch.bluepenguin.email.client.tapestry.SpringEngine var7 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var7.forgetPage("");
    org.apache.tapestry.engine.IPageSource var10 = var7.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var11 = var7.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var12 = new ch.bluepenguin.email.client.Person();
    java.lang.String var13 = var12.getFirstname();
    var12.setLastname("(0) null");
    var12.setLastname("");
    var7.setVisit((java.lang.Object)var12);
    var0.setPerson(var12);
    java.lang.String var20 = var12.getNickname();
    var12.setFirstname("(0) null\n   (0) null\n   (0) null");
    var12.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var25 = var12.getLastname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var25.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test136");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    int var4 = var1.getDepth();
    var1.setLeaf(true);
    var1.setLeaf(true);
    var1.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var1.setLeaf(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test137");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var2.setIndex(10);
    java.lang.String var5 = var2.getName();
    var2.setDepth(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.util.Iterator var9 = var0.getMenuItemsDepthFirst();
    var0.checkMenuModelHealth();
    java.lang.String var11 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var14 = var13.getRenderer();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var18.setIndex(10);
    var18.setParent((java.lang.Object)10L);
    java.lang.Object var23 = var18.getContained();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    int var25 = var18.getIndex();
    java.lang.Object var26 = var18.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null"+ "'", var11.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test138");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    java.lang.String var7 = var6.getNickname();
    java.lang.String var8 = var6.getFirstname();
    java.lang.String var9 = var6.getReserve();
    var6.setLastname("ch.bluepenguin.email.client.tapestry.Home@1173ea1b[(0) null\n   (0) null\n   (0) null]");
    java.lang.String var12 = var6.getLastname();
    java.lang.String var13 = var6.getLastname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ch.bluepenguin.email.client.tapestry.Home@1173ea1b[(0) null\n   (0) null\n   (0) null]"+ "'", var12.equals("ch.bluepenguin.email.client.tapestry.Home@1173ea1b[(0) null\n   (0) null\n   (0) null]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ch.bluepenguin.email.client.tapestry.Home@1173ea1b[(0) null\n   (0) null\n   (0) null]"+ "'", var13.equals("ch.bluepenguin.email.client.tapestry.Home@1173ea1b[(0) null\n   (0) null\n   (0) null]"));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test139");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    org.apache.tapestry.engine.ITemplateSource var4 = var0.getTemplateSource();
    boolean var5 = var0.isDirty();
    org.apache.tapestry.engine.IPropertySource var6 = var0.getPropertySource();
    var0.forgetPage("SimpleMailMessage: from=hi!; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test140");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setParentFolderId((java.lang.Integer)1);
    var5.setFullName("hi!");
    var4.setParent(var5);
    java.lang.String var12 = var5.getFullName();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    var15.setParentFolderId((java.lang.Integer)1);
    var15.setParentFolderId((java.lang.Integer)0);
    var13.setParent(var15);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    var23.setFolder(var24);
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setFullName("hi!");
    var24.setParent(var26);
    var26.setParentFolderId((java.lang.Integer)100);
    var15.setParent(var26);
    ch.bluepenguin.email.client.AbstractUniqueID var34 = var15.getUniqueID();
    ch.bluepenguin.email.client.Account var35 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var36 = var35.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var35.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var38 = var35.getUniqueID();
    ch.bluepenguin.email.client.Person var39 = new ch.bluepenguin.email.client.Person();
    java.lang.String var40 = var39.getFirstname();
    var39.setLastname("(0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var43 = var39.getUniqueID();
    var35.setPerson(var39);
    var15.setAccount(var35);
    var5.setParent(var15);
    ch.bluepenguin.email.client.Account var47 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var48 = var47.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var49 = var47.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var50 = var47.getUniqueID();
    ch.bluepenguin.email.client.Account var51 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var52 = var51.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var53 = var51.getUniqueID();
    ch.bluepenguin.email.client.Person var54 = new ch.bluepenguin.email.client.Person();
    java.lang.String var55 = var54.getFirstname();
    var51.setPerson(var54);
    ch.bluepenguin.email.client.Person var57 = new ch.bluepenguin.email.client.Person();
    java.lang.String var58 = var57.getFirstname();
    var57.setNickname("");
    var57.setLastname(",");
    java.lang.String var63 = var57.getNickname();
    java.lang.String var64 = var57.getLastname();
    var51.setPerson(var57);
    ch.bluepenguin.email.client.AbstractUniqueID var66 = var51.getUniqueID();
    ch.bluepenguin.email.client.Person var67 = new ch.bluepenguin.email.client.Person();
    java.lang.String var68 = var67.getFirstname();
    var67.setNickname("");
    var67.setLastname(",");
    java.lang.String var73 = var67.getNickname();
    var51.setPerson(var67);
    var67.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var47.setPerson(var67);
    var5.setAccount(var47);
    ch.bluepenguin.email.client.Person var79 = new ch.bluepenguin.email.client.Person();
    java.lang.String var80 = var79.getFirstname();
    var79.setNickname("");
    var79.setLastname(",");
    java.lang.String var85 = var79.getNickname();
    var47.setPerson(var79);
    java.lang.String var87 = var79.getReserve();
    var79.setNickname("(0) (0) null\n   (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ","+ "'", var64.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test141");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var7 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var7.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var10 = var7.getMyLocale();
    var3.setLocale(var10);
    java.lang.String var12 = var3.getPageName();
    java.util.Collection var13 = var3.getBindingNames();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var14 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    var14.setParameters((java.lang.Object[])var17);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    var14.setComponent((org.apache.tapestry.IComponent)var19);
    org.apache.tapestry.INamespace var22 = var19.getNamespace();
    var3.addComponent((org.apache.tapestry.IComponent)var19);
    ch.bluepenguin.email.client.tapestry.Home var24 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var25 = var24.getBody();
    java.lang.String var26 = var24.getPageName();
    java.lang.String var27 = var24.toString();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    java.lang.String var30 = var28.getPageName();
    java.lang.String var31 = var28.toString();
    org.apache.tapestry.IEngine var32 = var28.getEngine();
    var24.setContainer((org.apache.tapestry.IComponent)var28);
    java.lang.String var34 = var28.getPageName();
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    java.lang.String var37 = var35.getPageName();
    java.lang.String var38 = var35.toString();
    org.apache.tapestry.IEngine var39 = var35.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var41 = var40.getBody();
    java.lang.String var42 = var40.getPageName();
    java.lang.String var43 = var40.toString();
    org.apache.tapestry.IEngine var44 = var40.getEngine();
    var35.addBody((org.apache.tapestry.IRender)var40);
    java.lang.String var46 = var40.toString();
    var28.setContainer((org.apache.tapestry.IComponent)var40);
    org.apache.tapestry.IAsset var49 = var28.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    org.apache.tapestry.spec.IComponentSpecification var50 = var28.getSpecification();
    var3.addBody((org.apache.tapestry.IRender)var28);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var52 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var52.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.util.Locale var55 = var52.getMyLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setLocale(var55);
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test142");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var3.setLastname("(0) null");
    var3.setLastname("");
    java.lang.String var9 = var3.getReserve();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var3.getUniqueID();
    java.lang.String var12 = var3.getFirstname();
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var3.getUniqueID();
    java.lang.String var14 = var3.getReserve();
    var3.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=ch.bluepenguin.email.client.service.EmailFacadeException");
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var3.getUniqueID();
    var3.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.AbstractUniqueID var20 = var3.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test143");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.getChildren();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    boolean var17 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    boolean var18 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    var20.setFolder(var21);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    var23.setFullName("hi!");
    var21.setParent(var23);
    var23.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    var31.setFolder(var32);
    org.apache.tapestry.contrib.tree.model.ITreeNode var34 = var31.getParent();
    boolean var35 = var31.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    var1.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    ch.bluepenguin.email.client.Folder var38 = var31.getFolder();
    ch.bluepenguin.email.client.Folder var39 = var31.getFolder();
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    boolean var42 = var41.isLeaf();
    ch.bluepenguin.email.client.Folder var43 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var43);
    boolean var46 = var44.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var47 = var44.getParent();
    var41.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var44);
    ch.bluepenguin.email.client.Folder var49 = var41.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var50 = var49.getUniqueID();
    var49.setName("");
    ch.bluepenguin.email.client.Account var53 = var49.getAccount();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var55 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var55.setIndex(10);
    var55.setParent((java.lang.Object)10L);
    int var60 = var55.getDepth();
    var55.setName("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    var63.setParentFolderId((java.lang.Integer)1);
    var63.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var69 = var63.getUniqueID();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var70 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var70.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var73 = var70.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var74 = var70.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var75 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var76 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var75);
    var75.setParentFolderId((java.lang.Integer)1);
    var75.setFullName("hi!");
    var74.setParent(var75);
    java.lang.Integer var82 = var74.getParentFolderId();
    ch.bluepenguin.email.client.Folder var83 = var74.getParent();
    var63.setParent(var74);
    var55.setParent((java.lang.Object)var63);
    var49.setParent(var63);
    var39.setParent(var63);
    var63.setName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test144");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var8.forgetPage("");
    org.apache.tapestry.engine.IPageSource var11 = var8.getPageSource();
    org.apache.tapestry.engine.IPropertySource var12 = var8.getPropertySource();
    java.util.Collection var13 = var8.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var14 = var8.getComponentMessagesSource();
    var3.attach((org.apache.tapestry.IEngine)var8);
    java.lang.Object var16 = var3.getVisit();
    var3.setPageName("Default EmailFacade Impl");
    org.apache.tapestry.IComponent var19 = var3.getContainer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var3);
    java.lang.Object var21 = var20.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test145");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    java.lang.String var8 = var5.toString();
    var5.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.Object var11 = var5.getContained();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var12 = var5.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10.0f+ "'", var11.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test146");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.engine.IPageSource var2 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var3 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var5 = var4.getSeparator();
    java.util.Locale var6 = var4.getMyLocale();
    var3.setMyLocale(var6);
    var0.setLocale(var6);
    boolean var9 = var0.isResetServiceEnabled();
    org.apache.tapestry.engine.ISpecificationSource var10 = var0.getSpecificationSource();
    java.util.Collection var11 = var0.getActivePageNames();
    java.lang.String var12 = var0.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ","+ "'", var5.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test147");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    org.apache.tapestry.listener.ListenerMap var7 = var0.getListeners();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var9 = var8.getSpecification();
    org.apache.tapestry.engine.IComponentMessagesSource var10 = var8.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var11 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var11.forgetPage("");
    org.apache.tapestry.engine.IPageSource var14 = var11.getPageSource();
    org.apache.tapestry.engine.IPropertySource var15 = var11.getPropertySource();
    java.util.Collection var16 = var11.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var17 = var11.getComponentMessagesSource();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var20 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var21 = var20.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var22 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var23 = var22.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var26 = var25.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var29 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var25.reportException("", (java.lang.Throwable)var29);
    var22.reportException("hi!", (java.lang.Throwable)var29);
    var20.addSuppressed((java.lang.Throwable)var29);
    java.lang.String var33 = var20.toString();
    var11.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ", (java.lang.Throwable)var20);
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    java.lang.String var37 = var35.getPageName();
    java.lang.String var38 = var35.toString();
    org.apache.tapestry.IEngine var39 = var35.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var41 = var40.getBody();
    java.lang.String var42 = var40.getPageName();
    java.lang.String var43 = var40.toString();
    org.apache.tapestry.IEngine var44 = var40.getEngine();
    var35.addBody((org.apache.tapestry.IRender)var40);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var46 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var46.setSeparator("");
    java.util.Locale var49 = var46.getMyLocale();
    var35.setLocale(var49);
    var11.setLocale(var49);
    var8.setLocale(var49);
    var0.setVisit((java.lang.Object)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var33.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test148");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    var2.setParentFolderId((java.lang.Integer)0);
    var2.setParentFolderId((java.lang.Integer)10);
    java.lang.String var8 = var2.getFullName();
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test149");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var1 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var2 = var1.getSuppressed();
    var0.setTechnicalException((java.lang.Exception)var1);
    java.lang.Exception var4 = var0.getTechnicalException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var5 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var6 = var5.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var9 = var8.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var8.reportException("", (java.lang.Throwable)var12);
    var5.reportException("hi!", (java.lang.Throwable)var12);
    ch.bluepenguin.email.client.tapestry.SpringEngine var15 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var16 = var15.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var15.reportException("", (java.lang.Throwable)var19);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var22 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    var19.addSuppressed((java.lang.Throwable)var22);
    var12.addSuppressed((java.lang.Throwable)var19);
    java.lang.String var26 = var12.toString();
    var0.setTechnicalException((java.lang.Exception)var12);
    java.lang.String var28 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var26.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "ch.bluepenguin.email.client.service.EmailFacadeException"+ "'", var28.equals("ch.bluepenguin.email.client.service.EmailFacadeException"));

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test150");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = var1.getFolder();
    ch.bluepenguin.email.client.tapestry.SpringEngine var11 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var11.forgetPage("");
    org.apache.tapestry.engine.IPageSource var14 = var11.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var15 = var11.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var16 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var16.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var19 = var16.getMyLocale();
    var11.setLocale(var19);
    org.apache.tapestry.asset.ResourceChecksumSource var21 = var11.getResourceChecksumSource();
    org.apache.tapestry.engine.IPageSource var22 = var11.getPageSource();
    org.apache.tapestry.util.io.DataSqueezer var23 = var11.createDataSqueezer();
    java.util.Collection var24 = var11.getActivePageNames();
    var1.insert(var24);
    ch.bluepenguin.email.client.tapestry.SpringEngine var26 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var27 = var26.getSpecification();
    var26.forgetPage(",");
    java.util.Collection var30 = var26.getActivePageNames();
    var1.insert(var30);
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    boolean var34 = var33.isLeaf();
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    boolean var37 = var36.isLeaf();
    ch.bluepenguin.email.client.Folder var38 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38);
    boolean var41 = var39.equals((java.lang.Object)(short)(-1));
    java.util.Collection var42 = var39.getChildren();
    ch.bluepenguin.email.client.Folder var43 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var43);
    boolean var45 = var44.isLeaf();
    ch.bluepenguin.email.client.Folder var46 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var47 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var46);
    boolean var49 = var47.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var50 = var47.getParent();
    var44.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var47);
    boolean var52 = var39.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var44);
    boolean var53 = var36.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var44);
    var33.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var44);
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test151");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    ch.bluepenguin.email.client.Folder var8 = var6.getCurrentFolder();
    var6.setCurrentFolder("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var12.setParent((java.lang.Object)100L);
    java.lang.String var15 = var12.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var16 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var17 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var12.setContained((java.lang.Object)var17);
    ch.bluepenguin.email.client.MailMessage[] var19 = var17.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var20 = var17.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.moveMessages(var20, "SimpleMailMessage: from=(0) null\n   (0) null\n   (0) null\n   (0) null; replyTo=hi!; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test152");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setLeaf(false);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var4.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var8 = new java.lang.String[] { "(0) null"};
    java.lang.String var9 = var4.returnStringList(var8);
    java.util.Locale var10 = var4.getMyLocale();
    java.util.Locale var11 = var4.getMyLocale();
    var4.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var22 = var17.getSentDate();
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    var23.setBcc("Dummy EmailFacade Impl");
    var23.setTechnicalID(100);
    java.lang.String var28 = var23.getReplyTo();
    java.lang.String[] var30 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var23.setCc(var30);
    java.lang.String[] var33 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var23.setBcc(var33);
    var17.setCc(var33);
    java.lang.String var36 = var14.returnStringList(var33);
    java.util.Locale var37 = var14.getMyLocale();
    java.util.Locale var38 = var14.getMyLocale();
    java.util.Locale var39 = var14.getMyLocale();
    var4.setMyLocale(var39);
    var1.setParent((java.lang.Object)var4);
    java.lang.Object var42 = var1.getContained();
    boolean var43 = var1.isLeaf();
    java.lang.Object var44 = var1.getContained();
    int var45 = var1.getIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test153");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var7 = var6.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var6.reportException("", (java.lang.Throwable)var10);
    var0.setVisit((java.lang.Object)"");
    org.apache.tapestry.util.io.DataSqueezer var13 = var0.createDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var14 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var15 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var15.setText("Dummy EmailFacade Impl");
    var15.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var21 = var20.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var23 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var23.setIndex(10);
    var23.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var30 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var31 = var30.getSuppressed();
    var28.setParameters((java.lang.Object[])var31);
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    var28.setComponent((org.apache.tapestry.IComponent)var33);
    var20.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var23, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var28);
    var28.setStyleClass(",");
    var15.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var28);
    var14.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var28);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var41 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var42 = var41.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var44 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var44.setIndex(10);
    var44.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var49 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var51 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var52 = var51.getSuppressed();
    var49.setParameters((java.lang.Object[])var52);
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    var49.setComponent((org.apache.tapestry.IComponent)var54);
    var41.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var44, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var49);
    var14.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var49);
    var14.setElement("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var0.setVisit((java.lang.Object)var14);
    var0.forgetPage("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=(0) null; text=null");
    java.lang.String var64 = var0.toString();
    org.apache.tapestry.engine.ISpecificationSource var65 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0) null"+ "'", var21.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0) null"+ "'", var42.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test154");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var15 = var12.getFolder();
    int var16 = var12.getChildCount();
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.getChildren();
    boolean var28 = var19.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var24);
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var32 = var30.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var33 = var30.getFolder();
    int var34 = var30.getChildCount();
    var24.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var30);
    boolean var36 = var12.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var30);
    int var37 = var12.getChildCount();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var38 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var38.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var41 = var38.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var42 = var38.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var43 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var43);
    var43.setParentFolderId((java.lang.Integer)1);
    var43.setFullName("hi!");
    var42.setParent(var43);
    java.lang.String var50 = var43.getFullName();
    var12.setFolder(var43);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var52 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var52.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var55 = var52.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var56 = var52.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var57 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var58 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var57);
    var57.setParentFolderId((java.lang.Integer)1);
    var57.setFullName("hi!");
    var56.setParent(var57);
    java.lang.Integer var64 = var56.getParentFolderId();
    ch.bluepenguin.email.client.Folder var65 = var56.getParent();
    ch.bluepenguin.email.client.Folder var66 = var56.getParent();
    ch.bluepenguin.email.client.Folder var67 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var68 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var67);
    ch.bluepenguin.email.client.Folder var69 = new ch.bluepenguin.email.client.Folder();
    var68.setFolder(var69);
    ch.bluepenguin.email.client.Folder var71 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var72 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var71);
    var71.setFullName("hi!");
    var69.setParent(var71);
    ch.bluepenguin.email.client.AbstractUniqueID var76 = var69.getUniqueID();
    java.lang.String var77 = var69.getFullName();
    var69.setFullName("(0) null\n   (0) null\n   (0) null\n   (0) null");
    var56.setParent(var69);
    var12.setFolder(var56);
    java.lang.String var82 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Current Folder"+ "'", var82.equals("Current Folder"));

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test155");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var19 = var18.getParent();
    var18.setLeaf(false);
    var3.setContained((java.lang.Object)var18);
    java.lang.Object var23 = var18.getContained();
    var18.setLeaf(false);
    boolean var26 = var18.isLeaf();
    int var27 = var18.getDepth();
    var18.setDepth(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 10.0f+ "'", var23.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test156");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    org.apache.tapestry.IBinding var6 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setPageName("hi!");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    var9.setParameters((java.lang.Object[])var12);
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    var9.setComponent((org.apache.tapestry.IComponent)var14);
    var0.addComponent((org.apache.tapestry.IComponent)var14);
    ch.bluepenguin.email.client.tapestry.SpringEngine var18 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var19 = var18.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var18.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var23 = var18.getSpecificationSource();
    org.apache.tapestry.IResourceResolver var24 = var18.getResourceResolver();
    java.lang.String var25 = var18.getContextPath();
    org.apache.tapestry.engine.ISpecificationSource var26 = var18.getSpecificationSource();
    var14.attach((org.apache.tapestry.IEngine)var18);
    java.util.Locale var28 = var18.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test157");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setName("(0) null");
    var1.setLeaf(false);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var7 = var6.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var8 = var6.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var10 = var6.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var11 = var6.getCurrentFolder();
    ch.bluepenguin.email.client.Folder[] var12 = var6.getAllFolders();
    ch.bluepenguin.email.client.Folder var13 = var6.getCurrentFolder();
    java.lang.String var14 = var13.getFullName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var1.setContained((java.lang.Object)var15);
    int var17 = var1.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test158");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var1.setName("");
    boolean var4 = var1.isLeaf();
    java.lang.Object var5 = var1.getParent();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    var7.setFolder(var8);
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    var10.setFullName("hi!");
    var8.setParent(var10);
    ch.bluepenguin.email.client.Account var15 = var10.getAccount();
    var10.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var10.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var10.setFullName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    var23.setFolder(var24);
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setFullName("hi!");
    var24.setParent(var26);
    var10.setParent(var24);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    ch.bluepenguin.email.client.tapestry.Visit var33 = new ch.bluepenguin.email.client.tapestry.Visit();
    java.lang.String var34 = var33.getUserID();
    java.lang.String var35 = var33.getUserID();
    java.lang.String var36 = var33.getUserID();
    var33.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var33.setUserID(",");
    java.lang.String var41 = var33.getUserID();
    var33.setUserID("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=(0) null; sentDate=null; subject=null; text=null");
    boolean var44 = var32.equals((java.lang.Object)"SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=(0) null; sentDate=null; subject=null; text=null");
    var1.setParent((java.lang.Object)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ","+ "'", var41.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test159");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var3 = var0.getListeners();
    org.apache.tapestry.IRequestCycle var4 = var0.getRequestCycle();
    org.apache.tapestry.IRequestCycle var5 = var0.getRequestCycle();
    org.apache.tapestry.event.ChangeObserver var6 = var0.getChangeObserver();
    org.apache.tapestry.IRequestCycle var7 = var0.getRequestCycle();
    java.lang.String var8 = var0.getExtendedId();
    ch.bluepenguin.email.client.tapestry.Home var9 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var10 = var9.getBody();
    int var11 = var9.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    var9.addComponent((org.apache.tapestry.IComponent)var12);
    java.util.Map var16 = var12.getComponents();
    java.util.Locale var17 = var12.getLocale();
    var0.setPage((org.apache.tapestry.IPage)var12);
    org.apache.tapestry.event.ChangeObserver var19 = var0.getChangeObserver();
    int var20 = var0.getBodyCount();
    var0.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    var25.beginPageRender();
    java.util.Collection var27 = var25.getBindingNames();
    var22.setPage((org.apache.tapestry.IPage)var25);
    org.apache.tapestry.listener.ListenerMap var29 = var25.getListeners();
    int var30 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var31 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var32 = var31.getSeparator();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    var33.addComponent((org.apache.tapestry.IComponent)var36);
    java.lang.String var40 = var33.getIdPath();
    org.apache.tapestry.ILocation var41 = var33.getLocation();
    org.apache.tapestry.IEngine var42 = var33.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var43 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var43.setSeparator("");
    java.util.Locale var46 = var43.getMyLocale();
    var33.setLocale(var46);
    var31.setMyLocale(var46);
    var25.setLocale(var46);
    ch.bluepenguin.email.client.tapestry.Home var50 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var51 = var50.getBody();
    int var52 = var50.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var53 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var54 = var53.getBody();
    int var55 = var53.getBodyCount();
    var50.addComponent((org.apache.tapestry.IComponent)var53);
    ch.bluepenguin.email.client.tapestry.SpringEngine var57 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var57.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var60 = var57.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var61 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var61.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var64 = var61.getMyLocale();
    var57.setLocale(var64);
    var50.setLocale(var64);
    org.apache.tapestry.spec.IComponentSpecification var67 = var50.getSpecification();
    var25.setContainer((org.apache.tapestry.IComponent)var50);
    var0.addBody((org.apache.tapestry.IRender)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ","+ "'", var32.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test160");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null");
    ch.bluepenguin.email.client.Folder var13 = var0.getFolder();
    var0.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var0.setReplyTo("SimpleMailMessage: from=null; replyTo=Default EmailFacade Impl; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var18 = var0.getFrom();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test161");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(true);
    java.util.logging.Logger var5 = var0.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var6 = var0.getCache();
    java.util.logging.Logger var7 = var0.getLogger();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test162");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    org.apache.tapestry.IResourceResolver var6 = var0.getResourceResolver();
    java.lang.String var7 = var0.getContextPath();
    org.apache.tapestry.util.pool.Pool var8 = var0.getPool();
    java.lang.Object var9 = var0.getGlobal();
    java.util.Locale var10 = var0.getLocale();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var0.getSpecification();
    boolean var12 = var0.getHasVisit();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var16 = var14.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var17 = var14.getParent();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    java.util.Collection var22 = var19.getChildren();
    boolean var23 = var14.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var19);
    java.util.Collection var24 = var14.getChildren();
    java.util.Collection var25 = var14.children();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    boolean var29 = var27.equals((java.lang.Object)(short)(-1));
    java.util.Collection var30 = var27.getChildren();
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var33 = var32.isLeaf();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var37 = var35.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var38 = var35.getParent();
    var32.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    boolean var40 = var27.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var32);
    var14.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    var0.setVisit((java.lang.Object)var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var44 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var44.setParent((java.lang.Object)100L);
    java.lang.String var47 = var44.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var48 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var44);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var49 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var44.setContained((java.lang.Object)var49);
    ch.bluepenguin.email.client.MailMessage[] var51 = var49.getAllMessages();
    ch.bluepenguin.email.client.Folder var52 = var49.getCurrentFolder();
    var0.setVisit((java.lang.Object)var52);
    var52.setParentFolderId((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test163");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    java.util.Collection var5 = var0.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var6 = var0.getComponentMessagesSource();
    org.apache.tapestry.engine.ITemplateSource var7 = var0.getTemplateSource();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("(-1) null");
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!", (java.lang.Throwable)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test164");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.ISpecificationSource var1 = var0.getSpecificationSource();
    boolean var2 = var0.isStateful();
    org.apache.tapestry.engine.IComponentClassEnhancer var3 = var0.getComponentClassEnhancer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test165");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.MailMessage var1 = new ch.bluepenguin.email.client.MailMessage();
    var1.setBcc("Dummy EmailFacade Impl");
    var1.setTechnicalID(100);
    java.lang.String var6 = var1.getReplyTo();
    java.lang.String[] var8 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var1.setCc(var8);
    java.lang.String var10 = var0.returnStringList(var8);
    java.util.Locale var11 = var0.getMyLocale();
    java.util.Locale var12 = var0.getMyLocale();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    var15.setBcc("Dummy EmailFacade Impl");
    var15.setSubject("hi!");
    java.lang.String var20 = var15.getSubject();
    java.lang.String[] var21 = var15.getCc();
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    var34.setBcc("Dummy EmailFacade Impl");
    var34.setTechnicalID(100);
    java.lang.String var39 = var34.getReplyTo();
    java.lang.String[] var41 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var34.setCc(var41);
    java.lang.String[] var44 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var34.setBcc(var44);
    var22.setBcc(var44);
    java.lang.String[] var47 = var22.getBcc();
    var15.setTo(var47);
    java.lang.String var49 = var0.returnStringList(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var10.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "Dummy EmailFacade Impl"+ "'", var49.equals("Dummy EmailFacade Impl"));

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test166");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var11.setIndex(10);
    java.lang.String var14 = var11.getName();
    boolean var15 = var0.equals((java.lang.Object)var11);
    var11.setIndex(100);
    ch.bluepenguin.email.client.Person var18 = new ch.bluepenguin.email.client.Person();
    java.lang.String var19 = var18.getFirstname();
    var18.setLastname("(0) null");
    var18.setLastname("");
    java.lang.String var24 = var18.getReserve();
    var18.setNickname("");
    var11.setContained((java.lang.Object)var18);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var11);
    var11.setDepth(10);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var31 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var11);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var32 = var11.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test167");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setCc("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    java.lang.String var18 = var13.getReplyTo();
    java.lang.String[] var20 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var13.setCc(var20);
    java.lang.String[] var23 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var13.setBcc(var23);
    ch.bluepenguin.email.client.MailMessage var25 = new ch.bluepenguin.email.client.MailMessage();
    var25.setBcc("Dummy EmailFacade Impl");
    var25.setTechnicalID(100);
    java.lang.String var30 = var25.getReplyTo();
    java.lang.String[] var32 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var25.setCc(var32);
    java.lang.String[] var35 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var25.setBcc(var35);
    var13.setBcc(var35);
    int var38 = var13.getTechnicalID();
    int var39 = var13.getTechnicalID();
    int var40 = var13.getTechnicalID();
    java.lang.String[] var41 = var13.getCc();
    ch.bluepenguin.email.client.Folder var42 = var13.getFolder();
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    var13.setReplyTo("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.MailMessage var46 = new ch.bluepenguin.email.client.MailMessage();
    var46.setBcc("Dummy EmailFacade Impl");
    var46.setTechnicalID(100);
    java.lang.String var51 = var46.getReplyTo();
    java.lang.String[] var53 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var46.setCc(var53);
    var46.setBcc("Dummy EmailFacade Impl");
    var46.setSubject("hi!");
    java.lang.String var59 = var46.toString();
    java.lang.String var60 = var46.getText();
    var13.copyTo((org.springframework.mail.MailMessage)var46);
    ch.bluepenguin.email.client.AbstractUniqueID var62 = var46.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var59.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test168");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    java.lang.String var9 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var10.addComponent((org.apache.tapestry.IComponent)var13);
    java.lang.String var17 = var10.getIdPath();
    org.apache.tapestry.ILocation var18 = var10.getLocation();
    org.apache.tapestry.IEngine var19 = var10.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    var23.beginPageRender();
    java.util.Collection var25 = var23.getBindingNames();
    var20.setPage((org.apache.tapestry.IPage)var23);
    var10.addComponent((org.apache.tapestry.IComponent)var23);
    var23.setPageName("hi!");
    int var30 = var23.getBodyCount();
    var0.setContainer((org.apache.tapestry.IComponent)var23);
    org.apache.tapestry.spec.IComponentSpecification var32 = var23.getSpecification();
    var23.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var34 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var34.forgetPage("");
    org.apache.tapestry.engine.IPageSource var37 = var34.getPageSource();
    org.apache.tapestry.engine.IPropertySource var38 = var34.getPropertySource();
    java.util.Collection var39 = var34.getActivePageNames();
    java.lang.String var40 = var34.toString();
    java.lang.Object var41 = var34.getGlobal();
    var23.attach((org.apache.tapestry.IEngine)var34);
    org.apache.tapestry.util.pool.Pool var43 = var34.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test169");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(false);
    java.util.logging.Logger var5 = var0.getLogger();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    var6.setDirty(true);
    boolean var11 = var6.isDirty();
    java.util.logging.Logger var12 = var6.getLogger();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var13 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var14 = var13.getSender();
    boolean var15 = var13.isDirty();
    org.springframework.mail.MailSender var16 = var13.getSender();
    ch.bluepenguin.email.client.cache.MailCache var18 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var19 = var18.getCache();
    var13.setCache(var18);
    var6.setCache(var18);
    var0.setCache(var18);
    var0.setDirty(false);
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var25 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var27 = new ch.bluepenguin.email.client.cache.MailCache("");
    var25.setCache(var27);
    ch.bluepenguin.email.client.cache.MailCache var30 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var31 = var30.getCache();
    var25.setCache(var30);
    org.springframework.mail.MailSender var33 = var25.getSender();
    java.lang.String var34 = var25.getName();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var35 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var37 = new ch.bluepenguin.email.client.cache.MailCache("");
    var35.setCache(var37);
    var25.setCache(var37);
    net.sf.ehcache.Cache var40 = var37.getCache();
    net.sf.ehcache.Cache var41 = var37.getCache();
    net.sf.ehcache.Cache var42 = var37.getCache();
    var0.setCache(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Default EmailFacade Impl"+ "'", var34.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test170");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setTechnicalID(100);
    java.lang.String var13 = var8.getReplyTo();
    java.lang.String[] var15 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var8.setCc(var15);
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setSubject("hi!");
    java.lang.String var21 = var8.toString();
    java.lang.String var22 = var8.getText();
    java.lang.String[] var23 = var8.getCc();
    var0.setParameters((java.lang.Object[])var23);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var25 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var26 = var25.getSeparator();
    ch.bluepenguin.email.client.MailMessage var27 = new ch.bluepenguin.email.client.MailMessage();
    var27.setBcc("Dummy EmailFacade Impl");
    var27.setTechnicalID(100);
    var27.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    var34.setBcc("Dummy EmailFacade Impl");
    var34.setTechnicalID(100);
    java.lang.String var39 = var34.getReplyTo();
    java.lang.String[] var41 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var34.setCc(var41);
    var27.setBcc(var41);
    java.lang.String var44 = var25.returnStringList(var41);
    var0.setParameters((java.lang.Object[])var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var21.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ","+ "'", var26.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var44.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test171");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    boolean var9 = var5.isLeaf();
    java.lang.Object var10 = var5.getParent();
    var5.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var14 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var14.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var17 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var17.setText("Dummy EmailFacade Impl");
    var17.setText(",");
    var14.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var17);
    var17.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var25.setText("Dummy EmailFacade Impl");
    var25.setElement("Dummy EmailFacade Impl");
    var17.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setElement("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.email.client.tapestry.SpringEngine var34 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var35 = var34.getSpecification();
    java.lang.Object var36 = var34.getGlobal();
    java.lang.Object var37 = var34.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var39 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var40 = var39.getParent();
    ch.bluepenguin.email.client.MailMessage var41 = new ch.bluepenguin.email.client.MailMessage();
    var41.setBcc("Dummy EmailFacade Impl");
    var41.setTechnicalID(100);
    var41.setText("hi!");
    var39.setContained((java.lang.Object)var41);
    var34.setVisit((java.lang.Object)var41);
    ch.bluepenguin.email.client.service.EmailFacadeException var51 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var34.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var51);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var53 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var53.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var57 = new java.lang.String[] { "(0) null"};
    java.lang.String var58 = var53.returnStringList(var57);
    ch.bluepenguin.email.client.tapestry.SpringEngine var59 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var59.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var62 = var59.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var63 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var63.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var66 = var63.getMyLocale();
    var59.setLocale(var66);
    var53.setMyLocale(var66);
    var34.setLocale(var66);
    ch.bluepenguin.email.client.tapestry.SpringEngine var70 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.ISpecificationSource var71 = var70.getSpecificationSource();
    java.lang.String var72 = var70.getServletPath();
    var34.setVisit((java.lang.Object)var70);
    java.lang.Object var74 = var70.getGlobal();
    boolean var75 = var70.getHasVisit();
    java.util.Locale var76 = var70.getLocale();
    org.apache.tapestry.util.io.DataSqueezer var77 = var70.createDataSqueezer();
    var5.setContained((java.lang.Object)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0) null"+ "'", var58.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test172");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var7 = var6.getParent();
    java.lang.Object var8 = var6.getContained();
    var6.setLeaf(true);
    var1.setContained((java.lang.Object)var6);
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var13 = var12.getVisit();
    java.lang.String var14 = var12.toString();
    boolean var15 = var12.isDirty();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var16 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var16.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var19 = var16.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var20 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var21 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var22 = var21.getSeparator();
    java.util.Locale var23 = var21.getMyLocale();
    var20.setMyLocale(var23);
    var16.setMyLocale(var23);
    var12.setLocale(var23);
    var1.setParent((java.lang.Object)var23);
    java.lang.Object var28 = var1.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10.0f+ "'", var8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ","+ "'", var22.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test173");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    var0.setTo("(0) null\n   (0) null");
    var0.setFrom("(0) null\n   (0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setSubject("(0) null\n   (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var35 = var30.getUniqueID();
    java.lang.String var36 = var30.getText();
    java.lang.String[] var37 = var30.getTo();
    int var38 = var30.getTechnicalID();
    var0.copyTo((org.springframework.mail.MailMessage)var30);
    java.lang.String var40 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test174");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    var23.setStyleClass("(0) null\n   (0) null");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var27 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var29 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var30 = var29.getSuppressed();
    var27.setParameters((java.lang.Object[])var30);
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    var27.setComponent((org.apache.tapestry.IComponent)var32);
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    int var37 = var35.getBodyCount();
    var35.setPageName("");
    var32.addBody((org.apache.tapestry.IRender)var35);
    org.apache.tapestry.IEngine var41 = var35.getEngine();
    var35.endPageRender();
    org.apache.tapestry.IPage var43 = var35.getPage();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var44 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var46 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    var44.setParameters((java.lang.Object[])var47);
    ch.bluepenguin.email.client.tapestry.Home var49 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var50 = var49.getBody();
    var44.setComponent((org.apache.tapestry.IComponent)var49);
    ch.bluepenguin.email.client.tapestry.Home var52 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var53 = var52.getBody();
    int var54 = var52.getBodyCount();
    var52.setPageName("");
    var49.addBody((org.apache.tapestry.IRender)var52);
    org.apache.tapestry.IEngine var58 = var52.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var59 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var60 = var59.getBody();
    int var61 = var59.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var62 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var63 = var62.getBody();
    int var64 = var62.getBodyCount();
    var59.addComponent((org.apache.tapestry.IComponent)var62);
    var52.addBody((org.apache.tapestry.IRender)var62);
    org.apache.tapestry.IComponent var67 = var62.getContainer();
    org.apache.tapestry.event.ChangeObserver var68 = var62.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var69 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var69.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var72 = var69.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var73 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var74 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var75 = var74.getSeparator();
    java.util.Locale var76 = var74.getMyLocale();
    var73.setMyLocale(var76);
    var69.setMyLocale(var76);
    var62.setLocale(var76);
    var35.addBody((org.apache.tapestry.IRender)var62);
    java.lang.String var81 = var62.getPageName();
    var23.setComponent((org.apache.tapestry.IComponent)var62);
    int var83 = var62.getBodyCount();
    var62.detach();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ","+ "'", var75.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test175");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = new ch.bluepenguin.email.client.Person();
    java.lang.String var7 = var6.getFirstname();
    var6.setNickname("");
    var6.setLastname(",");
    java.lang.String var12 = var6.getNickname();
    java.lang.String var13 = var6.getLastname();
    var0.setPerson(var6);
    ch.bluepenguin.email.client.AbstractUniqueID var15 = var6.getUniqueID();
    var6.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var6.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=Dummy EmailFacade Impl; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ","+ "'", var13.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test176");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(false);
    java.util.logging.Logger var5 = var0.getLogger();
    org.springframework.mail.javamail.JavaMailReader var6 = var0.getReader();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var12 = var7.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var13 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var14 = var13.getReader();
    ch.bluepenguin.email.client.cache.MailCache var15 = var13.getCache();
    boolean var16 = var7.equals((java.lang.Object)var13);
    ch.bluepenguin.email.client.cache.MailCache var17 = var13.getCache();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var18 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var20 = new ch.bluepenguin.email.client.cache.MailCache("");
    var18.setCache(var20);
    var13.setCache(var20);
    var0.setCache(var20);
    java.util.logging.Logger var24 = var0.getLogger();
    java.util.logging.Logger var25 = var0.getLogger();
    java.util.logging.Logger var26 = var0.getLogger();
    java.util.logging.Logger var27 = var0.getLogger();
    org.springframework.mail.MailSender var28 = var0.getSender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test177");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var3 = var0.getListeners();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var6 = var4.getDataSqueezer();
    var4.setVisit((java.lang.Object)0.0d);
    boolean var9 = var4.isStateful();
    org.apache.tapestry.util.io.DataSqueezer var10 = var4.getDataSqueezer();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var11 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var11.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var14 = var11.getMyLocale();
    var4.setLocale(var14);
    var0.attach((org.apache.tapestry.IEngine)var4);
    var0.setId("ch.bluepenguin.email.client.tapestry.Home@1173ea1b[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test178");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.IAsset var7 = var0.getAsset(",");
    java.lang.String var8 = var0.getPageName();
    org.apache.tapestry.INamespace var9 = var0.getNamespace();
    java.util.Map var10 = var0.getComponents();
    org.apache.tapestry.IAsset var12 = var0.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=(0) null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test179");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("hi!");
    var0.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    int var7 = var0.getTechnicalID();
    var0.setFrom("(0) null\n   (0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getReplyTo();
    java.lang.String[] var17 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var10.setCc(var17);
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setSubject("(0) null");
    java.util.Date var23 = var10.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var24 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var24.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var27 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var27.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var35 = var30.getSentDate();
    ch.bluepenguin.email.client.MailMessage var36 = new ch.bluepenguin.email.client.MailMessage();
    var36.setBcc("Dummy EmailFacade Impl");
    var36.setTechnicalID(100);
    java.lang.String var41 = var36.getReplyTo();
    java.lang.String[] var43 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var36.setCc(var43);
    java.lang.String[] var46 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var36.setBcc(var46);
    var30.setCc(var46);
    java.lang.String var49 = var27.returnStringList(var46);
    java.lang.String[] var51 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var52 = var27.returnStringList(var51);
    java.lang.String var53 = var24.returnStringList(var51);
    var10.setTo(var51);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var55 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var55.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var58 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var58.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var61 = new ch.bluepenguin.email.client.MailMessage();
    var61.setBcc("Dummy EmailFacade Impl");
    var61.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var66 = var61.getSentDate();
    ch.bluepenguin.email.client.MailMessage var67 = new ch.bluepenguin.email.client.MailMessage();
    var67.setBcc("Dummy EmailFacade Impl");
    var67.setTechnicalID(100);
    java.lang.String var72 = var67.getReplyTo();
    java.lang.String[] var74 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var67.setCc(var74);
    java.lang.String[] var77 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var67.setBcc(var77);
    var61.setCc(var77);
    java.lang.String var80 = var58.returnStringList(var77);
    java.lang.String[] var82 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var83 = var58.returnStringList(var82);
    java.lang.String var84 = var55.returnStringList(var82);
    var10.setTo(var82);
    var0.setBcc(var82);
    java.lang.String var87 = var0.getReplyTo();
    var0.setBcc("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]; to=; cc=; bcc=ch.bluepenguin.email.client.service.EmailFacadeException; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "Dummy EmailFacade Impl"+ "'", var49.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var52.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var53.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "Dummy EmailFacade Impl"+ "'", var80.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var83.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var84.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test180");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    java.lang.String var1 = var0.getLocale();
    java.lang.String var2 = var0.getLocale();
    var0.setLocale("(0) null\n   (0) null\n   (0) null\n   (0) null");
    var0.setLocale("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test181");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    org.apache.tapestry.IBinding var6 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Collection var7 = var0.getBindingNames();
    java.util.Map var8 = var0.getAssets();
    org.apache.tapestry.listener.ListenerMap var9 = var0.getListeners();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var10.addComponent((org.apache.tapestry.IComponent)var13);
    java.util.Collection var17 = var13.getBindingNames();
    org.apache.tapestry.IAsset var19 = var13.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var20 = var13.toString();
    java.util.Collection var21 = var13.getBindingNames();
    var13.setPageName("");
    org.apache.tapestry.INamespace var24 = var13.getNamespace();
    java.util.Collection var25 = var13.getBindingNames();
    org.apache.tapestry.IPage var26 = var13.getPage();
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    var27.addComponent((org.apache.tapestry.IComponent)var30);
    java.lang.String var34 = var27.getIdPath();
    org.apache.tapestry.ILocation var35 = var27.getLocation();
    org.apache.tapestry.IEngine var36 = var27.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    var40.beginPageRender();
    java.util.Collection var42 = var40.getBindingNames();
    var37.setPage((org.apache.tapestry.IPage)var40);
    var27.addComponent((org.apache.tapestry.IComponent)var40);
    var40.setPageName("hi!");
    var13.setContainer((org.apache.tapestry.IComponent)var40);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test182");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    var0.setFrom("(0) null");
    var0.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.MailMessage var9 = new ch.bluepenguin.email.client.MailMessage();
    var9.setBcc("Dummy EmailFacade Impl");
    var9.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    java.lang.String var17 = var14.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var18 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var18.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var21 = var18.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var22 = var18.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    var23.setParentFolderId((java.lang.Integer)1);
    var23.setFullName("hi!");
    var22.setParent(var23);
    var14.setFolder(var23);
    var9.setFolder(var23);
    var23.setFullName("hi!");
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var36 = var35.isLeaf();
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var40 = var38.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var41 = var38.getParent();
    var35.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    ch.bluepenguin.email.client.Folder var43 = var35.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var44 = var43.getUniqueID();
    var23.setParent(var43);
    var0.setFolder(var23);
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setTechnicalID(100);
    java.lang.String var52 = var47.getReplyTo();
    java.lang.String[] var54 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var47.setCc(var54);
    java.lang.String[] var57 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var47.setBcc(var57);
    ch.bluepenguin.email.client.MailMessage var59 = new ch.bluepenguin.email.client.MailMessage();
    var59.setBcc("Dummy EmailFacade Impl");
    var59.setTechnicalID(100);
    java.lang.String var64 = var59.getReplyTo();
    java.lang.String[] var66 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var59.setCc(var66);
    java.lang.String[] var69 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var59.setBcc(var69);
    var47.setBcc(var69);
    var47.setCc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Date var74 = var47.getSentDate();
    var47.setTechnicalID(0);
    java.lang.String[] var77 = var47.getCc();
    var0.setCc(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test183");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.listener.ListenerMap var2 = var0.getListeners();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var4 = var0.getComponentClassEnhancer();
    org.apache.tapestry.engine.IComponentMessagesSource var5 = var0.getComponentMessagesSource();
    java.lang.String var6 = var0.toString();
    java.lang.Object var7 = var0.getGlobal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test184");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var6 = var0.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var7 = var0.getCurrentFolder();
    java.lang.String var8 = var0.getName();
    ch.bluepenguin.email.client.Folder var9 = var0.getCurrentFolder();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    var10.setParameters((java.lang.Object[])var13);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var15 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var15.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var19 = var15.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var21 = var15.getMessagesFromFolder("hi!");
    ch.bluepenguin.email.client.MailMessage[] var23 = var15.getMessagesFromFolder("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.MailMessage[] var24 = var15.getAllMessages();
    var10.setParameters((java.lang.Object[])var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var24, "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=Dummy EmailFacade Impl; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Dummy EmailFacade Impl"+ "'", var8.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test185");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.engine.IComponentMessagesSource var2 = var0.getComponentMessagesSource();
    org.apache.tapestry.engine.ISpecificationSource var3 = var0.getSpecificationSource();
    org.apache.tapestry.engine.IScriptSource var4 = var0.getScriptSource();
    org.apache.tapestry.engine.IPropertySource var5 = var0.getPropertySource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test186");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var3 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var4 = new ch.bluepenguin.email.client.Person();
    java.lang.String var5 = var4.getFirstname();
    var4.setLastname("(0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var4.getUniqueID();
    var0.setPerson(var4);
    var4.setNickname("Dummy EmailFacade Impl");
    var4.setFirstname("SimpleMailMessage: from=(0) null\n   (0) null\n   (0) null\n   (0) null; replyTo=hi!; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var14 = var4.getLastname();
    java.lang.String var15 = var4.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test187");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var3 = var0.getMyLocale();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    java.util.Map var11 = var7.getComponents();
    java.util.Locale var12 = var7.getLocale();
    java.lang.String var13 = var7.getIdPath();
    var7.setPageName("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var16 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var16.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var20 = new java.lang.String[] { "(0) null"};
    java.lang.String var21 = var16.returnStringList(var20);
    java.util.Locale var22 = var16.getMyLocale();
    java.util.Locale var23 = var16.getMyLocale();
    var16.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var26 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var26.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    var29.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var34 = var29.getSentDate();
    ch.bluepenguin.email.client.MailMessage var35 = new ch.bluepenguin.email.client.MailMessage();
    var35.setBcc("Dummy EmailFacade Impl");
    var35.setTechnicalID(100);
    java.lang.String var40 = var35.getReplyTo();
    java.lang.String[] var42 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var35.setCc(var42);
    java.lang.String[] var45 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var35.setBcc(var45);
    var29.setCc(var45);
    java.lang.String var48 = var26.returnStringList(var45);
    java.util.Locale var49 = var26.getMyLocale();
    java.util.Locale var50 = var26.getMyLocale();
    java.util.Locale var51 = var26.getMyLocale();
    var16.setMyLocale(var51);
    var7.setLocale(var51);
    var0.setMyLocale(var51);
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0) null"+ "'", var21.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Dummy EmailFacade Impl"+ "'", var48.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test188");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var0.getUniqueID();
    java.lang.String var7 = var0.getFullName();
    java.lang.Integer var8 = var0.getParentFolderId();
    ch.bluepenguin.email.client.Folder var9 = var0.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Dummy EmailFacade Impl"+ "'", var7.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 1+ "'", var8.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test189");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    java.lang.String var6 = var3.getReserve();
    var3.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var9 = var3.getFirstname();
    var3.setNickname("Current Folder");
    var3.setLastname("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var14 = var3.getNickname();
    java.lang.String var15 = var3.getNickname();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var3.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Current Folder"+ "'", var14.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Current Folder"+ "'", var15.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test190");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    java.util.Locale var7 = var0.getLocale();
    java.lang.String var8 = var0.toString();
    java.lang.Object var9 = var0.getVisit();
    java.lang.Object var10 = var0.getVisit();
    org.apache.tapestry.util.io.DataSqueezer var11 = var0.createDataSqueezer();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var12 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var12.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var16 = var12.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var17 = var12.getAllMessages();
    var12.setCurrentFolder(",");
    java.lang.String var20 = var12.getName();
    ch.bluepenguin.email.client.Folder var21 = var12.getCurrentFolder();
    var0.setVisit((java.lang.Object)var21);
    java.lang.String var23 = var21.getName();
    ch.bluepenguin.email.client.Account var24 = var21.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10.0f+ "'", var9.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10.0f+ "'", var10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Dummy EmailFacade Impl"+ "'", var20.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Current Folder"+ "'", var23.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test191");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    var0.setId("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    org.apache.tapestry.INamespace var23 = var0.getNamespace();
    org.apache.tapestry.INamespace var24 = var0.getNamespace();
    org.apache.tapestry.INamespace var25 = var0.getNamespace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test192");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    int var8 = var3.getBodyCount();
    var3.endPageRender();
    java.lang.String var10 = var3.getExtendedId();
    org.apache.tapestry.IEngine var11 = var3.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.lang.String var19 = var12.getIdPath();
    org.apache.tapestry.ILocation var20 = var12.getLocation();
    org.apache.tapestry.IEngine var21 = var12.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    var25.beginPageRender();
    java.util.Collection var27 = var25.getBindingNames();
    var22.setPage((org.apache.tapestry.IPage)var25);
    var12.addComponent((org.apache.tapestry.IComponent)var25);
    org.apache.tapestry.IAsset var31 = var12.getAsset("Dummy EmailFacade Impl");
    int var32 = var12.getBodyCount();
    org.apache.tapestry.event.ChangeObserver var33 = var12.getChangeObserver();
    var3.setContainer((org.apache.tapestry.IComponent)var12);
    org.apache.tapestry.IPage var35 = var12.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test193");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    org.apache.tapestry.engine.IScriptSource var3 = var0.getScriptSource();
    java.lang.String var4 = var0.getServletPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test194");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var4.setName("(0) null");
    var4.setLeaf(true);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setCc("hi!");
    var4.setParent((java.lang.Object)var10);
    java.lang.String var14 = var4.toString();
    int var15 = var4.getIndex();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var16 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var17 = var16.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var18 = var16.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var20.setLeaf(false);
    var16.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    var16.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var26.setName("");
    boolean var29 = var26.isLeaf();
    var26.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.tapestry.SpringEngine var32 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var33 = var32.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var34 = var32.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var38 = var37.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var39 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var37);
    var35.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var37);
    var32.setVisit((java.lang.Object)var35);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var43 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var44 = var43.getParent();
    java.lang.Object var45 = var43.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var46 = var35.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var43);
    java.lang.String var47 = var35.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var48 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var49 = var48.displayMenuStructure();
    java.util.Iterator var50 = var48.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var51 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var53 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var54 = var53.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var55 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var53);
    var51.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var53);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var57 = var48.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var53);
    java.lang.String var58 = var53.getName();
    var53.setIndex(1);
    boolean var61 = var53.isLeaf();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var62 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var62.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var65 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var65.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var68 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var68.setText("Dummy EmailFacade Impl");
    var68.setText(",");
    var65.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var68);
    var62.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var65);
    var65.setText("hi!");
    var35.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var53, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var65);
    var65.setStyleClass("");
    var16.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var65);
    var4.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var65);
    java.lang.Object var82 = var4.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var83 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var85 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var85.setName("(0) null");
    var85.setLeaf(false);
    var85.setLeaf(true);
    java.lang.Object var92 = var85.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var93 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var85);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var94 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var95 = var94.getMenuItem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0) null"+ "'", var17.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + 10.0f+ "'", var45.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0) null\n   (0) null"+ "'", var47.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0) null"+ "'", var49.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test195");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.setPageName("Dummy EmailFacade Impl");
    var0.setId("(0) null\n   (0) null");
    int var5 = var0.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var6 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var8 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    var6.setParameters((java.lang.Object[])var9);
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    var6.setComponent((org.apache.tapestry.IComponent)var11);
    var11.setId("Dummy EmailFacade Impl");
    int var16 = var11.getBodyCount();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    var22.addComponent((org.apache.tapestry.IComponent)var25);
    java.util.Map var29 = var25.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var30 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var30.forgetPage("");
    org.apache.tapestry.engine.IPageSource var33 = var30.getPageSource();
    org.apache.tapestry.engine.IPropertySource var34 = var30.getPropertySource();
    java.util.Collection var35 = var30.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var36 = var30.getComponentMessagesSource();
    var25.attach((org.apache.tapestry.IEngine)var30);
    boolean var38 = var18.equals((java.lang.Object)var30);
    org.apache.tapestry.engine.IComponentClassEnhancer var39 = var30.getComponentClassEnhancer();
    var11.attach((org.apache.tapestry.IEngine)var30);
    var0.setContainer((org.apache.tapestry.IComponent)var11);
    java.util.Collection var42 = var11.getBindingNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test196");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    var6.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var27 = var26.isLeaf();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var31 = var29.equals((java.lang.Object)(short)(-1));
    java.util.Collection var32 = var29.getChildren();
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    boolean var35 = var34.isLeaf();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var39 = var37.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var40 = var37.getParent();
    var34.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var37);
    boolean var42 = var29.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var34);
    boolean var43 = var26.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var34);
    ch.bluepenguin.email.client.MailMessage var44 = new ch.bluepenguin.email.client.MailMessage();
    var44.setBcc("Dummy EmailFacade Impl");
    java.lang.String var47 = var44.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var48 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var48.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var51 = var48.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var52 = var48.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var53 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var54 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53);
    var53.setParentFolderId((java.lang.Integer)1);
    var53.setFullName("hi!");
    var52.setParent(var53);
    var44.setFolder(var53);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var61 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53);
    boolean var62 = var26.equals((java.lang.Object)var53);
    var16.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    boolean var64 = var16.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var65 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var66 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var65);
    ch.bluepenguin.email.client.Folder var67 = new ch.bluepenguin.email.client.Folder();
    var66.setFolder(var67);
    ch.bluepenguin.email.client.Folder var69 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var70 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var69);
    var69.setFullName("hi!");
    var67.setParent(var69);
    var69.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var76 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var77 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var76);
    ch.bluepenguin.email.client.Folder var78 = new ch.bluepenguin.email.client.Folder();
    var77.setFolder(var78);
    org.apache.tapestry.contrib.tree.model.ITreeNode var80 = var77.getParent();
    boolean var81 = var77.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var82 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var69, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var77);
    ch.bluepenguin.email.client.AbstractUniqueID var83 = var69.getUniqueID();
    ch.bluepenguin.email.client.Account var84 = var69.getAccount();
    var69.setName("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var16.setFolder(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test197");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    java.lang.String var3 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var6.setIndex(10);
    var6.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var6.setDepth(0);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    var6.setIndex(0);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var16 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var16.setText("Dummy EmailFacade Impl");
    var16.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var21 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var21.setText("Dummy EmailFacade Impl");
    var21.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var27 = var26.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var29.setIndex(10);
    var29.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var34 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var36 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var37 = var36.getSuppressed();
    var34.setParameters((java.lang.Object[])var37);
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    var34.setComponent((org.apache.tapestry.IComponent)var39);
    var26.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    var34.setStyleClass(",");
    var21.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var46 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var21.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    var16.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var21);
    var6.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var16);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var50 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var6);
    var6.setDepth(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0) null"+ "'", var3.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0) null"+ "'", var27.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test198");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    java.lang.Object var20 = var16.getGlobal();
    java.lang.Object var21 = var16.getGlobal();
    boolean var22 = var1.equals((java.lang.Object)var16);
    org.apache.tapestry.util.io.DataSqueezer var23 = var16.createDataSqueezer();
    org.apache.tapestry.util.pool.Pool var24 = var16.getPool();
    org.apache.tapestry.engine.IPageSource var25 = var16.getPageSource();
    org.apache.tapestry.IResourceResolver var26 = var16.getResourceResolver();
    java.lang.String var27 = var16.toString();
    boolean var28 = var16.isDirty();
    org.apache.tapestry.util.io.DataSqueezer var29 = var16.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test199");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    var23.beginPageRender();
    java.util.Collection var25 = var23.getBindingNames();
    var20.setPage((org.apache.tapestry.IPage)var23);
    org.apache.tapestry.listener.ListenerMap var27 = var23.getListeners();
    org.apache.tapestry.event.ChangeObserver var28 = var23.getChangeObserver();
    var0.setPage((org.apache.tapestry.IPage)var23);
    org.apache.tapestry.IBinding var31 = var0.getBinding("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.util.Map var32 = var0.getComponents();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    java.lang.String var35 = var33.getPageName();
    java.lang.String var36 = var33.toString();
    org.apache.tapestry.IEngine var37 = var33.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var38 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var39 = var38.getBody();
    java.lang.String var40 = var38.getPageName();
    java.lang.String var41 = var38.toString();
    org.apache.tapestry.IEngine var42 = var38.getEngine();
    var33.addBody((org.apache.tapestry.IRender)var38);
    java.util.Locale var44 = var38.getLocale();
    var38.setId("(0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setContainer((org.apache.tapestry.IComponent)var38);
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test200");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var15 = var12.getFolder();
    int var16 = var12.getChildCount();
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.getChildren();
    boolean var28 = var19.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var24);
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var32 = var30.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var33 = var30.getFolder();
    int var34 = var30.getChildCount();
    var24.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var30);
    boolean var36 = var12.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var30);
    boolean var37 = var30.getAllowsChildren();
    boolean var38 = var30.getAllowsChildren();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var39 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var40 = var39.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var41 = var39.getAllMessages();
    ch.bluepenguin.email.client.Folder var42 = var39.getCurrentFolder();
    var30.setFolder(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test201");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    java.lang.String var4 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var5 = var1.getRenderer();
    int var6 = var1.getIndex();
    var1.setLeaf(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test202");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.Folder[] var5 = var0.getAllFolders();
    ch.bluepenguin.email.client.MailMessage[] var6 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var8 = var0.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var9 = var0.getName();
    var0.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=ch.bluepenguin.email.client.service.EmailFacadeException");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var12 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var13 = var12.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var14 = var12.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var15 = var12.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var15, "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ", "(1) null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test203");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var10 = var9.getPerson();
    var2.setAccount(var9);
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var14 = var13.isLeaf();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var16.getParent();
    var13.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    java.util.Collection var21 = var16.children();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    java.util.Collection var26 = var23.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    var27.addComponent((org.apache.tapestry.IComponent)var30);
    java.util.Map var34 = var30.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var35 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var35.forgetPage("");
    org.apache.tapestry.engine.IPageSource var38 = var35.getPageSource();
    org.apache.tapestry.engine.IPropertySource var39 = var35.getPropertySource();
    java.util.Collection var40 = var35.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var41 = var35.getComponentMessagesSource();
    var30.attach((org.apache.tapestry.IEngine)var35);
    boolean var43 = var23.equals((java.lang.Object)var35);
    ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper var44 = new ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper();
    boolean var45 = var23.equals((java.lang.Object)var44);
    boolean var46 = var16.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var23);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var47 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var2, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    ch.bluepenguin.email.client.Folder var48 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var49 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var48);
    boolean var51 = var49.equals((java.lang.Object)(short)(-1));
    java.util.Collection var52 = var49.getChildren();
    ch.bluepenguin.email.client.Folder var53 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var54 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53);
    boolean var55 = var54.isLeaf();
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    boolean var59 = var57.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var60 = var57.getParent();
    var54.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var57);
    ch.bluepenguin.email.client.Folder var62 = var54.getFolder();
    var49.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var54);
    int var64 = var49.getChildCount();
    boolean var65 = var49.getAllowsChildren();
    boolean var66 = var16.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var49);
    java.util.Collection var67 = var49.children();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test204");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var1 = var0.getSeparator();
    ch.bluepenguin.email.client.tapestry.Home var2 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var3 = var2.getBody();
    int var4 = var2.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    var2.addComponent((org.apache.tapestry.IComponent)var5);
    java.lang.String var9 = var2.getIdPath();
    org.apache.tapestry.ILocation var10 = var2.getLocation();
    org.apache.tapestry.IEngine var11 = var2.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var12 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var12.setSeparator("");
    java.util.Locale var15 = var12.getMyLocale();
    var2.setLocale(var15);
    var0.setMyLocale(var15);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    java.util.Collection var22 = var19.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    int var25 = var23.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    int var28 = var26.getBodyCount();
    var23.addComponent((org.apache.tapestry.IComponent)var26);
    java.util.Map var30 = var26.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var31 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var31.forgetPage("");
    org.apache.tapestry.engine.IPageSource var34 = var31.getPageSource();
    org.apache.tapestry.engine.IPropertySource var35 = var31.getPropertySource();
    java.util.Collection var36 = var31.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var37 = var31.getComponentMessagesSource();
    var26.attach((org.apache.tapestry.IEngine)var31);
    boolean var39 = var19.equals((java.lang.Object)var31);
    org.apache.tapestry.engine.IComponentClassEnhancer var40 = var31.getComponentClassEnhancer();
    java.lang.String var41 = var31.getContextPath();
    boolean var42 = var31.getHasVisit();
    org.apache.tapestry.listener.ListenerMap var43 = var31.getListeners();
    java.util.Locale var44 = var31.getLocale();
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    var45.beginPageRender();
    java.lang.String var47 = var45.toString();
    ch.bluepenguin.email.client.tapestry.SpringEngine var48 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var48.forgetPage("");
    org.apache.tapestry.engine.IPageSource var51 = var48.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var52 = var48.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var53 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var53.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var56 = var53.getMyLocale();
    var48.setLocale(var56);
    var45.setLocale(var56);
    var31.setLocale(var56);
    var0.setMyLocale(var56);
    ch.bluepenguin.email.client.tapestry.SpringEngine var61 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var62 = var61.getVisit();
    java.lang.String var63 = var61.toString();
    boolean var64 = var61.isDirty();
    org.apache.tapestry.IResourceResolver var65 = var61.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var66 = var61.getListeners();
    boolean var67 = var61.getHasVisit();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var68 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var68.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var71 = new ch.bluepenguin.email.client.MailMessage();
    var71.setBcc("Dummy EmailFacade Impl");
    var71.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var76 = var71.getSentDate();
    ch.bluepenguin.email.client.MailMessage var77 = new ch.bluepenguin.email.client.MailMessage();
    var77.setBcc("Dummy EmailFacade Impl");
    var77.setTechnicalID(100);
    java.lang.String var82 = var77.getReplyTo();
    java.lang.String[] var84 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var77.setCc(var84);
    java.lang.String[] var87 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var77.setBcc(var87);
    var71.setCc(var87);
    java.lang.String var90 = var68.returnStringList(var87);
    java.util.Locale var91 = var68.getMyLocale();
    java.util.Locale var92 = var68.getMyLocale();
    var61.setLocale(var92);
    var0.setMyLocale(var92);
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ","+ "'", var1.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "Dummy EmailFacade Impl"+ "'", var90.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test205");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setReplyTo("Default EmailFacade Impl");
    java.util.Date var21 = var0.getSentDate();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Date var24 = var0.getSentDate();
    java.lang.String[] var25 = var0.getBcc();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setParentFolderId((java.lang.Integer)1);
    var26.setFullName("Dummy EmailFacade Impl");
    java.lang.String var32 = var26.getFullName();
    var0.setFolder(var26);
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var37 = var35.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var38 = var35.getParent();
    ch.bluepenguin.email.client.Folder var39 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var40 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var39);
    boolean var42 = var40.equals((java.lang.Object)(short)(-1));
    java.util.Collection var43 = var40.getChildren();
    boolean var44 = var35.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var40);
    java.util.Collection var45 = var35.getChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    ch.bluepenguin.email.client.Folder var47 = var35.getFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Dummy EmailFacade Impl"+ "'", var32.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test206");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var3 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var3.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var3.reportException("", (java.lang.Throwable)var7);
    var0.reportException("hi!", (java.lang.Throwable)var7);
    org.apache.tapestry.engine.IPageSource var10 = var0.getPageSource();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var0.getSpecification();
    boolean var12 = var0.isResetServiceEnabled();
    org.apache.tapestry.engine.ITemplateSource var13 = var0.getTemplateSource();
    org.apache.tapestry.engine.IPageSource var14 = var0.getPageSource();
    boolean var15 = var0.isStateful();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test207");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var13 = var12.getPageSource();
    java.lang.String var14 = var12.toString();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    var15.addComponent((org.apache.tapestry.IComponent)var18);
    java.util.Collection var22 = var18.getBindingNames();
    var18.beginPageRender();
    var12.setVisit((java.lang.Object)var18);
    boolean var25 = var12.isResetServiceEnabled();
    var0.attach((org.apache.tapestry.IEngine)var12);
    java.lang.String var27 = var0.getExtendedId();
    org.apache.tapestry.event.ChangeObserver var28 = var0.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test208");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    var4.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.children();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    var29.setFullName("hi!");
    var29.setFullName("Dummy EmailFacade Impl");
    var25.setFolder(var29);
    ch.bluepenguin.email.client.Account var36 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var36.getUniqueID();
    var29.setAccount(var36);
    ch.bluepenguin.email.client.Person var39 = var36.getPerson();
    var17.setAccount(var36);
    var4.setAccount(var36);
    ch.bluepenguin.email.client.Person var42 = new ch.bluepenguin.email.client.Person();
    java.lang.String var43 = var42.getFirstname();
    var42.setNickname("");
    var42.setLastname(",");
    var36.setPerson(var42);
    var42.setReserve("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.AbstractUniqueID var51 = var42.getUniqueID();
    java.lang.String var52 = var42.getReserve();
    var42.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var42.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var42.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=,; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var52.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test209");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    java.lang.String var5 = var0.getContextPath();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var9 = var8.isLeaf();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var14 = var11.getParent();
    var8.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    boolean var19 = var17.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var20 = var17.getParent();
    var8.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var17);
    boolean var22 = var8.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var23 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var23.forgetPage("");
    org.apache.tapestry.engine.IPageSource var26 = var23.getPageSource();
    java.lang.Object var27 = var23.getGlobal();
    java.lang.Object var28 = var23.getGlobal();
    boolean var29 = var8.equals((java.lang.Object)var23);
    org.apache.tapestry.util.io.DataSqueezer var30 = var23.createDataSqueezer();
    org.apache.tapestry.util.pool.Pool var31 = var23.getPool();
    org.apache.tapestry.engine.IPageSource var32 = var23.getPageSource();
    boolean var33 = var23.isStateful();
    ch.bluepenguin.email.client.service.EmailFacadeException var35 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var36 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var37 = var36.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var39 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var40 = var39.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var43 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var39.reportException("", (java.lang.Throwable)var43);
    var36.reportException("hi!", (java.lang.Throwable)var43);
    var35.setTechnicalException((java.lang.Exception)var43);
    ch.bluepenguin.email.client.tapestry.SpringEngine var47 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var48 = var47.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var51 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var47.reportException("", (java.lang.Throwable)var51);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var54 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var55 = var54.getSuppressed();
    var51.addSuppressed((java.lang.Throwable)var54);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var58 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var59 = var58.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var60 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var61 = var60.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var63 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var64 = var63.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var67 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var63.reportException("", (java.lang.Throwable)var67);
    var60.reportException("hi!", (java.lang.Throwable)var67);
    var58.addSuppressed((java.lang.Throwable)var67);
    var51.addSuppressed((java.lang.Throwable)var67);
    var35.setTechnicalException((java.lang.Exception)var67);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var74 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var76 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var77 = var76.getSuppressed();
    java.lang.Throwable[] var78 = var76.getSuppressed();
    var74.addSuppressed((java.lang.Throwable)var76);
    var35.setTechnicalException((java.lang.Exception)var74);
    java.lang.Exception var81 = var35.getTechnicalException();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var83 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("(0) null\n   (0) null");
    var35.setTechnicalException((java.lang.Exception)var83);
    var23.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null", (java.lang.Throwable)var83);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var87 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var83.addSuppressed((java.lang.Throwable)var87);
    var0.reportException("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]", (java.lang.Throwable)var87);
    java.lang.Object var90 = var0.getGlobal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test210");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var19 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var19.setIndex(10);
    java.lang.String var22 = var19.getName();
    var19.setDepth(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var25 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var26 = var0.getRootList();
    java.lang.String var27 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0) null"+ "'", var27.equals("(0) null"));

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test211");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    java.lang.String var24 = var0.getReplyTo();
    java.lang.String[] var25 = var0.getBcc();
    java.util.Date var26 = var0.getSentDate();
    java.lang.String var27 = var0.getText();
    var0.setBcc("SimpleMailMessage: from=hi!; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test212");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(true);
    boolean var5 = var0.isDirty();
    java.util.logging.Logger var6 = var0.getLogger();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var7 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var8 = var7.getSender();
    boolean var9 = var7.isDirty();
    org.springframework.mail.MailSender var10 = var7.getSender();
    ch.bluepenguin.email.client.cache.MailCache var12 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var13 = var12.getCache();
    var7.setCache(var12);
    var0.setCache(var12);
    java.util.logging.Logger var16 = var0.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var17 = var0.getCache();
    java.lang.String var18 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Default EmailFacade Impl"+ "'", var18.equals("Default EmailFacade Impl"));

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test213");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null\n   (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var5 = var0.getUniqueID();
    java.lang.String var6 = var0.getText();
    java.lang.String[] var7 = var0.getTo();
    java.lang.String[] var8 = var0.getTo();
    java.lang.String var9 = var0.getText();
    var0.setTechnicalID((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test214");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    var4.setName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var4.getUniqueID();
    var4.setParentFolderId((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test215");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    var0.forgetPage(",");
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    java.lang.Object var6 = var0.getGlobal();
    boolean var7 = var0.isStateful();
    var0.forgetPage("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test216");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var4 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var0.reportException("", (java.lang.Throwable)var4);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var4.addSuppressed((java.lang.Throwable)var7);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var14 = var13.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var17 = var16.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var20 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var16.reportException("", (java.lang.Throwable)var20);
    var13.reportException("hi!", (java.lang.Throwable)var20);
    var11.addSuppressed((java.lang.Throwable)var20);
    var4.addSuppressed((java.lang.Throwable)var20);
    java.lang.String var25 = var4.toString();
    java.lang.String var26 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var25.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var26.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test217");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    java.util.Collection var12 = var9.getChildren();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var15 = var14.isLeaf();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    boolean var19 = var17.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var20 = var17.getParent();
    var14.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var17);
    boolean var22 = var9.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    boolean var23 = var6.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    ch.bluepenguin.email.client.MailMessage var24 = new ch.bluepenguin.email.client.MailMessage();
    var24.setBcc("Dummy EmailFacade Impl");
    java.lang.String var27 = var24.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var28 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var28.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var31 = var28.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var32 = var28.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    var33.setParentFolderId((java.lang.Integer)1);
    var33.setFullName("hi!");
    var32.setParent(var33);
    var24.setFolder(var33);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    boolean var42 = var6.equals((java.lang.Object)var33);
    java.lang.String var43 = var33.getFullName();
    var0.setFolder(var33);
    java.lang.String[] var45 = var0.getTo();
    java.lang.String var46 = var0.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test218");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    int var27 = var0.getTechnicalID();
    java.lang.String[] var28 = var0.getCc();
    var0.setFrom("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var32 = var31.toString();
    ch.bluepenguin.email.client.Folder var33 = var31.getFolder();
    java.util.Date var34 = var31.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var35 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var36 = var35.getSpecification();
    java.lang.Object var37 = var35.getGlobal();
    java.lang.Object var38 = var35.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var40 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var41 = var40.getParent();
    ch.bluepenguin.email.client.MailMessage var42 = new ch.bluepenguin.email.client.MailMessage();
    var42.setBcc("Dummy EmailFacade Impl");
    var42.setTechnicalID(100);
    var42.setText("hi!");
    var40.setContained((java.lang.Object)var42);
    var35.setVisit((java.lang.Object)var42);
    java.lang.String var51 = var42.getText();
    var31.copyTo((org.springframework.mail.MailMessage)var42);
    java.lang.String var53 = var42.getFrom();
    var0.copyTo((org.springframework.mail.MailMessage)var42);
    ch.bluepenguin.email.client.AbstractUniqueID var55 = var0.getUniqueID();
    ch.bluepenguin.email.client.Folder var56 = var0.getFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var32.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test219");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    boolean var3 = var0.getHasVisit();
    org.apache.tapestry.asset.ResourceChecksumSource var4 = var0.getResourceChecksumSource();
    org.apache.tapestry.engine.ITemplateSource var5 = var0.getTemplateSource();
    org.apache.tapestry.util.io.DataSqueezer var6 = var0.createDataSqueezer();
    org.apache.tapestry.asset.ResourceChecksumSource var7 = var0.getResourceChecksumSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test220");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    java.lang.String var12 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    var16.beginPageRender();
    java.util.Collection var18 = var16.getBindingNames();
    var13.setPage((org.apache.tapestry.IPage)var16);
    org.apache.tapestry.listener.ListenerMap var20 = var16.getListeners();
    int var21 = var16.getBodyCount();
    var16.endPageRender();
    java.lang.String var23 = var16.getExtendedId();
    java.lang.String var24 = var16.getPageName();
    var0.setPage((org.apache.tapestry.IPage)var16);
    java.lang.String var26 = var0.getPageName();
    org.apache.tapestry.IRender[] var27 = var0.getBody();
    org.apache.tapestry.spec.IComponentSpecification var28 = var0.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var30.setParent((java.lang.Object)100L);
    int var33 = var30.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var30);
    boolean var35 = var34.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var35);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var39 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    var37.setParameters((java.lang.Object[])var40);
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    var37.setComponent((org.apache.tapestry.IComponent)var42);
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var46 = var45.getBody();
    int var47 = var45.getBodyCount();
    var45.setPageName("");
    var42.addBody((org.apache.tapestry.IRender)var45);
    java.util.Collection var51 = var45.getBindingNames();
    org.apache.tapestry.ILocation var52 = var45.getLocation();
    var36.setContained((java.lang.Object)var45);
    org.apache.tapestry.IRequestCycle var54 = var45.getRequestCycle();
    ch.bluepenguin.email.client.tapestry.Home var55 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var56 = var55.getBody();
    int var57 = var55.getBodyCount();
    org.apache.tapestry.IAsset var59 = var55.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var60 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var62 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var63 = var62.getSuppressed();
    var60.setParameters((java.lang.Object[])var63);
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    var60.setComponent((org.apache.tapestry.IComponent)var65);
    ch.bluepenguin.email.client.tapestry.Home var68 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var69 = var68.getBody();
    int var70 = var68.getBodyCount();
    var68.setPageName("");
    var65.addBody((org.apache.tapestry.IRender)var68);
    var55.setContainer((org.apache.tapestry.IComponent)var68);
    ch.bluepenguin.email.client.tapestry.Home var75 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var76 = var75.getBody();
    int var77 = var75.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var78 = new ch.bluepenguin.email.client.tapestry.Home();
    var78.beginPageRender();
    java.util.Collection var80 = var78.getBindingNames();
    var75.setPage((org.apache.tapestry.IPage)var78);
    org.apache.tapestry.listener.ListenerMap var82 = var78.getListeners();
    org.apache.tapestry.event.ChangeObserver var83 = var78.getChangeObserver();
    var55.setPage((org.apache.tapestry.IPage)var78);
    var55.setPageName("(0) null\n   (0) null\n   (0) null");
    var45.setPage((org.apache.tapestry.IPage)var55);
    var0.addComponent((org.apache.tapestry.IComponent)var55);
    java.util.Locale var89 = var55.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test221");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    java.lang.String var7 = var5.getPageName();
    java.lang.String var8 = var5.toString();
    org.apache.tapestry.IEngine var9 = var5.getEngine();
    var0.addBody((org.apache.tapestry.IRender)var5);
    java.util.Locale var11 = var5.getLocale();
    var5.setId("(0) null");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var14 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    var14.setParameters((java.lang.Object[])var17);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    var14.setComponent((org.apache.tapestry.IComponent)var19);
    var19.setId("Dummy EmailFacade Impl");
    int var24 = var19.getBodyCount();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    java.util.Collection var29 = var26.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    var30.addComponent((org.apache.tapestry.IComponent)var33);
    java.util.Map var37 = var33.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var38 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var38.forgetPage("");
    org.apache.tapestry.engine.IPageSource var41 = var38.getPageSource();
    org.apache.tapestry.engine.IPropertySource var42 = var38.getPropertySource();
    java.util.Collection var43 = var38.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var44 = var38.getComponentMessagesSource();
    var33.attach((org.apache.tapestry.IEngine)var38);
    boolean var46 = var26.equals((java.lang.Object)var38);
    org.apache.tapestry.engine.IComponentClassEnhancer var47 = var38.getComponentClassEnhancer();
    var19.attach((org.apache.tapestry.IEngine)var38);
    var19.beginPageRender();
    org.apache.tapestry.IComponent var50 = var19.getContainer();
    var5.setPage((org.apache.tapestry.IPage)var19);
    java.util.Locale var52 = var5.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test222");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var26.setName("");
    boolean var29 = var26.isLeaf();
    java.lang.Object var30 = var26.getParent();
    boolean var31 = var26.isLeaf();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    java.lang.String var33 = var0.displayMenuStructure();
    ch.bluepenguin.email.client.tapestry.SpringEngine var34 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var35 = var34.getVisit();
    java.lang.String var36 = var34.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var34.setVisit((java.lang.Object)var37);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var39 = var37.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var40 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var41 = var40.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var43 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var43.setIndex(10);
    var43.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var48 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var50 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var51 = var50.getSuppressed();
    var48.setParameters((java.lang.Object[])var51);
    ch.bluepenguin.email.client.tapestry.Home var53 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var54 = var53.getBody();
    var48.setComponent((org.apache.tapestry.IComponent)var53);
    var40.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var43, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var48);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var58 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var59 = var58.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var60 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var58);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var61 = var60.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var62 = var60.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var63 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var40.addMenuItem(var62, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var63);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var66 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var67 = var66.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var68 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var66);
    java.lang.String var69 = var66.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var70 = var40.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var66);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var71 = var37.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var66);
    var66.setIndex((-1));
    ch.bluepenguin.email.client.Folder var74 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var75 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var74);
    boolean var76 = var75.isLeaf();
    ch.bluepenguin.email.client.Folder var77 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var78 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var77);
    boolean var80 = var78.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var81 = var78.getParent();
    var75.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var78);
    ch.bluepenguin.email.client.Folder var83 = var75.getFolder();
    var66.setContained((java.lang.Object)var75);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0) null\n   (0) null\n   (0) null\n   (0) "+ "'", var33.equals("(0) null\n   (0) null\n   (0) null\n   (0) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0) null"+ "'", var41.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test223");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    var0.setFrom("hi!");
    java.util.Date var4 = var0.getSentDate();
    java.lang.String[] var5 = var0.getBcc();
    java.lang.String var6 = var0.getReplyTo();
    java.lang.String var7 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SimpleMailMessage: from=hi!; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var7.equals("SimpleMailMessage: from=hi!; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test224");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    java.lang.String var15 = var3.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var16 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var17 = var16.displayMenuStructure();
    java.util.Iterator var18 = var16.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var19 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var22 = var21.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var23 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21);
    var19.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var25 = var16.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21);
    java.lang.String var26 = var21.getName();
    var21.setIndex(1);
    boolean var29 = var21.isLeaf();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var30.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var33 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var33.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var36 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var36.setText("Dummy EmailFacade Impl");
    var36.setText(",");
    var33.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var36);
    var30.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var33);
    var33.setText("hi!");
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var21, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var33);
    var33.setStyleClass("");
    var33.setElement("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var33.setStyleClass("(0) null\n   (0) null\n   (0) ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null\n   (0) null"+ "'", var15.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0) null"+ "'", var17.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test225");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setReplyTo("Default EmailFacade Impl");
    java.util.Date var21 = var0.getSentDate();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Date var24 = var0.getSentDate();
    java.lang.String[] var25 = var0.getTo();
    var0.setFrom("hi!");
    java.lang.String var28 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Default EmailFacade Impl"+ "'", var28.equals("Default EmailFacade Impl"));

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test226");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.email.client.cache.MailCache var10 = var6.getCache();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var11 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var13 = new ch.bluepenguin.email.client.cache.MailCache("");
    var11.setCache(var13);
    var6.setCache(var13);
    boolean var16 = var6.isDirty();
    ch.bluepenguin.email.client.cache.MailCache var17 = var6.getCache();
    java.util.logging.Logger var18 = var6.getLogger();
    org.springframework.mail.MailSender var19 = var6.getSender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test227");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    java.util.Collection var5 = var0.getActivePageNames();
    java.lang.String var6 = var0.toString();
    org.apache.tapestry.util.io.DataSqueezer var7 = var0.getDataSqueezer();
    java.lang.Object var8 = var0.getGlobal();
    java.lang.Object var9 = var0.getVisit();
    ch.bluepenguin.email.client.tapestry.SpringEngine var11 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var12 = var11.getPageSource();
    java.lang.String var13 = var11.toString();
    org.apache.tapestry.IResourceResolver var14 = var11.getResourceResolver();
    org.apache.tapestry.util.io.DataSqueezer var15 = var11.createDataSqueezer();
    org.apache.tapestry.util.io.DataSqueezer var16 = var11.createDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var11.reportException("(0) null", (java.lang.Throwable)var19);
    var0.reportException("(0) null\n   (0) null\n   (0) null", (java.lang.Throwable)var19);
    org.apache.tapestry.engine.IPageSource var22 = var0.getPageSource();
    java.lang.String var23 = var0.getServletPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test228");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    java.lang.Object var6 = var4.getGlobal();
    java.lang.Object var7 = var4.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var10 = var9.getParent();
    ch.bluepenguin.email.client.MailMessage var11 = new ch.bluepenguin.email.client.MailMessage();
    var11.setBcc("Dummy EmailFacade Impl");
    var11.setTechnicalID(100);
    var11.setText("hi!");
    var9.setContained((java.lang.Object)var11);
    var4.setVisit((java.lang.Object)var11);
    java.lang.String var20 = var11.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var11);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setSubject("hi!");
    var0.copyTo((org.springframework.mail.MailMessage)var22);
    ch.bluepenguin.email.client.MailMessage var28 = new ch.bluepenguin.email.client.MailMessage();
    var28.setBcc("Dummy EmailFacade Impl");
    var28.setSubject("hi!");
    java.lang.String var33 = var28.getSubject();
    java.lang.String[] var34 = var28.getCc();
    ch.bluepenguin.email.client.MailMessage var35 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var36 = var35.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var37 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var37.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var41 = new java.lang.String[] { "(0) null"};
    java.lang.String var42 = var37.returnStringList(var41);
    java.util.Locale var43 = var37.getMyLocale();
    java.util.Locale var44 = var37.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var45 = new ch.bluepenguin.email.client.MailMessage();
    var45.setBcc("Dummy EmailFacade Impl");
    var45.setTechnicalID(100);
    java.lang.String var50 = var45.getReplyTo();
    java.lang.String[] var52 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var45.setCc(var52);
    java.lang.String[] var55 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var45.setBcc(var55);
    ch.bluepenguin.email.client.MailMessage var57 = new ch.bluepenguin.email.client.MailMessage();
    var57.setBcc("Dummy EmailFacade Impl");
    var57.setTechnicalID(100);
    java.lang.String var62 = var57.getReplyTo();
    java.lang.String[] var64 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var57.setCc(var64);
    java.lang.String[] var67 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var57.setBcc(var67);
    var45.setBcc(var67);
    java.lang.String[] var70 = var45.getBcc();
    java.lang.String var71 = var37.returnStringList(var70);
    var35.setBcc(var70);
    var28.setTo(var70);
    var22.setCc(var70);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var75 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var76 = var75.getRootList();
    var75.checkMenuModelHealth();
    boolean var78 = var22.equals((java.lang.Object)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var36.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0) null"+ "'", var42.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Dummy EmailFacade Impl"+ "'", var71.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test229");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    org.apache.tapestry.util.pool.Pool var10 = var0.getPool();
    boolean var11 = var0.isResetServiceEnabled();
    org.apache.tapestry.util.io.DataSqueezer var12 = var0.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test230");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    java.lang.Object var6 = var4.getGlobal();
    java.lang.Object var7 = var4.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var10 = var9.getParent();
    ch.bluepenguin.email.client.MailMessage var11 = new ch.bluepenguin.email.client.MailMessage();
    var11.setBcc("Dummy EmailFacade Impl");
    var11.setTechnicalID(100);
    var11.setText("hi!");
    var9.setContained((java.lang.Object)var11);
    var4.setVisit((java.lang.Object)var11);
    java.lang.String var20 = var11.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var11);
    var11.setText("ch.bluepenguin.email.client.service.EmailFacadeException");
    ch.bluepenguin.email.client.MailMessage var24 = new ch.bluepenguin.email.client.MailMessage();
    var24.setCc("hi!");
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    boolean var30 = var28.equals((java.lang.Object)(short)(-1));
    java.util.Collection var31 = var28.children();
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    var32.setFullName("hi!");
    var32.setFullName("Dummy EmailFacade Impl");
    var28.setFolder(var32);
    ch.bluepenguin.email.client.Account var39 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var40 = var39.getUniqueID();
    var32.setAccount(var39);
    boolean var42 = var24.equals((java.lang.Object)var39);
    var24.setReplyTo("Default EmailFacade Impl");
    java.util.Date var45 = var24.getSentDate();
    var24.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Date var48 = var24.getSentDate();
    java.lang.String[] var49 = var24.getTo();
    var24.setFrom("hi!");
    java.lang.String[] var52 = var24.getCc();
    var11.setCc(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test231");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    boolean var11 = var6.isLeaf();
    boolean var12 = var6.isLeaf();
    java.util.Collection var13 = var6.children();
    org.apache.tapestry.contrib.tree.model.ITreeNode var14 = var6.getParent();
    boolean var15 = var6.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test232");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    org.apache.tapestry.IEngine var8 = var5.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var9 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var10 = var9.getBody();
    int var11 = var9.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    var9.addComponent((org.apache.tapestry.IComponent)var12);
    var9.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    int var19 = var17.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    var17.addComponent((org.apache.tapestry.IComponent)var20);
    java.util.Map var24 = var20.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var25.forgetPage("");
    org.apache.tapestry.engine.IPageSource var28 = var25.getPageSource();
    org.apache.tapestry.engine.IPropertySource var29 = var25.getPropertySource();
    java.util.Collection var30 = var25.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var31 = var25.getComponentMessagesSource();
    var20.attach((org.apache.tapestry.IEngine)var25);
    var9.addBody((org.apache.tapestry.IRender)var20);
    var5.addComponent((org.apache.tapestry.IComponent)var9);
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    int var37 = var35.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var38 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var39 = var38.getBody();
    int var40 = var38.getBodyCount();
    var35.addComponent((org.apache.tapestry.IComponent)var38);
    java.lang.String var42 = var35.getIdPath();
    org.apache.tapestry.ILocation var43 = var35.getLocation();
    var9.setPage((org.apache.tapestry.IPage)var35);
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var46 = var45.getBody();
    int var47 = var45.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    var48.beginPageRender();
    java.util.Collection var50 = var48.getBindingNames();
    var45.setPage((org.apache.tapestry.IPage)var48);
    org.apache.tapestry.INamespace var52 = var45.getNamespace();
    ch.bluepenguin.email.client.tapestry.Home var53 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var54 = var53.getBody();
    int var55 = var53.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var56 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var57 = var56.getBody();
    int var58 = var56.getBodyCount();
    var53.addComponent((org.apache.tapestry.IComponent)var56);
    java.lang.String var60 = var53.getIdPath();
    org.apache.tapestry.ILocation var61 = var53.getLocation();
    org.apache.tapestry.IEngine var62 = var53.getEngine();
    var53.beginPageRender();
    var45.addComponent((org.apache.tapestry.IComponent)var53);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var65 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var67 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var68 = var67.getSuppressed();
    var65.setParameters((java.lang.Object[])var68);
    ch.bluepenguin.email.client.tapestry.Home var70 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var71 = var70.getBody();
    var65.setComponent((org.apache.tapestry.IComponent)var70);
    ch.bluepenguin.email.client.tapestry.Home var73 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var74 = var73.getBody();
    int var75 = var73.getBodyCount();
    var73.setPageName("");
    var70.addBody((org.apache.tapestry.IRender)var73);
    var53.addComponent((org.apache.tapestry.IComponent)var73);
    var35.setContainer((org.apache.tapestry.IComponent)var53);
    boolean var81 = var1.equals((java.lang.Object)var53);
    var53.detach();
    org.apache.tapestry.event.ChangeObserver var83 = var53.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test233");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var5 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    var7.setFolder(var8);
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    var10.setFullName("hi!");
    var8.setParent(var10);
    var10.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    var18.setFolder(var19);
    org.apache.tapestry.contrib.tree.model.ITreeNode var21 = var18.getParent();
    boolean var22 = var18.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    boolean var25 = var24.isLeaf();
    java.util.Collection var26 = var24.getChildren();
    ch.bluepenguin.email.client.Folder var27 = var24.getFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test234");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(true);
    java.util.logging.Logger var5 = var0.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var6 = var0.getCache();
    java.lang.String var7 = var0.getName();
    var0.setDirty(true);
    java.util.logging.Logger var10 = var0.getLogger();
    var0.setDirty(false);
    ch.bluepenguin.email.client.cache.MailCache var13 = var0.getCache();
    var0.setDirty(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Default EmailFacade Impl"+ "'", var7.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test235");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IEngine var3 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    var4.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.util.Map var19 = var15.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var20 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var20.forgetPage("");
    org.apache.tapestry.engine.IPageSource var23 = var20.getPageSource();
    org.apache.tapestry.engine.IPropertySource var24 = var20.getPropertySource();
    java.util.Collection var25 = var20.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var26 = var20.getComponentMessagesSource();
    var15.attach((org.apache.tapestry.IEngine)var20);
    var4.addBody((org.apache.tapestry.IRender)var15);
    var0.addComponent((org.apache.tapestry.IComponent)var4);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    var30.addComponent((org.apache.tapestry.IComponent)var33);
    java.lang.String var37 = var30.getIdPath();
    org.apache.tapestry.ILocation var38 = var30.getLocation();
    var4.setPage((org.apache.tapestry.IPage)var30);
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var41 = var40.getBody();
    int var42 = var40.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var43 = new ch.bluepenguin.email.client.tapestry.Home();
    var43.beginPageRender();
    java.util.Collection var45 = var43.getBindingNames();
    var40.setPage((org.apache.tapestry.IPage)var43);
    org.apache.tapestry.INamespace var47 = var40.getNamespace();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    var48.addComponent((org.apache.tapestry.IComponent)var51);
    java.lang.String var55 = var48.getIdPath();
    org.apache.tapestry.ILocation var56 = var48.getLocation();
    org.apache.tapestry.IEngine var57 = var48.getEngine();
    var48.beginPageRender();
    var40.addComponent((org.apache.tapestry.IComponent)var48);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var60 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var62 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var63 = var62.getSuppressed();
    var60.setParameters((java.lang.Object[])var63);
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    var60.setComponent((org.apache.tapestry.IComponent)var65);
    ch.bluepenguin.email.client.tapestry.Home var68 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var69 = var68.getBody();
    int var70 = var68.getBodyCount();
    var68.setPageName("");
    var65.addBody((org.apache.tapestry.IRender)var68);
    var48.addComponent((org.apache.tapestry.IComponent)var68);
    var30.setContainer((org.apache.tapestry.IComponent)var48);
    var48.setId("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]; to=; cc=; bcc=ch.bluepenguin.email.client.service.EmailFacadeException; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test236");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var6 = var5.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setIndex(10);
    var8.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    var5.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var13.setStyleClass(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    var25.addComponent((org.apache.tapestry.IComponent)var28);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var32 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var32.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var35 = var32.getMyLocale();
    var28.setLocale(var35);
    var13.setComponent((org.apache.tapestry.IComponent)var28);
    org.apache.tapestry.IComponent var38 = var28.getContainer();
    org.apache.tapestry.IAsset var40 = var28.getAsset("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IRender[] var41 = var28.getBody();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var43 = var28.getComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; text=hi!");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test237");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("(0) null\n   (0) null");
    java.lang.String var5 = var0.getName();
    ch.bluepenguin.email.client.MailMessage[] var7 = var0.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=Dummy EmailFacade Impl; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Dummy EmailFacade Impl"+ "'", var5.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test238");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IEngine var3 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    var4.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.util.Map var19 = var15.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var20 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var20.forgetPage("");
    org.apache.tapestry.engine.IPageSource var23 = var20.getPageSource();
    org.apache.tapestry.engine.IPropertySource var24 = var20.getPropertySource();
    java.util.Collection var25 = var20.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var26 = var20.getComponentMessagesSource();
    var15.attach((org.apache.tapestry.IEngine)var20);
    var4.addBody((org.apache.tapestry.IRender)var15);
    var0.addComponent((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.listener.ListenerMap var30 = var4.getListeners();
    java.lang.String var31 = var4.getExtendedId();
    org.apache.tapestry.IBinding var33 = var4.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var34 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var36 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var37 = var36.getSuppressed();
    var34.setParameters((java.lang.Object[])var37);
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    var34.setComponent((org.apache.tapestry.IComponent)var39);
    var39.setId("Dummy EmailFacade Impl");
    int var44 = var39.getBodyCount();
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    boolean var48 = var46.equals((java.lang.Object)(short)(-1));
    java.util.Collection var49 = var46.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var50 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var51 = var50.getBody();
    int var52 = var50.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var53 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var54 = var53.getBody();
    int var55 = var53.getBodyCount();
    var50.addComponent((org.apache.tapestry.IComponent)var53);
    java.util.Map var57 = var53.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var58 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var58.forgetPage("");
    org.apache.tapestry.engine.IPageSource var61 = var58.getPageSource();
    org.apache.tapestry.engine.IPropertySource var62 = var58.getPropertySource();
    java.util.Collection var63 = var58.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var64 = var58.getComponentMessagesSource();
    var53.attach((org.apache.tapestry.IEngine)var58);
    boolean var66 = var46.equals((java.lang.Object)var58);
    org.apache.tapestry.engine.IComponentClassEnhancer var67 = var58.getComponentClassEnhancer();
    var39.attach((org.apache.tapestry.IEngine)var58);
    var39.beginPageRender();
    java.lang.String var70 = var39.toString();
    ch.bluepenguin.email.client.tapestry.Home var71 = new ch.bluepenguin.email.client.tapestry.Home();
    var71.beginPageRender();
    java.util.Collection var73 = var71.getBindingNames();
    org.apache.tapestry.IAsset var75 = var71.getAsset(",");
    java.lang.String var76 = var71.toString();
    org.apache.tapestry.IAsset var78 = var71.getAsset(",");
    ch.bluepenguin.email.client.tapestry.SpringEngine var79 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var79.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var82 = var79.getPropertySource();
    org.apache.tapestry.asset.ResourceChecksumSource var83 = var79.getResourceChecksumSource();
    var71.attach((org.apache.tapestry.IEngine)var79);
    var39.addBody((org.apache.tapestry.IRender)var71);
    var4.addBody((org.apache.tapestry.IRender)var39);
    org.apache.tapestry.ILocation var87 = var39.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test239");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getText();
    ch.bluepenguin.email.client.MailMessage var6 = new ch.bluepenguin.email.client.MailMessage();
    var6.setBcc("Dummy EmailFacade Impl");
    var6.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var11 = var6.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var12 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var13 = var12.getReader();
    ch.bluepenguin.email.client.cache.MailCache var14 = var12.getCache();
    boolean var15 = var6.equals((java.lang.Object)var12);
    java.lang.String var16 = var6.getFrom();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setCc("hi!");
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    boolean var23 = var21.equals((java.lang.Object)(short)(-1));
    java.util.Collection var24 = var21.children();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    var25.setFullName("hi!");
    var25.setFullName("Dummy EmailFacade Impl");
    var21.setFolder(var25);
    ch.bluepenguin.email.client.Account var32 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var33 = var32.getUniqueID();
    var25.setAccount(var32);
    boolean var35 = var17.equals((java.lang.Object)var32);
    var17.setReplyTo("Default EmailFacade Impl");
    java.util.Date var38 = var17.getSentDate();
    var17.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Date var41 = var17.getSentDate();
    java.lang.String[] var42 = var17.getBcc();
    var6.setBcc(var42);
    java.lang.String var44 = var6.getReplyTo();
    var6.setTo("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=,");
    var0.copyTo((org.springframework.mail.MailMessage)var6);
    java.lang.String var48 = var6.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Dummy EmailFacade Impl"+ "'", var44.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test240");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.setPageName("Dummy EmailFacade Impl");
    var0.setId("(0) null\n   (0) null");
    int var5 = var0.getBodyCount();
    org.apache.tapestry.listener.ListenerMap var6 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test241");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("Dummy EmailFacade Impl");
    java.lang.String var6 = var0.getFullName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var0.getUniqueID();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var11.setParent(var13);
    ch.bluepenguin.email.client.Account var18 = var13.getAccount();
    var13.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    boolean var24 = var22.equals((java.lang.Object)(short)(-1));
    java.util.Collection var25 = var22.children();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setFullName("hi!");
    var26.setFullName("Dummy EmailFacade Impl");
    var22.setFolder(var26);
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    boolean var36 = var34.equals((java.lang.Object)(short)(-1));
    java.util.Collection var37 = var34.children();
    ch.bluepenguin.email.client.Folder var38 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38);
    var38.setFullName("hi!");
    var38.setFullName("Dummy EmailFacade Impl");
    var34.setFolder(var38);
    ch.bluepenguin.email.client.Account var45 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var46 = var45.getUniqueID();
    var38.setAccount(var45);
    ch.bluepenguin.email.client.Person var48 = var45.getPerson();
    var26.setAccount(var45);
    var13.setAccount(var45);
    ch.bluepenguin.email.client.Person var51 = new ch.bluepenguin.email.client.Person();
    java.lang.String var52 = var51.getFirstname();
    var51.setNickname("");
    var51.setLastname(",");
    var45.setPerson(var51);
    ch.bluepenguin.email.client.Person var58 = var45.getPerson();
    var0.setAccount(var45);
    ch.bluepenguin.email.client.Person var60 = var45.getPerson();
    var60.setLastname("SimpleMailMessage: from=(0) null; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    var60.setReserve("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=,");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test242");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    var1.setLeaf(false);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var5 = var1.getRenderer();
    java.lang.String var6 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test243");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    java.lang.String var3 = var0.displayMenuStructure();
    java.lang.String var4 = var0.displayMenuStructure();
    java.lang.String var5 = var0.displayMenuStructure();
    java.lang.String var6 = var0.displayMenuStructure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0) null"+ "'", var3.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test244");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    var8.setFolder(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    var11.setFullName("hi!");
    var9.setParent(var11);
    var2.setContained((java.lang.Object)var11);
    boolean var17 = var2.isLeaf();
    var2.setDepth(1);
    var2.setName("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    int var22 = var2.getDepth();
    int var23 = var2.getIndex();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var25 = var24.displayMenuStructure();
    java.util.Iterator var26 = var24.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var27 = var24.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var30 = var29.getParent();
    var24.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29);
    java.lang.String var32 = var29.toString();
    var29.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.Object var35 = var29.getContained();
    ch.bluepenguin.email.client.tapestry.SpringEngine var36 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var37 = var36.getVisit();
    java.lang.String var38 = var36.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var39 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var36.setVisit((java.lang.Object)var39);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var41 = var39.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var43 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var43.setParent((java.lang.Object)100L);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var46 = var39.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var43);
    java.lang.String var47 = var39.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var49 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var49.setParent((java.lang.Object)100L);
    java.lang.String var52 = var49.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var53 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var49);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var54 = var49.getRenderer();
    java.lang.String var55 = var49.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var56 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var49);
    java.lang.String var57 = var49.toString();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var58 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var58.setHyperlink("(0) null");
    var58.setHyperlink("Dummy EmailFacade Impl");
    var39.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var49, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var58);
    var29.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var58);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var65 = var29.getRenderer();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var66 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29);
    var2.setContained((java.lang.Object)var66);
    java.lang.Object var68 = var2.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0) null"+ "'", var25.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10.0f+ "'", var35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0) null"+ "'", var47.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test245");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setParentFolderId((java.lang.Integer)1);
    var5.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var11 = var5.getAccount();
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    boolean var17 = var13.getAllowsChildren();
    int var18 = var13.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var13);
    ch.bluepenguin.email.client.Folder var20 = var19.getFolder();
    java.util.Collection var21 = var19.getChildren();
    java.util.Collection var22 = var19.children();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    java.util.Collection var24 = var1.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test246");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var4 = var3.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var5 = var3.getMenuItem();
    java.lang.String var6 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var7 = var3.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var10 = var9.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var9);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var12 = var11.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var13 = var11.getMenuItem();
    java.lang.String var14 = var11.toString();
    var3.addChild(var11);
    boolean var16 = var11.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test247");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    java.lang.String var10 = var2.getFullName();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.children();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    var16.setFullName("hi!");
    var16.setFullName("Dummy EmailFacade Impl");
    var12.setFolder(var16);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.children();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    var28.setFullName("hi!");
    var28.setFullName("Dummy EmailFacade Impl");
    var24.setFolder(var28);
    ch.bluepenguin.email.client.Account var35 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var36 = var35.getUniqueID();
    var28.setAccount(var35);
    ch.bluepenguin.email.client.Person var38 = var35.getPerson();
    var16.setAccount(var35);
    var2.setAccount(var35);
    java.lang.String var41 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test248");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var13 = var10.getFolder();
    var1.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    var17.setFolder(var18);
    ch.bluepenguin.email.client.Folder var20 = var17.getFolder();
    java.util.Collection var21 = var17.getChildren();
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    java.lang.String var25 = var22.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var26 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var26.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var29 = var26.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var30 = var26.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    var31.setParentFolderId((java.lang.Integer)1);
    var31.setFullName("hi!");
    var30.setParent(var31);
    var22.setFolder(var31);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var40 = var17.equals((java.lang.Object)var39);
    var1.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var39);
    boolean var42 = var39.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test249");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.util.Locale var2 = var0.getLocale();
    java.lang.Object var3 = var0.getGlobal();
    java.lang.String var4 = var0.toString();
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    org.apache.tapestry.engine.IComponentClassEnhancer var6 = var0.getComponentClassEnhancer();
    org.apache.tapestry.engine.ITemplateSource var7 = var0.getTemplateSource();
    org.apache.tapestry.engine.ISpecificationSource var8 = var0.getSpecificationSource();
    var0.forgetPage("(0) null\n   (0) null\n   (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test250");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    java.lang.String var3 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var6.setIndex(10);
    var6.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var6.setDepth(0);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    var6.setIndex(0);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var16 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var16.setText("Dummy EmailFacade Impl");
    var16.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var21 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var21.setText("Dummy EmailFacade Impl");
    var21.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var27 = var26.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var29.setIndex(10);
    var29.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var34 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var36 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var37 = var36.getSuppressed();
    var34.setParameters((java.lang.Object[])var37);
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    var34.setComponent((org.apache.tapestry.IComponent)var39);
    var26.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    var34.setStyleClass(",");
    var21.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var46 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var21.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    var16.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var21);
    var6.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var16);
    var16.setElement("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var16.setStyleClass("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0) null"+ "'", var3.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0) null"+ "'", var27.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test251");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var7 = var6.getSpecification();
    java.lang.Object var8 = var6.getGlobal();
    java.lang.Object var9 = var6.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    var13.setText("hi!");
    var11.setContained((java.lang.Object)var13);
    var6.setVisit((java.lang.Object)var13);
    ch.bluepenguin.email.client.service.EmailFacadeException var23 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var6.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var23);
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", (java.lang.Throwable)var23);
    java.lang.Exception var26 = var23.getTechnicalException();
    java.lang.Exception var27 = var23.getTechnicalException();
    java.lang.Exception var28 = var23.getTechnicalException();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var30 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var31 = var30.getSuppressed();
    var23.setTechnicalException((java.lang.Exception)var30);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var34 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var35 = var34.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var36 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var37 = var36.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var39 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var40 = var39.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var43 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var39.reportException("", (java.lang.Throwable)var43);
    var36.reportException("hi!", (java.lang.Throwable)var43);
    var34.addSuppressed((java.lang.Throwable)var43);
    java.lang.String var47 = var34.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var48 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var34);
    var23.setTechnicalException((java.lang.Exception)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var47.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test252");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IBinding var13 = var4.getBinding("(0) null");
    java.lang.String var14 = var4.getPageName();
    org.apache.tapestry.IPage var15 = var4.getPage();
    java.lang.String var16 = var4.getExtendedId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test253");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    var0.forgetPage(",");
    org.apache.tapestry.engine.IPageSource var4 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var6.forgetPage("");
    org.apache.tapestry.engine.IPageSource var9 = var6.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var10 = var6.getComponentMessagesSource();
    java.lang.String var11 = var6.getContextPath();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var14 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var15 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var16 = var15.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var17 = var15.getDataSqueezer();
    var15.setVisit((java.lang.Object)0.0d);
    boolean var20 = var15.isStateful();
    org.apache.tapestry.engine.IPageSource var21 = var15.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var23 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var24 = var23.getSpecification();
    java.lang.Object var25 = var23.getGlobal();
    java.lang.Object var26 = var23.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var29 = var28.getParent();
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setTechnicalID(100);
    var30.setText("hi!");
    var28.setContained((java.lang.Object)var30);
    var23.setVisit((java.lang.Object)var30);
    ch.bluepenguin.email.client.service.EmailFacadeException var40 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var23.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var40);
    var15.reportException(",", (java.lang.Throwable)var40);
    var14.addSuppressed((java.lang.Throwable)var40);
    var6.reportException("(0) null\n   (0) null\n   (0) null", (java.lang.Throwable)var40);
    java.lang.Exception var45 = var40.getTechnicalException();
    java.lang.Exception var46 = var40.getTechnicalException();
    java.lang.Exception var47 = var40.getTechnicalException();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var49 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var40.setTechnicalException((java.lang.Exception)var49);
    java.lang.Throwable[] var51 = var40.getSuppressed();
    var0.reportException("Dummy EmailFacade Impl", (java.lang.Throwable)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test254");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var4 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var4.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var7 = var4.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var8 = var4.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    var9.setParentFolderId((java.lang.Integer)1);
    var9.setFullName("hi!");
    var8.setParent(var9);
    var0.setFolder(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var9.getUniqueID();
    ch.bluepenguin.email.client.Account var18 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var19 = var18.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var20 = var18.getUniqueID();
    var9.setAccount(var18);
    ch.bluepenguin.email.client.AbstractUniqueID var22 = var18.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test255");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null\n   (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var5 = var0.getUniqueID();
    java.lang.String var6 = var0.getText();
    java.lang.String[] var7 = var0.getTo();
    int var8 = var0.getTechnicalID();
    java.lang.String var9 = var0.getFrom();
    var0.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=Dummy EmailFacade Impl; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test256");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)(-1));
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    boolean var7 = var5.equals((java.lang.Object)(short)(-1));
    java.util.Collection var8 = var5.children();
    org.apache.tapestry.contrib.tree.model.ITreeNode var9 = var5.getParent();
    ch.bluepenguin.email.client.Folder var10 = var5.getFolder();
    ch.bluepenguin.email.client.Folder var11 = var5.getFolder();
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    var13.setFolder(var14);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    var16.insert(var21);
    java.util.Collection var23 = var16.children();
    java.util.Collection var24 = var16.getChildren();
    boolean var25 = var5.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var16);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test257");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var7 = var6.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var6.reportException("", (java.lang.Throwable)var10);
    var0.setVisit((java.lang.Object)"");
    org.apache.tapestry.util.io.DataSqueezer var13 = var0.createDataSqueezer();
    boolean var14 = var0.getHasVisit();
    java.lang.String var15 = var0.getServletPath();
    boolean var16 = var0.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test258");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    java.lang.String var8 = var3.getIdPath();
    org.apache.tapestry.listener.ListenerMap var9 = var3.getListeners();
    java.util.Collection var10 = var3.getBindingNames();
    var3.setPageName("(0) null\n   (0) null");
    org.apache.tapestry.IAsset var14 = var3.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=ch.bluepenguin.email.client.service.EmailFacadeException");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test259");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var4.setSeparator(",");
    var1.setContained((java.lang.Object)var4);
    java.lang.String var8 = var4.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ","+ "'", var8.equals(","));

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test260");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var10 = var9.displayMenuStructure();
    java.util.Iterator var11 = var9.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = var9.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var14 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var15 = var14.getParent();
    var9.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var14);
    boolean var17 = var1.equals((java.lang.Object)var14);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var18 = var14.getRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var19.setText("Dummy EmailFacade Impl");
    var19.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var24 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var24.setText("Dummy EmailFacade Impl");
    var24.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var30 = var29.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var32.setIndex(10);
    var32.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var39 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    var37.setParameters((java.lang.Object[])var40);
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    var37.setComponent((org.apache.tapestry.IComponent)var42);
    var29.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    var37.setStyleClass(",");
    var24.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var49 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var24.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var49);
    var19.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var24);
    var14.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var24);
    var24.setElement("SimpleMailMessage: from=Dummy EmailFacade Impl; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var55 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var55.setText("Dummy EmailFacade Impl");
    var55.setElement("Dummy EmailFacade Impl");
    var55.setElement("Current Folder");
    var55.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var55.setText("Default EmailFacade Impl");
    var24.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0) null"+ "'", var10.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0) null"+ "'", var30.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test261");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    java.lang.String var5 = var0.getName();
    ch.bluepenguin.email.client.MailMessage[] var7 = var0.getMessagesFromFolder("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.MailMessage[] var9 = var0.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.setCurrentFolder("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=(0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Dummy EmailFacade Impl"+ "'", var5.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test262");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    java.lang.Object var4 = var0.getGlobal();
    java.lang.String var5 = var0.getServletPath();
    org.apache.tapestry.listener.ListenerMap var6 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test263");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(false);
    org.springframework.mail.MailSender var5 = var0.getSender();
    org.springframework.mail.MailSender var6 = var0.getSender();
    var0.setDirty(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test264");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.children();
    boolean var12 = var8.getAllowsChildren();
    int var13 = var8.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var8);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var16.getParent();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    boolean var23 = var21.equals((java.lang.Object)(short)(-1));
    java.util.Collection var24 = var21.getChildren();
    boolean var25 = var16.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var21);
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setFullName("hi!");
    var16.setFolder(var26);
    var14.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    boolean var34 = var33.isLeaf();
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    boolean var38 = var36.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var39 = var36.getParent();
    var33.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var36);
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    boolean var44 = var42.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var45 = var42.getFolder();
    var33.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var42);
    boolean var47 = var33.isLeaf();
    boolean var48 = var33.getAllowsChildren();
    var14.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var33);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var51 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    java.lang.String var52 = var51.toString();
    java.lang.String var53 = var51.toString();
    boolean var54 = var33.equals((java.lang.Object)var53);
    java.util.Collection var55 = var33.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]"+ "'", var52.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]"+ "'", var53.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test265");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    var10.setParameters((java.lang.Object[])var13);
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    var10.setComponent((org.apache.tapestry.IComponent)var15);
    org.apache.tapestry.INamespace var18 = var15.getNamespace();
    var5.setContainer((org.apache.tapestry.IComponent)var15);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var15);
    org.apache.tapestry.ILocation var21 = var15.getLocation();
    var15.detach();
    org.apache.tapestry.spec.IComponentSpecification var23 = var15.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test266");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var2 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var2.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var6 = new java.lang.String[] { "(0) null"};
    java.lang.String var7 = var2.returnStringList(var6);
    java.util.Locale var8 = var2.getMyLocale();
    java.util.Locale var9 = var2.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getReplyTo();
    java.lang.String[] var17 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var10.setCc(var17);
    java.lang.String[] var20 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var10.setBcc(var20);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    var10.setBcc(var32);
    java.lang.String[] var35 = var10.getBcc();
    java.lang.String var36 = var2.returnStringList(var35);
    var0.setBcc(var35);
    java.lang.String var38 = var0.getFrom();
    int var39 = var0.getTechnicalID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test267");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IEngine var3 = var0.getEngine();
    java.lang.String var4 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test268");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    java.lang.String var8 = var3.getIdPath();
    org.apache.tapestry.listener.ListenerMap var9 = var3.getListeners();
    java.util.Collection var10 = var3.getBindingNames();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    int var16 = var14.getBodyCount();
    var11.addComponent((org.apache.tapestry.IComponent)var14);
    java.util.Collection var18 = var14.getBindingNames();
    var14.setId("(0) null");
    org.apache.tapestry.IComponent var21 = var14.getContainer();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    var22.addComponent((org.apache.tapestry.IComponent)var25);
    java.lang.String var29 = var22.getIdPath();
    org.apache.tapestry.ILocation var30 = var22.getLocation();
    java.lang.String var31 = var22.toString();
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    int var34 = var32.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    int var37 = var35.getBodyCount();
    var32.addComponent((org.apache.tapestry.IComponent)var35);
    java.lang.String var39 = var32.getIdPath();
    org.apache.tapestry.ILocation var40 = var32.getLocation();
    org.apache.tapestry.IEngine var41 = var32.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    int var44 = var42.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    var45.beginPageRender();
    java.util.Collection var47 = var45.getBindingNames();
    var42.setPage((org.apache.tapestry.IPage)var45);
    var32.addComponent((org.apache.tapestry.IComponent)var45);
    var45.setPageName("hi!");
    int var52 = var45.getBodyCount();
    var22.setContainer((org.apache.tapestry.IComponent)var45);
    org.apache.tapestry.spec.IComponentSpecification var54 = var22.getSpecification();
    var14.setContainer((org.apache.tapestry.IComponent)var22);
    org.apache.tapestry.ILocation var56 = var22.getLocation();
    var3.setContainer((org.apache.tapestry.IComponent)var22);
    org.apache.tapestry.IRequestCycle var58 = var3.getRequestCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test269");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getFirstname();
    var0.setReserve("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    var0.setNickname(",");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test270");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var16.addComponent((org.apache.tapestry.IComponent)var19);
    java.util.Map var23 = var19.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var24.forgetPage("");
    org.apache.tapestry.engine.IPageSource var27 = var24.getPageSource();
    org.apache.tapestry.engine.IPropertySource var28 = var24.getPropertySource();
    java.util.Collection var29 = var24.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var30 = var24.getComponentMessagesSource();
    var19.attach((org.apache.tapestry.IEngine)var24);
    boolean var32 = var12.equals((java.lang.Object)var24);
    org.apache.tapestry.engine.IComponentClassEnhancer var33 = var24.getComponentClassEnhancer();
    var5.attach((org.apache.tapestry.IEngine)var24);
    org.apache.tapestry.engine.ITemplateSource var35 = var24.getTemplateSource();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var24);
    java.lang.String var37 = var24.getContextPath();
    org.apache.tapestry.spec.IApplicationSpecification var38 = var24.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var39 = var24.getDataSqueezer();
    boolean var40 = var24.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test271");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    java.lang.String var12 = var5.getName();
    java.lang.String var13 = var5.getName();
    java.lang.Integer var14 = var5.getParentFolderId();
    java.lang.String var15 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setParent((java.lang.Object)100L);
    java.lang.String var20 = var17.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var22 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var17.setContained((java.lang.Object)var22);
    ch.bluepenguin.email.client.Folder var24 = var22.getCurrentFolder();
    var5.setParent(var24);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var27 = var26.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test272");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    boolean var3 = var0.getHasVisit();
    org.apache.tapestry.asset.ResourceChecksumSource var4 = var0.getResourceChecksumSource();
    org.apache.tapestry.engine.ITemplateSource var5 = var0.getTemplateSource();
    org.apache.tapestry.util.pool.Pool var6 = var0.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test273");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var1 = var0.getSeparator();
    java.util.Locale var2 = var0.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var3 = new ch.bluepenguin.email.client.MailMessage();
    var3.setBcc("Dummy EmailFacade Impl");
    var3.setTechnicalID(100);
    java.lang.String var8 = var3.getReplyTo();
    java.lang.String[] var10 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var3.setCc(var10);
    var3.setBcc("Dummy EmailFacade Impl");
    var3.setSubject("hi!");
    java.lang.String var16 = var3.toString();
    java.lang.String var17 = var3.getText();
    java.lang.String[] var18 = var3.getCc();
    java.lang.String var19 = var0.returnStringList(var18);
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    java.lang.String var24 = var22.getPageName();
    java.lang.String var25 = var22.toString();
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    java.lang.String var28 = var26.getPageName();
    java.lang.String var29 = var26.toString();
    org.apache.tapestry.IEngine var30 = var26.getEngine();
    var22.setContainer((org.apache.tapestry.IComponent)var26);
    var26.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IPage var34 = var26.getPage();
    int var35 = var26.getBodyCount();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var36 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var36.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var40 = new java.lang.String[] { "(0) null"};
    java.lang.String var41 = var36.returnStringList(var40);
    java.util.Locale var42 = var36.getMyLocale();
    java.util.Locale var43 = var36.getMyLocale();
    var36.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var46 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var46.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var49 = new ch.bluepenguin.email.client.MailMessage();
    var49.setBcc("Dummy EmailFacade Impl");
    var49.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var54 = var49.getSentDate();
    ch.bluepenguin.email.client.MailMessage var55 = new ch.bluepenguin.email.client.MailMessage();
    var55.setBcc("Dummy EmailFacade Impl");
    var55.setTechnicalID(100);
    java.lang.String var60 = var55.getReplyTo();
    java.lang.String[] var62 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var55.setCc(var62);
    java.lang.String[] var65 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var55.setBcc(var65);
    var49.setCc(var65);
    java.lang.String var68 = var46.returnStringList(var65);
    java.util.Locale var69 = var46.getMyLocale();
    java.util.Locale var70 = var46.getMyLocale();
    java.util.Locale var71 = var46.getMyLocale();
    var36.setMyLocale(var71);
    var26.setLocale(var71);
    var0.setMyLocale(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ","+ "'", var1.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var16.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var19.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0) null"+ "'", var41.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "Dummy EmailFacade Impl"+ "'", var68.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test274");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    var2.setFullName("hi!");
    ch.bluepenguin.email.client.Account var12 = var2.getAccount();
    java.lang.Integer var13 = var2.getParentFolderId();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    var15.setFolder(var16);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    var18.setFullName("hi!");
    var16.setParent(var18);
    ch.bluepenguin.email.client.AbstractUniqueID var23 = var16.getUniqueID();
    java.lang.String var24 = var16.getFullName();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    java.util.Collection var29 = var26.children();
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    var30.setFullName("hi!");
    var30.setFullName("Dummy EmailFacade Impl");
    var26.setFolder(var30);
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var40 = var38.equals((java.lang.Object)(short)(-1));
    java.util.Collection var41 = var38.children();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    var42.setFullName("hi!");
    var42.setFullName("Dummy EmailFacade Impl");
    var38.setFolder(var42);
    ch.bluepenguin.email.client.Account var49 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var50 = var49.getUniqueID();
    var42.setAccount(var49);
    ch.bluepenguin.email.client.Person var52 = var49.getPerson();
    var30.setAccount(var49);
    var16.setAccount(var49);
    var2.setAccount(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test275");


    ch.bluepenguin.email.client.cache.MailCache var1 = new ch.bluepenguin.email.client.cache.MailCache("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!");

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test276");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setBcc("Dummy EmailFacade Impl");
    java.lang.String var8 = var5.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var12 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var13 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    var14.setParentFolderId((java.lang.Integer)1);
    var14.setFullName("hi!");
    var13.setParent(var14);
    var5.setFolder(var14);
    var0.setFolder(var14);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    var23.setParentFolderId((java.lang.Integer)1);
    var23.setFullName("Dummy EmailFacade Impl");
    java.lang.String var29 = var23.getFullName();
    var0.setFolder(var23);
    var0.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var33 = var0.getFrom();
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var35 = var34.toString();
    ch.bluepenguin.email.client.Folder var36 = var34.getFolder();
    java.lang.String[] var37 = var34.getBcc();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var38 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var38.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var41 = new ch.bluepenguin.email.client.MailMessage();
    var41.setBcc("Dummy EmailFacade Impl");
    var41.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var46 = var41.getSentDate();
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setTechnicalID(100);
    java.lang.String var52 = var47.getReplyTo();
    java.lang.String[] var54 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var47.setCc(var54);
    java.lang.String[] var57 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var47.setBcc(var57);
    var41.setCc(var57);
    java.lang.String var60 = var38.returnStringList(var57);
    var34.setTo(var57);
    var34.setFrom("Default EmailFacade Impl");
    boolean var64 = var0.equals((java.lang.Object)"Default EmailFacade Impl");
    var0.setBcc("SimpleMailMessage: from=Dummy EmailFacade Impl; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Dummy EmailFacade Impl"+ "'", var29.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var35.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Dummy EmailFacade Impl"+ "'", var60.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

}
