package randoop;

import junit.framework.*;

public class RandoopTest7 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test1");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    java.lang.String var5 = var0.getContextPath();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var8 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var9 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var10 = var9.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var11 = var9.getDataSqueezer();
    var9.setVisit((java.lang.Object)0.0d);
    boolean var14 = var9.isStateful();
    org.apache.tapestry.engine.IPageSource var15 = var9.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var17 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var18 = var17.getSpecification();
    java.lang.Object var19 = var17.getGlobal();
    java.lang.Object var20 = var17.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var22 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var23 = var22.getParent();
    ch.bluepenguin.email.client.MailMessage var24 = new ch.bluepenguin.email.client.MailMessage();
    var24.setBcc("Dummy EmailFacade Impl");
    var24.setTechnicalID(100);
    var24.setText("hi!");
    var22.setContained((java.lang.Object)var24);
    var17.setVisit((java.lang.Object)var24);
    ch.bluepenguin.email.client.service.EmailFacadeException var34 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var17.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var34);
    var9.reportException(",", (java.lang.Throwable)var34);
    var8.addSuppressed((java.lang.Throwable)var34);
    var0.reportException("(0) null\n   (0) null\n   (0) null", (java.lang.Throwable)var34);
    ch.bluepenguin.email.client.tapestry.SpringEngine var39 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var40 = var39.getVisit();
    org.apache.tapestry.engine.IPageSource var41 = var39.getPageSource();
    java.lang.String var42 = var39.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var43 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var43.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var46 = var43.getMyLocale();
    var39.setLocale(var46);
    var0.setLocale(var46);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var49 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var49.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var53 = new java.lang.String[] { "(0) null"};
    java.lang.String var54 = var49.returnStringList(var53);
    ch.bluepenguin.email.client.tapestry.SpringEngine var55 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var55.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var58 = var55.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var59 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var59.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var62 = var59.getMyLocale();
    var55.setLocale(var62);
    var49.setMyLocale(var62);
    java.util.Locale var65 = var49.getMyLocale();
    var0.setLocale(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0) null"+ "'", var54.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test2");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    var4.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    var12.setFolder(var13);
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    boolean var16 = var12.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Account var18 = var4.getAccount();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var19 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var20 = var19.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    boolean var24 = var22.equals((java.lang.Object)(short)(-1));
    java.util.Collection var25 = var22.children();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setFullName("hi!");
    var26.setFullName("Dummy EmailFacade Impl");
    var22.setFolder(var26);
    java.util.Collection var33 = var22.getChildren();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    var36.setParentFolderId((java.lang.Integer)1);
    var36.setParentFolderId((java.lang.Integer)0);
    var34.setParent(var36);
    var22.setFolder(var36);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var22);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var22);
    boolean var46 = var22.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test3");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    var1.setIndex(1);
    int var5 = var1.getIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test4");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var12 = var11.getParent();
    java.lang.Object var13 = var11.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    java.lang.String var15 = var3.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setParent((java.lang.Object)100L);
    int var20 = var17.getDepth();
    int var21 = var17.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var22 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var22.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var25.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var28.setText("Dummy EmailFacade Impl");
    var28.setText(",");
    var25.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var28);
    var22.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setText("hi!");
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.email.client.tapestry.SpringEngine var38 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var38.forgetPage("");
    org.apache.tapestry.engine.IPageSource var41 = var38.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var42 = var38.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var43 = new ch.bluepenguin.email.client.Person();
    java.lang.String var44 = var43.getFirstname();
    var43.setLastname("(0) null");
    var43.setLastname("");
    var38.setVisit((java.lang.Object)var43);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var50 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var43);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    var50.setLeaf(true);
    var50.setIndex((-1));
    int var56 = var50.getDepth();
    var50.setDepth(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10.0f+ "'", var13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null\n   (0) null"+ "'", var15.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test5");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    var4.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    var12.setFolder(var13);
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    boolean var16 = var12.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Account var18 = var4.getAccount();
    java.lang.String var19 = var4.getFullName();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    var20.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    var24.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    var29.setFolder(var30);
    var26.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    java.util.Collection var33 = var26.children();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test6");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var2.setIndex(10);
    java.lang.String var5 = var2.getName();
    var2.setDepth(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var10.setParent((java.lang.Object)100L);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var10);
    java.lang.String var14 = var0.displayMenuStructure();
    java.lang.String var15 = var0.displayMenuStructure();
    java.lang.String var16 = var0.displayMenuStructure();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null"+ "'", var15.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test7");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    var5.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    java.lang.String var14 = var12.getPageName();
    java.lang.String var15 = var12.toString();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    java.lang.String var18 = var16.getPageName();
    java.lang.String var19 = var16.toString();
    org.apache.tapestry.IEngine var20 = var16.getEngine();
    var12.setContainer((org.apache.tapestry.IComponent)var16);
    org.apache.tapestry.IAsset var23 = var12.getAsset("Dummy EmailFacade Impl");
    org.apache.tapestry.IBinding var25 = var12.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var5.setPage((org.apache.tapestry.IPage)var12);
    java.lang.String var27 = var5.toString();
    var5.detach();
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    int var31 = var29.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    var32.beginPageRender();
    java.util.Collection var34 = var32.getBindingNames();
    var29.setPage((org.apache.tapestry.IPage)var32);
    java.lang.String var36 = var32.toString();
    var5.addComponent((org.apache.tapestry.IComponent)var32);
    org.apache.tapestry.IComponent var38 = var5.getContainer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test8");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var5 = var0.getAllMessages();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var6.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var10 = var6.getMessagesFromFolder("Dummy EmailFacade Impl");
    java.lang.String var11 = var6.getName();
    ch.bluepenguin.email.client.MailMessage[] var13 = var6.getMessagesFromFolder("(0) null\n   (0) null\n   (0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var13, "SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=(0) null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Dummy EmailFacade Impl"+ "'", var11.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test9");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.lang.String var5 = var0.getSubject();
    var0.setText("Default EmailFacade Impl");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test10");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var5 = var4.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var7.setIndex(10);
    var7.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var14 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var15 = var14.getSuppressed();
    var12.setParameters((java.lang.Object[])var15);
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    var12.setComponent((org.apache.tapestry.IComponent)var17);
    var4.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var12);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var22 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var23 = var22.displayMenuStructure();
    java.util.Iterator var24 = var22.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var25 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var28 = var27.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var27);
    var25.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var27);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var31 = var22.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var27);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var32 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var27.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var32);
    var7.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var32);
    var32.setStyleClass("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=(0) null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0) null"+ "'", var23.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test11");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.children();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    var16.setFullName("hi!");
    var16.setFullName("Dummy EmailFacade Impl");
    var12.setFolder(var16);
    java.lang.String var23 = var16.getName();
    java.lang.String var24 = var16.getName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    var10.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test12");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var5 = new ch.bluepenguin.email.client.Person();
    java.lang.String var6 = var5.getFirstname();
    var5.setLastname("(0) null");
    var5.setLastname("");
    var0.setVisit((java.lang.Object)var5);
    org.apache.tapestry.spec.IApplicationSpecification var12 = var0.getSpecification();
    org.apache.tapestry.util.pool.Pool var13 = var0.getPool();
    java.util.Locale var14 = var0.getLocale();
    java.lang.String var15 = var0.getServletPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test13");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var5.setText("Dummy EmailFacade Impl");
    var5.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var11 = var10.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var13.setIndex(10);
    var13.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var20 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var21 = var20.getSuppressed();
    var18.setParameters((java.lang.Object[])var21);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    var18.setComponent((org.apache.tapestry.IComponent)var23);
    var10.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    var18.setStyleClass(",");
    var5.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var5.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var5);
    var5.setElement("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null"+ "'", var11.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test14");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    java.lang.String var8 = var3.getIdPath();
    org.apache.tapestry.listener.ListenerMap var9 = var3.getListeners();
    java.util.Collection var10 = var3.getBindingNames();
    var3.setPageName("(0) null\n   (0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var14 = var3.getNestedComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; bcc=; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test15");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var3);
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test16");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var4 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var0.reportException("", (java.lang.Throwable)var4);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var4.addSuppressed((java.lang.Throwable)var7);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var13 = var12.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var14 = var12.getDataSqueezer();
    var12.setVisit((java.lang.Object)0.0d);
    boolean var17 = var12.isStateful();
    org.apache.tapestry.engine.IPageSource var18 = var12.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var20 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var21 = var20.getSpecification();
    java.lang.Object var22 = var20.getGlobal();
    java.lang.Object var23 = var20.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var25 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var26 = var25.getParent();
    ch.bluepenguin.email.client.MailMessage var27 = new ch.bluepenguin.email.client.MailMessage();
    var27.setBcc("Dummy EmailFacade Impl");
    var27.setTechnicalID(100);
    var27.setText("hi!");
    var25.setContained((java.lang.Object)var27);
    var20.setVisit((java.lang.Object)var27);
    ch.bluepenguin.email.client.service.EmailFacadeException var37 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var20.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var37);
    var12.reportException(",", (java.lang.Throwable)var37);
    var11.addSuppressed((java.lang.Throwable)var37);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var42 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    var37.setTechnicalException((java.lang.Exception)var42);
    java.lang.Throwable[] var45 = var37.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var46 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var47 = var46.getPageSource();
    java.lang.String var48 = var46.toString();
    org.apache.tapestry.IResourceResolver var49 = var46.getResourceResolver();
    org.apache.tapestry.util.io.DataSqueezer var50 = var46.createDataSqueezer();
    org.apache.tapestry.util.io.DataSqueezer var51 = var46.createDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var54 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var46.reportException("(0) null", (java.lang.Throwable)var54);
    var37.addSuppressed((java.lang.Throwable)var54);
    var4.addSuppressed((java.lang.Throwable)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test17");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = new ch.bluepenguin.email.client.Person();
    java.lang.String var7 = var6.getFirstname();
    var6.setNickname("");
    var6.setLastname(",");
    java.lang.String var12 = var6.getNickname();
    java.lang.String var13 = var6.getLastname();
    var0.setPerson(var6);
    ch.bluepenguin.email.client.AbstractUniqueID var15 = var6.getUniqueID();
    java.lang.String var16 = var6.getReserve();
    var6.setLastname("SimpleMailMessage: from=hi!; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ","+ "'", var13.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test18");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.setAll(true);
    var0.clear();
    var0.clear();
    var0.setAll(false);
    boolean var9 = var0.isDirty((java.lang.Integer)100);
    boolean var11 = var0.isDirty((java.lang.Integer)1);
    var0.clear();
    var0.setAll(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test19");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var5.setText("Dummy EmailFacade Impl");
    var5.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var11 = var10.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var13.setIndex(10);
    var13.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var20 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var21 = var20.getSuppressed();
    var18.setParameters((java.lang.Object[])var21);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    var18.setComponent((org.apache.tapestry.IComponent)var23);
    var10.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    var18.setStyleClass(",");
    var5.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var5.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var5);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var33 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var33.setText("Dummy EmailFacade Impl");
    var33.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var39 = var38.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var41 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var41.setIndex(10);
    var41.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var46 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var48 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var49 = var48.getSuppressed();
    var46.setParameters((java.lang.Object[])var49);
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    var46.setComponent((org.apache.tapestry.IComponent)var51);
    var38.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var41, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    var46.setStyleClass(",");
    var33.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    var33.setElement(",");
    var5.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var33);
    var5.setElement("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null"+ "'", var11.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0) null"+ "'", var39.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test20");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setLastname("(0) null");
    java.lang.String var4 = var0.getReserve();
    var0.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var7 = var0.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var7.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test21");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.setAll(true);
    var0.clear();
    boolean var6 = var0.isDirty((java.lang.Integer)10);
    boolean var8 = var0.isDirty((java.lang.Integer)10);
    boolean var9 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test22");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder[] var3 = var0.getAllFolders();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test23");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var0.setLocale("Default EmailFacade Impl");
    var0.setLocale("(0) null");
    java.lang.String var5 = var0.getLocale();
    java.lang.String var6 = var0.getLocale();
    java.lang.String var7 = var0.getLocale();
    var0.setLocale("Default EmailFacade Impl");
    java.lang.String var10 = var0.getLocale();
    var0.setLocale("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var13 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Default EmailFacade Impl"+ "'", var10.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var13.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test24");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    java.lang.String var9 = var0.getUserID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null"+ "'", var9.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null"));

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test25");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var5 = var1.getFolder();
    var5.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var13 = var12.isLeaf();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    boolean var17 = var15.equals((java.lang.Object)(short)(-1));
    java.util.Collection var18 = var15.getChildren();
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    boolean var21 = var20.isLeaf();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var26 = var23.getParent();
    var20.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    boolean var28 = var15.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var20);
    boolean var29 = var12.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var20);
    var9.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var20);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var20);
    ch.bluepenguin.email.client.Account var32 = var5.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test26");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    java.lang.String var4 = var0.getServletPath();
    boolean var5 = var0.getHasVisit();
    org.apache.tapestry.engine.IScriptSource var6 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test27");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    ch.bluepenguin.email.client.Person var7 = new ch.bluepenguin.email.client.Person();
    java.lang.String var8 = var7.getFirstname();
    var7.setNickname("");
    var7.setLastname(",");
    java.lang.String var13 = var7.getFirstname();
    var0.setPerson(var7);
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    var15.setBcc("Dummy EmailFacade Impl");
    var15.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var20 = var15.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var21 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var22 = var21.getReader();
    ch.bluepenguin.email.client.cache.MailCache var23 = var21.getCache();
    boolean var24 = var15.equals((java.lang.Object)var21);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var26.setIndex(10);
    java.lang.String var29 = var26.getName();
    boolean var30 = var15.equals((java.lang.Object)var26);
    var26.setIndex(100);
    ch.bluepenguin.email.client.Person var33 = new ch.bluepenguin.email.client.Person();
    java.lang.String var34 = var33.getFirstname();
    var33.setLastname("(0) null");
    var33.setLastname("");
    java.lang.String var39 = var33.getReserve();
    var33.setNickname("");
    var26.setContained((java.lang.Object)var33);
    var33.setLastname("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.AbstractUniqueID var45 = var33.getUniqueID();
    var0.setPerson(var33);
    ch.bluepenguin.email.client.Person var47 = var0.getPerson();
    ch.bluepenguin.email.client.Person var48 = new ch.bluepenguin.email.client.Person();
    java.lang.String var49 = var48.getFirstname();
    var48.setNickname("");
    var48.setLastname(",");
    java.lang.String var54 = var48.getNickname();
    java.lang.String var55 = var48.getLastname();
    var48.setFirstname("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setPerson(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ","+ "'", var55.equals(","));

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test28");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var6 = var5.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setIndex(10);
    var8.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    var5.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var13.setStyleClass(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    var25.addComponent((org.apache.tapestry.IComponent)var28);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var32 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var32.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var35 = var32.getMyLocale();
    var28.setLocale(var35);
    var13.setComponent((org.apache.tapestry.IComponent)var28);
    org.apache.tapestry.IComponent var38 = var28.getContainer();
    org.apache.tapestry.IAsset var40 = var28.getAsset("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IRender[] var41 = var28.getBody();
    org.apache.tapestry.IPage var42 = var28.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test29");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    var0.checkMenuModelHealth();
    java.util.Iterator var4 = var0.getMenuItemsDepthFirst();
    java.lang.String var5 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = var0.getRootList();
    var0.checkMenuModelHealth();
    var0.checkMenuModelHealth();
    java.util.Iterator var9 = var0.getMenuItemsDepthFirst();
    var0.checkMenuModelHealth();
    java.lang.String var11 = var0.displayMenuStructure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null"+ "'", var11.equals("(0) null"));

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test30");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var4.setLeaf(false);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var0.checkMenuModelHealth();
    var0.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test31");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    var0.setTo("(0) null\n   (0) null");
    java.lang.String var28 = var0.getSubject();
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    var29.setTechnicalID(100);
    java.lang.String var34 = var29.getReplyTo();
    java.lang.String[] var36 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var29.setCc(var36);
    var29.setBcc("Dummy EmailFacade Impl");
    java.lang.String var40 = var29.toString();
    var29.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var29.setSubject("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var45 = new ch.bluepenguin.email.client.MailMessage();
    var45.setBcc("Dummy EmailFacade Impl");
    var45.setTechnicalID(100);
    java.lang.String var50 = var45.getReplyTo();
    java.lang.String[] var52 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var45.setCc(var52);
    var45.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var56 = var45.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var57 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var57.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var60 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var60.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var63 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var63.setText("Dummy EmailFacade Impl");
    var63.setText(",");
    var60.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var63);
    var57.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var60);
    var60.setText("Default EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var72 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var73 = var72.displayMenuStructure();
    java.util.Iterator var74 = var72.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var75 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var77 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var78 = var77.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var79 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var77);
    var75.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var77);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var81 = var72.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var77);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var82 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var77.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var82);
    var82.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var60.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var82);
    boolean var87 = var45.equals((java.lang.Object)var60);
    java.lang.String[] var88 = var45.getCc();
    var29.setCc(var88);
    var0.setBcc(var88);
    ch.bluepenguin.email.client.Folder var91 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var92 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var91);
    var91.setParentFolderId((java.lang.Integer)1);
    var91.setParentFolderId((java.lang.Integer)100);
    java.lang.Integer var97 = var91.getParentFolderId();
    java.lang.Integer var98 = var91.getParentFolderId();
    var0.setFolder(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var40.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0) null"+ "'", var73.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + 100+ "'", var97.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + 100+ "'", var98.equals(100));

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test32");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setName("(0) null");
    java.lang.Object var4 = var1.getContained();
    var1.setName("Current Folder");
    boolean var7 = var1.isLeaf();
    ch.bluepenguin.email.client.Person var8 = new ch.bluepenguin.email.client.Person();
    java.lang.String var9 = var8.getFirstname();
    var8.setLastname("(0) null");
    var8.setLastname("");
    var8.setNickname("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");
    var1.setContained((java.lang.Object)var8);
    int var17 = var1.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test33");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    boolean var11 = var6.isLeaf();
    boolean var12 = var6.isLeaf();
    java.util.Collection var13 = var6.children();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    java.lang.String var17 = var14.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var18 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var18.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var21 = var18.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var22 = var18.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    var23.setParentFolderId((java.lang.Integer)1);
    var23.setFullName("hi!");
    var22.setParent(var23);
    var14.setFolder(var23);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var32);
    boolean var34 = var6.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var32);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var35 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var36 = var35.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var40 = var38.equals((java.lang.Object)(short)(-1));
    java.util.Collection var41 = var38.children();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    var42.setFullName("hi!");
    var42.setFullName("Dummy EmailFacade Impl");
    var38.setFolder(var42);
    java.util.Collection var49 = var38.getChildren();
    ch.bluepenguin.email.client.Folder var50 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var51 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var50);
    ch.bluepenguin.email.client.Folder var52 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var53 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var52);
    var52.setParentFolderId((java.lang.Integer)1);
    var52.setParentFolderId((java.lang.Integer)0);
    var50.setParent(var52);
    var38.setFolder(var52);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var60 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    var32.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    var32.removeFromParent();
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    var63.setParentFolderId((java.lang.Integer)1);
    var63.setFullName("Dummy EmailFacade Impl");
    var63.setFullName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var32.setFolder(var63);
    java.util.Collection var72 = var32.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test34");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    boolean var11 = var6.isLeaf();
    boolean var12 = var6.isLeaf();
    java.util.Collection var13 = var6.children();
    java.util.Collection var14 = var6.children();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    var16.setFolder(var17);
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var16.getParent();
    boolean var20 = var16.getAllowsChildren();
    boolean var21 = var16.isLeaf();
    var6.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    var23.beginPageRender();
    java.lang.String var25 = var23.toString();
    org.apache.tapestry.ILocation var26 = var23.getLocation();
    boolean var27 = var6.equals((java.lang.Object)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var29.setParent((java.lang.Object)100L);
    int var32 = var29.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var33 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var29.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var33);
    java.lang.Object var35 = var29.getParent();
    var29.setName("(0) null\n   (0) null\n   (0) null");
    boolean var38 = var6.equals((java.lang.Object)var29);
    var29.setLeaf(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 100L+ "'", var35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test35");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.lang.String var19 = var12.getIdPath();
    org.apache.tapestry.ILocation var20 = var12.getLocation();
    org.apache.tapestry.IEngine var21 = var12.getEngine();
    var12.beginPageRender();
    org.apache.tapestry.ILocation var23 = var12.getLocation();
    var10.setComponent((org.apache.tapestry.IComponent)var12);
    var10.setStyleClass("ch.bluepenguin.email.client.service.EmailFacadeException");
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    java.lang.String var29 = var27.getPageName();
    java.lang.String var30 = var27.toString();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    java.lang.String var33 = var31.getPageName();
    java.lang.String var34 = var31.toString();
    org.apache.tapestry.IEngine var35 = var31.getEngine();
    var27.setContainer((org.apache.tapestry.IComponent)var31);
    org.apache.tapestry.IAsset var38 = var27.getAsset("Dummy EmailFacade Impl");
    var27.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IRequestCycle var41 = var27.getRequestCycle();
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    java.lang.String var44 = var42.getPageName();
    java.lang.String var45 = var42.toString();
    ch.bluepenguin.email.client.tapestry.Home var46 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var47 = var46.getBody();
    java.lang.String var48 = var46.getPageName();
    java.lang.String var49 = var46.toString();
    org.apache.tapestry.IEngine var50 = var46.getEngine();
    var42.setContainer((org.apache.tapestry.IComponent)var46);
    java.lang.String var52 = var46.getPageName();
    org.apache.tapestry.IPage var53 = var46.getPage();
    java.lang.String var54 = var46.getId();
    var27.addComponent((org.apache.tapestry.IComponent)var46);
    org.apache.tapestry.spec.IComponentSpecification var56 = var27.getSpecification();
    var10.setComponent((org.apache.tapestry.IComponent)var27);
    var27.setPageName("SimpleMailMessage: from=null; replyTo=Default EmailFacade Impl; to=; cc=hi!; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test36");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    java.lang.Object var6 = var0.getGlobal();
    org.apache.tapestry.IResourceResolver var7 = var0.getResourceResolver();
    java.util.Collection var8 = var0.getActivePageNames();
    java.lang.Object var9 = var0.getVisit();
    org.apache.tapestry.spec.IApplicationSpecification var10 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10.0f+ "'", var9.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test37");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getLastname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ","+ "'", var8.equals(","));

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test38");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.engine.IComponentMessagesSource var2 = var0.getComponentMessagesSource();
    org.apache.tapestry.engine.ISpecificationSource var3 = var0.getSpecificationSource();
    java.lang.String var4 = var0.getServletPath();
    java.lang.String var5 = var0.getContextPath();
    java.lang.String var6 = var0.getServletPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test39");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var7 = var6.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    java.lang.String var9 = var6.toString();
    var6.setDepth((-1));
    boolean var12 = var6.isLeaf();
    var6.setName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setName("(0) null");
    java.lang.Object var20 = var17.getContained();
    var17.setName("Current Folder");
    java.lang.String var23 = var17.getName();
    int var24 = var17.getIndex();
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var27 = var26.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = var26.getRootList();
    var26.checkMenuModelHealth();
    java.util.Iterator var30 = var26.getMenuItemsDepthFirst();
    java.lang.String var31 = var26.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var32 = var26.getRootList();
    var26.checkMenuModelHealth();
    ch.bluepenguin.email.client.tapestry.SpringEngine var34 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var34.forgetPage("");
    org.apache.tapestry.engine.IPageSource var37 = var34.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var38 = var34.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var39 = new ch.bluepenguin.email.client.Person();
    java.lang.String var40 = var39.getFirstname();
    var39.setLastname("(0) null");
    var39.setLastname("");
    var34.setVisit((java.lang.Object)var39);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var46 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var39);
    var26.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var46);
    var17.setParent((java.lang.Object)var46);
    java.lang.Object var49 = var17.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Current Folder"+ "'", var23.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0) null"+ "'", var27.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0) null"+ "'", var31.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test40");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    var14.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var21 = new ch.bluepenguin.email.client.MailMessage();
    var21.setBcc("Dummy EmailFacade Impl");
    var21.setTechnicalID(100);
    java.lang.String var26 = var21.getReplyTo();
    java.lang.String[] var28 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var21.setCc(var28);
    var14.setBcc(var28);
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    java.lang.String var34 = var31.getReplyTo();
    var31.setBcc(",");
    var14.copyTo((org.springframework.mail.MailMessage)var31);
    java.lang.String var38 = var14.getReplyTo();
    java.lang.String[] var39 = var14.getBcc();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var49 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var49.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var52 = new ch.bluepenguin.email.client.MailMessage();
    var52.setBcc("Dummy EmailFacade Impl");
    var52.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var57 = var52.getSentDate();
    ch.bluepenguin.email.client.MailMessage var58 = new ch.bluepenguin.email.client.MailMessage();
    var58.setBcc("Dummy EmailFacade Impl");
    var58.setTechnicalID(100);
    java.lang.String var63 = var58.getReplyTo();
    java.lang.String[] var65 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var58.setCc(var65);
    java.lang.String[] var68 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var58.setBcc(var68);
    var52.setCc(var68);
    java.lang.String var71 = var49.returnStringList(var68);
    var40.setCc(var68);
    var14.setCc(var68);
    var0.copyTo((org.springframework.mail.MailMessage)var14);
    java.lang.String var75 = var14.getReplyTo();
    java.util.Date var76 = var14.getSentDate();
    var14.setReplyTo("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var14.setFrom("(0) null\n   (0) null");
    int var81 = var14.getTechnicalID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Dummy EmailFacade Impl"+ "'", var71.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 100);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test41");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    ch.bluepenguin.email.client.Account var2 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var3 = var2.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var4 = var2.getUniqueID();
    ch.bluepenguin.email.client.Person var5 = new ch.bluepenguin.email.client.Person();
    java.lang.String var6 = var5.getFirstname();
    var2.setPerson(var5);
    ch.bluepenguin.email.client.Person var8 = new ch.bluepenguin.email.client.Person();
    java.lang.String var9 = var8.getFirstname();
    var8.setNickname("");
    var8.setLastname(",");
    java.lang.String var14 = var8.getNickname();
    java.lang.String var15 = var8.getLastname();
    var2.setPerson(var8);
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var2.getUniqueID();
    ch.bluepenguin.email.client.Person var18 = new ch.bluepenguin.email.client.Person();
    java.lang.String var19 = var18.getFirstname();
    var18.setNickname("");
    var18.setLastname(",");
    java.lang.String var24 = var18.getNickname();
    var2.setPerson(var18);
    ch.bluepenguin.email.client.AbstractUniqueID var26 = var2.getUniqueID();
    boolean var27 = var0.equals((java.lang.Object)var26);
    var26.setId((java.lang.Integer)10);
    var26.setId((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ","+ "'", var15.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test42");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var1 = var0.getSender();
    boolean var2 = var0.isDirty();
    java.util.logging.Logger var3 = var0.getLogger();
    java.lang.String var4 = var0.getName();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var5 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var7 = new ch.bluepenguin.email.client.cache.MailCache("");
    var5.setCache(var7);
    ch.bluepenguin.email.client.cache.MailCache var10 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var11 = var10.getCache();
    var5.setCache(var10);
    java.util.logging.Logger var13 = var5.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var14 = var5.getCache();
    var0.setCache(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Default EmailFacade Impl"+ "'", var4.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test43");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    java.lang.Object var6 = var4.getGlobal();
    java.lang.Object var7 = var4.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var10 = var9.getParent();
    ch.bluepenguin.email.client.MailMessage var11 = new ch.bluepenguin.email.client.MailMessage();
    var11.setBcc("Dummy EmailFacade Impl");
    var11.setTechnicalID(100);
    var11.setText("hi!");
    var9.setContained((java.lang.Object)var11);
    var4.setVisit((java.lang.Object)var11);
    java.lang.String var20 = var11.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var11);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setSubject("hi!");
    var0.copyTo((org.springframework.mail.MailMessage)var22);
    java.lang.String var28 = var22.toString();
    var22.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var22.setText("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var33 = var22.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var28.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test44");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    var2.setLeaf(false);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("");
    java.lang.String var12 = var9.getSeparator();
    var2.setContained((java.lang.Object)var9);
    java.lang.String var14 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test45");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    org.apache.tapestry.IComponent var7 = var3.getContainer();
    org.apache.tapestry.spec.IComponentSpecification var8 = var3.getSpecification();
    java.util.Collection var9 = var3.getBindingNames();
    org.apache.tapestry.INamespace var10 = var3.getNamespace();
    var3.endPageRender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test46");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    ch.bluepenguin.email.client.cache.MailCache var4 = new ch.bluepenguin.email.client.cache.MailCache("Dummy EmailFacade Impl");
    var0.setCache(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test47");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    var5.setFullName("(0) null\n   (0) null\n   (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test48");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.getIdPath();
    java.util.Locale var8 = var0.getLocale();
    org.apache.tapestry.IRequestCycle var9 = var0.getRequestCycle();
    org.apache.tapestry.listener.ListenerMap var10 = var0.getListeners();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    var12.endPageRender();
    java.lang.String var15 = var12.toString();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var20 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var21 = var20.getSuppressed();
    var18.setParameters((java.lang.Object[])var21);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    var18.setComponent((org.apache.tapestry.IComponent)var23);
    var23.setId("Dummy EmailFacade Impl");
    int var28 = var23.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var29 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var31 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var32 = var31.getSuppressed();
    var29.setParameters((java.lang.Object[])var32);
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    var29.setComponent((org.apache.tapestry.IComponent)var34);
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    var37.setPageName("");
    var34.addBody((org.apache.tapestry.IRender)var37);
    org.apache.tapestry.IEngine var43 = var37.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var45 = var44.getBody();
    int var46 = var44.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    int var49 = var47.getBodyCount();
    var44.addComponent((org.apache.tapestry.IComponent)var47);
    var37.addBody((org.apache.tapestry.IRender)var47);
    org.apache.tapestry.IComponent var52 = var47.getContainer();
    org.apache.tapestry.event.ChangeObserver var53 = var47.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var54 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var54.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var57 = var54.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var58 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var59 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var60 = var59.getSeparator();
    java.util.Locale var61 = var59.getMyLocale();
    var58.setMyLocale(var61);
    var54.setMyLocale(var61);
    var47.setLocale(var61);
    var23.addBody((org.apache.tapestry.IRender)var47);
    var16.addComponent((org.apache.tapestry.IComponent)var47);
    org.apache.tapestry.ILocation var67 = var47.getLocation();
    java.util.Collection var68 = var47.getBindingNames();
    var12.addBody((org.apache.tapestry.IRender)var47);
    ch.bluepenguin.email.client.tapestry.SpringEngine var70 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var71 = var70.getVisit();
    java.lang.String var72 = var70.toString();
    boolean var73 = var70.isDirty();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var74 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var75 = var74.getSeparator();
    java.util.Locale var76 = var74.getMyLocale();
    var70.setLocale(var76);
    org.apache.tapestry.asset.ResourceChecksumSource var78 = var70.getResourceChecksumSource();
    var47.attach((org.apache.tapestry.IEngine)var70);
    var0.setContainer((org.apache.tapestry.IComponent)var47);
    org.apache.tapestry.IEngine var81 = var47.getEngine();
    org.apache.tapestry.ILocation var82 = var47.getLocation();
    java.lang.String var83 = var47.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ","+ "'", var60.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ","+ "'", var75.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test49");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var2 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.email.client.MailMessage[] var4 = var2.getAllMessages();
    boolean var5 = var0.equals((java.lang.Object)var2);
    java.lang.String var6 = var0.getSubject();
    ch.bluepenguin.email.client.tapestry.SpringEngine var7 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var8 = var7.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var7.reportException("", (java.lang.Throwable)var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    org.apache.tapestry.IAsset var17 = var13.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var20 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var21 = var20.getSuppressed();
    var18.setParameters((java.lang.Object[])var21);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    var18.setComponent((org.apache.tapestry.IComponent)var23);
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    int var28 = var26.getBodyCount();
    var26.setPageName("");
    var23.addBody((org.apache.tapestry.IRender)var26);
    var13.setContainer((org.apache.tapestry.IComponent)var26);
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    var36.beginPageRender();
    java.util.Collection var38 = var36.getBindingNames();
    var33.setPage((org.apache.tapestry.IPage)var36);
    org.apache.tapestry.listener.ListenerMap var40 = var36.getListeners();
    org.apache.tapestry.event.ChangeObserver var41 = var36.getChangeObserver();
    var13.setPage((org.apache.tapestry.IPage)var36);
    var7.setVisit((java.lang.Object)var13);
    boolean var44 = var0.equals((java.lang.Object)var13);
    var0.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Dummy EmailFacade Impl"+ "'", var3.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test50");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(true);
    java.util.logging.Logger var5 = var0.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var6 = var0.getCache();
    java.lang.String var7 = var0.getName();
    java.lang.String var8 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Default EmailFacade Impl"+ "'", var7.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Default EmailFacade Impl"+ "'", var8.equals("Default EmailFacade Impl"));

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test51");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.util.Iterator var4 = var3.getChildrenIterator();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var5 = var3.getMenuItem();
    boolean var6 = var3.checkConsistency();
    boolean var7 = var3.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test52");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setLeaf(false);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var4.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var8 = new java.lang.String[] { "(0) null"};
    java.lang.String var9 = var4.returnStringList(var8);
    java.util.Locale var10 = var4.getMyLocale();
    java.util.Locale var11 = var4.getMyLocale();
    var4.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var22 = var17.getSentDate();
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    var23.setBcc("Dummy EmailFacade Impl");
    var23.setTechnicalID(100);
    java.lang.String var28 = var23.getReplyTo();
    java.lang.String[] var30 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var23.setCc(var30);
    java.lang.String[] var33 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var23.setBcc(var33);
    var17.setCc(var33);
    java.lang.String var36 = var14.returnStringList(var33);
    java.util.Locale var37 = var14.getMyLocale();
    java.util.Locale var38 = var14.getMyLocale();
    java.util.Locale var39 = var14.getMyLocale();
    var4.setMyLocale(var39);
    var1.setParent((java.lang.Object)var4);
    java.lang.String var42 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test53");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    var23.beginPageRender();
    java.util.Collection var25 = var23.getBindingNames();
    var20.setPage((org.apache.tapestry.IPage)var23);
    org.apache.tapestry.listener.ListenerMap var27 = var23.getListeners();
    org.apache.tapestry.event.ChangeObserver var28 = var23.getChangeObserver();
    var0.setPage((org.apache.tapestry.IPage)var23);
    java.util.Locale var30 = var23.getLocale();
    org.apache.tapestry.IComponent var31 = var23.getContainer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test54");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    var15.addComponent((org.apache.tapestry.IComponent)var18);
    var8.addBody((org.apache.tapestry.IRender)var18);
    org.apache.tapestry.IComponent var23 = var18.getContainer();
    org.apache.tapestry.event.ChangeObserver var24 = var18.getChangeObserver();
    org.apache.tapestry.IRender[] var25 = var18.getBody();
    org.apache.tapestry.IPage var26 = var18.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test55");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var3 = var0.getPropertySource();
    org.apache.tapestry.asset.ResourceChecksumSource var4 = var0.getResourceChecksumSource();
    var0.forgetPage("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    boolean var7 = var0.isStateful();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var14 = var13.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var15 = var13.getDataSqueezer();
    var13.setVisit((java.lang.Object)0.0d);
    boolean var18 = var13.isStateful();
    org.apache.tapestry.engine.IPageSource var19 = var13.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var21 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var22 = var21.getSpecification();
    java.lang.Object var23 = var21.getGlobal();
    java.lang.Object var24 = var21.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var27 = var26.getParent();
    ch.bluepenguin.email.client.MailMessage var28 = new ch.bluepenguin.email.client.MailMessage();
    var28.setBcc("Dummy EmailFacade Impl");
    var28.setTechnicalID(100);
    var28.setText("hi!");
    var26.setContained((java.lang.Object)var28);
    var21.setVisit((java.lang.Object)var28);
    ch.bluepenguin.email.client.service.EmailFacadeException var38 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var21.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var38);
    var13.reportException(",", (java.lang.Throwable)var38);
    var12.addSuppressed((java.lang.Throwable)var38);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var43 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var44 = var43.getSuppressed();
    var38.setTechnicalException((java.lang.Exception)var43);
    ch.bluepenguin.email.client.tapestry.SpringEngine var46 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var47 = var46.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var49 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var50 = var49.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var53 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var49.reportException("", (java.lang.Throwable)var53);
    var46.reportException("hi!", (java.lang.Throwable)var53);
    ch.bluepenguin.email.client.tapestry.SpringEngine var56 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var57 = var56.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var60 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var56.reportException("", (java.lang.Throwable)var60);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var63 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var64 = var63.getSuppressed();
    var60.addSuppressed((java.lang.Throwable)var63);
    var53.addSuppressed((java.lang.Throwable)var60);
    java.lang.String var67 = var60.toString();
    var38.setTechnicalException((java.lang.Exception)var60);
    var10.addSuppressed((java.lang.Throwable)var60);
    var0.reportException("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=(0) null", (java.lang.Throwable)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var67.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test56");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var2.setIndex(10);
    java.lang.String var5 = var2.getName();
    var2.setDepth(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.util.Iterator var9 = var0.getMenuItemsDepthFirst();
    var0.checkMenuModelHealth();
    java.lang.String var11 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var14 = var13.getRenderer();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    java.lang.Object var17 = var13.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null"+ "'", var11.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test57");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    int var8 = var3.getBodyCount();
    java.util.Map var9 = var3.getAssets();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    var10.beginPageRender();
    java.util.Collection var12 = var10.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var13 = var10.getListeners();
    java.lang.String var14 = var10.getPageName();
    var3.setPage((org.apache.tapestry.IPage)var10);
    org.apache.tapestry.ILocation var16 = var3.getLocation();
    ch.bluepenguin.email.client.tapestry.SpringEngine var17 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var18 = var17.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var19 = var17.getDataSqueezer();
    org.apache.tapestry.engine.IScriptSource var20 = var17.getScriptSource();
    org.apache.tapestry.spec.IApplicationSpecification var21 = var17.getSpecification();
    boolean var22 = var17.isDirty();
    var3.attach((org.apache.tapestry.IEngine)var17);
    java.util.Locale var24 = var17.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test58");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.getIdPath();
    java.util.Locale var8 = var0.getLocale();
    org.apache.tapestry.IRequestCycle var9 = var0.getRequestCycle();
    org.apache.tapestry.listener.ListenerMap var10 = var0.getListeners();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var13 = var12.getPageSource();
    org.apache.tapestry.listener.ListenerMap var14 = var12.getListeners();
    java.lang.String var15 = var12.toString();
    java.lang.String var16 = var12.toString();
    var0.attach((org.apache.tapestry.IEngine)var12);
    boolean var18 = var12.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test59");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    var15.setParentFolderId((java.lang.Integer)1);
    var15.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var21 = var15.getAccount();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    java.util.Collection var26 = var23.children();
    boolean var27 = var23.getAllowsChildren();
    int var28 = var23.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    boolean var33 = var31.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var34 = var31.getParent();
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    boolean var38 = var36.equals((java.lang.Object)(short)(-1));
    java.util.Collection var39 = var36.getChildren();
    boolean var40 = var31.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var36);
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    var41.setFullName("hi!");
    var31.setFolder(var41);
    var29.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    boolean var48 = var31.isLeaf();
    int var49 = var31.getChildCount();
    var31.removeFromParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test60");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var1 = var0.getSender();
    boolean var2 = var0.isDirty();
    org.springframework.mail.MailSender var3 = var0.getSender();
    ch.bluepenguin.email.client.cache.MailCache var5 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var6 = var5.getCache();
    var0.setCache(var5);
    boolean var8 = var0.isDirty();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var10 = var9.getReader();
    ch.bluepenguin.email.client.cache.MailCache var11 = var9.getCache();
    var9.setDirty(true);
    java.util.logging.Logger var14 = var9.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var15 = var9.getCache();
    java.lang.String var16 = var9.getName();
    ch.bluepenguin.email.client.cache.MailCache var18 = new ch.bluepenguin.email.client.cache.MailCache("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    net.sf.ehcache.Cache var19 = var18.getCache();
    var9.setCache(var18);
    var0.setCache(var18);
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var22 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    var22.setDirty(false);
    org.springframework.mail.MailSender var25 = var22.getSender();
    ch.bluepenguin.email.client.cache.MailCache var26 = var22.getCache();
    ch.bluepenguin.email.client.MailMessage var27 = new ch.bluepenguin.email.client.MailMessage();
    var27.setBcc("Dummy EmailFacade Impl");
    var27.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var32 = var27.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var33 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var34 = var33.getReader();
    ch.bluepenguin.email.client.cache.MailCache var35 = var33.getCache();
    boolean var36 = var27.equals((java.lang.Object)var33);
    ch.bluepenguin.email.client.cache.MailCache var37 = var33.getCache();
    ch.bluepenguin.email.client.cache.MailCache var38 = var33.getCache();
    boolean var39 = var33.isDirty();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var40 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var42 = new ch.bluepenguin.email.client.cache.MailCache("");
    var40.setCache(var42);
    ch.bluepenguin.email.client.cache.MailCache var45 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var46 = var45.getCache();
    var40.setCache(var45);
    net.sf.ehcache.Cache var48 = var45.getCache();
    var33.setCache(var45);
    var22.setCache(var45);
    var0.setCache(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Default EmailFacade Impl"+ "'", var16.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test61");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var3 = var2.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var4 = var2.getDataSqueezer();
    var2.setVisit((java.lang.Object)0.0d);
    boolean var7 = var2.isStateful();
    org.apache.tapestry.engine.IPageSource var8 = var2.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var10 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var10.getSpecification();
    java.lang.Object var12 = var10.getGlobal();
    java.lang.Object var13 = var10.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var16 = var15.getParent();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    var17.setText("hi!");
    var15.setContained((java.lang.Object)var17);
    var10.setVisit((java.lang.Object)var17);
    ch.bluepenguin.email.client.service.EmailFacadeException var27 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var10.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var27);
    var2.reportException(",", (java.lang.Throwable)var27);
    var1.addSuppressed((java.lang.Throwable)var27);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var32 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var33 = var32.getSuppressed();
    var27.setTechnicalException((java.lang.Exception)var32);
    java.lang.Throwable[] var35 = var27.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var36 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var37 = var36.getPageSource();
    java.lang.String var38 = var36.toString();
    org.apache.tapestry.IResourceResolver var39 = var36.getResourceResolver();
    org.apache.tapestry.util.io.DataSqueezer var40 = var36.createDataSqueezer();
    org.apache.tapestry.util.io.DataSqueezer var41 = var36.createDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var44 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var36.reportException("(0) null", (java.lang.Throwable)var44);
    var27.addSuppressed((java.lang.Throwable)var44);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var48 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var49 = var48.getSuppressed();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var51 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var52 = var51.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var53 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var54 = var53.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var56 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var57 = var56.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var60 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var56.reportException("", (java.lang.Throwable)var60);
    var53.reportException("hi!", (java.lang.Throwable)var60);
    var51.addSuppressed((java.lang.Throwable)var60);
    var48.addSuppressed((java.lang.Throwable)var51);
    java.lang.String var65 = var48.toString();
    var27.addSuppressed((java.lang.Throwable)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var65.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test62");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    org.apache.tapestry.spec.IApplicationSpecification var6 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test63");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.getChildren();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    boolean var17 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    boolean var18 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var9);
    java.util.Collection var19 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    var21.setFolder(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    var24.setFullName("hi!");
    var22.setParent(var24);
    ch.bluepenguin.email.client.AbstractUniqueID var29 = var22.getUniqueID();
    java.lang.String var30 = var22.getFullName();
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    java.util.Collection var35 = var32.children();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    var36.setFullName("hi!");
    var36.setFullName("Dummy EmailFacade Impl");
    var32.setFolder(var36);
    ch.bluepenguin.email.client.Folder var43 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var43);
    boolean var46 = var44.equals((java.lang.Object)(short)(-1));
    java.util.Collection var47 = var44.children();
    ch.bluepenguin.email.client.Folder var48 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var49 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var48);
    var48.setFullName("hi!");
    var48.setFullName("Dummy EmailFacade Impl");
    var44.setFolder(var48);
    ch.bluepenguin.email.client.Account var55 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var56 = var55.getUniqueID();
    var48.setAccount(var55);
    ch.bluepenguin.email.client.Person var58 = var55.getPerson();
    var36.setAccount(var55);
    var22.setAccount(var55);
    var1.setFolder(var22);
    java.lang.String var62 = var22.getName();
    ch.bluepenguin.email.client.Folder var63 = var22.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test64");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    var4.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.children();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    var29.setFullName("hi!");
    var29.setFullName("Dummy EmailFacade Impl");
    var25.setFolder(var29);
    ch.bluepenguin.email.client.Account var36 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var36.getUniqueID();
    var29.setAccount(var36);
    ch.bluepenguin.email.client.Person var39 = var36.getPerson();
    var17.setAccount(var36);
    var4.setAccount(var36);
    ch.bluepenguin.email.client.AbstractUniqueID var42 = var36.getUniqueID();
    ch.bluepenguin.email.client.Person var43 = var36.getPerson();
    ch.bluepenguin.email.client.Person var44 = new ch.bluepenguin.email.client.Person();
    java.lang.String var45 = var44.getFirstname();
    var44.setNickname("");
    var44.setLastname(",");
    java.lang.String var50 = var44.getNickname();
    java.lang.String var51 = var44.getLastname();
    java.lang.String var52 = var44.getFirstname();
    var44.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var44.setReserve("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var36.setPerson(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ","+ "'", var51.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test65");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    boolean var4 = var3.checkConsistency();
    java.lang.String var5 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var6 = var3.getMenuItem();
    int var7 = var3.getChildrenSize();
    java.lang.String var8 = var3.toString();
    java.lang.String var9 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0) null"+ "'", var8.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test66");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var4 = var3.displayMenuStructure();
    java.util.Iterator var5 = var3.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var9 = var8.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var6.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var16 = var15.getParent();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    var17.setText("hi!");
    var15.setContained((java.lang.Object)var17);
    java.lang.Object var25 = var15.getContained();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var28.setParent((java.lang.Object)100L);
    int var31 = var28.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    boolean var33 = var32.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var33);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var34);
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var39 = var37.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var40 = var37.getFolder();
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    boolean var43 = var42.isLeaf();
    var37.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var42);
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    ch.bluepenguin.email.client.Folder var47 = new ch.bluepenguin.email.client.Folder();
    var46.setFolder(var47);
    ch.bluepenguin.email.client.Folder var49 = var46.getFolder();
    java.util.Collection var50 = var46.getChildren();
    var37.insert(var50);
    int var52 = var37.getChildCount();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var54 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var54.setIndex(10);
    java.lang.String var57 = var54.getName();
    var54.setDepth(1);
    boolean var60 = var37.equals((java.lang.Object)var54);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var61 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var61.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var64 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var64.setText("Dummy EmailFacade Impl");
    var64.setText(",");
    var61.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var64);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var70 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var72 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var73 = var72.getSuppressed();
    var70.setParameters((java.lang.Object[])var73);
    ch.bluepenguin.email.client.tapestry.Home var75 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var76 = var75.getBody();
    var70.setComponent((org.apache.tapestry.IComponent)var75);
    var70.setStyleClass("Default EmailFacade Impl");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var80 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var81 = var80.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var82 = var80.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var84 = var80.getMessagesFromFolder("(0) null\n   (0) null");
    var70.setParameters((java.lang.Object[])var84);
    var64.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var70);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var54, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var64);
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var89 = var0.getRootList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test67");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.MailMessage var6 = new ch.bluepenguin.email.client.MailMessage();
    var6.setBcc("Dummy EmailFacade Impl");
    var6.setTechnicalID(100);
    java.lang.String var11 = var6.getReplyTo();
    java.lang.String[] var13 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var6.setCc(var13);
    java.lang.String[] var16 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var6.setBcc(var16);
    var0.setCc(var16);
    java.lang.String var19 = var0.getSubject();
    ch.bluepenguin.email.client.MailMessage var20 = new ch.bluepenguin.email.client.MailMessage();
    var20.setBcc("Dummy EmailFacade Impl");
    var20.setTechnicalID(100);
    java.lang.String var25 = var20.getReplyTo();
    java.lang.String[] var27 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var20.setCc(var27);
    java.lang.String[] var30 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var20.setBcc(var30);
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setTechnicalID(100);
    java.lang.String var37 = var32.getReplyTo();
    java.lang.String[] var39 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var32.setCc(var39);
    java.lang.String[] var42 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var32.setBcc(var42);
    var20.setBcc(var42);
    int var45 = var20.getTechnicalID();
    int var46 = var20.getTechnicalID();
    java.lang.String[] var47 = var20.getBcc();
    var0.setTo(var47);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var49 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var50 = var49.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var51 = var49.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var53 = var49.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var54 = var49.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var55 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var56 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var55);
    ch.bluepenguin.email.client.Folder var57 = new ch.bluepenguin.email.client.Folder();
    var56.setFolder(var57);
    ch.bluepenguin.email.client.Folder var59 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var60 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var59);
    var59.setFullName("hi!");
    var57.setParent(var59);
    var59.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var66 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var67 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var66);
    ch.bluepenguin.email.client.Folder var68 = new ch.bluepenguin.email.client.Folder();
    var67.setFolder(var68);
    org.apache.tapestry.contrib.tree.model.ITreeNode var70 = var67.getParent();
    boolean var71 = var67.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var72 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var59, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var67);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var73 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var54, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var67);
    var0.setFolder(var54);
    java.lang.String var75 = var54.getName();
    java.lang.String var76 = var54.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Current Folder"+ "'", var75.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Current Folder"+ "'", var76.equals("Current Folder"));

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test68");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    java.lang.String var10 = var5.getName();
    java.lang.String var11 = var5.getName();
    var5.setName("Current Folder");
    var5.setIndex(0);
    var5.setLeaf(true);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var18.setHyperlink("(0) null");
    var18.setHyperlink("Dummy EmailFacade Impl");
    java.lang.String var23 = var18.getHyperlink();
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Dummy EmailFacade Impl"+ "'", var23.equals("Dummy EmailFacade Impl"));

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test69");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    var8.addComponent((org.apache.tapestry.IComponent)var11);
    java.lang.String var15 = var8.getIdPath();
    org.apache.tapestry.ILocation var16 = var8.getLocation();
    org.apache.tapestry.IEngine var17 = var8.getEngine();
    var8.beginPageRender();
    int var19 = var8.getBodyCount();
    var3.addComponent((org.apache.tapestry.IComponent)var8);
    org.apache.tapestry.IRender[] var21 = var3.getBody();
    org.apache.tapestry.event.ChangeObserver var22 = var3.getChangeObserver();
    var3.beginPageRender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test70");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    var8.setFolder(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    var11.setFullName("hi!");
    var9.setParent(var11);
    var2.setContained((java.lang.Object)var11);
    boolean var17 = var2.isLeaf();
    var2.setIndex(100);
    var2.setDepth(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test71");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    java.util.Locale var7 = var0.getLocale();
    java.lang.String var8 = var0.toString();
    java.lang.String var9 = var0.toString();
    java.util.Locale var10 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test72");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    java.util.Collection var12 = var9.getChildren();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var15 = var14.isLeaf();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    boolean var19 = var17.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var20 = var17.getParent();
    var14.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var17);
    boolean var22 = var9.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    boolean var23 = var6.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    ch.bluepenguin.email.client.MailMessage var24 = new ch.bluepenguin.email.client.MailMessage();
    var24.setBcc("Dummy EmailFacade Impl");
    java.lang.String var27 = var24.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var28 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var28.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var31 = var28.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var32 = var28.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    var33.setParentFolderId((java.lang.Integer)1);
    var33.setFullName("hi!");
    var32.setParent(var33);
    var24.setFolder(var33);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    boolean var42 = var6.equals((java.lang.Object)var33);
    java.lang.String var43 = var33.getFullName();
    var0.setFolder(var33);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var45 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var46 = var45.getName();
    ch.bluepenguin.email.client.Folder var47 = var45.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var48 = var45.getCurrentFolder();
    java.lang.Integer var49 = var48.getParentFolderId();
    var0.setFolder(var48);
    ch.bluepenguin.email.client.AbstractUniqueID var51 = var0.getUniqueID();
    var0.setTechnicalID(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Dummy EmailFacade Impl"+ "'", var46.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test73");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    org.apache.tapestry.IComponent var7 = var0.getContainer();
    org.apache.tapestry.IAsset var9 = var0.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    int var10 = var0.getBodyCount();
    var0.detach();
    var0.setPageName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test74");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    java.lang.String var5 = var3.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var7.setLeaf(false);
    boolean var10 = var7.isLeaf();
    var7.setLeaf(false);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test75");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setSubject("Default EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var21 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var21.setText("Dummy EmailFacade Impl");
    var21.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var27 = var26.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var29.setIndex(10);
    var29.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var34 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var36 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var37 = var36.getSuppressed();
    var34.setParameters((java.lang.Object[])var37);
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    var34.setComponent((org.apache.tapestry.IComponent)var39);
    var26.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    var34.setStyleClass(",");
    var21.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var46 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var21.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var48 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var48.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var51 = var48.getSeparator();
    var48.setSeparator("(0) null\n   (0) null");
    java.lang.String var54 = var48.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var55 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var55.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var59 = new java.lang.String[] { "(0) null"};
    java.lang.String var60 = var55.returnStringList(var59);
    java.util.Locale var61 = var55.getMyLocale();
    java.util.Locale var62 = var55.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var63 = new ch.bluepenguin.email.client.MailMessage();
    var63.setBcc("Dummy EmailFacade Impl");
    var63.setTechnicalID(100);
    java.lang.String var68 = var63.getReplyTo();
    java.lang.String[] var70 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var63.setCc(var70);
    java.lang.String[] var73 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var63.setBcc(var73);
    java.lang.String var75 = var55.returnStringList(var73);
    java.lang.String var76 = var48.returnStringList(var73);
    var46.setParameters((java.lang.Object[])var73);
    var0.setTo(var73);
    java.lang.String[] var79 = var0.getTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0) null"+ "'", var27.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var51.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0) null\n   (0) null"+ "'", var54.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0) null"+ "'", var60.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Dummy EmailFacade Impl"+ "'", var75.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Dummy EmailFacade Impl"+ "'", var76.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test76");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    java.lang.Object var3 = var1.getParent();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DefaultMenuItemRenderer var4 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DefaultMenuItemRenderer();
    var4.setStyleClass("hi!");
    var1.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var4);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var8 = var1.getRenderer();
    var1.setLeaf(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test77");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    ch.bluepenguin.email.client.Folder var9 = var0.getFolder();
    java.lang.String[] var10 = var0.getBcc();
    java.lang.String var11 = var0.getReplyTo();
    java.util.Date var12 = var0.getSentDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test78");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var2 = var1.getRenderer();
    int var3 = var1.getDepth();
    int var4 = var1.getIndex();
    boolean var5 = var1.isLeaf();
    var1.setIndex((-1));
    var1.setIndex((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test79");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    java.lang.String var9 = var0.toString();
    org.apache.tapestry.IRender[] var10 = var0.getBody();
    org.apache.tapestry.IRender[] var11 = var0.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test80");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var3 = var0.getListeners();
    java.lang.String var4 = var0.getPageName();
    java.lang.String var5 = var0.getExtendedId();
    java.util.Collection var6 = var0.getBindingNames();
    java.lang.String var7 = var0.toString();
    int var8 = var0.getBodyCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test81");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    java.lang.String var6 = var3.getReserve();
    var3.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var9 = var3.getFirstname();
    ch.bluepenguin.email.client.AbstractUniqueID var10 = var3.getUniqueID();
    var3.setReserve("hi!");
    java.lang.String var13 = var3.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test82");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    var7.setText("hi!");
    var5.setContained((java.lang.Object)var7);
    var0.setVisit((java.lang.Object)var7);
    ch.bluepenguin.email.client.service.EmailFacadeException var17 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var17);
    java.lang.String var19 = var0.getContextPath();
    boolean var20 = var0.isDirty();
    ch.bluepenguin.email.client.tapestry.SpringEngine var22 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var23 = var22.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var25 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var22.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var27 = var22.getSpecificationSource();
    boolean var28 = var22.isDirty();
    java.util.Collection var29 = var22.getActivePageNames();
    ch.bluepenguin.email.client.service.EmailFacadeException var31 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var32 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var33 = var32.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var35 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var36 = var35.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var39 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var35.reportException("", (java.lang.Throwable)var39);
    var32.reportException("hi!", (java.lang.Throwable)var39);
    var31.setTechnicalException((java.lang.Exception)var39);
    ch.bluepenguin.email.client.tapestry.SpringEngine var43 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var44 = var43.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var47 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var43.reportException("", (java.lang.Throwable)var47);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var50 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var51 = var50.getSuppressed();
    var47.addSuppressed((java.lang.Throwable)var50);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var54 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var55 = var54.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var56 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var57 = var56.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var59 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var60 = var59.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var63 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var59.reportException("", (java.lang.Throwable)var63);
    var56.reportException("hi!", (java.lang.Throwable)var63);
    var54.addSuppressed((java.lang.Throwable)var63);
    var47.addSuppressed((java.lang.Throwable)var63);
    var31.setTechnicalException((java.lang.Exception)var63);
    ch.bluepenguin.email.client.service.EmailFacadeException var69 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var70 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var71 = var70.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var73 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var74 = var73.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var77 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var73.reportException("", (java.lang.Throwable)var77);
    var70.reportException("hi!", (java.lang.Throwable)var77);
    var69.setTechnicalException((java.lang.Exception)var77);
    java.lang.Exception var81 = var69.getTechnicalException();
    var63.addSuppressed((java.lang.Throwable)var69);
    var22.reportException("Current Folder", (java.lang.Throwable)var63);
    var0.reportException("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", (java.lang.Throwable)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test83");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    java.util.Collection var9 = var4.children();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var14 = var11.getParent();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    java.util.Collection var19 = var16.getChildren();
    boolean var20 = var11.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var16);
    boolean var21 = var16.isLeaf();
    boolean var22 = var16.isLeaf();
    var4.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    int var24 = var16.getChildCount();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var27 = var26.isLeaf();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var31 = var29.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var32 = var29.getParent();
    var26.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    ch.bluepenguin.email.client.Folder var34 = var26.getFolder();
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    boolean var38 = var36.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var39 = var36.getFolder();
    ch.bluepenguin.email.client.Folder var40 = var36.getFolder();
    var26.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var36);
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    boolean var45 = var43.equals((java.lang.Object)(short)(-1));
    java.util.Collection var46 = var43.getChildren();
    ch.bluepenguin.email.client.Folder var47 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var48 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var47);
    boolean var49 = var48.isLeaf();
    ch.bluepenguin.email.client.Folder var50 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var51 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var50);
    boolean var53 = var51.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var54 = var51.getParent();
    var48.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var51);
    boolean var56 = var43.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var48);
    var36.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var43);
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    ch.bluepenguin.email.client.Folder var60 = new ch.bluepenguin.email.client.Folder();
    var59.setFolder(var60);
    ch.bluepenguin.email.client.Folder var62 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var63 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var62);
    var62.setFullName("hi!");
    var60.setParent(var62);
    ch.bluepenguin.email.client.Account var67 = var60.getAccount();
    var36.setFolder(var60);
    ch.bluepenguin.email.client.Folder var69 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var70 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var69);
    boolean var72 = var70.equals((java.lang.Object)(short)(-1));
    java.util.Collection var73 = var70.children();
    ch.bluepenguin.email.client.Folder var74 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var75 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var74);
    var74.setFullName("hi!");
    var74.setFullName("Dummy EmailFacade Impl");
    var70.setFolder(var74);
    java.util.Collection var81 = var70.getChildren();
    ch.bluepenguin.email.client.Folder var82 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var83 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var82);
    ch.bluepenguin.email.client.Folder var84 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var85 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var84);
    var84.setParentFolderId((java.lang.Integer)1);
    var84.setParentFolderId((java.lang.Integer)0);
    var82.setParent(var84);
    var70.setFolder(var84);
    var36.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var70);
    boolean var93 = var36.getAllowsChildren();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var36);
    ch.bluepenguin.email.client.Folder var95 = var16.getFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test84");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Account var6 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var7 = var6.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var6.getUniqueID();
    ch.bluepenguin.email.client.Person var9 = new ch.bluepenguin.email.client.Person();
    java.lang.String var10 = var9.getFirstname();
    var6.setPerson(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var12 = var9.getUniqueID();
    var0.setPerson(var9);
    var9.setNickname("");
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var9.getUniqueID();
    java.lang.String var17 = var9.getLastname();
    java.lang.String var18 = var9.getLastname();
    var9.setLastname("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var21 = var9.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test85");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    java.lang.String var9 = var0.toString();
    org.apache.tapestry.IRender[] var10 = var0.getBody();
    org.apache.tapestry.IEngine var11 = var0.getEngine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test86");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    org.apache.tapestry.IAsset var9 = var3.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var10 = var3.toString();
    org.apache.tapestry.IEngine var11 = var3.getEngine();
    java.util.Map var12 = var3.getAssets();
    var3.setId("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var15 = var3.getPageName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test87");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var3 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var2);
    boolean var5 = var3.equals((java.lang.Object)(short)(-1));
    java.util.Collection var6 = var3.children();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    var7.setFullName("hi!");
    var7.setFullName("Dummy EmailFacade Impl");
    var3.setFolder(var7);
    java.util.Collection var14 = var3.getChildren();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setParentFolderId((java.lang.Integer)1);
    var17.setParentFolderId((java.lang.Integer)0);
    var15.setParent(var17);
    var3.setFolder(var17);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var1, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var3);
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setParentFolderId((java.lang.Integer)1);
    var26.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var32 = var26.getUniqueID();
    var26.setFullName("");
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    ch.bluepenguin.email.client.Folder var36 = var35.getFolder();
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    ch.bluepenguin.email.client.Folder var39 = new ch.bluepenguin.email.client.Folder();
    var38.setFolder(var39);
    ch.bluepenguin.email.client.Folder var41 = var38.getFolder();
    java.util.Collection var42 = var38.getChildren();
    boolean var43 = var38.getAllowsChildren();
    var35.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    var25.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    var35.removeFromParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test88");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setBcc("Dummy EmailFacade Impl");
    java.lang.String var8 = var5.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var12 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var13 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    var14.setParentFolderId((java.lang.Integer)1);
    var14.setFullName("hi!");
    var13.setParent(var14);
    var5.setFolder(var14);
    var0.setFolder(var14);
    var14.setFullName("hi!");
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var27 = var26.isLeaf();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var31 = var29.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var32 = var29.getParent();
    var26.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    ch.bluepenguin.email.client.Folder var34 = var26.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var35 = var34.getUniqueID();
    var14.setParent(var34);
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var40 = var38.equals((java.lang.Object)(short)(-1));
    java.util.Collection var41 = var38.children();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    var42.setFullName("hi!");
    var42.setFullName("Dummy EmailFacade Impl");
    var38.setFolder(var42);
    ch.bluepenguin.email.client.Folder var49 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var50 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var49);
    boolean var52 = var50.equals((java.lang.Object)(short)(-1));
    java.util.Collection var53 = var50.children();
    ch.bluepenguin.email.client.Folder var54 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var55 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var54);
    var54.setFullName("hi!");
    var54.setFullName("Dummy EmailFacade Impl");
    var50.setFolder(var54);
    ch.bluepenguin.email.client.Account var61 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var62 = var61.getUniqueID();
    var54.setAccount(var61);
    ch.bluepenguin.email.client.Person var64 = var61.getPerson();
    var42.setAccount(var61);
    ch.bluepenguin.email.client.AbstractUniqueID var66 = var61.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var67 = var61.getUniqueID();
    ch.bluepenguin.email.client.Account var68 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var69 = var68.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var70 = var68.getUniqueID();
    ch.bluepenguin.email.client.Person var71 = new ch.bluepenguin.email.client.Person();
    java.lang.String var72 = var71.getFirstname();
    var68.setPerson(var71);
    ch.bluepenguin.email.client.Person var74 = var68.getPerson();
    ch.bluepenguin.email.client.Person var75 = var68.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var76 = var75.getUniqueID();
    var61.setPerson(var75);
    var14.setAccount(var61);
    ch.bluepenguin.email.client.Folder var79 = var14.getParent();
    var14.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test89");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    java.lang.String var10 = var4.getPageName();
    org.apache.tapestry.IPage var11 = var4.getPage();
    java.lang.String var12 = var4.getId();
    org.apache.tapestry.IEngine var13 = var4.getEngine();
    ch.bluepenguin.email.client.tapestry.SpringEngine var14 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var15 = var14.getSpecification();
    java.lang.Object var16 = var14.getGlobal();
    java.lang.Object var17 = var14.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var19 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var20 = var19.getParent();
    ch.bluepenguin.email.client.MailMessage var21 = new ch.bluepenguin.email.client.MailMessage();
    var21.setBcc("Dummy EmailFacade Impl");
    var21.setTechnicalID(100);
    var21.setText("hi!");
    var19.setContained((java.lang.Object)var21);
    var14.setVisit((java.lang.Object)var21);
    ch.bluepenguin.email.client.service.EmailFacadeException var31 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var14.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var31);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var33 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var33.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var37 = new java.lang.String[] { "(0) null"};
    java.lang.String var38 = var33.returnStringList(var37);
    ch.bluepenguin.email.client.tapestry.SpringEngine var39 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var39.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var42 = var39.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var43 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var43.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var46 = var43.getMyLocale();
    var39.setLocale(var46);
    var33.setMyLocale(var46);
    var14.setLocale(var46);
    org.apache.tapestry.engine.IPageSource var50 = var14.getPageSource();
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    var54.beginPageRender();
    java.util.Collection var56 = var54.getBindingNames();
    var51.setPage((org.apache.tapestry.IPage)var54);
    org.apache.tapestry.listener.ListenerMap var58 = var54.getListeners();
    int var59 = var54.getBodyCount();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var60 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var61 = var60.getSeparator();
    ch.bluepenguin.email.client.tapestry.Home var62 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var63 = var62.getBody();
    int var64 = var62.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    int var67 = var65.getBodyCount();
    var62.addComponent((org.apache.tapestry.IComponent)var65);
    java.lang.String var69 = var62.getIdPath();
    org.apache.tapestry.ILocation var70 = var62.getLocation();
    org.apache.tapestry.IEngine var71 = var62.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var72 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var72.setSeparator("");
    java.util.Locale var75 = var72.getMyLocale();
    var62.setLocale(var75);
    var60.setMyLocale(var75);
    var54.setLocale(var75);
    var14.setLocale(var75);
    org.apache.tapestry.engine.IComponentMessagesSource var80 = var14.getComponentMessagesSource();
    var14.forgetPage("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.util.Locale var83 = var14.getLocale();
    var4.setLocale(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0) null"+ "'", var38.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ","+ "'", var61.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test90");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(true);
    boolean var5 = var0.isDirty();
    java.util.logging.Logger var6 = var0.getLogger();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var7 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var8 = var7.getSender();
    boolean var9 = var7.isDirty();
    org.springframework.mail.MailSender var10 = var7.getSender();
    ch.bluepenguin.email.client.cache.MailCache var12 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var13 = var12.getCache();
    var7.setCache(var12);
    var0.setCache(var12);
    java.util.logging.Logger var16 = var0.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var17 = var0.getCache();
    org.springframework.mail.javamail.JavaMailReader var18 = var0.getReader();
    boolean var19 = var0.isDirty();
    boolean var20 = var0.isDirty();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var21 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var22 = var21.getSender();
    ch.bluepenguin.email.client.cache.MailCache var23 = var21.getCache();
    ch.bluepenguin.email.client.cache.MailCache var25 = new ch.bluepenguin.email.client.cache.MailCache("");
    var21.setCache(var25);
    var0.setCache(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test91");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var5 = var0.getSubject();
    java.util.Date var6 = var0.getSentDate();
    java.lang.String var7 = var0.getReplyTo();
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setTechnicalID(100);
    java.lang.String var13 = var8.getReplyTo();
    java.lang.String[] var15 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var8.setCc(var15);
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setFrom("Dummy EmailFacade Impl");
    java.lang.String var21 = var8.getReplyTo();
    java.lang.String var22 = var8.getText();
    var8.setTechnicalID(10);
    int var25 = var8.getTechnicalID();
    var0.copyTo((org.springframework.mail.MailMessage)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 10);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test92");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    org.apache.tapestry.asset.ResourceChecksumSource var5 = var0.getResourceChecksumSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test93");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var4 = new java.lang.String[] { "(0) null"};
    java.lang.String var5 = var0.returnStringList(var4);
    java.util.Locale var6 = var0.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var7 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var7.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    java.lang.String var13 = var10.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var14 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var14.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var17 = var14.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var18 = var14.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    var19.setParentFolderId((java.lang.Integer)1);
    var19.setFullName("hi!");
    var18.setParent(var19);
    var10.setFolder(var19);
    var10.setTo("Dummy EmailFacade Impl");
    java.lang.String[] var29 = var10.getTo();
    java.lang.String var30 = var7.returnStringList(var29);
    ch.bluepenguin.email.client.tapestry.SpringEngine var31 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var31.forgetPage("");
    org.apache.tapestry.engine.IPageSource var34 = var31.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var35 = var31.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var36 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var36.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var39 = var36.getMyLocale();
    var31.setLocale(var39);
    var7.setMyLocale(var39);
    var0.setMyLocale(var39);
    java.util.Locale var43 = var0.getMyLocale();
    java.lang.String var44 = var0.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Dummy EmailFacade Impl"+ "'", var30.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var44.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test94");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    java.lang.String var1 = var0.getUserID();
    var0.setUserID("");
    java.lang.String var4 = var0.getUserID();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setUserID("(0) null\n   (0) null\n   (0) null\n   (0) null");
    java.lang.String var11 = var0.getUserID();
    java.lang.String var12 = var0.getUserID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null\n   (0) null\n   (0) null\n   (0) null"+ "'", var11.equals("(0) null\n   (0) null\n   (0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0) null\n   (0) null\n   (0) null\n   (0) null"+ "'", var12.equals("(0) null\n   (0) null\n   (0) null\n   (0) null"));

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test95");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setParentFolderId((java.lang.Integer)1);
    var5.setFullName("hi!");
    var4.setParent(var5);
    java.lang.Integer var12 = var4.getParentFolderId();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test96");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var19 = var16.getFolder();
    int var20 = var16.getChildCount();
    boolean var21 = var6.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var16);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var26 = var23.getParent();
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    boolean var30 = var28.equals((java.lang.Object)(short)(-1));
    java.util.Collection var31 = var28.getChildren();
    boolean var32 = var23.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var28);
    java.util.Collection var33 = var23.getChildren();
    java.util.Collection var34 = var23.children();
    var6.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    org.apache.tapestry.contrib.tree.model.ITreeNode var36 = var23.getParent();
    org.apache.tapestry.contrib.tree.model.ITreeNode var37 = var23.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test97");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var10 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var10.setSeparator("");
    java.util.Locale var13 = var10.getMyLocale();
    var0.setLocale(var13);
    org.apache.tapestry.spec.IComponentSpecification var15 = var0.getSpecification();
    var0.setId("(0) null\n   (0) null\n   (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test98");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var5 = var0.getSubject();
    java.util.Date var6 = var0.getSentDate();
    ch.bluepenguin.email.client.Folder var7 = var0.getFolder();
    var0.setText("(0) null");
    java.lang.String var10 = var0.getSubject();
    java.lang.String var11 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test99");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    var0.setText("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var7 = var0.toString();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.setText("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var7.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test100");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var3 = var2.getMenuItem();
    boolean var4 = var2.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test101");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    var23.beginPageRender();
    java.util.Collection var25 = var23.getBindingNames();
    var20.setPage((org.apache.tapestry.IPage)var23);
    org.apache.tapestry.listener.ListenerMap var27 = var23.getListeners();
    org.apache.tapestry.event.ChangeObserver var28 = var23.getChangeObserver();
    var0.setPage((org.apache.tapestry.IPage)var23);
    var0.setPageName("(0) null\n   (0) null\n   (0) null");
    java.lang.String var32 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    var33.beginPageRender();
    java.util.Collection var35 = var33.getBindingNames();
    org.apache.tapestry.IAsset var37 = var33.getAsset(",");
    org.apache.tapestry.IBinding var39 = var33.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var40 = var33.getExtendedId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setPage((org.apache.tapestry.IPage)var33);
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "ch.bluepenguin.email.client.tapestry.Home@480dbc66[(0) null\n   (0) null\n   (0) null]"+ "'", var32.equals("ch.bluepenguin.email.client.tapestry.Home@480dbc66[(0) null\n   (0) null\n   (0) null]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test102");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var24.setName("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var30.setIndex(10);
    var30.setParent((java.lang.Object)10L);
    java.lang.Object var35 = var30.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var30);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var37 = var0.getRootList();
    java.lang.String var38 = var37.toString();
    java.util.Iterator var39 = var37.getChildrenIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0) null"+ "'", var38.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test103");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    org.apache.tapestry.INamespace var8 = var5.getNamespace();
    org.apache.tapestry.IPage var9 = var5.getPage();
    org.apache.tapestry.IComponent var10 = var5.getContainer();
    org.apache.tapestry.ILocation var11 = var5.getLocation();
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var12.forgetPage("");
    org.apache.tapestry.engine.IPageSource var15 = var12.getPageSource();
    org.apache.tapestry.engine.IPropertySource var16 = var12.getPropertySource();
    java.util.Collection var17 = var12.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var18 = var12.getComponentMessagesSource();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var21 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var23 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var24 = var23.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var26 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var27 = var26.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var30 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var26.reportException("", (java.lang.Throwable)var30);
    var23.reportException("hi!", (java.lang.Throwable)var30);
    var21.addSuppressed((java.lang.Throwable)var30);
    java.lang.String var34 = var21.toString();
    var12.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ", (java.lang.Throwable)var21);
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    java.lang.String var38 = var36.getPageName();
    java.lang.String var39 = var36.toString();
    org.apache.tapestry.IEngine var40 = var36.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var41 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var42 = var41.getBody();
    java.lang.String var43 = var41.getPageName();
    java.lang.String var44 = var41.toString();
    org.apache.tapestry.IEngine var45 = var41.getEngine();
    var36.addBody((org.apache.tapestry.IRender)var41);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var47 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var47.setSeparator("");
    java.util.Locale var50 = var47.getMyLocale();
    var36.setLocale(var50);
    var12.setLocale(var50);
    var5.setLocale(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var34.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test104");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.detach();
    org.apache.tapestry.listener.ListenerMap var9 = var5.getListeners();
    java.lang.String var10 = var5.getPageName();
    java.lang.String var11 = var5.getId();
    var5.setId("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var14 = var5.getIdPath();
    org.apache.tapestry.spec.IComponentSpecification var15 = var5.getSpecification();
    org.apache.tapestry.IRender[] var16 = var5.getBody();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setId(",");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test105");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var0.setStyleClass("Default EmailFacade Impl");
    var0.setStyleClass(",");
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    var12.setText("hi!");
    var12.setFrom("(0) null\n   (0) null");
    var12.setTechnicalID((-1));
    var12.setBcc("Default EmailFacade Impl");
    java.lang.String[] var26 = new java.lang.String[] { "(0) (0) null"};
    var12.setTo(var26);
    var0.setParameters((java.lang.Object[])var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test106");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    var0.setBcc(",");
    java.lang.String var6 = var0.getSubject();
    var0.setBcc("ch.bluepenguin.email.client.service.EmailFacadeException");
    var0.setReplyTo("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var11 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var12 = var11.getName();
    var11.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.Folder[] var15 = var11.getAllFolders();
    ch.bluepenguin.email.client.Folder var16 = var11.getCurrentFolder();
    var0.setFolder(var16);
    ch.bluepenguin.email.client.MailMessage var18 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var19 = var18.toString();
    ch.bluepenguin.email.client.Folder var20 = var18.getFolder();
    java.util.Date var21 = var18.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var22 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var23 = var22.getSpecification();
    java.lang.Object var24 = var22.getGlobal();
    java.lang.Object var25 = var22.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var28 = var27.getParent();
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    var29.setTechnicalID(100);
    var29.setText("hi!");
    var27.setContained((java.lang.Object)var29);
    var22.setVisit((java.lang.Object)var29);
    java.lang.String var38 = var29.getText();
    var18.copyTo((org.springframework.mail.MailMessage)var29);
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setSubject("hi!");
    var18.copyTo((org.springframework.mail.MailMessage)var40);
    ch.bluepenguin.email.client.MailMessage var46 = new ch.bluepenguin.email.client.MailMessage();
    var46.setBcc("Dummy EmailFacade Impl");
    var46.setTechnicalID(100);
    java.lang.String var51 = var46.getReplyTo();
    java.lang.String[] var53 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var46.setCc(var53);
    var18.setCc(var53);
    ch.bluepenguin.email.client.MailMessage var56 = new ch.bluepenguin.email.client.MailMessage();
    var56.setBcc("Dummy EmailFacade Impl");
    var56.setReplyTo("Dummy EmailFacade Impl");
    var56.setFrom("(0) null");
    var56.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.MailMessage var65 = new ch.bluepenguin.email.client.MailMessage();
    var65.setBcc("Dummy EmailFacade Impl");
    var65.setTechnicalID(100);
    var65.setReplyTo(",");
    var65.setSubject("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var65.setText("ch.bluepenguin.email.client.service.EmailFacadeException");
    ch.bluepenguin.email.client.MailMessage var76 = new ch.bluepenguin.email.client.MailMessage();
    var76.setBcc("Dummy EmailFacade Impl");
    var76.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var81 = var76.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var82 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var83 = var82.getReader();
    ch.bluepenguin.email.client.cache.MailCache var84 = var82.getCache();
    boolean var85 = var76.equals((java.lang.Object)var82);
    var76.setCc("(0) null");
    var76.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var90 = var76.getFolder();
    java.lang.String[] var91 = var76.getCc();
    var65.setCc(var91);
    var56.setTo(var91);
    var18.setTo(var91);
    var0.setTo(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Dummy EmailFacade Impl"+ "'", var12.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var19.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test107");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var3 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var3.setText("Dummy EmailFacade Impl");
    var3.setText(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var3);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    var9.setParameters((java.lang.Object[])var12);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var9);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var15 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var15.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var19 = var15.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var21 = var15.getMessagesFromFolder("hi!");
    var9.setParameters((java.lang.Object[])var21);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    var23.beginPageRender();
    java.util.Collection var25 = var23.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var26 = var23.getListeners();
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    var27.addComponent((org.apache.tapestry.IComponent)var30);
    java.lang.String var34 = var27.getIdPath();
    org.apache.tapestry.ILocation var35 = var27.getLocation();
    java.lang.String var36 = var27.toString();
    org.apache.tapestry.IRender[] var37 = var27.getBody();
    var23.addBody((org.apache.tapestry.IRender)var27);
    org.apache.tapestry.IEngine var39 = var27.getEngine();
    var9.setComponent((org.apache.tapestry.IComponent)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test108");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var3 = var2.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var4 = var2.getDataSqueezer();
    var2.setVisit((java.lang.Object)0.0d);
    boolean var7 = var2.isStateful();
    org.apache.tapestry.engine.IPageSource var8 = var2.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var10 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var10.getSpecification();
    java.lang.Object var12 = var10.getGlobal();
    java.lang.Object var13 = var10.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var16 = var15.getParent();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    var17.setText("hi!");
    var15.setContained((java.lang.Object)var17);
    var10.setVisit((java.lang.Object)var17);
    ch.bluepenguin.email.client.service.EmailFacadeException var27 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var10.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var27);
    var2.reportException(",", (java.lang.Throwable)var27);
    var1.addSuppressed((java.lang.Throwable)var27);
    java.lang.Exception var31 = var27.getTechnicalException();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test109");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setUserID("Default EmailFacade Impl");
    var0.setUserID("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setUserID("hi!");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test110");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var5.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.lang.String var19 = var12.getIdPath();
    org.apache.tapestry.ILocation var20 = var12.getLocation();
    org.apache.tapestry.IEngine var21 = var12.getEngine();
    var12.beginPageRender();
    org.apache.tapestry.ILocation var23 = var12.getLocation();
    var10.setComponent((org.apache.tapestry.IComponent)var12);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    java.lang.String var28 = var25.toString();
    var10.setComponent((org.apache.tapestry.IComponent)var25);
    org.apache.tapestry.IBinding var31 = var25.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test111");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    var2.setLeaf(false);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("");
    java.lang.String var12 = var9.getSeparator();
    var2.setContained((java.lang.Object)var9);
    java.lang.String var14 = var9.getSeparator();
    var9.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test112");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    var8.addComponent((org.apache.tapestry.IComponent)var11);
    java.lang.String var15 = var8.getIdPath();
    org.apache.tapestry.ILocation var16 = var8.getLocation();
    org.apache.tapestry.IEngine var17 = var8.getEngine();
    var8.beginPageRender();
    int var19 = var8.getBodyCount();
    var3.addComponent((org.apache.tapestry.IComponent)var8);
    org.apache.tapestry.IBinding var22 = var3.getBinding(",");
    org.apache.tapestry.IBinding var24 = var3.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.util.Map var25 = var3.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test113");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    var0.setFirstname("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=ch.bluepenguin.email.client.service.EmailFacadeException");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test114");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    var2.setLeaf(false);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("");
    java.lang.String var12 = var9.getSeparator();
    var2.setContained((java.lang.Object)var9);
    java.lang.String var14 = var9.getSeparator();
    java.lang.String var15 = var9.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test115");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.setVisit((java.lang.Object)var3);
    var3.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var12 = var11.displayMenuStructure();
    java.util.Iterator var13 = var11.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var14 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var16 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var17 = var16.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var16);
    var14.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var16);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = var11.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var16);
    java.lang.String var21 = var16.getName();
    java.lang.String var22 = var16.getName();
    var16.setName("Current Folder");
    var16.setIndex(0);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var28 = var27.displayMenuStructure();
    java.util.Iterator var29 = var27.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var33 = var32.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    var30.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = var27.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var32.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    int var41 = var39.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    int var44 = var42.getBodyCount();
    var39.addComponent((org.apache.tapestry.IComponent)var42);
    java.lang.String var46 = var39.getIdPath();
    org.apache.tapestry.ILocation var47 = var39.getLocation();
    org.apache.tapestry.IEngine var48 = var39.getEngine();
    var39.beginPageRender();
    org.apache.tapestry.ILocation var50 = var39.getLocation();
    var37.setComponent((org.apache.tapestry.IComponent)var39);
    var37.setStyleClass("SimpleMailMessage: from=null; replyTo=Default EmailFacade Impl; to=; cc=hi!; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; sentDate=null; subject=null; text=null");
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var16, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0) null"+ "'", var12.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0) null"+ "'", var28.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test116");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.lang.Object var6 = var2.getParent();
    var2.setLeaf(false);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("");
    java.lang.String var12 = var9.getSeparator();
    var2.setContained((java.lang.Object)var9);
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    java.lang.String[] var21 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var14.setCc(var21);
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setSubject("(0) null");
    java.util.Date var27 = var14.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var28 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var28.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var31 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var31.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    var34.setBcc("Dummy EmailFacade Impl");
    var34.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var39 = var34.getSentDate();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    java.lang.String[] var50 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var40.setBcc(var50);
    var34.setCc(var50);
    java.lang.String var53 = var31.returnStringList(var50);
    java.lang.String[] var55 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var56 = var31.returnStringList(var55);
    java.lang.String var57 = var28.returnStringList(var55);
    var14.setTo(var55);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var59 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var59.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var62 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var62.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var65 = new ch.bluepenguin.email.client.MailMessage();
    var65.setBcc("Dummy EmailFacade Impl");
    var65.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var70 = var65.getSentDate();
    ch.bluepenguin.email.client.MailMessage var71 = new ch.bluepenguin.email.client.MailMessage();
    var71.setBcc("Dummy EmailFacade Impl");
    var71.setTechnicalID(100);
    java.lang.String var76 = var71.getReplyTo();
    java.lang.String[] var78 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var71.setCc(var78);
    java.lang.String[] var81 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var71.setBcc(var81);
    var65.setCc(var81);
    java.lang.String var84 = var62.returnStringList(var81);
    java.lang.String[] var86 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var87 = var62.returnStringList(var86);
    java.lang.String var88 = var59.returnStringList(var86);
    var14.setTo(var86);
    java.lang.String var90 = var9.returnStringList(var86);
    var9.setSeparator("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Dummy EmailFacade Impl"+ "'", var53.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var56.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var57.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Dummy EmailFacade Impl"+ "'", var84.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var87.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var88.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var90.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test117");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var5 = new ch.bluepenguin.email.client.Person();
    java.lang.String var6 = var5.getFirstname();
    var5.setLastname("(0) null");
    var5.setLastname("");
    var0.setVisit((java.lang.Object)var5);
    var5.setNickname("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var5.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var16 = var5.getLastname();
    var5.setReserve("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test118");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var3 = var0.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var4.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var7 = var4.getMyLocale();
    var0.setLocale(var7);
    org.apache.tapestry.engine.IPageSource var9 = var0.getPageSource();
    org.apache.tapestry.util.io.DataSqueezer var10 = var0.getDataSqueezer();
    org.apache.tapestry.util.io.DataSqueezer var11 = var0.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test119");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    int var27 = var0.getTechnicalID();
    ch.bluepenguin.email.client.MailMessage var28 = new ch.bluepenguin.email.client.MailMessage();
    var28.setBcc("Dummy EmailFacade Impl");
    var28.setSubject("hi!");
    var0.copyTo((org.springframework.mail.MailMessage)var28);
    java.lang.String var34 = var0.getFrom();
    var0.setText("(0) null\n   (0) null");
    java.lang.String[] var37 = var0.getTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test120");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var3 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var4 = new ch.bluepenguin.email.client.Person();
    java.lang.String var5 = var4.getFirstname();
    var4.setLastname("(0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var4.getUniqueID();
    var0.setPerson(var4);
    ch.bluepenguin.email.client.Person var10 = new ch.bluepenguin.email.client.Person();
    java.lang.String var11 = var10.getFirstname();
    var10.setNickname("");
    var10.setLastname(",");
    java.lang.String var16 = var10.getNickname();
    java.lang.String var17 = var10.getLastname();
    java.lang.String var18 = var10.getFirstname();
    var10.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var21 = var10.getFirstname();
    var0.setPerson(var10);
    var10.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var25 = var10.getLastname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ","+ "'", var17.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ","+ "'", var25.equals(","));

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test121");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.listener.ListenerMap var3 = var0.getListeners();
    java.lang.String var4 = var0.toString();
    org.apache.tapestry.event.ChangeObserver var5 = var0.getChangeObserver();
    org.apache.tapestry.ILocation var6 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test122");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var3 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var4 = new ch.bluepenguin.email.client.Person();
    java.lang.String var5 = var4.getFirstname();
    var4.setLastname("(0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var4.getUniqueID();
    var0.setPerson(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var10 = var0.getUniqueID();
    java.lang.Integer var11 = var10.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test123");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    var0.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var9 = var0.getReserve();
    java.lang.String var10 = var0.getFirstname();
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var10.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test124");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getFirstname();
    java.lang.String var9 = var0.getLastname();
    java.lang.String var10 = var0.getLastname();
    var0.setLastname("hi!");
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var0.getUniqueID();
    java.lang.String var14 = var0.getLastname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ","+ "'", var9.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ","+ "'", var10.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test125");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isDirty();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var4 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var5 = var4.getSeparator();
    java.util.Locale var6 = var4.getMyLocale();
    var0.setLocale(var6);
    org.apache.tapestry.spec.IApplicationSpecification var8 = var0.getSpecification();
    org.apache.tapestry.IResourceResolver var9 = var0.getResourceResolver();
    boolean var10 = var0.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ","+ "'", var5.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test126");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setStyleClass("");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var3 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var3.setText("Dummy EmailFacade Impl");
    var3.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var9 = var8.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var11.setIndex(10);
    var11.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var16 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var18 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var19 = var18.getSuppressed();
    var16.setParameters((java.lang.Object[])var19);
    ch.bluepenguin.email.client.tapestry.Home var21 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var22 = var21.getBody();
    var16.setComponent((org.apache.tapestry.IComponent)var21);
    var8.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var16);
    var16.setStyleClass(",");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var16);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var28.setText("Dummy EmailFacade Impl");
    var28.setText(",");
    var28.setText("hi!");
    var28.setText("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var3.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var28);
    var3.setText("SimpleMailMessage: from=(0) null; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test127");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var7 = var6.getRenderer();
    int var8 = var6.getDepth();
    var6.setDepth(0);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    java.lang.String var13 = var12.toString();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    java.lang.String var16 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0) null"+ "'", var13.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null"+ "'", var15.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test128");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    var0.setDirty(false);
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var4 = var3.getSender();
    boolean var5 = var3.isDirty();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var7 = var6.getSender();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var8 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var10 = new ch.bluepenguin.email.client.cache.MailCache("");
    var8.setCache(var10);
    ch.bluepenguin.email.client.cache.MailCache var13 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var14 = var13.getCache();
    var8.setCache(var13);
    var6.setCache(var13);
    var3.setCache(var13);
    var0.setCache(var13);
    java.util.logging.Logger var19 = var0.getLogger();
    boolean var20 = var0.isDirty();
    ch.bluepenguin.email.client.cache.MailCache var21 = var0.getCache();
    org.springframework.mail.MailSender var22 = var0.getSender();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var23 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var24 = var23.getReader();
    ch.bluepenguin.email.client.cache.MailCache var25 = var23.getCache();
    var23.setDirty(false);
    java.util.logging.Logger var28 = var23.getLogger();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var29 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    var29.setDirty(false);
    ch.bluepenguin.email.client.cache.MailCache var32 = var29.getCache();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var33 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var35 = new ch.bluepenguin.email.client.cache.MailCache("");
    var33.setCache(var35);
    ch.bluepenguin.email.client.cache.MailCache var38 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var39 = var38.getCache();
    var33.setCache(var38);
    org.springframework.mail.MailSender var41 = var33.getSender();
    org.springframework.mail.javamail.JavaMailReader var42 = var33.getReader();
    ch.bluepenguin.email.client.cache.MailCache var43 = var33.getCache();
    var29.setCache(var43);
    var23.setCache(var43);
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var46 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var47 = var46.getSender();
    boolean var48 = var46.isDirty();
    org.springframework.mail.MailSender var49 = var46.getSender();
    boolean var50 = var46.isDirty();
    org.springframework.mail.MailSender var51 = var46.getSender();
    java.lang.String var52 = var46.getName();
    org.springframework.mail.javamail.JavaMailReader var53 = var46.getReader();
    ch.bluepenguin.email.client.MailMessage var54 = new ch.bluepenguin.email.client.MailMessage();
    var54.setBcc("Dummy EmailFacade Impl");
    var54.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var59 = var54.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var60 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var61 = var60.getReader();
    ch.bluepenguin.email.client.cache.MailCache var62 = var60.getCache();
    boolean var63 = var54.equals((java.lang.Object)var60);
    ch.bluepenguin.email.client.cache.MailCache var64 = var60.getCache();
    var60.setDirty(false);
    ch.bluepenguin.email.client.MailMessage var67 = new ch.bluepenguin.email.client.MailMessage();
    var67.setBcc("Dummy EmailFacade Impl");
    var67.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var72 = var67.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var73 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var74 = var73.getReader();
    ch.bluepenguin.email.client.cache.MailCache var75 = var73.getCache();
    boolean var76 = var67.equals((java.lang.Object)var73);
    ch.bluepenguin.email.client.cache.MailCache var77 = var73.getCache();
    var73.setDirty(false);
    ch.bluepenguin.email.client.cache.MailCache var81 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var82 = var81.getCache();
    var73.setCache(var81);
    var60.setCache(var81);
    var46.setCache(var81);
    ch.bluepenguin.email.client.cache.MailCache var86 = var46.getCache();
    var23.setCache(var86);
    var0.setCache(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Default EmailFacade Impl"+ "'", var52.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test129");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var3 = var2.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.util.Iterator var6 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setLeaf(false);
    boolean var11 = var8.isLeaf();
    var8.setLeaf(false);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    java.lang.String var15 = var0.displayMenuStructure();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0) null\n   (0) null"+ "'", var15.equals("(0) null\n   (0) null"));

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test130");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    org.apache.tapestry.IResourceResolver var6 = var0.getResourceResolver();
    java.util.Collection var7 = var0.getActivePageNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test131");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.INamespace var7 = var0.getNamespace();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    var8.addComponent((org.apache.tapestry.IComponent)var11);
    java.lang.String var15 = var8.getIdPath();
    org.apache.tapestry.ILocation var16 = var8.getLocation();
    org.apache.tapestry.IEngine var17 = var8.getEngine();
    var8.beginPageRender();
    var0.addComponent((org.apache.tapestry.IComponent)var8);
    org.apache.tapestry.IComponent var20 = var8.getContainer();
    ch.bluepenguin.email.client.tapestry.Home var21 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var22 = var21.getBody();
    int var23 = var21.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var24 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var25 = var24.getBody();
    int var26 = var24.getBodyCount();
    var21.addComponent((org.apache.tapestry.IComponent)var24);
    java.lang.String var28 = var21.getIdPath();
    org.apache.tapestry.ILocation var29 = var21.getLocation();
    org.apache.tapestry.IEngine var30 = var21.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    var34.beginPageRender();
    java.util.Collection var36 = var34.getBindingNames();
    var31.setPage((org.apache.tapestry.IPage)var34);
    var21.addComponent((org.apache.tapestry.IComponent)var34);
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    int var41 = var39.getBodyCount();
    org.apache.tapestry.IAsset var43 = var39.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var44 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var46 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    var44.setParameters((java.lang.Object[])var47);
    ch.bluepenguin.email.client.tapestry.Home var49 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var50 = var49.getBody();
    var44.setComponent((org.apache.tapestry.IComponent)var49);
    ch.bluepenguin.email.client.tapestry.Home var52 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var53 = var52.getBody();
    int var54 = var52.getBodyCount();
    var52.setPageName("");
    var49.addBody((org.apache.tapestry.IRender)var52);
    var39.setContainer((org.apache.tapestry.IComponent)var52);
    var21.addComponent((org.apache.tapestry.IComponent)var39);
    ch.bluepenguin.email.client.tapestry.Home var60 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var61 = var60.getBody();
    int var62 = var60.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var63 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var64 = var63.getBody();
    int var65 = var63.getBodyCount();
    var60.addComponent((org.apache.tapestry.IComponent)var63);
    java.util.Map var67 = var63.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var68 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var68.forgetPage("");
    org.apache.tapestry.engine.IPageSource var71 = var68.getPageSource();
    org.apache.tapestry.engine.IPropertySource var72 = var68.getPropertySource();
    java.util.Collection var73 = var68.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var74 = var68.getComponentMessagesSource();
    var63.attach((org.apache.tapestry.IEngine)var68);
    java.lang.Object var76 = var63.getVisit();
    var63.setPageName("Default EmailFacade Impl");
    var39.addBody((org.apache.tapestry.IRender)var63);
    var39.setPageName("(0) null\n   (0) null\n   (0) null\n   (0) null");
    var8.setContainer((org.apache.tapestry.IComponent)var39);
    ch.bluepenguin.email.client.tapestry.SpringEngine var83 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var84 = var83.getVisit();
    java.util.Locale var85 = var83.getLocale();
    org.apache.tapestry.IResourceResolver var86 = var83.getResourceResolver();
    org.apache.tapestry.engine.IPropertySource var87 = var83.getPropertySource();
    org.apache.tapestry.engine.IComponentClassEnhancer var88 = var83.getComponentClassEnhancer();
    var8.attach((org.apache.tapestry.IEngine)var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test132");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setFullName("hi!");
    java.lang.String var4 = var0.getName();
    java.lang.Integer var5 = var0.getParentFolderId();
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Account var7 = var0.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test133");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var5 = new ch.bluepenguin.email.client.Person();
    java.lang.String var6 = var5.getFirstname();
    var5.setLastname("(0) null");
    var5.setLastname("");
    var0.setVisit((java.lang.Object)var5);
    boolean var12 = var0.isResetServiceEnabled();
    java.lang.Object var13 = var0.getGlobal();
    java.lang.Object var14 = var0.getGlobal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test134");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("");
    java.lang.String var17 = var14.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var18 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var18.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var21 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var21.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var24 = new ch.bluepenguin.email.client.MailMessage();
    var24.setBcc("Dummy EmailFacade Impl");
    var24.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var29 = var24.getSentDate();
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setTechnicalID(100);
    java.lang.String var35 = var30.getReplyTo();
    java.lang.String[] var37 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var30.setCc(var37);
    java.lang.String[] var40 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var30.setBcc(var40);
    var24.setCc(var40);
    java.lang.String var43 = var21.returnStringList(var40);
    java.lang.String[] var45 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var46 = var21.returnStringList(var45);
    java.lang.String var47 = var18.returnStringList(var45);
    ch.bluepenguin.email.client.MailMessage var48 = new ch.bluepenguin.email.client.MailMessage();
    var48.setBcc("Dummy EmailFacade Impl");
    var48.setTechnicalID(100);
    var48.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var55 = new ch.bluepenguin.email.client.MailMessage();
    var55.setBcc("Dummy EmailFacade Impl");
    var55.setTechnicalID(100);
    java.lang.String var60 = var55.getReplyTo();
    java.lang.String[] var62 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var55.setCc(var62);
    var48.setBcc(var62);
    ch.bluepenguin.email.client.MailMessage var65 = new ch.bluepenguin.email.client.MailMessage();
    var65.setBcc("Dummy EmailFacade Impl");
    java.lang.String var68 = var65.getReplyTo();
    var65.setBcc(",");
    var48.copyTo((org.springframework.mail.MailMessage)var65);
    java.lang.String var72 = var48.getReplyTo();
    java.lang.String[] var73 = var48.getBcc();
    java.lang.String var74 = var18.returnStringList(var73);
    java.lang.String var75 = var14.returnStringList(var73);
    var0.setCc(var73);
    ch.bluepenguin.email.client.AbstractUniqueID var77 = var0.getUniqueID();
    java.lang.String var78 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "Dummy EmailFacade Impl"+ "'", var43.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var46.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var47.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var74.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var75.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test135");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    org.apache.tapestry.engine.IComponentClassEnhancer var5 = var0.getComponentClassEnhancer();
    java.util.Collection var6 = var0.getActivePageNames();
    boolean var7 = var0.isDirty();
    java.util.Collection var8 = var0.getActivePageNames();
    java.lang.String var9 = var0.getServletPath();
    java.lang.String var10 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test136");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IBinding var13 = var4.getBinding("(0) null");
    java.lang.String var14 = var4.getPageName();
    org.apache.tapestry.IPage var15 = var4.getPage();
    java.util.Locale var16 = var4.getLocale();
    var4.setPageName("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test137");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    org.apache.tapestry.engine.IPageSource var2 = var0.getPageSource();
    java.lang.String var3 = var0.getContextPath();
    boolean var4 = var0.isStateful();
    org.apache.tapestry.IResourceResolver var5 = var0.getResourceResolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test138");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var2 = var1.getRenderer();
    int var3 = var1.getDepth();
    var1.setDepth(0);
    var1.setDepth(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test139");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var5 = var4.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var2.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.Object var8 = var4.getParent();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var11.setParent(var13);
    var4.setContained((java.lang.Object)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var4.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var4.setLeaf(false);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.getChildren();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var31 = var30.isLeaf();
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    boolean var35 = var33.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var36 = var33.getParent();
    var30.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var33);
    boolean var38 = var25.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var30);
    ch.bluepenguin.email.client.Folder var39 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var40 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var39);
    boolean var41 = var40.isLeaf();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    boolean var45 = var43.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var46 = var43.getParent();
    var40.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var43);
    ch.bluepenguin.email.client.Folder var48 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var49 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var48);
    boolean var51 = var49.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var52 = var49.getParent();
    var40.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var49);
    boolean var54 = var25.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var49);
    ch.bluepenguin.email.client.Folder var55 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var56 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var55);
    boolean var58 = var56.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var59 = var56.getParent();
    ch.bluepenguin.email.client.Folder var60 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var61 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var60);
    boolean var63 = var61.equals((java.lang.Object)(short)(-1));
    java.util.Collection var64 = var61.getChildren();
    boolean var65 = var56.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var61);
    java.util.Collection var66 = var56.getChildren();
    var25.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var56);
    var4.setContained((java.lang.Object)var56);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var69 = var4.getRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var70 = var4.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test140");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    var2.setParentFolderId((java.lang.Integer)0);
    var2.setParentFolderId((java.lang.Integer)10);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var10 = var9.isLeaf();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var21 = var18.getParent();
    var9.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    boolean var23 = var9.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var24.forgetPage("");
    org.apache.tapestry.engine.IPageSource var27 = var24.getPageSource();
    java.lang.Object var28 = var24.getGlobal();
    java.lang.Object var29 = var24.getGlobal();
    boolean var30 = var9.equals((java.lang.Object)var24);
    org.apache.tapestry.util.io.DataSqueezer var31 = var24.createDataSqueezer();
    org.apache.tapestry.util.pool.Pool var32 = var24.getPool();
    org.apache.tapestry.engine.IPageSource var33 = var24.getPageSource();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    var35.setFolder(var36);
    ch.bluepenguin.email.client.Folder var38 = var35.getFolder();
    var24.setVisit((java.lang.Object)var35);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var40 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var2, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    boolean var41 = var35.isLeaf();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    boolean var44 = var43.isLeaf();
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    boolean var48 = var46.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var49 = var46.getParent();
    var43.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var46);
    ch.bluepenguin.email.client.Folder var51 = var43.getFolder();
    ch.bluepenguin.email.client.Folder var52 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var53 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var52);
    boolean var55 = var53.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var56 = var53.getFolder();
    ch.bluepenguin.email.client.Folder var57 = var53.getFolder();
    var43.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var53);
    java.util.Collection var59 = var43.children();
    boolean var60 = var35.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test141");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    var2.setFullName("hi!");
    ch.bluepenguin.email.client.Account var12 = var2.getAccount();
    ch.bluepenguin.email.client.Account var13 = var2.getAccount();
    ch.bluepenguin.email.client.Folder var14 = var2.getParent();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    var16.setFolder(var17);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    var19.setFullName("hi!");
    var17.setParent(var19);
    ch.bluepenguin.email.client.AbstractUniqueID var24 = var17.getUniqueID();
    java.lang.String var25 = var17.getFullName();
    var14.setParent(var17);
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    var27.setParentFolderId((java.lang.Integer)1);
    var27.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var33 = var27.getAccount();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var37 = var35.equals((java.lang.Object)(short)(-1));
    java.util.Collection var38 = var35.children();
    boolean var39 = var35.getAllowsChildren();
    int var40 = var35.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    var27.setName("");
    ch.bluepenguin.email.client.Account var44 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var45 = var44.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var46 = var44.getUniqueID();
    ch.bluepenguin.email.client.Person var47 = new ch.bluepenguin.email.client.Person();
    java.lang.String var48 = var47.getFirstname();
    var44.setPerson(var47);
    ch.bluepenguin.email.client.Person var50 = var44.getPerson();
    var27.setAccount(var44);
    ch.bluepenguin.email.client.Account var52 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var53 = var52.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var54 = var52.getUniqueID();
    ch.bluepenguin.email.client.Person var55 = new ch.bluepenguin.email.client.Person();
    java.lang.String var56 = var55.getFirstname();
    var52.setPerson(var55);
    ch.bluepenguin.email.client.Person var58 = new ch.bluepenguin.email.client.Person();
    java.lang.String var59 = var58.getFirstname();
    var58.setNickname("");
    var58.setLastname(",");
    java.lang.String var64 = var58.getNickname();
    java.lang.String var65 = var58.getLastname();
    var52.setPerson(var58);
    ch.bluepenguin.email.client.AbstractUniqueID var67 = var52.getUniqueID();
    var27.setAccount(var52);
    var17.setAccount(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ","+ "'", var65.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test142");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("hi!");
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setParentFolderId((java.lang.Integer)1);
    var5.setParentFolderId((java.lang.Integer)0);
    var0.setFolder(var5);
    java.lang.String var12 = var0.getFrom();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test143");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    var3.beginPageRender();
    org.apache.tapestry.IPage var9 = var3.getPage();
    java.lang.String var10 = var3.getIdPath();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var12 = var3.getNestedComponent("SimpleMailMessage: from=null; replyTo=Default EmailFacade Impl; to=; cc=hi!; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test144");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var0.setLocale("Default EmailFacade Impl");
    java.lang.String var3 = var0.getLocale();
    java.lang.String var4 = var0.getLocale();
    java.lang.String var5 = var0.getLocale();
    var0.setLocale("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var8 = var0.getLocale();
    var0.setLocale("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=(0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Default EmailFacade Impl"+ "'", var3.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Default EmailFacade Impl"+ "'", var4.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Default EmailFacade Impl"+ "'", var5.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var8.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test145");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    java.lang.String[] var2 = var0.getCc();
    int var3 = var0.getTechnicalID();
    ch.bluepenguin.email.client.MailMessage var4 = new ch.bluepenguin.email.client.MailMessage();
    var4.setBcc("Dummy EmailFacade Impl");
    var4.setTechnicalID(100);
    java.lang.String var9 = var4.getReplyTo();
    java.lang.String[] var11 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var4.setCc(var11);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var13 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    var14.setTo("");
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var27 = var22.getSentDate();
    ch.bluepenguin.email.client.MailMessage var28 = new ch.bluepenguin.email.client.MailMessage();
    var28.setBcc("Dummy EmailFacade Impl");
    var28.setTechnicalID(100);
    java.lang.String var33 = var28.getReplyTo();
    java.lang.String[] var35 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var28.setCc(var35);
    java.lang.String[] var38 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var28.setBcc(var38);
    var22.setCc(var38);
    var14.copyTo((org.springframework.mail.MailMessage)var22);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var42 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var42.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var45 = new ch.bluepenguin.email.client.MailMessage();
    var45.setBcc("Dummy EmailFacade Impl");
    var45.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var50 = var45.getSentDate();
    ch.bluepenguin.email.client.MailMessage var51 = new ch.bluepenguin.email.client.MailMessage();
    var51.setBcc("Dummy EmailFacade Impl");
    var51.setTechnicalID(100);
    java.lang.String var56 = var51.getReplyTo();
    java.lang.String[] var58 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var51.setCc(var58);
    java.lang.String[] var61 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var51.setBcc(var61);
    var45.setCc(var61);
    java.lang.String var64 = var42.returnStringList(var61);
    java.lang.String[] var66 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var67 = var42.returnStringList(var66);
    var14.setTo(var66);
    java.lang.String var69 = var13.returnStringList(var66);
    var4.setTo(var66);
    var0.setBcc(var66);
    java.lang.String var72 = var0.getReplyTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Dummy EmailFacade Impl"+ "'", var64.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var67.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var69.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test146");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    java.lang.String var12 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    var16.beginPageRender();
    java.util.Collection var18 = var16.getBindingNames();
    var13.setPage((org.apache.tapestry.IPage)var16);
    org.apache.tapestry.listener.ListenerMap var20 = var16.getListeners();
    int var21 = var16.getBodyCount();
    var16.endPageRender();
    java.lang.String var23 = var16.getExtendedId();
    java.lang.String var24 = var16.getPageName();
    var0.setPage((org.apache.tapestry.IPage)var16);
    java.lang.String var26 = var0.getPageName();
    org.apache.tapestry.event.ChangeObserver var27 = var0.getChangeObserver();
    java.util.Locale var28 = var0.getLocale();
    java.lang.String var29 = var0.getIdPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test147");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.setAll(false);
    boolean var4 = var0.isDirty((java.lang.Integer)0);
    var0.setState((java.lang.Integer)1, true);
    boolean var8 = var0.isAllClean();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test148");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    org.apache.tapestry.asset.ResourceChecksumSource var5 = var0.getResourceChecksumSource();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    boolean var9 = var7.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var10 = var7.getFolder();
    ch.bluepenguin.email.client.Folder var11 = var7.getFolder();
    var11.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    boolean var16 = var15.isLeaf();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var19 = var18.isLeaf();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    boolean var23 = var21.equals((java.lang.Object)(short)(-1));
    java.util.Collection var24 = var21.getChildren();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var27 = var26.isLeaf();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var31 = var29.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var32 = var29.getParent();
    var26.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    boolean var34 = var21.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var26);
    boolean var35 = var18.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var26);
    var15.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    var0.setVisit((java.lang.Object)var26);
    java.lang.Object var39 = var0.getVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test149");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    var0.setFrom("hi!");
    java.util.Date var4 = var0.getSentDate();
    var0.setTechnicalID((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test150");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    var0.setText("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test151");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.setPageName("Dummy EmailFacade Impl");
    var0.setId("(0) null\n   (0) null");
    int var5 = var0.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var6 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var8 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    var6.setParameters((java.lang.Object[])var9);
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    var6.setComponent((org.apache.tapestry.IComponent)var11);
    var11.setId("Dummy EmailFacade Impl");
    int var16 = var11.getBodyCount();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    var22.addComponent((org.apache.tapestry.IComponent)var25);
    java.util.Map var29 = var25.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var30 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var30.forgetPage("");
    org.apache.tapestry.engine.IPageSource var33 = var30.getPageSource();
    org.apache.tapestry.engine.IPropertySource var34 = var30.getPropertySource();
    java.util.Collection var35 = var30.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var36 = var30.getComponentMessagesSource();
    var25.attach((org.apache.tapestry.IEngine)var30);
    boolean var38 = var18.equals((java.lang.Object)var30);
    org.apache.tapestry.engine.IComponentClassEnhancer var39 = var30.getComponentClassEnhancer();
    var11.attach((org.apache.tapestry.IEngine)var30);
    var0.setContainer((org.apache.tapestry.IComponent)var11);
    org.apache.tapestry.IRender[] var42 = var11.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test152");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    var0.forgetPage(",");
    java.lang.Object var5 = var0.getVisit();
    boolean var6 = var0.isStateful();
    org.apache.tapestry.engine.IScriptSource var7 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test153");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    java.lang.Object var20 = var16.getGlobal();
    java.lang.Object var21 = var16.getGlobal();
    boolean var22 = var1.equals((java.lang.Object)var16);
    org.apache.tapestry.util.io.DataSqueezer var23 = var16.createDataSqueezer();
    org.apache.tapestry.engine.IPropertySource var24 = var16.getPropertySource();
    org.apache.tapestry.util.io.DataSqueezer var25 = var16.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test154");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var6 = var5.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setIndex(10);
    var8.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    var5.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var13.setStyleClass(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.email.client.MailMessage var27 = new ch.bluepenguin.email.client.MailMessage();
    var27.setBcc("Dummy EmailFacade Impl");
    var27.setTechnicalID(100);
    java.lang.String var32 = var27.getReplyTo();
    var27.setTo("");
    ch.bluepenguin.email.client.MailMessage var35 = new ch.bluepenguin.email.client.MailMessage();
    var35.setBcc("Dummy EmailFacade Impl");
    var35.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var40 = var35.getSentDate();
    ch.bluepenguin.email.client.MailMessage var41 = new ch.bluepenguin.email.client.MailMessage();
    var41.setBcc("Dummy EmailFacade Impl");
    var41.setTechnicalID(100);
    java.lang.String var46 = var41.getReplyTo();
    java.lang.String[] var48 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var41.setCc(var48);
    java.lang.String[] var51 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var41.setBcc(var51);
    var35.setCc(var51);
    var27.copyTo((org.springframework.mail.MailMessage)var35);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var55 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var55.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var58 = new ch.bluepenguin.email.client.MailMessage();
    var58.setBcc("Dummy EmailFacade Impl");
    var58.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var63 = var58.getSentDate();
    ch.bluepenguin.email.client.MailMessage var64 = new ch.bluepenguin.email.client.MailMessage();
    var64.setBcc("Dummy EmailFacade Impl");
    var64.setTechnicalID(100);
    java.lang.String var69 = var64.getReplyTo();
    java.lang.String[] var71 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var64.setCc(var71);
    java.lang.String[] var74 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var64.setBcc(var74);
    var58.setCc(var74);
    java.lang.String var77 = var55.returnStringList(var74);
    java.lang.String[] var79 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var80 = var55.returnStringList(var79);
    var27.setTo(var79);
    var25.setParameters((java.lang.Object[])var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Dummy EmailFacade Impl"+ "'", var77.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var80.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test155");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    java.lang.Object var20 = var16.getGlobal();
    java.lang.Object var21 = var16.getGlobal();
    boolean var22 = var1.equals((java.lang.Object)var16);
    org.apache.tapestry.util.io.DataSqueezer var23 = var16.createDataSqueezer();
    org.apache.tapestry.spec.IApplicationSpecification var24 = var16.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test156");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    var0.setBcc(var14);
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    java.lang.String var20 = var17.getReplyTo();
    var17.setBcc(",");
    var0.copyTo((org.springframework.mail.MailMessage)var17);
    java.lang.String var24 = var17.getFrom();
    var17.setText("ch.bluepenguin.email.client.service.EmailFacadeException");
    java.lang.String var27 = var17.getFrom();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test157");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    var0.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    var8.addComponent((org.apache.tapestry.IComponent)var11);
    java.util.Map var15 = var11.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    org.apache.tapestry.engine.IPropertySource var20 = var16.getPropertySource();
    java.util.Collection var21 = var16.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var22 = var16.getComponentMessagesSource();
    var11.attach((org.apache.tapestry.IEngine)var16);
    var0.addBody((org.apache.tapestry.IRender)var11);
    java.util.Map var25 = var11.getAssets();
    var11.setId("(0) null\n   (0) null\n   (0) null\n   (0) null");
    org.apache.tapestry.IEngine var28 = var11.getEngine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test158");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var14 = var11.getFolder();
    ch.bluepenguin.email.client.Folder var15 = var11.getFolder();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var19 = var18.isLeaf();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    boolean var23 = var21.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var24 = var21.getParent();
    var18.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var21);
    ch.bluepenguin.email.client.Folder var26 = var18.getFolder();
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    boolean var30 = var28.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var31 = var28.getFolder();
    ch.bluepenguin.email.client.Folder var32 = var28.getFolder();
    var18.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var28);
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var37 = var35.equals((java.lang.Object)(short)(-1));
    java.util.Collection var38 = var35.getChildren();
    ch.bluepenguin.email.client.Folder var39 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var40 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var39);
    boolean var41 = var40.isLeaf();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    boolean var45 = var43.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var46 = var43.getParent();
    var40.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var43);
    boolean var48 = var35.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var40);
    var28.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    var11.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var28);
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    boolean var54 = var52.equals((java.lang.Object)(short)(-1));
    java.util.Collection var55 = var52.children();
    boolean var56 = var52.getAllowsChildren();
    int var57 = var52.getChildCount();
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    ch.bluepenguin.email.client.Folder var60 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var61 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var60);
    boolean var63 = var61.equals((java.lang.Object)(short)(-1));
    boolean var64 = var59.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var61);
    var52.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var59);
    var28.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test159");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    org.apache.tapestry.engine.IScriptSource var3 = var0.getScriptSource();
    ch.bluepenguin.email.client.service.impl.EmailFacadeState var4 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var4.clear();
    var4.setAll(true);
    var4.clear();
    var4.clear();
    var4.setAll(false);
    var0.setVisit((java.lang.Object)false);
    org.apache.tapestry.engine.ISpecificationSource var13 = var0.getSpecificationSource();
    org.apache.tapestry.engine.IPropertySource var14 = var0.getPropertySource();
    org.apache.tapestry.engine.IScriptSource var15 = var0.getScriptSource();
    java.lang.Object var16 = var0.getVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + false+ "'", var16.equals(false));

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test160");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var4 = var3.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var7 = var6.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var9 = var8.getMenuItem();
    int var10 = var8.getChildrenSize();
    var3.addChild(var8);
    int var12 = var8.getChildrenSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test161");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setUserID("Default EmailFacade Impl");
    java.lang.String var7 = var0.getUserID();
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=,");
    java.lang.String var10 = var0.getUserID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Default EmailFacade Impl"+ "'", var7.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=,"+ "'", var10.equals("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=,"));

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test162");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.detach();
    org.apache.tapestry.listener.ListenerMap var9 = var5.getListeners();
    java.lang.String var10 = var5.getPageName();
    java.lang.String var11 = var5.getId();
    java.lang.String var12 = var5.getIdPath();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    org.apache.tapestry.IEngine var16 = var13.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    int var19 = var17.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    var17.addComponent((org.apache.tapestry.IComponent)var20);
    var17.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    var25.addComponent((org.apache.tapestry.IComponent)var28);
    java.util.Map var32 = var28.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var33 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var33.forgetPage("");
    org.apache.tapestry.engine.IPageSource var36 = var33.getPageSource();
    org.apache.tapestry.engine.IPropertySource var37 = var33.getPropertySource();
    java.util.Collection var38 = var33.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var39 = var33.getComponentMessagesSource();
    var28.attach((org.apache.tapestry.IEngine)var33);
    var17.addBody((org.apache.tapestry.IRender)var28);
    var13.addComponent((org.apache.tapestry.IComponent)var17);
    org.apache.tapestry.IComponent var43 = var17.getContainer();
    org.apache.tapestry.IPage var44 = var17.getPage();
    var5.addBody((org.apache.tapestry.IRender)var17);
    java.util.Locale var46 = var5.getLocale();
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    var47.beginPageRender();
    java.util.Collection var49 = var47.getBindingNames();
    org.apache.tapestry.IAsset var51 = var47.getAsset(",");
    java.lang.String var52 = var47.toString();
    java.lang.String var53 = var47.toString();
    java.lang.String var54 = var47.getIdPath();
    java.util.Locale var55 = var47.getLocale();
    org.apache.tapestry.IRequestCycle var56 = var47.getRequestCycle();
    ch.bluepenguin.email.client.tapestry.SpringEngine var57 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var57.forgetPage("");
    var57.forgetPage(",");
    org.apache.tapestry.listener.ListenerMap var62 = var57.getListeners();
    java.lang.Object var63 = var57.getGlobal();
    boolean var64 = var57.isStateful();
    var47.attach((org.apache.tapestry.IEngine)var57);
    var5.setPage((org.apache.tapestry.IPage)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test163");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var1 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var2 = var1.getSuppressed();
    var0.setTechnicalException((java.lang.Exception)var1);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    int var5 = var4.getIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test164");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    java.util.Map var1 = var0.getComponents();
    var0.beginPageRender();
    var0.endPageRender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test165");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    var0.checkMenuModelHealth();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var6.setParent((java.lang.Object)100L);
    java.lang.String var9 = var6.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var11 = var6.getRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var15 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var15.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var18.setText("Dummy EmailFacade Impl");
    var18.setText(",");
    var15.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var15);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var25.setHyperlink("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var6.setLeaf(false);
    java.lang.Object var32 = var6.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test166");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    java.util.Date var3 = var0.getSentDate();
    java.lang.String var4 = var0.getFrom();
    java.lang.String var5 = var0.getReplyTo();
    var0.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test167");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    var0.endPageRender();
    var0.setId("Dummy EmailFacade Impl");
    var0.detach();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test168");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var3 = var0.getUniqueID();
    ch.bluepenguin.email.client.Account var4 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var5 = var4.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var4.getUniqueID();
    ch.bluepenguin.email.client.Person var7 = new ch.bluepenguin.email.client.Person();
    java.lang.String var8 = var7.getFirstname();
    var4.setPerson(var7);
    ch.bluepenguin.email.client.Person var10 = new ch.bluepenguin.email.client.Person();
    java.lang.String var11 = var10.getFirstname();
    var10.setNickname("");
    var10.setLastname(",");
    java.lang.String var16 = var10.getNickname();
    java.lang.String var17 = var10.getLastname();
    var4.setPerson(var10);
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var4.getUniqueID();
    ch.bluepenguin.email.client.Person var20 = new ch.bluepenguin.email.client.Person();
    java.lang.String var21 = var20.getFirstname();
    var20.setNickname("");
    var20.setLastname(",");
    java.lang.String var26 = var20.getNickname();
    var4.setPerson(var20);
    var20.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setPerson(var20);
    ch.bluepenguin.email.client.Person var31 = new ch.bluepenguin.email.client.Person();
    var0.setPerson(var31);
    java.lang.String var33 = var31.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ","+ "'", var17.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test169");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var1 = var0.getSender();
    boolean var2 = var0.isDirty();
    java.util.logging.Logger var3 = var0.getLogger();
    java.lang.String var4 = var0.getName();
    org.springframework.mail.MailSender var5 = var0.getSender();
    boolean var6 = var0.isDirty();
    var0.setDirty(true);
    ch.bluepenguin.email.client.cache.MailCache var9 = var0.getCache();
    ch.bluepenguin.email.client.cache.MailCache var10 = var0.getCache();
    ch.bluepenguin.email.client.cache.MailCache var12 = new ch.bluepenguin.email.client.cache.MailCache("Current Folder");
    var0.setCache(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Default EmailFacade Impl"+ "'", var4.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test170");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    org.apache.tapestry.IAsset var9 = var3.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IBinding var11 = var3.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Map var12 = var3.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test171");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.IBinding var8 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var0.setId("SimpleMailMessage: from=null; replyTo=Default EmailFacade Impl; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test172");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var0.getUniqueID();
    var0.setFrom("(0) null");
    java.lang.String[] var22 = var0.getBcc();
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    var23.setBcc("Dummy EmailFacade Impl");
    var23.setTechnicalID(100);
    java.lang.String var28 = var23.getReplyTo();
    java.lang.String[] var30 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var23.setCc(var30);
    var23.setBcc("Dummy EmailFacade Impl");
    var23.setSubject("hi!");
    java.lang.String var36 = var23.toString();
    java.lang.String var37 = var23.getText();
    java.lang.String[] var38 = var23.getCc();
    var0.setTo(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var36.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test173");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    var4.setFullName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var7 = var4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test174");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.util.Locale var2 = var0.getLocale();
    java.lang.Object var3 = var0.getGlobal();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test175");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    var0.checkMenuModelHealth();
    java.util.Iterator var4 = var0.getMenuItemsDepthFirst();
    java.lang.String var5 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setParent((java.lang.Object)100L);
    int var11 = var8.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    boolean var13 = var12.checkConsistency();
    var6.addChild(var12);
    java.util.Iterator var15 = var6.getChildrenIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test176");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setReplyTo("Default EmailFacade Impl");
    java.util.Date var21 = var0.getSentDate();
    java.util.Date var22 = var0.getSentDate();
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    var23.setBcc("Dummy EmailFacade Impl");
    var23.setTechnicalID(100);
    java.lang.String var28 = var23.getReplyTo();
    java.lang.String[] var29 = var23.getCc();
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setTechnicalID(100);
    var30.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var37 = new ch.bluepenguin.email.client.MailMessage();
    var37.setBcc("Dummy EmailFacade Impl");
    var37.setTechnicalID(100);
    java.lang.String var42 = var37.getReplyTo();
    java.lang.String[] var44 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var37.setCc(var44);
    var30.setBcc(var44);
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setTechnicalID(100);
    java.lang.String var52 = var47.getReplyTo();
    java.lang.String[] var54 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var47.setCc(var54);
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setSubject("(0) null");
    java.util.Date var60 = var47.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var61 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var61.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var64 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var64.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var67 = new ch.bluepenguin.email.client.MailMessage();
    var67.setBcc("Dummy EmailFacade Impl");
    var67.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var72 = var67.getSentDate();
    ch.bluepenguin.email.client.MailMessage var73 = new ch.bluepenguin.email.client.MailMessage();
    var73.setBcc("Dummy EmailFacade Impl");
    var73.setTechnicalID(100);
    java.lang.String var78 = var73.getReplyTo();
    java.lang.String[] var80 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var73.setCc(var80);
    java.lang.String[] var83 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var73.setBcc(var83);
    var67.setCc(var83);
    java.lang.String var86 = var64.returnStringList(var83);
    java.lang.String[] var88 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var89 = var64.returnStringList(var88);
    java.lang.String var90 = var61.returnStringList(var88);
    var47.setTo(var88);
    java.lang.String[] var92 = var47.getCc();
    var30.setTo(var92);
    var23.setBcc(var92);
    var0.setCc(var92);
    var0.setTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "Dummy EmailFacade Impl"+ "'", var86.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var89.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var90.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test177");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    var8.endPageRender();
    org.apache.tapestry.IPage var16 = var8.getPage();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var17 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var17.setParameters((java.lang.Object[])var20);
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    var17.setComponent((org.apache.tapestry.IComponent)var22);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    var25.setPageName("");
    var22.addBody((org.apache.tapestry.IRender)var25);
    org.apache.tapestry.IEngine var31 = var25.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    int var34 = var32.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var35 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var36 = var35.getBody();
    int var37 = var35.getBodyCount();
    var32.addComponent((org.apache.tapestry.IComponent)var35);
    var25.addBody((org.apache.tapestry.IRender)var35);
    org.apache.tapestry.IComponent var40 = var35.getContainer();
    org.apache.tapestry.event.ChangeObserver var41 = var35.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var42 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var42.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var45 = var42.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var46 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var47 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var48 = var47.getSeparator();
    java.util.Locale var49 = var47.getMyLocale();
    var46.setMyLocale(var49);
    var42.setMyLocale(var49);
    var35.setLocale(var49);
    var8.addBody((org.apache.tapestry.IRender)var35);
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    java.lang.String var56 = var54.getPageName();
    java.lang.String var57 = var54.toString();
    ch.bluepenguin.email.client.tapestry.Home var58 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var59 = var58.getBody();
    java.lang.String var60 = var58.getPageName();
    java.lang.String var61 = var58.toString();
    org.apache.tapestry.IEngine var62 = var58.getEngine();
    var54.setContainer((org.apache.tapestry.IComponent)var58);
    org.apache.tapestry.IAsset var65 = var54.getAsset("Dummy EmailFacade Impl");
    org.apache.tapestry.IBinding var67 = var54.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Map var68 = var54.getAssets();
    ch.bluepenguin.email.client.tapestry.Home var69 = new ch.bluepenguin.email.client.tapestry.Home();
    var69.beginPageRender();
    java.util.Collection var71 = var69.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var72 = var69.getListeners();
    java.lang.String var73 = var69.getPageName();
    java.lang.String var74 = var69.getExtendedId();
    java.lang.String var75 = var69.toString();
    var54.setPage((org.apache.tapestry.IPage)var69);
    var8.addBody((org.apache.tapestry.IRender)var54);
    java.lang.String var78 = var8.getExtendedId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ","+ "'", var48.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test178");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    var13.beginPageRender();
    java.util.Collection var15 = var13.getBindingNames();
    var10.setPage((org.apache.tapestry.IPage)var13);
    var0.addComponent((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    org.apache.tapestry.IAsset var22 = var18.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var23.setParameters((java.lang.Object[])var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    var23.setComponent((org.apache.tapestry.IComponent)var28);
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var31.setPageName("");
    var28.addBody((org.apache.tapestry.IRender)var31);
    var18.setContainer((org.apache.tapestry.IComponent)var31);
    var0.addComponent((org.apache.tapestry.IComponent)var18);
    org.apache.tapestry.IBinding var40 = var18.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.SpringEngine var41 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var42 = var41.getSpecification();
    java.lang.Object var43 = var41.getGlobal();
    java.lang.Object var44 = var41.getGlobal();
    org.apache.tapestry.engine.ITemplateSource var45 = var41.getTemplateSource();
    var18.attach((org.apache.tapestry.IEngine)var41);
    java.lang.Object var47 = var41.getVisit();
    var41.forgetPage("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test179");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    var4.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    var12.setFolder(var13);
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    boolean var16 = var12.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Account var18 = var4.getAccount();
    var4.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    boolean var24 = var22.equals((java.lang.Object)(short)(-1));
    java.util.Collection var25 = var22.children();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setFullName("hi!");
    var26.setFullName("Dummy EmailFacade Impl");
    var22.setFolder(var26);
    ch.bluepenguin.email.client.Account var33 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var34 = var33.getUniqueID();
    var26.setAccount(var33);
    ch.bluepenguin.email.client.Person var36 = var33.getPerson();
    ch.bluepenguin.email.client.Account var37 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var38 = var37.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var39 = var37.getUniqueID();
    ch.bluepenguin.email.client.Person var40 = new ch.bluepenguin.email.client.Person();
    java.lang.String var41 = var40.getFirstname();
    var37.setPerson(var40);
    java.lang.String var43 = var40.getReserve();
    java.lang.String var44 = var40.getNickname();
    var33.setPerson(var40);
    var4.setAccount(var33);
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var52 = var47.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var53 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var54 = var53.getReader();
    ch.bluepenguin.email.client.cache.MailCache var55 = var53.getCache();
    boolean var56 = var47.equals((java.lang.Object)var53);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var58 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var58.setIndex(10);
    java.lang.String var61 = var58.getName();
    boolean var62 = var47.equals((java.lang.Object)var58);
    var58.setIndex(100);
    ch.bluepenguin.email.client.Person var65 = new ch.bluepenguin.email.client.Person();
    java.lang.String var66 = var65.getFirstname();
    var65.setLastname("(0) null");
    var65.setLastname("");
    java.lang.String var71 = var65.getReserve();
    var65.setNickname("");
    var58.setContained((java.lang.Object)var65);
    var65.setLastname("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.AbstractUniqueID var77 = var65.getUniqueID();
    java.lang.String var78 = var65.getLastname();
    var33.setPerson(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var78.equals("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test180");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    java.lang.String var7 = var6.getNickname();
    var6.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test181");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    var0.setCurrentFolder("(0) null\n   (0) null");
    java.lang.String var7 = var0.getName();
    ch.bluepenguin.email.client.MailMessage[] var9 = var0.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage[] var10 = var0.getAllMessages();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var11 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var11.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var14 = var11.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var15 = var11.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var16 = var11.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var18 = var11.getMessagesFromFolder(",");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var18, "SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null", "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Dummy EmailFacade Impl"+ "'", var7.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test182");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var2.setIndex(10);
    java.lang.String var5 = var2.getName();
    var2.setDepth(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.util.Iterator var9 = var0.getMenuItemsDepthFirst();
    var0.checkMenuModelHealth();
    java.lang.String var11 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var13 = var12.displayMenuStructure();
    var12.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var16 = var15.displayMenuStructure();
    java.util.Iterator var17 = var15.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var21 = var20.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var22 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    var18.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = var15.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    var12.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var28 = var27.getParent();
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    var29.setTechnicalID(100);
    var29.setText("hi!");
    var27.setContained((java.lang.Object)var29);
    java.lang.Object var37 = var27.getContained();
    var12.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var27);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var40 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var40.setParent((java.lang.Object)100L);
    int var43 = var40.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var44 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var40);
    boolean var45 = var44.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var46 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var45);
    var12.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var46);
    java.util.Iterator var48 = var12.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var50 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var51 = var50.getParent();
    java.lang.Object var52 = var50.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var53 = var12.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    java.lang.String var55 = var0.displayMenuStructure();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null"+ "'", var11.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0) null"+ "'", var13.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + 10.0f+ "'", var52.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0) null\n   (0) null"+ "'", var55.equals("(0) null\n   (0) null"));

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test183");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var5 = var4.isLeaf();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    boolean var9 = var7.equals((java.lang.Object)(short)(-1));
    java.util.Collection var10 = var7.getChildren();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var13 = var12.isLeaf();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    boolean var17 = var15.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var18 = var15.getParent();
    var12.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var15);
    boolean var20 = var7.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var12);
    boolean var21 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var12);
    var1.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Folder var23 = var1.getFolder();
    var23.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test184");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    org.apache.tapestry.listener.ListenerMap var7 = var0.getListeners();
    java.util.Locale var8 = var0.getLocale();
    org.apache.tapestry.IResourceResolver var9 = var0.getResourceResolver();
    org.apache.tapestry.engine.IScriptSource var10 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test185");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null");
    java.util.Date var13 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var17 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var17.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var20 = new ch.bluepenguin.email.client.MailMessage();
    var20.setBcc("Dummy EmailFacade Impl");
    var20.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var25 = var20.getSentDate();
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    var26.setTechnicalID(100);
    java.lang.String var31 = var26.getReplyTo();
    java.lang.String[] var33 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var26.setCc(var33);
    java.lang.String[] var36 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var26.setBcc(var36);
    var20.setCc(var36);
    java.lang.String var39 = var17.returnStringList(var36);
    java.lang.String[] var41 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var42 = var17.returnStringList(var41);
    java.lang.String var43 = var14.returnStringList(var41);
    var0.setTo(var41);
    java.lang.String[] var45 = var0.getCc();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var46 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var47 = var46.getName();
    ch.bluepenguin.email.client.Folder var48 = var46.getCurrentFolder();
    var0.setFolder(var48);
    ch.bluepenguin.email.client.Folder var50 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var51 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var50);
    boolean var53 = var51.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var54 = var51.getParent();
    ch.bluepenguin.email.client.Folder var55 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var56 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var55);
    boolean var58 = var56.equals((java.lang.Object)(short)(-1));
    java.util.Collection var59 = var56.getChildren();
    boolean var60 = var51.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var56);
    ch.bluepenguin.email.client.Folder var61 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var62 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var61);
    boolean var64 = var62.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var65 = var62.getFolder();
    int var66 = var62.getChildCount();
    var56.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var62);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var68 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var69 = var68.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var70 = var68.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var72 = var68.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var73 = var68.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var74 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var75 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var74);
    ch.bluepenguin.email.client.Folder var76 = new ch.bluepenguin.email.client.Folder();
    var75.setFolder(var76);
    ch.bluepenguin.email.client.Folder var78 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var79 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var78);
    var78.setFullName("hi!");
    var76.setParent(var78);
    var78.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var85 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var86 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var85);
    ch.bluepenguin.email.client.Folder var87 = new ch.bluepenguin.email.client.Folder();
    var86.setFolder(var87);
    org.apache.tapestry.contrib.tree.model.ITreeNode var89 = var86.getParent();
    boolean var90 = var86.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var91 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var78, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var86);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var92 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var73, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var86);
    var62.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var92);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var94 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var48, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var92);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var95 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var48);
    boolean var96 = var95.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Dummy EmailFacade Impl"+ "'", var39.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var42.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var43.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Dummy EmailFacade Impl"+ "'", var47.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test186");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var3 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var3.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var3.reportException("", (java.lang.Throwable)var7);
    var0.reportException("hi!", (java.lang.Throwable)var7);
    org.apache.tapestry.engine.IScriptSource var10 = var0.getScriptSource();
    java.util.Locale var11 = var0.getLocale();
    org.apache.tapestry.engine.IComponentMessagesSource var12 = var0.getComponentMessagesSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test187");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var2 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var2.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var6 = new java.lang.String[] { "(0) null"};
    java.lang.String var7 = var2.returnStringList(var6);
    java.util.Locale var8 = var2.getMyLocale();
    java.util.Locale var9 = var2.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getReplyTo();
    java.lang.String[] var17 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var10.setCc(var17);
    java.lang.String[] var20 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var10.setBcc(var20);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    var10.setBcc(var32);
    java.lang.String[] var35 = var10.getBcc();
    java.lang.String var36 = var2.returnStringList(var35);
    var0.setBcc(var35);
    java.lang.String var38 = var0.getFrom();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    java.lang.String var41 = var0.getSubject();
    java.lang.String[] var42 = var0.getTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test188");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var4.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    java.util.Collection var12 = var9.getChildren();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var15 = var14.isLeaf();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    boolean var19 = var17.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var20 = var17.getParent();
    var14.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var17);
    boolean var22 = var9.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var27 = var24.getFolder();
    int var28 = var24.getChildCount();
    boolean var29 = var14.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var24);
    java.util.Collection var30 = var14.children();
    boolean var31 = var4.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    boolean var35 = var33.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var36 = var33.getParent();
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var40 = var38.equals((java.lang.Object)(short)(-1));
    java.util.Collection var41 = var38.getChildren();
    boolean var42 = var33.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var38);
    boolean var43 = var38.isLeaf();
    boolean var44 = var38.isLeaf();
    java.util.Collection var45 = var38.children();
    java.util.Collection var46 = var38.children();
    var4.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    java.util.Collection var48 = var4.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test189");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    java.lang.Integer var10 = var9.getParentFolderId();
    var9.setFullName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    var14.setFolder(var15);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var15.setParent(var17);
    ch.bluepenguin.email.client.Account var22 = var17.getAccount();
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    java.util.Collection var29 = var26.children();
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    var30.setFullName("hi!");
    var30.setFullName("Dummy EmailFacade Impl");
    var26.setFolder(var30);
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var40 = var38.equals((java.lang.Object)(short)(-1));
    java.util.Collection var41 = var38.children();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    var42.setFullName("hi!");
    var42.setFullName("Dummy EmailFacade Impl");
    var38.setFolder(var42);
    ch.bluepenguin.email.client.Account var49 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var50 = var49.getUniqueID();
    var42.setAccount(var49);
    ch.bluepenguin.email.client.Person var52 = var49.getPerson();
    var30.setAccount(var49);
    var17.setAccount(var49);
    ch.bluepenguin.email.client.Person var55 = new ch.bluepenguin.email.client.Person();
    java.lang.String var56 = var55.getFirstname();
    var55.setNickname("");
    var55.setLastname(",");
    var49.setPerson(var55);
    ch.bluepenguin.email.client.Person var62 = var49.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var63 = var49.getUniqueID();
    var9.setAccount(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test190");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    java.lang.String var12 = var0.getExtendedId();
    org.apache.tapestry.IRequestCycle var13 = var0.getRequestCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test191");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var5 = var0.getSubject();
    java.lang.String[] var6 = var0.getCc();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var8 = var7.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var9 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var9.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var13 = new java.lang.String[] { "(0) null"};
    java.lang.String var14 = var9.returnStringList(var13);
    java.util.Locale var15 = var9.getMyLocale();
    java.util.Locale var16 = var9.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    java.lang.String var22 = var17.getReplyTo();
    java.lang.String[] var24 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var17.setCc(var24);
    java.lang.String[] var27 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var17.setBcc(var27);
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    var29.setTechnicalID(100);
    java.lang.String var34 = var29.getReplyTo();
    java.lang.String[] var36 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var29.setCc(var36);
    java.lang.String[] var39 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var29.setBcc(var39);
    var17.setBcc(var39);
    java.lang.String[] var42 = var17.getBcc();
    java.lang.String var43 = var9.returnStringList(var42);
    var7.setBcc(var42);
    var0.setTo(var42);
    ch.bluepenguin.email.client.MailMessage var46 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var47 = var46.toString();
    ch.bluepenguin.email.client.Folder var48 = var46.getFolder();
    java.util.Date var49 = var46.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var50 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var51 = var50.getSpecification();
    java.lang.Object var52 = var50.getGlobal();
    java.lang.Object var53 = var50.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var55 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var56 = var55.getParent();
    ch.bluepenguin.email.client.MailMessage var57 = new ch.bluepenguin.email.client.MailMessage();
    var57.setBcc("Dummy EmailFacade Impl");
    var57.setTechnicalID(100);
    var57.setText("hi!");
    var55.setContained((java.lang.Object)var57);
    var50.setVisit((java.lang.Object)var57);
    java.lang.String var66 = var57.getText();
    var46.copyTo((org.springframework.mail.MailMessage)var57);
    var0.copyTo((org.springframework.mail.MailMessage)var46);
    ch.bluepenguin.email.client.AbstractUniqueID var69 = var46.getUniqueID();
    var69.setId((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var8.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0) null"+ "'", var14.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "Dummy EmailFacade Impl"+ "'", var43.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var47.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test192");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.util.io.DataSqueezer var6 = var0.getDataSqueezer();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var7 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var7.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var10 = var7.getMyLocale();
    var0.setLocale(var10);
    org.apache.tapestry.engine.IPageSource var12 = var0.getPageSource();
    org.apache.tapestry.spec.IApplicationSpecification var13 = var0.getSpecification();
    org.apache.tapestry.engine.ITemplateSource var14 = var0.getTemplateSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test193");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    java.lang.Object var6 = var4.getGlobal();
    java.lang.Object var7 = var4.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var10 = var9.getParent();
    ch.bluepenguin.email.client.MailMessage var11 = new ch.bluepenguin.email.client.MailMessage();
    var11.setBcc("Dummy EmailFacade Impl");
    var11.setTechnicalID(100);
    var11.setText("hi!");
    var9.setContained((java.lang.Object)var11);
    var4.setVisit((java.lang.Object)var11);
    java.lang.String var20 = var11.getText();
    var0.copyTo((org.springframework.mail.MailMessage)var11);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setSubject("hi!");
    var0.copyTo((org.springframework.mail.MailMessage)var22);
    var0.setFrom("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test194");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    var0.forgetPage(",");
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    java.lang.Object var6 = var0.getGlobal();
    java.lang.String var7 = var0.getContextPath();
    org.apache.tapestry.engine.IPropertySource var8 = var0.getPropertySource();
    org.apache.tapestry.util.io.DataSqueezer var9 = var0.createDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    org.apache.tapestry.IResourceResolver var11 = var0.getResourceResolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test195");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var3 = var0.getAllMessages();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder[] var5 = var0.getAllFolders();
    var0.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test196");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var4 = var3.displayMenuStructure();
    java.util.Iterator var5 = var3.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var9 = var8.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var6.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var16 = var15.getParent();
    ch.bluepenguin.email.client.MailMessage var17 = new ch.bluepenguin.email.client.MailMessage();
    var17.setBcc("Dummy EmailFacade Impl");
    var17.setTechnicalID(100);
    var17.setText("hi!");
    var15.setContained((java.lang.Object)var17);
    java.lang.Object var25 = var15.getContained();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var28.setParent((java.lang.Object)100L);
    int var31 = var28.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    boolean var33 = var32.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var33);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var34);
    java.util.Iterator var36 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var39 = var38.getParent();
    java.lang.Object var40 = var38.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var41 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38);
    java.util.Iterator var42 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var43 = var0.getRootList();
    java.util.Iterator var44 = var43.getChildrenIterator();
    java.util.Iterator var45 = var43.getChildrenIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10.0f+ "'", var40.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test197");


    ch.bluepenguin.email.client.cache.MailCache var1 = new ch.bluepenguin.email.client.cache.MailCache("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]; to=; cc=; bcc=ch.bluepenguin.email.client.service.EmailFacadeException; sentDate=null; subject=null; text=null");

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test198");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    java.lang.String var4 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var5 = var1.getRenderer();
    var1.setName("Current Folder");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var9 = var8.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var10 = var8.getMenuItem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test199");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    var0.setCurrentFolder("(0) null\n   (0) null");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var8 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var9 = var8.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.moveMessages(var9, "SimpleMailMessage: from=null; replyTo=null; to=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; cc=; bcc=; sentDate=null; subject=null; text=null", "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test200");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    java.lang.String var10 = var6.getName();
    ch.bluepenguin.email.client.cache.MailCache var11 = var6.getCache();
    java.util.logging.Logger var12 = var6.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var13 = var6.getCache();
    boolean var14 = var6.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Default EmailFacade Impl"+ "'", var10.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test201");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var11 = var0.toString();
    java.lang.String[] var12 = var0.getTo();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    java.lang.String var16 = var13.getReplyTo();
    java.lang.String var17 = var13.getText();
    var13.setTechnicalID(0);
    java.util.Date var20 = var13.getSentDate();
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    var13.setTo("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String[] var24 = var13.getTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var11.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test202");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    var0.setSubject("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.AbstractUniqueID var29 = var0.getUniqueID();
    var0.setCc("SimpleMailMessage: from=(0) null; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var32 = var0.getBcc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test203");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var6 = var5.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setIndex(10);
    var8.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    var5.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var13.setStyleClass(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    var28.beginPageRender();
    java.util.Collection var30 = var28.getBindingNames();
    var25.setPage((org.apache.tapestry.IPage)var28);
    org.apache.tapestry.listener.ListenerMap var32 = var28.getListeners();
    var13.setComponent((org.apache.tapestry.IComponent)var28);
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    int var36 = var34.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    var34.addComponent((org.apache.tapestry.IComponent)var37);
    java.lang.String var41 = var34.getIdPath();
    org.apache.tapestry.ILocation var42 = var34.getLocation();
    java.lang.String var43 = var34.toString();
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var45 = var44.getBody();
    int var46 = var44.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    int var49 = var47.getBodyCount();
    var44.addComponent((org.apache.tapestry.IComponent)var47);
    java.lang.String var51 = var44.getIdPath();
    org.apache.tapestry.ILocation var52 = var44.getLocation();
    org.apache.tapestry.IEngine var53 = var44.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    int var56 = var54.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var57 = new ch.bluepenguin.email.client.tapestry.Home();
    var57.beginPageRender();
    java.util.Collection var59 = var57.getBindingNames();
    var54.setPage((org.apache.tapestry.IPage)var57);
    var44.addComponent((org.apache.tapestry.IComponent)var57);
    var57.setPageName("hi!");
    int var64 = var57.getBodyCount();
    var34.setContainer((org.apache.tapestry.IComponent)var57);
    var13.setComponent((org.apache.tapestry.IComponent)var57);
    ch.bluepenguin.email.client.tapestry.Home var67 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var68 = var67.getBody();
    int var69 = var67.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var70 = new ch.bluepenguin.email.client.tapestry.Home();
    var70.beginPageRender();
    java.util.Collection var72 = var70.getBindingNames();
    var67.setPage((org.apache.tapestry.IPage)var70);
    org.apache.tapestry.listener.ListenerMap var74 = var70.getListeners();
    int var75 = var70.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var76 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var77 = var76.getBody();
    int var78 = var76.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var79 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var80 = var79.getBody();
    int var81 = var79.getBodyCount();
    var76.addComponent((org.apache.tapestry.IComponent)var79);
    java.lang.String var83 = var76.getIdPath();
    org.apache.tapestry.ILocation var84 = var76.getLocation();
    org.apache.tapestry.IEngine var85 = var76.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var86 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var87 = var86.getBody();
    int var88 = var86.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var89 = new ch.bluepenguin.email.client.tapestry.Home();
    var89.beginPageRender();
    java.util.Collection var91 = var89.getBindingNames();
    var86.setPage((org.apache.tapestry.IPage)var89);
    var76.addComponent((org.apache.tapestry.IComponent)var89);
    org.apache.tapestry.IAsset var95 = var76.getAsset("Dummy EmailFacade Impl");
    var70.setContainer((org.apache.tapestry.IComponent)var76);
    var13.setComponent((org.apache.tapestry.IComponent)var76);
    org.apache.tapestry.listener.ListenerMap var98 = var76.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test204");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    var0.forgetPage(",");
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    org.apache.tapestry.engine.ISpecificationSource var6 = var0.getSpecificationSource();
    boolean var7 = var0.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test205");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(true);
    java.util.logging.Logger var5 = var0.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var6 = var0.getCache();
    java.lang.String var7 = var0.getName();
    ch.bluepenguin.email.client.cache.MailCache var8 = var0.getCache();
    ch.bluepenguin.email.client.cache.MailCache var9 = var0.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Default EmailFacade Impl"+ "'", var7.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test206");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    java.lang.String var3 = var0.displayMenuStructure();
    java.util.Iterator var4 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = var0.getRootList();
    boolean var6 = var5.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0) null"+ "'", var3.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test207");


    ch.bluepenguin.email.client.cache.MailCache var1 = new ch.bluepenguin.email.client.cache.MailCache("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test208");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    var0.beginPageRender();
    java.lang.String var11 = var0.toString();
    var0.beginPageRender();
    var0.setPageName("");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var16 = var15.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var18.setIndex(10);
    var18.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var23.setParameters((java.lang.Object[])var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    var23.setComponent((org.apache.tapestry.IComponent)var28);
    var15.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    var23.setStyleClass(",");
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    int var36 = var34.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    var34.addComponent((org.apache.tapestry.IComponent)var37);
    java.lang.String var41 = var34.getIdPath();
    var34.endPageRender();
    var23.setComponent((org.apache.tapestry.IComponent)var34);
    org.apache.tapestry.ILocation var44 = var34.getLocation();
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var46 = var45.getBody();
    int var47 = var45.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    var45.addComponent((org.apache.tapestry.IComponent)var48);
    java.util.Collection var52 = var48.getBindingNames();
    var48.setId("(0) null");
    var48.beginPageRender();
    org.apache.tapestry.IRender[] var56 = var48.getBody();
    var34.setPage((org.apache.tapestry.IPage)var48);
    var0.setPage((org.apache.tapestry.IPage)var48);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var59 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var61 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var62 = var61.getSuppressed();
    var59.setParameters((java.lang.Object[])var62);
    ch.bluepenguin.email.client.tapestry.Home var64 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var65 = var64.getBody();
    var59.setComponent((org.apache.tapestry.IComponent)var64);
    var64.setId("Dummy EmailFacade Impl");
    int var69 = var64.getBodyCount();
    ch.bluepenguin.email.client.Folder var70 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var71 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var70);
    boolean var73 = var71.equals((java.lang.Object)(short)(-1));
    java.util.Collection var74 = var71.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var75 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var76 = var75.getBody();
    int var77 = var75.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var78 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var79 = var78.getBody();
    int var80 = var78.getBodyCount();
    var75.addComponent((org.apache.tapestry.IComponent)var78);
    java.util.Map var82 = var78.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var83 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var83.forgetPage("");
    org.apache.tapestry.engine.IPageSource var86 = var83.getPageSource();
    org.apache.tapestry.engine.IPropertySource var87 = var83.getPropertySource();
    java.util.Collection var88 = var83.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var89 = var83.getComponentMessagesSource();
    var78.attach((org.apache.tapestry.IEngine)var83);
    boolean var91 = var71.equals((java.lang.Object)var83);
    org.apache.tapestry.engine.IComponentClassEnhancer var92 = var83.getComponentClassEnhancer();
    var64.attach((org.apache.tapestry.IEngine)var83);
    var64.beginPageRender();
    org.apache.tapestry.IBinding var96 = var64.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IRequestCycle var97 = var64.getRequestCycle();
    var48.addBody((org.apache.tapestry.IRender)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test209");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    var4.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.children();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    var29.setFullName("hi!");
    var29.setFullName("Dummy EmailFacade Impl");
    var25.setFolder(var29);
    ch.bluepenguin.email.client.Account var36 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var36.getUniqueID();
    var29.setAccount(var36);
    ch.bluepenguin.email.client.Person var39 = var36.getPerson();
    var17.setAccount(var36);
    var4.setAccount(var36);
    ch.bluepenguin.email.client.Person var42 = new ch.bluepenguin.email.client.Person();
    java.lang.String var43 = var42.getFirstname();
    var42.setNickname("");
    var42.setLastname(",");
    var36.setPerson(var42);
    ch.bluepenguin.email.client.Person var49 = var36.getPerson();
    ch.bluepenguin.email.client.Account var50 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var51 = var50.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var52 = var50.getUniqueID();
    ch.bluepenguin.email.client.Person var53 = new ch.bluepenguin.email.client.Person();
    java.lang.String var54 = var53.getFirstname();
    var50.setPerson(var53);
    ch.bluepenguin.email.client.Person var56 = new ch.bluepenguin.email.client.Person();
    java.lang.String var57 = var56.getFirstname();
    var56.setNickname("");
    var56.setLastname(",");
    java.lang.String var62 = var56.getNickname();
    java.lang.String var63 = var56.getLastname();
    var50.setPerson(var56);
    ch.bluepenguin.email.client.AbstractUniqueID var65 = var56.getUniqueID();
    var56.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var56.setLastname("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var56.setNickname("(0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var72 = var56.getUniqueID();
    var36.setPerson(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ","+ "'", var63.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test210");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    java.util.Collection var5 = var1.getChildren();
    ch.bluepenguin.email.client.MailMessage var6 = new ch.bluepenguin.email.client.MailMessage();
    var6.setBcc("Dummy EmailFacade Impl");
    java.lang.String var9 = var6.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var10 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var10.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var13 = var10.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var14 = var10.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    var15.setParentFolderId((java.lang.Integer)1);
    var15.setFullName("hi!");
    var14.setParent(var15);
    var6.setFolder(var15);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var24 = var1.equals((java.lang.Object)var23);
    boolean var25 = var23.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    boolean var29 = var27.equals((java.lang.Object)(short)(-1));
    java.util.Collection var30 = var27.getChildren();
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var33 = var32.isLeaf();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var37 = var35.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var38 = var35.getParent();
    var32.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    boolean var40 = var27.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var32);
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    boolean var43 = var42.isLeaf();
    ch.bluepenguin.email.client.Folder var44 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var44);
    boolean var47 = var45.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var48 = var45.getParent();
    var42.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var45);
    ch.bluepenguin.email.client.Folder var50 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var51 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var50);
    boolean var53 = var51.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var54 = var51.getParent();
    var42.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var51);
    boolean var56 = var27.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var51);
    ch.bluepenguin.email.client.Folder var57 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var58 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var57);
    boolean var60 = var58.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var61 = var58.getParent();
    ch.bluepenguin.email.client.Folder var62 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var63 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var62);
    boolean var65 = var63.equals((java.lang.Object)(short)(-1));
    java.util.Collection var66 = var63.getChildren();
    boolean var67 = var58.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var63);
    java.util.Collection var68 = var58.getChildren();
    var27.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var58);
    org.apache.tapestry.contrib.tree.model.ITreeNode var70 = var27.getParent();
    ch.bluepenguin.email.client.Folder var71 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var72 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var71);
    ch.bluepenguin.email.client.Folder var73 = new ch.bluepenguin.email.client.Folder();
    var72.setFolder(var73);
    java.util.Collection var75 = var72.children();
    var27.insert(var75);
    ch.bluepenguin.email.client.tapestry.SpringEngine var77 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var77.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var80 = var77.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var81 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var81.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var84 = var81.getMyLocale();
    var77.setLocale(var84);
    org.apache.tapestry.engine.IComponentClassEnhancer var86 = var77.getComponentClassEnhancer();
    boolean var87 = var27.equals((java.lang.Object)var77);
    boolean var88 = var23.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var27);
    java.util.Collection var89 = var27.children();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test211");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    int var25 = var23.getBodyCount();
    org.apache.tapestry.IAsset var27 = var23.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var30 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var31 = var30.getSuppressed();
    var28.setParameters((java.lang.Object[])var31);
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    var28.setComponent((org.apache.tapestry.IComponent)var33);
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    var36.setPageName("");
    var33.addBody((org.apache.tapestry.IRender)var36);
    var23.setContainer((org.apache.tapestry.IComponent)var36);
    org.apache.tapestry.INamespace var43 = var36.getNamespace();
    java.lang.String var44 = var36.getIdPath();
    var17.setContained((java.lang.Object)var36);
    ch.bluepenguin.email.client.tapestry.SpringEngine var46 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var46.forgetPage("");
    org.apache.tapestry.engine.IPageSource var49 = var46.getPageSource();
    org.apache.tapestry.engine.IPropertySource var50 = var46.getPropertySource();
    org.apache.tapestry.engine.IComponentMessagesSource var51 = var46.getComponentMessagesSource();
    var36.attach((org.apache.tapestry.IEngine)var46);
    org.apache.tapestry.IEngine var53 = var36.getEngine();
    org.apache.tapestry.IAsset var55 = var36.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test212");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var5 = var4.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var2.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.Object var8 = var4.getParent();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var11.setParent(var13);
    var4.setContained((java.lang.Object)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var4.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.String var22 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = var0.getRootList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0) null"+ "'", var22.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test213");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    var0.setTechnicalID(100);
    var0.setSubject(",");
    java.util.Date var6 = var0.getSentDate();
    java.util.Date var7 = var0.getSentDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test214");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var12.getUniqueID();
    var5.setAccount(var12);
    ch.bluepenguin.email.client.Person var15 = var12.getPerson();
    ch.bluepenguin.email.client.Account var16 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var17 = var16.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var18 = var16.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var16.getUniqueID();
    ch.bluepenguin.email.client.Person var20 = new ch.bluepenguin.email.client.Person();
    java.lang.String var21 = var20.getFirstname();
    var20.setLastname("(0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var24 = var20.getUniqueID();
    var16.setPerson(var20);
    var20.setNickname("Dummy EmailFacade Impl");
    java.lang.String var28 = var20.getNickname();
    var20.setLastname("(0) null\n   (0) null\n   (0) null");
    java.lang.String var31 = var20.getLastname();
    var12.setPerson(var20);
    ch.bluepenguin.email.client.Person var33 = var12.getPerson();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Dummy EmailFacade Impl"+ "'", var28.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0) null\n   (0) null\n   (0) null"+ "'", var31.equals("(0) null\n   (0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test215");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var3 = var0.getUniqueID();
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    var5.setFolder(var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var6.setParent(var8);
    ch.bluepenguin.email.client.Account var13 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var14 = var13.getPerson();
    var6.setAccount(var13);
    ch.bluepenguin.email.client.Account var16 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var17 = var16.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var18 = var16.getUniqueID();
    ch.bluepenguin.email.client.Person var19 = new ch.bluepenguin.email.client.Person();
    java.lang.String var20 = var19.getFirstname();
    var16.setPerson(var19);
    ch.bluepenguin.email.client.Person var22 = var16.getPerson();
    ch.bluepenguin.email.client.Account var23 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var24 = var23.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var25 = var23.getUniqueID();
    ch.bluepenguin.email.client.Person var26 = new ch.bluepenguin.email.client.Person();
    java.lang.String var27 = var26.getFirstname();
    var23.setPerson(var26);
    java.lang.String var29 = var26.getReserve();
    var26.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var32 = var26.getFirstname();
    var16.setPerson(var26);
    var13.setPerson(var26);
    var0.setPerson(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Dummy EmailFacade Impl"+ "'", var32.equals("Dummy EmailFacade Impl"));

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test216");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var1);
    java.lang.Object var3 = var2.getContained();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var4 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var4.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var7 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var7.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var10.setText("Dummy EmailFacade Impl");
    var10.setText(",");
    var7.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    var4.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var7);
    var2.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var7);
    var7.setElement("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var20 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var20.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var23.setText("Dummy EmailFacade Impl");
    var23.setText(",");
    var20.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var30 = var29.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var32.setIndex(10);
    var32.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var39 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    var37.setParameters((java.lang.Object[])var40);
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    var37.setComponent((org.apache.tapestry.IComponent)var42);
    var29.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    var37.setStyleClass(",");
    var23.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var49 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var49.setText("Dummy EmailFacade Impl");
    var49.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var54 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var55 = var54.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var57 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var57.setIndex(10);
    var57.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var62 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var64 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var65 = var64.getSuppressed();
    var62.setParameters((java.lang.Object[])var65);
    ch.bluepenguin.email.client.tapestry.Home var67 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var68 = var67.getBody();
    var62.setComponent((org.apache.tapestry.IComponent)var67);
    var54.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var57, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var62);
    var62.setStyleClass(",");
    var49.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var62);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var74 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var49.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var74);
    var23.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var49);
    var23.setElement("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var7.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0) null"+ "'", var30.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0) null"+ "'", var55.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test217");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.setAll(true);
    var0.clear();
    var0.clear();
    var0.setAll(false);
    boolean var9 = var0.isDirty((java.lang.Integer)100);
    boolean var11 = var0.isDirty((java.lang.Integer)1);
    boolean var13 = var0.isDirty((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test218");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IEngine var3 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    var4.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.util.Map var19 = var15.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var20 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var20.forgetPage("");
    org.apache.tapestry.engine.IPageSource var23 = var20.getPageSource();
    org.apache.tapestry.engine.IPropertySource var24 = var20.getPropertySource();
    java.util.Collection var25 = var20.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var26 = var20.getComponentMessagesSource();
    var15.attach((org.apache.tapestry.IEngine)var20);
    var4.addBody((org.apache.tapestry.IRender)var15);
    var0.addComponent((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.listener.ListenerMap var30 = var4.getListeners();
    ch.bluepenguin.email.client.tapestry.SpringEngine var31 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var32 = var31.getVisit();
    java.lang.String var33 = var31.toString();
    boolean var34 = var31.isDirty();
    org.apache.tapestry.IResourceResolver var35 = var31.getResourceResolver();
    var4.attach((org.apache.tapestry.IEngine)var31);
    org.apache.tapestry.engine.IPageSource var37 = var31.getPageSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test219");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    var0.setId(",");
    org.apache.tapestry.ILocation var4 = var0.getLocation();
    org.apache.tapestry.IEngine var5 = var0.getEngine();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var7 = var0.getNestedComponent("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test220");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setReplyTo("Default EmailFacade Impl");
    java.util.Date var21 = var0.getSentDate();
    java.util.Date var22 = var0.getSentDate();
    var0.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    int var25 = var0.getTechnicalID();
    var0.setTechnicalID(2);
    ch.bluepenguin.email.client.MailMessage var28 = new ch.bluepenguin.email.client.MailMessage();
    var28.setBcc("Dummy EmailFacade Impl");
    var28.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var33 = var28.getSentDate();
    ch.bluepenguin.email.client.Folder var34 = var28.getFolder();
    ch.bluepenguin.email.client.MailMessage var35 = new ch.bluepenguin.email.client.MailMessage();
    var35.setBcc("Dummy EmailFacade Impl");
    var35.setTechnicalID(100);
    java.lang.String var40 = var35.getReplyTo();
    java.lang.String[] var42 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var35.setCc(var42);
    var35.setBcc("Dummy EmailFacade Impl");
    var35.setSubject("hi!");
    ch.bluepenguin.email.client.MailMessage var48 = new ch.bluepenguin.email.client.MailMessage();
    var48.setBcc("Dummy EmailFacade Impl");
    var48.setTechnicalID(100);
    java.lang.String var53 = var48.getReplyTo();
    java.lang.String[] var55 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var48.setCc(var55);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var57 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var57.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var60 = new ch.bluepenguin.email.client.MailMessage();
    var60.setBcc("Dummy EmailFacade Impl");
    var60.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var65 = var60.getSentDate();
    ch.bluepenguin.email.client.MailMessage var66 = new ch.bluepenguin.email.client.MailMessage();
    var66.setBcc("Dummy EmailFacade Impl");
    var66.setTechnicalID(100);
    java.lang.String var71 = var66.getReplyTo();
    java.lang.String[] var73 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var66.setCc(var73);
    java.lang.String[] var76 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var66.setBcc(var76);
    var60.setCc(var76);
    java.lang.String var79 = var57.returnStringList(var76);
    var48.setCc(var76);
    var35.setBcc(var76);
    var28.setCc(var76);
    var0.setBcc(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Dummy EmailFacade Impl"+ "'", var79.equals("Dummy EmailFacade Impl"));

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test221");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setBcc("Dummy EmailFacade Impl");
    java.lang.String var8 = var5.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var12 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var13 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    var14.setParentFolderId((java.lang.Integer)1);
    var14.setFullName("hi!");
    var13.setParent(var14);
    var5.setFolder(var14);
    var0.setFolder(var14);
    var14.setFullName("hi!");
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var27 = var26.isLeaf();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var31 = var29.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var32 = var29.getParent();
    var26.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    ch.bluepenguin.email.client.Folder var34 = var26.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var35 = var34.getUniqueID();
    var14.setParent(var34);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var37 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var37.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var40 = var37.getCurrentFolder();
    var14.setParent(var40);
    ch.bluepenguin.email.client.Folder var42 = var14.getParent();
    ch.bluepenguin.email.client.Account var43 = var42.getAccount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test222");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    var0.setCc("(0) null");
    var0.setCc("");
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var0.getUniqueID();
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var16 = var15.toString();
    ch.bluepenguin.email.client.Folder var17 = var15.getFolder();
    java.util.Date var18 = var15.getSentDate();
    java.lang.String var19 = var15.getReplyTo();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var20 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var20.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    var23.setBcc("Dummy EmailFacade Impl");
    var23.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var28 = var23.getSentDate();
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    var29.setTechnicalID(100);
    java.lang.String var34 = var29.getReplyTo();
    java.lang.String[] var36 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var29.setCc(var36);
    java.lang.String[] var39 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var29.setBcc(var39);
    var23.setCc(var39);
    java.lang.String var42 = var20.returnStringList(var39);
    var15.setCc(var39);
    var0.setTo(var39);
    var0.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    java.util.Date var47 = var0.getSentDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var16.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Dummy EmailFacade Impl"+ "'", var42.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test223");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    org.apache.tapestry.engine.IScriptSource var3 = var0.getScriptSource();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var0.getSpecification();
    org.apache.tapestry.engine.IComponentClassEnhancer var5 = var0.getComponentClassEnhancer();
    boolean var6 = var0.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test224");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    int var4 = var1.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var1.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var5);
    var1.setLeaf(true);
    ch.bluepenguin.email.client.Account var9 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var10 = var9.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var9.getUniqueID();
    ch.bluepenguin.email.client.Person var12 = new ch.bluepenguin.email.client.Person();
    java.lang.String var13 = var12.getFirstname();
    var9.setPerson(var12);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var16 = var15.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var15.getUniqueID();
    ch.bluepenguin.email.client.Person var18 = new ch.bluepenguin.email.client.Person();
    java.lang.String var19 = var18.getFirstname();
    var15.setPerson(var18);
    ch.bluepenguin.email.client.AbstractUniqueID var21 = var18.getUniqueID();
    var9.setPerson(var18);
    var18.setNickname("");
    java.lang.String var25 = var18.getReserve();
    ch.bluepenguin.email.client.AbstractUniqueID var26 = var18.getUniqueID();
    var18.setFirstname("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var1.setContained((java.lang.Object)"ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    var1.setDepth(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test225");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var27 = var26.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    java.lang.String var29 = var26.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var30 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var31 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var33.setParent((java.lang.Object)100L);
    int var36 = var33.getDepth();
    java.lang.Object var37 = var33.getParent();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var33);
    boolean var39 = var33.isLeaf();
    int var40 = var33.getIndex();
    int var41 = var33.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 100L+ "'", var37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test226");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.INamespace var10 = var4.getNamespace();
    org.apache.tapestry.event.ChangeObserver var11 = var4.getChangeObserver();
    var4.detach();
    org.apache.tapestry.event.ChangeObserver var13 = var4.getChangeObserver();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var14 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    var14.setParameters((java.lang.Object[])var17);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    var14.setComponent((org.apache.tapestry.IComponent)var19);
    var19.setId("Dummy EmailFacade Impl");
    int var24 = var19.getBodyCount();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    java.util.Collection var29 = var26.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    var30.addComponent((org.apache.tapestry.IComponent)var33);
    java.util.Map var37 = var33.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var38 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var38.forgetPage("");
    org.apache.tapestry.engine.IPageSource var41 = var38.getPageSource();
    org.apache.tapestry.engine.IPropertySource var42 = var38.getPropertySource();
    java.util.Collection var43 = var38.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var44 = var38.getComponentMessagesSource();
    var33.attach((org.apache.tapestry.IEngine)var38);
    boolean var46 = var26.equals((java.lang.Object)var38);
    org.apache.tapestry.engine.IComponentClassEnhancer var47 = var38.getComponentClassEnhancer();
    var19.attach((org.apache.tapestry.IEngine)var38);
    var19.beginPageRender();
    var4.addComponent((org.apache.tapestry.IComponent)var19);
    org.apache.tapestry.IAsset var52 = var19.getAsset("(-1) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test227");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    org.apache.tapestry.IResourceResolver var2 = var0.getResourceResolver();
    org.apache.tapestry.engine.IComponentMessagesSource var3 = var0.getComponentMessagesSource();
    org.apache.tapestry.engine.IComponentClassEnhancer var4 = var0.getComponentClassEnhancer();
    java.util.Locale var5 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test228");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    boolean var3 = var0.isAllClean();
    boolean var5 = var0.isDirty((java.lang.Integer)100);
    var0.clear();
    var0.clear();
    var0.setAll(true);
    var0.setAll(false);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test229");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    boolean var4 = var1.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    var6.setFolder(var7);
    ch.bluepenguin.email.client.Folder var9 = var6.getFolder();
    java.util.Collection var10 = var6.getChildren();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var6);
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var6.getParent();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var13.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var14);
    var15.setDepth((-1));
    int var18 = var15.getIndex();
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    boolean var21 = var20.isLeaf();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    java.util.Collection var26 = var23.getChildren();
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    boolean var29 = var28.isLeaf();
    ch.bluepenguin.email.client.Folder var30 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var31 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var30);
    boolean var33 = var31.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var34 = var31.getParent();
    var28.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var31);
    boolean var36 = var23.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var28);
    boolean var37 = var20.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var28);
    ch.bluepenguin.email.client.Folder var38 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38);
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    var39.setFolder(var40);
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    var42.setFullName("hi!");
    var40.setParent(var42);
    var42.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var49 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var50 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var49);
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    var50.setFolder(var51);
    org.apache.tapestry.contrib.tree.model.ITreeNode var53 = var50.getParent();
    boolean var54 = var50.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var55 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var50);
    var20.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var50);
    var15.setContained((java.lang.Object)var20);
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test230");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    org.apache.tapestry.listener.ListenerMap var7 = var3.getListeners();
    int var8 = var3.getBodyCount();
    java.util.Map var9 = var3.getAssets();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    var10.beginPageRender();
    java.util.Collection var12 = var10.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var13 = var10.getListeners();
    java.lang.String var14 = var10.getPageName();
    var3.setPage((org.apache.tapestry.IPage)var10);
    java.lang.String var16 = var10.getExtendedId();
    java.lang.String var17 = var10.getPageName();
    var10.endPageRender();
    org.apache.tapestry.listener.ListenerMap var19 = var10.getListeners();
    org.apache.tapestry.ILocation var20 = var10.getLocation();
    org.apache.tapestry.IComponent var21 = var10.getContainer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test231");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    java.lang.String[] var27 = var0.getBcc();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setSubject("(0) null\n   (0) null");
    java.lang.String[] var35 = var30.getTo();
    java.lang.String[] var36 = var30.getBcc();
    var0.setBcc(var36);
    var0.setBcc("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=Dummy EmailFacade Impl; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test232");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var14 = var11.getFolder();
    ch.bluepenguin.email.client.Folder var15 = var11.getFolder();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var19 = var18.isLeaf();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    boolean var23 = var21.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var24 = var21.getParent();
    var18.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var21);
    ch.bluepenguin.email.client.Folder var26 = var18.getFolder();
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    boolean var30 = var28.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var31 = var28.getFolder();
    ch.bluepenguin.email.client.Folder var32 = var28.getFolder();
    var18.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var28);
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var37 = var35.equals((java.lang.Object)(short)(-1));
    java.util.Collection var38 = var35.getChildren();
    ch.bluepenguin.email.client.Folder var39 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var40 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var39);
    boolean var41 = var40.isLeaf();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    boolean var45 = var43.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var46 = var43.getParent();
    var40.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var43);
    boolean var48 = var35.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var40);
    var28.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    var11.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var28);
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    var51.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var55 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    var55.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var57);
    boolean var59 = var11.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var55);
    java.util.Collection var60 = var11.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test233");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = var3.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var7.setParent((java.lang.Object)100L);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    java.lang.String var12 = var7.getName();
    int var13 = var7.getIndex();
    java.lang.Object var14 = var7.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 100L+ "'", var14.equals(100L));

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test234");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var19 = var18.getParent();
    var18.setLeaf(false);
    var3.setContained((java.lang.Object)var18);
    boolean var23 = var18.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test235");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getFirstname();
    var0.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var11 = var0.getFirstname();
    var0.setNickname("(0) null\n   (0) null");
    java.lang.String var14 = var0.getFirstname();
    var0.setNickname("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test236");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.util.Locale var2 = var0.getLocale();
    java.lang.Object var3 = var0.getGlobal();
    java.lang.String var4 = var0.toString();
    org.apache.tapestry.util.io.DataSqueezer var5 = var0.createDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test237");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var3 = var0.getUniqueID();
    ch.bluepenguin.email.client.Account var4 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var5 = var4.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var4.getUniqueID();
    ch.bluepenguin.email.client.Person var7 = new ch.bluepenguin.email.client.Person();
    java.lang.String var8 = var7.getFirstname();
    var4.setPerson(var7);
    ch.bluepenguin.email.client.Person var10 = new ch.bluepenguin.email.client.Person();
    java.lang.String var11 = var10.getFirstname();
    var10.setNickname("");
    var10.setLastname(",");
    java.lang.String var16 = var10.getNickname();
    java.lang.String var17 = var10.getLastname();
    var4.setPerson(var10);
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var4.getUniqueID();
    ch.bluepenguin.email.client.Person var20 = new ch.bluepenguin.email.client.Person();
    java.lang.String var21 = var20.getFirstname();
    var20.setNickname("");
    var20.setLastname(",");
    java.lang.String var26 = var20.getNickname();
    var4.setPerson(var20);
    var20.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setPerson(var20);
    ch.bluepenguin.email.client.Person var31 = var0.getPerson();
    java.lang.String var32 = var31.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ","+ "'", var17.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test238");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    var0.setNickname("");
    var0.setLastname(",");
    java.lang.String var6 = var0.getNickname();
    java.lang.String var7 = var0.getLastname();
    java.lang.String var8 = var0.getReserve();
    var0.setNickname("(0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ","+ "'", var7.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test239");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    java.lang.String var12 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    var16.beginPageRender();
    java.util.Collection var18 = var16.getBindingNames();
    var13.setPage((org.apache.tapestry.IPage)var16);
    org.apache.tapestry.listener.ListenerMap var20 = var16.getListeners();
    int var21 = var16.getBodyCount();
    var16.endPageRender();
    java.lang.String var23 = var16.getExtendedId();
    java.lang.String var24 = var16.getPageName();
    var0.setPage((org.apache.tapestry.IPage)var16);
    java.lang.String var26 = var0.getPageName();
    org.apache.tapestry.event.ChangeObserver var27 = var0.getChangeObserver();
    org.apache.tapestry.IRequestCycle var28 = var0.getRequestCycle();
    org.apache.tapestry.event.ChangeObserver var29 = var0.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test240");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    int var4 = var0.getBodyCount();
    java.lang.String var5 = var0.getPageName();
    java.util.Collection var6 = var0.getBindingNames();
    org.apache.tapestry.IPage var7 = var0.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test241");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var0.getUniqueID();
    java.lang.Integer var20 = var19.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test242");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setCc("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    var13.setTechnicalID(100);
    java.lang.String var18 = var13.getReplyTo();
    java.lang.String[] var20 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var13.setCc(var20);
    java.lang.String[] var23 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var13.setBcc(var23);
    ch.bluepenguin.email.client.MailMessage var25 = new ch.bluepenguin.email.client.MailMessage();
    var25.setBcc("Dummy EmailFacade Impl");
    var25.setTechnicalID(100);
    java.lang.String var30 = var25.getReplyTo();
    java.lang.String[] var32 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var25.setCc(var32);
    java.lang.String[] var35 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var25.setBcc(var35);
    var13.setBcc(var35);
    int var38 = var13.getTechnicalID();
    int var39 = var13.getTechnicalID();
    int var40 = var13.getTechnicalID();
    java.lang.String[] var41 = var13.getCc();
    ch.bluepenguin.email.client.Folder var42 = var13.getFolder();
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    ch.bluepenguin.email.client.MailMessage var44 = new ch.bluepenguin.email.client.MailMessage();
    var44.setBcc("Dummy EmailFacade Impl");
    var44.setTechnicalID(100);
    java.lang.String var49 = var44.getReplyTo();
    java.lang.String[] var51 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var44.setCc(var51);
    var44.setBcc("Dummy EmailFacade Impl");
    java.lang.String var55 = var44.toString();
    java.lang.String[] var56 = var44.getTo();
    ch.bluepenguin.email.client.MailMessage var57 = new ch.bluepenguin.email.client.MailMessage();
    var57.setBcc("Dummy EmailFacade Impl");
    java.lang.String var60 = var57.getReplyTo();
    java.lang.String var61 = var57.getText();
    var57.setTechnicalID(0);
    java.util.Date var64 = var57.getSentDate();
    var44.copyTo((org.springframework.mail.MailMessage)var57);
    java.lang.String[] var66 = var57.getBcc();
    ch.bluepenguin.email.client.AbstractUniqueID var67 = var57.getUniqueID();
    java.lang.String[] var68 = var57.getBcc();
    var13.setCc(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var55.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test243");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    var0.setElement("Current Folder");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var7 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var7.setText("Dummy EmailFacade Impl");
    var7.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    var12.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var18 = var17.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var20.setIndex(10);
    var20.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var27 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var28 = var27.getSuppressed();
    var25.setParameters((java.lang.Object[])var28);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    var25.setComponent((org.apache.tapestry.IComponent)var30);
    var17.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setStyleClass(",");
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    var7.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var12);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var40 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var40.setText("Dummy EmailFacade Impl");
    var40.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var45 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var46 = var45.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var48 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var48.setIndex(10);
    var48.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var53 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var55 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var56 = var55.getSuppressed();
    var53.setParameters((java.lang.Object[])var56);
    ch.bluepenguin.email.client.tapestry.Home var58 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var59 = var58.getBody();
    var53.setComponent((org.apache.tapestry.IComponent)var58);
    var45.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var48, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var53);
    var53.setStyleClass(",");
    var40.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var53);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var65 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var40.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var65);
    ch.bluepenguin.email.client.MailMessage var67 = new ch.bluepenguin.email.client.MailMessage();
    var67.setBcc("Dummy EmailFacade Impl");
    var67.setTechnicalID(100);
    java.lang.String var72 = var67.getReplyTo();
    java.lang.String[] var74 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var67.setCc(var74);
    java.lang.String[] var77 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var67.setBcc(var77);
    var65.setParameters((java.lang.Object[])var77);
    var7.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var65);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0) null"+ "'", var18.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0) null"+ "'", var46.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test244");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    boolean var2 = var0.isStateful();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var6 = var4.getDataSqueezer();
    var4.setVisit((java.lang.Object)0.0d);
    boolean var9 = var4.isStateful();
    org.apache.tapestry.engine.IPageSource var10 = var4.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var13 = var12.getSpecification();
    java.lang.Object var14 = var12.getGlobal();
    java.lang.Object var15 = var12.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var18 = var17.getParent();
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    var19.setTechnicalID(100);
    var19.setText("hi!");
    var17.setContained((java.lang.Object)var19);
    var12.setVisit((java.lang.Object)var19);
    ch.bluepenguin.email.client.service.EmailFacadeException var29 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var12.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var29);
    var4.reportException(",", (java.lang.Throwable)var29);
    java.lang.Exception var32 = var29.getTechnicalException();
    java.lang.Exception var33 = var29.getTechnicalException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var29);
    java.lang.String var35 = var29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ch.bluepenguin.email.client.service.EmailFacadeException"+ "'", var35.equals("ch.bluepenguin.email.client.service.EmailFacadeException"));

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test245");


    ch.bluepenguin.email.aop.DebugAfterReturnAdvice var0 = new ch.bluepenguin.email.aop.DebugAfterReturnAdvice();
    var0.setLocale("Default EmailFacade Impl");
    var0.setLocale("(0) null");
    var0.setLocale("(0) null");
    var0.setLocale("SimpleMailMessage: from=(0) null; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    var0.setLocale("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test246");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var1 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var2 = var1.getSuppressed();
    var0.setTechnicalException((java.lang.Exception)var1);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var5 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var6 = var5.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var7 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var8 = var7.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var10 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var10.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var14 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var10.reportException("", (java.lang.Throwable)var14);
    var7.reportException("hi!", (java.lang.Throwable)var14);
    var5.addSuppressed((java.lang.Throwable)var14);
    var0.setTechnicalException((java.lang.Exception)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test247");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    java.util.Date var3 = var0.getSentDate();
    java.lang.String var4 = var0.getReplyTo();
    java.lang.String var5 = var0.getReplyTo();
    ch.bluepenguin.email.client.Folder var6 = var0.getFolder();
    java.util.Date var7 = var0.getSentDate();
    int var8 = var0.getTechnicalID();
    java.lang.String var9 = var0.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test248");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    org.apache.tapestry.IEngine var5 = var0.getEngine();
    java.util.Map var6 = var0.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test249");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.engine.IComponentMessagesSource var2 = var0.getComponentMessagesSource();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    java.util.Locale var4 = var0.getLocale();
    java.lang.String var5 = var0.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test250");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    var0.setCc("(0) null");
    var0.setCc("");
    ch.bluepenguin.email.client.Folder var14 = var0.getFolder();
    java.lang.String var15 = var0.getFrom();
    ch.bluepenguin.email.client.Folder var16 = var0.getFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test251");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    boolean var2 = var0.isStateful();
    java.util.Locale var3 = var0.getLocale();
    org.apache.tapestry.IResourceResolver var4 = var0.getResourceResolver();
    java.lang.String var5 = var0.getServletPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test252");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    var1.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var1.setDepth(0);
    java.lang.Object var8 = var1.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test253");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    var5.setParameters((java.lang.Object[])var8);
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    var5.setComponent((org.apache.tapestry.IComponent)var10);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    var13.setPageName("");
    var10.addBody((org.apache.tapestry.IRender)var13);
    var0.setContainer((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    var0.setId("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IBinding var24 = var0.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    org.apache.tapestry.IEngine var25 = var0.getEngine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test254");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.IAsset var7 = var0.getAsset(",");
    var0.setId("(0) null\n   (0) null\n   (0) null");
    java.lang.String var10 = var0.getIdPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test255");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var8.setPageName("");
    var5.addBody((org.apache.tapestry.IRender)var8);
    org.apache.tapestry.IEngine var14 = var8.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    var15.addComponent((org.apache.tapestry.IComponent)var18);
    var8.addBody((org.apache.tapestry.IRender)var18);
    org.apache.tapestry.event.ChangeObserver var23 = var18.getChangeObserver();
    java.util.Map var24 = var18.getComponents();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    var25.beginPageRender();
    java.util.Collection var27 = var25.getBindingNames();
    org.apache.tapestry.IAsset var29 = var25.getAsset(",");
    java.lang.String var30 = var25.toString();
    java.lang.String var31 = var25.getPageName();
    int var32 = var25.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var34.setParent((java.lang.Object)100L);
    java.lang.String var37 = var34.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var39 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var40 = var39.getParent();
    java.lang.Object var41 = var39.getContained();
    var39.setLeaf(true);
    var34.setContained((java.lang.Object)var39);
    java.lang.Object var45 = var39.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var46 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var39);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var47 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var49 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var50 = var49.getSuppressed();
    var47.setParameters((java.lang.Object[])var50);
    ch.bluepenguin.email.client.tapestry.Home var52 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var53 = var52.getBody();
    var47.setComponent((org.apache.tapestry.IComponent)var52);
    org.apache.tapestry.INamespace var55 = var52.getNamespace();
    var39.setParent((java.lang.Object)var52);
    java.lang.String var57 = var52.getPageName();
    org.apache.tapestry.IBinding var59 = var52.getBinding("(1) null");
    var25.setPage((org.apache.tapestry.IPage)var52);
    var18.addBody((org.apache.tapestry.IRender)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10.0f+ "'", var41.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test256");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    java.lang.Object var3 = var1.getContained();
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var5 = var1.getRenderer();
    java.lang.Object var6 = var1.getContained();
    var1.setIndex(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 10.0f+ "'", var3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10.0f+ "'", var6.equals(10.0f));

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test257");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    var7.setText("hi!");
    var5.setContained((java.lang.Object)var7);
    var0.setVisit((java.lang.Object)var7);
    ch.bluepenguin.email.client.service.EmailFacadeException var17 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var17);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var20 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.tapestry.SpringEngine var21 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var22 = var21.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var23 = var21.getDataSqueezer();
    var21.setVisit((java.lang.Object)0.0d);
    boolean var26 = var21.isStateful();
    org.apache.tapestry.engine.IPageSource var27 = var21.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var29 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var30 = var29.getSpecification();
    java.lang.Object var31 = var29.getGlobal();
    java.lang.Object var32 = var29.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var35 = var34.getParent();
    ch.bluepenguin.email.client.MailMessage var36 = new ch.bluepenguin.email.client.MailMessage();
    var36.setBcc("Dummy EmailFacade Impl");
    var36.setTechnicalID(100);
    var36.setText("hi!");
    var34.setContained((java.lang.Object)var36);
    var29.setVisit((java.lang.Object)var36);
    ch.bluepenguin.email.client.service.EmailFacadeException var46 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var29.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var46);
    var21.reportException(",", (java.lang.Throwable)var46);
    var20.addSuppressed((java.lang.Throwable)var46);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var51 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var52 = var51.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var53 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var54 = var53.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var56 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var57 = var56.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var60 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var56.reportException("", (java.lang.Throwable)var60);
    var53.reportException("hi!", (java.lang.Throwable)var60);
    var51.addSuppressed((java.lang.Throwable)var60);
    var20.addSuppressed((java.lang.Throwable)var51);
    ch.bluepenguin.email.client.tapestry.SpringEngine var65 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var66 = var65.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var67 = var65.getDataSqueezer();
    var65.setVisit((java.lang.Object)0.0d);
    boolean var70 = var65.isStateful();
    org.apache.tapestry.engine.IPageSource var71 = var65.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var73 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var74 = var73.getSpecification();
    java.lang.Object var75 = var73.getGlobal();
    java.lang.Object var76 = var73.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var78 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var79 = var78.getParent();
    ch.bluepenguin.email.client.MailMessage var80 = new ch.bluepenguin.email.client.MailMessage();
    var80.setBcc("Dummy EmailFacade Impl");
    var80.setTechnicalID(100);
    var80.setText("hi!");
    var78.setContained((java.lang.Object)var80);
    var73.setVisit((java.lang.Object)var80);
    ch.bluepenguin.email.client.service.EmailFacadeException var90 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var73.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var90);
    var65.reportException(",", (java.lang.Throwable)var90);
    java.lang.Exception var93 = var90.getTechnicalException();
    var51.addSuppressed((java.lang.Throwable)var90);
    var17.setTechnicalException((java.lang.Exception)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test258");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    var5.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.lang.String var19 = var12.getIdPath();
    org.apache.tapestry.ILocation var20 = var12.getLocation();
    org.apache.tapestry.IEngine var21 = var12.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    var25.beginPageRender();
    java.util.Collection var27 = var25.getBindingNames();
    var22.setPage((org.apache.tapestry.IPage)var25);
    var12.addComponent((org.apache.tapestry.IComponent)var25);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var30 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var30.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var33 = var30.getMyLocale();
    var25.setLocale(var33);
    org.apache.tapestry.INamespace var35 = var25.getNamespace();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var37 = var36.displayMenuStructure();
    java.util.Iterator var38 = var36.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var39 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var41 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var42 = var41.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var43 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var41);
    var39.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var41);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var45 = var36.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var41);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var46 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var41.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    var48.addComponent((org.apache.tapestry.IComponent)var51);
    java.lang.String var55 = var48.getIdPath();
    org.apache.tapestry.ILocation var56 = var48.getLocation();
    org.apache.tapestry.IEngine var57 = var48.getEngine();
    var48.beginPageRender();
    org.apache.tapestry.ILocation var59 = var48.getLocation();
    var46.setComponent((org.apache.tapestry.IComponent)var48);
    org.apache.tapestry.IAsset var62 = var48.getAsset("(0) null\n   (0) null");
    org.apache.tapestry.IRender[] var63 = var48.getBody();
    java.util.Collection var64 = var48.getBindingNames();
    var48.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.tapestry.Home var67 = new ch.bluepenguin.email.client.tapestry.Home();
    var67.beginPageRender();
    java.util.Collection var69 = var67.getBindingNames();
    org.apache.tapestry.IAsset var71 = var67.getAsset(",");
    var48.setPage((org.apache.tapestry.IPage)var67);
    var25.addComponent((org.apache.tapestry.IComponent)var48);
    var5.addComponent((org.apache.tapestry.IComponent)var25);
    java.lang.String var75 = var25.getExtendedId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0) null"+ "'", var37.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test259");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    org.apache.tapestry.engine.IComponentClassEnhancer var22 = var13.getComponentClassEnhancer();
    var13.forgetPage(",");
    org.apache.tapestry.engine.IScriptSource var25 = var13.getScriptSource();
    org.apache.tapestry.engine.IPropertySource var26 = var13.getPropertySource();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test260");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    org.apache.tapestry.IBinding var6 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Collection var7 = var0.getBindingNames();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    int var13 = var11.getBodyCount();
    var8.addComponent((org.apache.tapestry.IComponent)var11);
    java.util.Map var15 = var11.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    org.apache.tapestry.engine.IPropertySource var20 = var16.getPropertySource();
    java.util.Collection var21 = var16.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var22 = var16.getComponentMessagesSource();
    var11.attach((org.apache.tapestry.IEngine)var16);
    java.lang.String var24 = var11.getIdPath();
    var0.addComponent((org.apache.tapestry.IComponent)var11);
    org.apache.tapestry.IAsset var27 = var11.getAsset("(0) null\n   (0) null");
    org.apache.tapestry.INamespace var28 = var11.getNamespace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test261");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setReplyTo("Default EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var21 = var0.getUniqueID();
    var0.setCc("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    int var24 = var0.getTechnicalID();
    var0.setCc("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test262");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("(0) null");
    java.util.Date var13 = var0.getSentDate();
    java.lang.String[] var14 = var0.getTo();
    ch.bluepenguin.email.client.tapestry.SpringEngine var15 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var16 = var15.getPageSource();
    org.apache.tapestry.listener.ListenerMap var17 = var15.getListeners();
    java.lang.String var18 = var15.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var19 = var15.getComponentClassEnhancer();
    org.apache.tapestry.spec.IApplicationSpecification var20 = var15.getSpecification();
    java.lang.String var21 = var15.getContextPath();
    java.lang.String var22 = var15.toString();
    boolean var23 = var0.equals((java.lang.Object)var15);
    org.apache.tapestry.engine.IComponentMessagesSource var24 = var15.getComponentMessagesSource();
    org.apache.tapestry.engine.IScriptSource var25 = var15.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test263");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    java.lang.String var3 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var4 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var6.setIndex(10);
    var6.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var6.setDepth(0);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var6);
    var6.setIndex(0);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var16 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var16.setText("Dummy EmailFacade Impl");
    var16.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var21 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var21.setText("Dummy EmailFacade Impl");
    var21.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var27 = var26.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var29.setIndex(10);
    var29.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var34 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var36 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var37 = var36.getSuppressed();
    var34.setParameters((java.lang.Object[])var37);
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var40 = var39.getBody();
    var34.setComponent((org.apache.tapestry.IComponent)var39);
    var26.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    var34.setStyleClass(",");
    var21.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var34);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var46 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var21.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    var16.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var21);
    var6.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var16);
    int var50 = var6.getIndex();
    boolean var51 = var6.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0) null"+ "'", var3.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0) null"+ "'", var27.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test264");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.detach();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    var9.setParameters((java.lang.Object[])var12);
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    var9.setComponent((org.apache.tapestry.IComponent)var14);
    var14.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var21 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    var19.setParameters((java.lang.Object[])var22);
    ch.bluepenguin.email.client.tapestry.Home var24 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var25 = var24.getBody();
    var19.setComponent((org.apache.tapestry.IComponent)var24);
    org.apache.tapestry.INamespace var27 = var24.getNamespace();
    var14.setContainer((org.apache.tapestry.IComponent)var24);
    var5.setPage((org.apache.tapestry.IPage)var24);
    org.apache.tapestry.IPage var30 = var5.getPage();
    var5.endPageRender();
    org.apache.tapestry.IComponent var32 = var5.getContainer();
    org.apache.tapestry.IEngine var33 = var5.getEngine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test265");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.Person var5 = new ch.bluepenguin.email.client.Person();
    java.lang.String var6 = var5.getFirstname();
    var5.setLastname("(0) null");
    var5.setLastname("");
    var0.setVisit((java.lang.Object)var5);
    org.apache.tapestry.spec.IApplicationSpecification var12 = var0.getSpecification();
    org.apache.tapestry.util.pool.Pool var13 = var0.getPool();
    java.util.Locale var14 = var0.getLocale();
    org.apache.tapestry.engine.ISpecificationSource var15 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test266");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    var10.setParameters((java.lang.Object[])var13);
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    var10.setComponent((org.apache.tapestry.IComponent)var15);
    org.apache.tapestry.INamespace var18 = var15.getNamespace();
    var5.setContainer((org.apache.tapestry.IComponent)var15);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var15);
    java.util.Locale var21 = var15.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var23 = var15.getComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test267");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    var0.setTo("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var13 = var8.getSentDate();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    java.lang.String[] var21 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var14.setCc(var21);
    java.lang.String[] var24 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var14.setBcc(var24);
    var8.setCc(var24);
    var0.copyTo((org.springframework.mail.MailMessage)var8);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var28 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var28.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    var31.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var36 = var31.getSentDate();
    ch.bluepenguin.email.client.MailMessage var37 = new ch.bluepenguin.email.client.MailMessage();
    var37.setBcc("Dummy EmailFacade Impl");
    var37.setTechnicalID(100);
    java.lang.String var42 = var37.getReplyTo();
    java.lang.String[] var44 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var37.setCc(var44);
    java.lang.String[] var47 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var37.setBcc(var47);
    var31.setCc(var47);
    java.lang.String var50 = var28.returnStringList(var47);
    java.lang.String[] var52 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var53 = var28.returnStringList(var52);
    var0.setTo(var52);
    int var55 = var0.getTechnicalID();
    ch.bluepenguin.email.client.Folder var56 = var0.getFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Dummy EmailFacade Impl"+ "'", var50.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var53.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test268");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var2.setIndex(10);
    java.lang.String var5 = var2.getName();
    var2.setDepth(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var2);
    java.util.Iterator var9 = var0.getMenuItemsDepthFirst();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var14 = var13.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    var11.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var18 = var17.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var20.setIndex(10);
    var20.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var27 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var28 = var27.getSuppressed();
    var25.setParameters((java.lang.Object[])var28);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    var25.setComponent((org.apache.tapestry.IComponent)var30);
    var17.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var36 = var35.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var35);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var38 = var37.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var39 = var37.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var40 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var17.addMenuItem(var39, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var40);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var43 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var44 = var43.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var45 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var43);
    java.lang.String var46 = var43.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var47 = var17.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var43);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var48 = var17.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var50 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var50.setParent((java.lang.Object)100L);
    int var53 = var50.getDepth();
    java.lang.Object var54 = var50.getParent();
    var17.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    var11.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var57 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var58 = var57.displayMenuStructure();
    java.util.Iterator var59 = var57.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var60 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var62 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var63 = var62.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var64 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var62);
    var60.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var62);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var66 = var57.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var62);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var68 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var69 = var68.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var70 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var68);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var71 = var70.getMenuItem();
    var57.addMenuItem(var71);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var74 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var74.setIndex(10);
    var74.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var57.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var74);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var81 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var81.setName("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var84 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var81);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var85 = var57.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var81);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var86 = var11.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var81);
    java.lang.String var87 = var81.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var88 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0) null"+ "'", var18.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + 100L+ "'", var54.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0) null"+ "'", var58.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(0) null"+ "'", var87.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test269");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    java.util.Collection var5 = var0.getActivePageNames();
    java.lang.String var6 = var0.toString();
    org.apache.tapestry.util.io.DataSqueezer var7 = var0.getDataSqueezer();
    java.lang.Object var8 = var0.getGlobal();
    org.apache.tapestry.engine.IPageSource var9 = var0.getPageSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test270");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    boolean var11 = var6.isLeaf();
    boolean var12 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var13 = var6.getFolder();
    var13.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.Account var16 = var13.getAccount();
    java.lang.String var17 = var13.getName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test271");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var4 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setParentFolderId((java.lang.Integer)1);
    var5.setFullName("hi!");
    var4.setParent(var5);
    java.lang.Integer var12 = var4.getParentFolderId();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setParentFolderId((java.lang.Integer)1);
    var13.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var13.getUniqueID();
    ch.bluepenguin.email.client.MailMessage var20 = new ch.bluepenguin.email.client.MailMessage();
    var20.setBcc("Dummy EmailFacade Impl");
    var20.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var25 = new ch.bluepenguin.email.client.MailMessage();
    var25.setBcc("Dummy EmailFacade Impl");
    java.lang.String var28 = var25.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var29 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var29.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var32 = var29.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var33 = var29.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    var34.setParentFolderId((java.lang.Integer)1);
    var34.setFullName("hi!");
    var33.setParent(var34);
    var25.setFolder(var34);
    var20.setFolder(var34);
    var34.setFullName("hi!");
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    boolean var47 = var46.isLeaf();
    ch.bluepenguin.email.client.Folder var48 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var49 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var48);
    boolean var51 = var49.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var52 = var49.getParent();
    var46.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var49);
    ch.bluepenguin.email.client.Folder var54 = var46.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var55 = var54.getUniqueID();
    var34.setParent(var54);
    var13.setParent(var54);
    var4.setParent(var54);
    java.lang.String var59 = var4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Current Folder"+ "'", var59.equals("Current Folder"));

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test272");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    int var25 = var23.getBodyCount();
    org.apache.tapestry.IAsset var27 = var23.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var30 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var31 = var30.getSuppressed();
    var28.setParameters((java.lang.Object[])var31);
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    var28.setComponent((org.apache.tapestry.IComponent)var33);
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    var36.setPageName("");
    var33.addBody((org.apache.tapestry.IRender)var36);
    var23.setContainer((org.apache.tapestry.IComponent)var36);
    org.apache.tapestry.INamespace var43 = var36.getNamespace();
    java.lang.String var44 = var36.getIdPath();
    var17.setContained((java.lang.Object)var36);
    ch.bluepenguin.email.client.tapestry.SpringEngine var46 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var46.forgetPage("");
    org.apache.tapestry.engine.IPageSource var49 = var46.getPageSource();
    org.apache.tapestry.engine.IPropertySource var50 = var46.getPropertySource();
    org.apache.tapestry.engine.IComponentMessagesSource var51 = var46.getComponentMessagesSource();
    var36.attach((org.apache.tapestry.IEngine)var46);
    org.apache.tapestry.asset.ResourceChecksumSource var53 = var46.getResourceChecksumSource();
    java.util.Locale var54 = var46.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test273");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    boolean var10 = var6.isDirty();
    org.springframework.mail.javamail.JavaMailReader var11 = var6.getReader();
    org.springframework.mail.javamail.JavaMailReader var12 = var6.getReader();
    var6.setDirty(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test274");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.engine.IPageSource var6 = var0.getPageSource();
    java.lang.String var7 = var0.toString();
    java.lang.String var8 = var0.toString();
    org.apache.tapestry.engine.ITemplateSource var9 = var0.getTemplateSource();
    org.apache.tapestry.engine.IComponentMessagesSource var10 = var0.getComponentMessagesSource();
    java.util.Locale var11 = var0.getLocale();
    org.apache.tapestry.spec.IApplicationSpecification var12 = var0.getSpecification();
    boolean var13 = var0.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test275");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var11 = var0.toString();
    java.lang.String[] var12 = var0.getTo();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    java.lang.String var16 = var13.getReplyTo();
    java.lang.String var17 = var13.getText();
    var13.setTechnicalID(0);
    java.util.Date var20 = var13.getSentDate();
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    var13.setTo("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    int var24 = var13.getTechnicalID();
    java.lang.String[] var25 = var13.getTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var11.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test276");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    boolean var3 = var0.isDirty();
    org.apache.tapestry.util.pool.Pool var4 = var0.getPool();
    org.apache.tapestry.IResourceResolver var5 = var0.getResourceResolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test277");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    var13.beginPageRender();
    java.util.Collection var15 = var13.getBindingNames();
    var10.setPage((org.apache.tapestry.IPage)var13);
    var0.addComponent((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var18 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var18.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var21 = var18.getMyLocale();
    var13.setLocale(var21);
    org.apache.tapestry.INamespace var23 = var13.getNamespace();
    java.lang.String var24 = var13.getIdPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test278");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    var0.setFrom("(0) null");
    var0.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.MailMessage var9 = new ch.bluepenguin.email.client.MailMessage();
    var9.setBcc("Dummy EmailFacade Impl");
    var9.setTechnicalID(100);
    java.lang.String var14 = var9.getReplyTo();
    java.lang.String[] var16 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var9.setCc(var16);
    ch.bluepenguin.email.client.Folder var18 = var9.getFolder();
    java.lang.String[] var19 = var9.getBcc();
    java.lang.String[] var20 = var9.getCc();
    var0.setBcc(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test279");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var4 = new java.lang.String[] { "(0) null"};
    java.lang.String var5 = var0.returnStringList(var4);
    ch.bluepenguin.email.client.tapestry.SpringEngine var6 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var6.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var9 = var6.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var10 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var10.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var13 = var10.getMyLocale();
    var6.setLocale(var13);
    var0.setMyLocale(var13);
    java.util.Locale var16 = var0.getMyLocale();
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    int var19 = var17.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    var20.beginPageRender();
    java.util.Collection var22 = var20.getBindingNames();
    var17.setPage((org.apache.tapestry.IPage)var20);
    org.apache.tapestry.listener.ListenerMap var24 = var20.getListeners();
    int var25 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var26 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var27 = var26.getSeparator();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var28.addComponent((org.apache.tapestry.IComponent)var31);
    java.lang.String var35 = var28.getIdPath();
    org.apache.tapestry.ILocation var36 = var28.getLocation();
    org.apache.tapestry.IEngine var37 = var28.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var38 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var38.setSeparator("");
    java.util.Locale var41 = var38.getMyLocale();
    var28.setLocale(var41);
    var26.setMyLocale(var41);
    var20.setLocale(var41);
    var0.setMyLocale(var41);
    var0.setSeparator("(0) (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ","+ "'", var27.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test280");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var0.getUniqueID();
    java.lang.Integer var7 = var6.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test281");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    boolean var15 = var1.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var16.forgetPage("");
    org.apache.tapestry.engine.IPageSource var19 = var16.getPageSource();
    java.lang.Object var20 = var16.getGlobal();
    java.lang.Object var21 = var16.getGlobal();
    boolean var22 = var1.equals((java.lang.Object)var16);
    org.apache.tapestry.util.io.DataSqueezer var23 = var16.createDataSqueezer();
    org.apache.tapestry.util.pool.Pool var24 = var16.getPool();
    org.apache.tapestry.engine.IPageSource var25 = var16.getPageSource();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    var27.setFolder(var28);
    ch.bluepenguin.email.client.Folder var30 = var27.getFolder();
    var16.setVisit((java.lang.Object)var27);
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    var34.setParentFolderId((java.lang.Integer)1);
    var34.setParentFolderId((java.lang.Integer)0);
    var32.setParent(var34);
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    ch.bluepenguin.email.client.Folder var43 = new ch.bluepenguin.email.client.Folder();
    var42.setFolder(var43);
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    var45.setFullName("hi!");
    var43.setParent(var45);
    var45.setParentFolderId((java.lang.Integer)100);
    var34.setParent(var45);
    ch.bluepenguin.email.client.AbstractUniqueID var53 = var34.getUniqueID();
    var27.setFolder(var34);
    ch.bluepenguin.email.client.Account var55 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var56 = var55.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var57 = var55.getUniqueID();
    ch.bluepenguin.email.client.Person var58 = new ch.bluepenguin.email.client.Person();
    java.lang.String var59 = var58.getFirstname();
    var55.setPerson(var58);
    ch.bluepenguin.email.client.Person var61 = var55.getPerson();
    ch.bluepenguin.email.client.Person var62 = new ch.bluepenguin.email.client.Person();
    java.lang.String var63 = var62.getFirstname();
    var62.setNickname("");
    var62.setLastname(",");
    java.lang.String var68 = var62.getFirstname();
    var55.setPerson(var62);
    var34.setAccount(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test282");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    java.lang.String var4 = var1.getName();
    int var5 = var1.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.Object var7 = var1.getParent();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var9 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var10 = var9.getSuppressed();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var14 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var15 = var14.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var17 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var18 = var17.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var21 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var17.reportException("", (java.lang.Throwable)var21);
    var14.reportException("hi!", (java.lang.Throwable)var21);
    var12.addSuppressed((java.lang.Throwable)var21);
    var9.addSuppressed((java.lang.Throwable)var12);
    var1.setContained((java.lang.Object)var9);
    java.lang.String var27 = var1.getName();
    java.lang.Object var28 = var1.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test283");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IAsset var4 = var0.getAsset("Dummy EmailFacade Impl");
    org.apache.tapestry.ILocation var5 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test284");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var6 = var5.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setIndex(10);
    var8.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    var5.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var13.setStyleClass(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var0.setElement(",");
    var0.setText("");
    var0.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setStyleClass("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test285");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setText(",");
    var0.setText("(0) null");
    var0.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setElement("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var11 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    var12.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var18 = var17.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var20.setIndex(10);
    var20.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var27 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var28 = var27.getSuppressed();
    var25.setParameters((java.lang.Object[])var28);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    var25.setComponent((org.apache.tapestry.IComponent)var30);
    var17.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setStyleClass(",");
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var11.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var39 = var38.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var41 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var41.setIndex(10);
    var41.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var46 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var48 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var49 = var48.getSuppressed();
    var46.setParameters((java.lang.Object[])var49);
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    var46.setComponent((org.apache.tapestry.IComponent)var51);
    var38.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var41, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    var11.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var46);
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0) null"+ "'", var18.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0) null"+ "'", var39.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test286");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    boolean var3 = var0.isAllClean();
    boolean var5 = var0.isDirty((java.lang.Integer)100);
    var0.clear();
    var0.clear();
    var0.setAll(true);
    var0.setAll(false);
    var0.setState((java.lang.Integer)0, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test287");


    ch.bluepenguin.email.client.cache.MailCache var1 = new ch.bluepenguin.email.client.cache.MailCache("(1) null");
    net.sf.ehcache.Cache var2 = var1.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test288");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    boolean var12 = var10.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var13 = var10.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var10);
    ch.bluepenguin.email.client.MailMessage var15 = new ch.bluepenguin.email.client.MailMessage();
    var15.setBcc("Dummy EmailFacade Impl");
    java.lang.String var18 = var15.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var19 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var19.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var22 = var19.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var23 = var19.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    var24.setParentFolderId((java.lang.Integer)1);
    var24.setFullName("hi!");
    var23.setParent(var24);
    var15.setFolder(var24);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    var10.setFolder(var24);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var36 = var35.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var37 = var35.getFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test289");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setReplyTo(",");
    var0.setFrom("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=,");
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    var9.setParentFolderId((java.lang.Integer)1);
    var9.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    var0.setFolder(var9);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test290");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    org.apache.tapestry.engine.IScriptSource var3 = var0.getScriptSource();
    ch.bluepenguin.email.client.service.impl.EmailFacadeState var4 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var4.clear();
    var4.setAll(true);
    var4.clear();
    var4.clear();
    var4.setAll(false);
    var0.setVisit((java.lang.Object)false);
    org.apache.tapestry.asset.ResourceChecksumSource var13 = var0.getResourceChecksumSource();
    java.util.Locale var14 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test291");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    ch.bluepenguin.email.client.Folder var31 = var1.getFolder();
    org.apache.tapestry.contrib.tree.model.ITreeNode var32 = var1.getParent();
    int var33 = var1.getChildCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test292");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var23 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = var0.getRootList();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var26 = var0.getRootList();
    java.lang.String var27 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0) null"+ "'", var27.equals("(0) null"));

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test293");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var2.getUniqueID();
    var2.setFullName("hi!");
    ch.bluepenguin.email.client.Account var12 = var2.getAccount();
    ch.bluepenguin.email.client.Account var13 = var2.getAccount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var2);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    boolean var21 = var16.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var18);
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var18.getParent();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    var23.setParentFolderId((java.lang.Integer)1);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    var27.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    var18.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    boolean var32 = var14.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test294");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    boolean var31 = var25.getAllowsChildren();
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var37 = new ch.bluepenguin.email.client.MailMessage();
    var37.setBcc("Dummy EmailFacade Impl");
    java.lang.String var40 = var37.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var41 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var41.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var44 = var41.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var45 = var41.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var46 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var47 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var46);
    var46.setParentFolderId((java.lang.Integer)1);
    var46.setFullName("hi!");
    var45.setParent(var46);
    var37.setFolder(var46);
    var32.setFolder(var46);
    var25.setFolder(var46);
    ch.bluepenguin.email.client.Folder var56 = var25.getFolder();
    ch.bluepenguin.email.client.Folder var57 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var58 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var57);
    boolean var60 = var58.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var61 = var58.getFolder();
    ch.bluepenguin.email.client.Account var62 = var61.getAccount();
    java.lang.String var63 = var61.getFullName();
    var61.setName("(0) null\n   (0) null\n   (0) null");
    java.lang.String var66 = var61.getName();
    var56.setParent(var61);
    ch.bluepenguin.email.client.Folder var68 = var56.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0) null\n   (0) null\n   (0) null"+ "'", var66.equals("(0) null\n   (0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test295");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    org.apache.tapestry.asset.ResourceChecksumSource var5 = var0.getResourceChecksumSource();
    boolean var6 = var0.isDirty();
    org.apache.tapestry.util.io.DataSqueezer var7 = var0.createDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test296");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test297");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IPage var12 = var4.getPage();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    int var15 = var13.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    var13.addComponent((org.apache.tapestry.IComponent)var16);
    java.util.Map var20 = var16.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var21 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var21.forgetPage("");
    org.apache.tapestry.engine.IPageSource var24 = var21.getPageSource();
    org.apache.tapestry.engine.IPropertySource var25 = var21.getPropertySource();
    java.util.Collection var26 = var21.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var27 = var21.getComponentMessagesSource();
    var16.attach((org.apache.tapestry.IEngine)var21);
    java.lang.Object var29 = var16.getVisit();
    var16.setPageName("Default EmailFacade Impl");
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    java.lang.String var34 = var32.getPageName();
    java.lang.String var35 = var32.toString();
    org.apache.tapestry.IEngine var36 = var32.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    java.lang.String var39 = var37.getPageName();
    java.lang.String var40 = var37.toString();
    org.apache.tapestry.IEngine var41 = var37.getEngine();
    var32.addBody((org.apache.tapestry.IRender)var37);
    java.lang.String var43 = var37.toString();
    var16.addComponent((org.apache.tapestry.IComponent)var37);
    var4.addComponent((org.apache.tapestry.IComponent)var16);
    var16.setId("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    int var48 = var16.getBodyCount();
    java.lang.String var49 = var16.getId();
    org.apache.tapestry.IBinding var51 = var16.getBinding("ch.bluepenguin.email.client.tapestry.Home@1173ea1b[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]"+ "'", var49.equals("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test298");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var27 = var26.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    java.lang.String var29 = var26.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var30 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var33.setLeaf(false);
    boolean var36 = var33.isLeaf();
    var33.setIndex(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var39 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var33);
    java.lang.String var40 = var33.toString();
    int var41 = var33.getDepth();
    java.lang.String var42 = var33.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test299");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.engine.IPropertySource var3 = var0.getPropertySource();
    org.apache.tapestry.engine.IScriptSource var4 = var0.getScriptSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test300");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    java.util.Locale var8 = var3.getLocale();
    java.lang.String var9 = var3.getIdPath();
    int var10 = var3.getBodyCount();
    java.lang.String var11 = var3.getExtendedId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test301");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var3.setLastname("(0) null");
    var3.setLastname("");
    java.lang.String var9 = var3.getReserve();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var3.getUniqueID();
    var3.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!");
    java.lang.String var14 = var3.getLastname();
    var3.setReserve("(0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!"+ "'", var14.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!"));

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test302");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setName("(0) null");
    var1.setLeaf(true);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    boolean var7 = var1.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test303");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    java.lang.Object var22 = var13.getVisit();
    ch.bluepenguin.email.client.service.EmailFacadeException var24 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var25 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var24.setTechnicalException((java.lang.Exception)var25);
    java.lang.Exception var28 = var25.getTechnicalException();
    var13.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=(0) null; text=null", (java.lang.Throwable)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test304");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.util.Locale var2 = var0.getLocale();
    java.lang.Object var3 = var0.getGlobal();
    java.lang.String var4 = var0.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var5 = var0.getComponentClassEnhancer();
    boolean var6 = var0.isResetServiceEnabled();
    java.lang.String var7 = var0.getServletPath();
    boolean var8 = var0.isDirty();
    org.apache.tapestry.engine.IScriptSource var9 = var0.getScriptSource();
    org.apache.tapestry.listener.ListenerMap var10 = var0.getListeners();
    java.lang.Object var11 = var0.getVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test305");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setLeaf(false);
    boolean var4 = var1.isLeaf();
    var1.setIndex(1);
    var1.setIndex(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test306");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    java.lang.String var6 = var3.getReserve();
    var3.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var9 = var3.getFirstname();
    var3.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var3.setFirstname("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");
    var3.setLastname("ch.bluepenguin.email.client.service.EmailFacadeException");
    java.lang.String var16 = var3.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test307");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    org.apache.tapestry.IBinding var6 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Collection var7 = var0.getBindingNames();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test308");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var15 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var15.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var18.setText("Dummy EmailFacade Impl");
    var18.setText(",");
    var15.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var15);
    var15.setText("Default EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var28 = var27.displayMenuStructure();
    java.util.Iterator var29 = var27.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var33 = var32.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    var30.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = var27.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var32.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    var37.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var15.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    boolean var42 = var0.equals((java.lang.Object)var15);
    ch.bluepenguin.email.client.MailMessage var43 = new ch.bluepenguin.email.client.MailMessage();
    var43.setBcc("Dummy EmailFacade Impl");
    var43.setReplyTo("Dummy EmailFacade Impl");
    var43.setTechnicalID(1);
    java.lang.String[] var50 = var43.getBcc();
    var0.setBcc(var50);
    int var52 = var0.getTechnicalID();
    var0.setTo("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0) null"+ "'", var28.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 100);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test309");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var3 = var0.getPropertySource();
    org.apache.tapestry.asset.ResourceChecksumSource var4 = var0.getResourceChecksumSource();
    java.lang.String var5 = var0.getServletPath();
    var0.forgetPage("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    java.lang.String var8 = var0.getServletPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test310");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var13 = var12.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12);
    java.lang.String var15 = var12.toString();
    var12.setDepth((-1));
    int var18 = var12.getDepth();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    var19.beginPageRender();
    java.util.Collection var21 = var19.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var22 = var19.getListeners();
    org.apache.tapestry.IRequestCycle var23 = var19.getRequestCycle();
    org.apache.tapestry.IRequestCycle var24 = var19.getRequestCycle();
    org.apache.tapestry.event.ChangeObserver var25 = var19.getChangeObserver();
    org.apache.tapestry.IRequestCycle var26 = var19.getRequestCycle();
    java.lang.String var27 = var19.getExtendedId();
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    int var30 = var28.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var28.addComponent((org.apache.tapestry.IComponent)var31);
    java.util.Map var35 = var31.getComponents();
    java.util.Locale var36 = var31.getLocale();
    var19.setPage((org.apache.tapestry.IPage)var31);
    var12.setContained((java.lang.Object)var31);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var39 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var41 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var42 = var41.getParent();
    java.lang.Object var43 = var41.getContained();
    java.lang.String var44 = var41.getName();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var45 = var41.getRenderer();
    var41.setLeaf(false);
    boolean var48 = var41.isLeaf();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var49 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10.0f+ "'", var43.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test311");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    java.lang.String[] var27 = var0.getBcc();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var30 = new ch.bluepenguin.email.client.MailMessage();
    var30.setBcc("Dummy EmailFacade Impl");
    var30.setSubject("(0) null\n   (0) null");
    java.lang.String[] var35 = var30.getTo();
    java.lang.String[] var36 = var30.getBcc();
    var0.setBcc(var36);
    java.lang.String[] var38 = var0.getTo();
    java.lang.String[] var39 = var0.getTo();
    java.lang.String var40 = var0.getFrom();
    var0.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.setCc("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test312");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Account var6 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var7 = var6.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var6.getUniqueID();
    ch.bluepenguin.email.client.Person var9 = new ch.bluepenguin.email.client.Person();
    java.lang.String var10 = var9.getFirstname();
    var6.setPerson(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var12 = var9.getUniqueID();
    var0.setPerson(var9);
    var9.setNickname("");
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var9.getUniqueID();
    java.lang.String var17 = var9.getLastname();
    java.lang.String var18 = var9.getLastname();
    java.lang.String var19 = var9.getReserve();
    var9.setNickname("ch.bluepenguin.email.client.service.EmailFacadeException");
    var9.setFirstname("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test313");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var1 = var0.getSeparator();
    ch.bluepenguin.email.client.tapestry.Home var2 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var3 = var2.getBody();
    java.lang.String var4 = var2.getPageName();
    java.lang.String var5 = var2.toString();
    org.apache.tapestry.IEngine var6 = var2.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    java.lang.String var9 = var7.getPageName();
    java.lang.String var10 = var7.toString();
    org.apache.tapestry.IEngine var11 = var7.getEngine();
    var2.addBody((org.apache.tapestry.IRender)var7);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var13 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var13.setSeparator("");
    java.util.Locale var16 = var13.getMyLocale();
    var2.setLocale(var16);
    var0.setMyLocale(var16);
    var0.setSeparator("(0) null\n   (0) null\n   (0) null");
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var23 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var23.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var26 = new ch.bluepenguin.email.client.MailMessage();
    var26.setBcc("Dummy EmailFacade Impl");
    var26.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var31 = var26.getSentDate();
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setTechnicalID(100);
    java.lang.String var37 = var32.getReplyTo();
    java.lang.String[] var39 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var32.setCc(var39);
    java.lang.String[] var42 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var32.setBcc(var42);
    var26.setCc(var42);
    java.lang.String var45 = var23.returnStringList(var42);
    java.util.Locale var46 = var23.getMyLocale();
    java.util.Locale var47 = var23.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var48 = new ch.bluepenguin.email.client.MailMessage();
    var48.setBcc("Dummy EmailFacade Impl");
    var48.setTechnicalID(100);
    java.lang.String var53 = var48.getReplyTo();
    java.lang.String[] var55 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var48.setCc(var55);
    var48.setBcc("Dummy EmailFacade Impl");
    var48.setSubject("hi!");
    java.lang.String var61 = var48.toString();
    java.lang.String var62 = var48.getText();
    java.lang.String[] var63 = var48.getCc();
    java.lang.String var64 = var23.returnStringList(var63);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var65 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var65.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var68 = new ch.bluepenguin.email.client.MailMessage();
    var68.setBcc("Dummy EmailFacade Impl");
    var68.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var73 = var68.getSentDate();
    ch.bluepenguin.email.client.MailMessage var74 = new ch.bluepenguin.email.client.MailMessage();
    var74.setBcc("Dummy EmailFacade Impl");
    var74.setTechnicalID(100);
    java.lang.String var79 = var74.getReplyTo();
    java.lang.String[] var81 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var74.setCc(var81);
    java.lang.String[] var84 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var74.setBcc(var84);
    var68.setCc(var84);
    java.lang.String var87 = var65.returnStringList(var84);
    java.lang.String[] var89 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    java.lang.String var90 = var65.returnStringList(var89);
    java.lang.String var91 = var23.returnStringList(var89);
    java.lang.String var92 = var0.returnStringList(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ","+ "'", var1.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Dummy EmailFacade Impl"+ "'", var45.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var61.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var64.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "Dummy EmailFacade Impl"+ "'", var87.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var90.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var91.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var92.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test314");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var2 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var2.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var6 = new java.lang.String[] { "(0) null"};
    java.lang.String var7 = var2.returnStringList(var6);
    java.util.Locale var8 = var2.getMyLocale();
    java.util.Locale var9 = var2.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getReplyTo();
    java.lang.String[] var17 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var10.setCc(var17);
    java.lang.String[] var20 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var10.setBcc(var20);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    var10.setBcc(var32);
    java.lang.String[] var35 = var10.getBcc();
    java.lang.String var36 = var2.returnStringList(var35);
    var0.setBcc(var35);
    java.lang.String var38 = var0.getSubject();
    var0.setBcc("(0) (0) null");
    var0.setSubject("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test315");


    ch.bluepenguin.email.client.cache.MailCache var1 = new ch.bluepenguin.email.client.cache.MailCache("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    net.sf.ehcache.Cache var2 = var1.getCache();
    net.sf.ehcache.Cache var3 = var1.getCache();
    net.sf.ehcache.Cache var4 = var1.getCache();
    net.sf.ehcache.Cache var5 = var1.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test316");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var14 = var11.getParent();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    java.util.Collection var19 = var16.getChildren();
    boolean var20 = var11.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var16);
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    boolean var24 = var22.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var25 = var22.getFolder();
    int var26 = var22.getChildCount();
    var16.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var22);
    boolean var28 = var16.isLeaf();
    java.util.Collection var29 = var16.children();
    var1.insert(var29);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var35 = var32.getFolder();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var38 = var37.isLeaf();
    var32.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var37);
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    var41.setFolder(var42);
    ch.bluepenguin.email.client.Folder var44 = var41.getFolder();
    java.util.Collection var45 = var41.getChildren();
    var32.insert(var45);
    int var47 = var32.getChildCount();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var49 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var49.setIndex(10);
    java.lang.String var52 = var49.getName();
    var49.setDepth(1);
    boolean var55 = var32.equals((java.lang.Object)var49);
    boolean var56 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var32);
    ch.bluepenguin.email.client.Folder var57 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var58 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var57);
    boolean var60 = var58.equals((java.lang.Object)(short)(-1));
    java.util.Collection var61 = var58.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var62 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var63 = var62.getBody();
    int var64 = var62.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    int var67 = var65.getBodyCount();
    var62.addComponent((org.apache.tapestry.IComponent)var65);
    java.util.Map var69 = var65.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var70 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var70.forgetPage("");
    org.apache.tapestry.engine.IPageSource var73 = var70.getPageSource();
    org.apache.tapestry.engine.IPropertySource var74 = var70.getPropertySource();
    java.util.Collection var75 = var70.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var76 = var70.getComponentMessagesSource();
    var65.attach((org.apache.tapestry.IEngine)var70);
    boolean var78 = var58.equals((java.lang.Object)var70);
    ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper var79 = new ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper();
    boolean var80 = var58.equals((java.lang.Object)var79);
    boolean var81 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var58);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var82 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var82.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var85 = var82.getCurrentFolder();
    var82.setCurrentFolder("");
    java.lang.String var88 = var82.getName();
    var82.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.Folder var91 = var82.getCurrentFolder();
    java.lang.String var92 = var91.getFullName();
    java.lang.Integer var93 = var91.getParentFolderId();
    ch.bluepenguin.email.client.Account var94 = var91.getAccount();
    var1.setFolder(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "Dummy EmailFacade Impl"+ "'", var88.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test317");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    java.lang.String var10 = var6.getName();
    boolean var11 = var6.isDirty();
    org.springframework.mail.javamail.JavaMailReader var12 = var6.getReader();
    java.util.logging.Logger var13 = var6.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var14 = var6.getCache();
    org.springframework.mail.MailSender var15 = var6.getSender();
    var6.setDirty(false);
    var6.setDirty(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Default EmailFacade Impl"+ "'", var10.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test318");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.engine.IComponentMessagesSource var2 = var0.getComponentMessagesSource();
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test319");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    org.apache.tapestry.listener.ListenerMap var7 = var0.getListeners();
    boolean var8 = var0.isResetServiceEnabled();
    boolean var9 = var0.isStateful();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test320");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    var3.beginPageRender();
    java.util.Collection var5 = var3.getBindingNames();
    var0.setPage((org.apache.tapestry.IPage)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var8 = var3.getComponent("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test321");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var13 = var12.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var12.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var15 = var12.getUniqueID();
    ch.bluepenguin.email.client.Person var16 = new ch.bluepenguin.email.client.Person();
    java.lang.String var17 = var16.getFirstname();
    var16.setLastname("(0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var20 = var16.getUniqueID();
    var12.setPerson(var16);
    ch.bluepenguin.email.client.Person var22 = new ch.bluepenguin.email.client.Person();
    java.lang.String var23 = var22.getFirstname();
    var22.setNickname("");
    var22.setLastname(",");
    java.lang.String var28 = var22.getNickname();
    java.lang.String var29 = var22.getLastname();
    java.lang.String var30 = var22.getFirstname();
    var22.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var33 = var22.getFirstname();
    var12.setPerson(var22);
    ch.bluepenguin.email.client.Person var35 = var12.getPerson();
    var5.setAccount(var12);
    var5.setName("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var5.setFullName("SimpleMailMessage: from=null; replyTo=null; to=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ","+ "'", var29.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test322");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.email.client.cache.MailCache var10 = var6.getCache();
    ch.bluepenguin.email.client.cache.MailCache var11 = var6.getCache();
    boolean var12 = var6.isDirty();
    var6.setDirty(false);
    java.lang.String var15 = var6.getName();
    java.lang.String var16 = var6.getName();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var17 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var19 = new ch.bluepenguin.email.client.cache.MailCache("");
    var17.setCache(var19);
    net.sf.ehcache.Cache var21 = var19.getCache();
    var6.setCache(var19);
    net.sf.ehcache.Cache var23 = var19.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Default EmailFacade Impl"+ "'", var15.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Default EmailFacade Impl"+ "'", var16.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test323");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    var2.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.AbstractUniqueID var6 = var2.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test324");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var3 = var2.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var5.setIndex(10);
    var5.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var12 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    var10.setParameters((java.lang.Object[])var13);
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    var10.setComponent((org.apache.tapestry.IComponent)var15);
    var2.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var21 = var20.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var22 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var23 = var22.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var24 = var22.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var2.addMenuItem(var24, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var29 = var28.getParent();
    java.lang.Object var30 = var28.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var31 = var2.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var32 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    java.util.Iterator var33 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var35);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var38.setIndex(10);
    java.lang.String var41 = var38.getName();
    int var42 = var38.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var43 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38);
    java.lang.Object var44 = var38.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var45 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0) null"+ "'", var3.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test325");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    org.apache.tapestry.engine.ISpecificationSource var5 = var0.getSpecificationSource();
    boolean var6 = var0.isDirty();
    java.util.Locale var7 = var0.getLocale();
    java.lang.String var8 = var0.toString();
    java.lang.Object var9 = var0.getVisit();
    java.lang.Object var10 = var0.getVisit();
    org.apache.tapestry.util.io.DataSqueezer var11 = var0.createDataSqueezer();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var12 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var12.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var16 = var12.getMessagesFromFolder("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage[] var17 = var12.getAllMessages();
    var12.setCurrentFolder(",");
    java.lang.String var20 = var12.getName();
    ch.bluepenguin.email.client.Folder var21 = var12.getCurrentFolder();
    var0.setVisit((java.lang.Object)var21);
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    var24.setFolder(var25);
    ch.bluepenguin.email.client.Folder var27 = var24.getFolder();
    java.util.Collection var28 = var24.getChildren();
    ch.bluepenguin.email.client.MailMessage var29 = new ch.bluepenguin.email.client.MailMessage();
    var29.setBcc("Dummy EmailFacade Impl");
    java.lang.String var32 = var29.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var33 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var33.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var36 = var33.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var37 = var33.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var38 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38);
    var38.setParentFolderId((java.lang.Integer)1);
    var38.setFullName("hi!");
    var37.setParent(var38);
    var29.setFolder(var38);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38);
    boolean var47 = var24.equals((java.lang.Object)var46);
    ch.bluepenguin.email.client.Folder var48 = var24.getFolder();
    ch.bluepenguin.email.client.Folder var49 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var50 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var49);
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    var50.setFolder(var51);
    ch.bluepenguin.email.client.Folder var53 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var54 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53);
    var53.setFullName("hi!");
    var51.setParent(var53);
    var53.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var60 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var61 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var60);
    ch.bluepenguin.email.client.Folder var62 = new ch.bluepenguin.email.client.Folder();
    var61.setFolder(var62);
    org.apache.tapestry.contrib.tree.model.ITreeNode var64 = var61.getParent();
    boolean var65 = var61.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var66 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var61);
    ch.bluepenguin.email.client.Account var67 = var53.getAccount();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var68 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var69 = var68.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var70 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var71 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var70);
    boolean var73 = var71.equals((java.lang.Object)(short)(-1));
    java.util.Collection var74 = var71.children();
    ch.bluepenguin.email.client.Folder var75 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var76 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var75);
    var75.setFullName("hi!");
    var75.setFullName("Dummy EmailFacade Impl");
    var71.setFolder(var75);
    java.util.Collection var82 = var71.getChildren();
    ch.bluepenguin.email.client.Folder var83 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var84 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var83);
    ch.bluepenguin.email.client.Folder var85 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var86 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var85);
    var85.setParentFolderId((java.lang.Integer)1);
    var85.setParentFolderId((java.lang.Integer)0);
    var83.setParent(var85);
    var71.setFolder(var85);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var93 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var69, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var71);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var94 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var71);
    var24.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var94);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var96 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var24);
    ch.bluepenguin.email.client.AbstractUniqueID var97 = var21.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10.0f+ "'", var9.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10.0f+ "'", var10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Dummy EmailFacade Impl"+ "'", var20.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test326");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var6 = var1.getRenderer();
    java.lang.String var7 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var9 = var1.toString();
    var1.setIndex((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test327");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    int var27 = var0.getTechnicalID();
    java.lang.String[] var28 = var0.getCc();
    var0.setTo("(0) null\n   (0) null\n   (0) null");
    java.lang.String[] var31 = var0.getCc();
    var0.setTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setSubject("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test328");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    ch.bluepenguin.email.client.Folder var2 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("Dummy EmailFacade Impl");
    var0.setCurrentFolder("(0) null\n   (0) null");
    java.lang.String var7 = var0.getName();
    java.lang.String var8 = var0.getName();
    java.lang.String var9 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Dummy EmailFacade Impl"+ "'", var7.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Dummy EmailFacade Impl"+ "'", var8.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test329");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    var0.forgetPage(",");
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    org.apache.tapestry.engine.ISpecificationSource var6 = var0.getSpecificationSource();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var9 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var9);
    org.apache.tapestry.engine.IPageSource var11 = var0.getPageSource();
    boolean var12 = var0.getHasVisit();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var13 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var13.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var17 = new java.lang.String[] { "(0) null"};
    java.lang.String var18 = var13.returnStringList(var17);
    java.util.Locale var19 = var13.getMyLocale();
    java.util.Locale var20 = var13.getMyLocale();
    java.lang.String var21 = var13.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var22 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var23 = var22.getSeparator();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var25 = var24.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var26 = var24.getDataSqueezer();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var27 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var28 = var27.getSeparator();
    java.util.Locale var29 = var27.getMyLocale();
    var24.setLocale(var29);
    var22.setMyLocale(var29);
    var13.setMyLocale(var29);
    var0.setLocale(var29);
    org.apache.tapestry.engine.IComponentClassEnhancer var34 = var0.getComponentClassEnhancer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0) null"+ "'", var18.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var21.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ","+ "'", var23.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ","+ "'", var28.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test330");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    java.lang.String var10 = var6.getName();
    boolean var11 = var6.isDirty();
    ch.bluepenguin.email.client.cache.MailCache var12 = var6.getCache();
    var6.setDirty(true);
    ch.bluepenguin.email.client.cache.MailCache var15 = var6.getCache();
    java.lang.String var16 = var6.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Default EmailFacade Impl"+ "'", var10.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Default EmailFacade Impl"+ "'", var16.equals("Default EmailFacade Impl"));

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test331");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    var12.setFolder(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    var15.setFullName("hi!");
    var13.setParent(var15);
    var15.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    var23.setFolder(var24);
    org.apache.tapestry.contrib.tree.model.ITreeNode var26 = var23.getParent();
    boolean var27 = var23.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    ch.bluepenguin.email.client.Account var29 = var15.getAccount();
    var6.setFolder(var15);
    ch.bluepenguin.email.client.Folder var31 = var15.getParent();
    java.lang.Integer var32 = var15.getParentFolderId();
    java.lang.String var33 = var15.getName();
    var15.setFullName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 100+ "'", var32.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test332");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = new ch.bluepenguin.email.client.Person();
    java.lang.String var7 = var6.getFirstname();
    var6.setNickname("");
    var6.setLastname(",");
    java.lang.String var12 = var6.getNickname();
    java.lang.String var13 = var6.getLastname();
    var0.setPerson(var6);
    ch.bluepenguin.email.client.Person var15 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var0.getUniqueID();
    java.lang.Integer var17 = var16.getId();
    java.lang.Integer var18 = var16.getId();
    var16.setId((java.lang.Integer)0);
    var16.setId((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ","+ "'", var13.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test333");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var1);
    java.lang.String var9 = var8.getName();
    java.lang.Object var10 = var8.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test334");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    boolean var4 = var1.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    boolean var17 = var15.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var18 = var15.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var15);
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var15);
    ch.bluepenguin.email.client.Folder var21 = var15.getFolder();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    java.util.Collection var26 = var23.children();
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    var27.setFullName("hi!");
    var27.setFullName("Dummy EmailFacade Impl");
    var23.setFolder(var27);
    java.lang.String var34 = var27.getName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    var27.setParentFolderId((java.lang.Integer)(-1));
    var27.setParentFolderId((java.lang.Integer)0);
    var15.setFolder(var27);
    var27.setFullName("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test335");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    var0.forgetPage(",");
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    java.lang.Object var6 = var0.getGlobal();
    java.lang.String var7 = var0.getContextPath();
    java.util.Collection var8 = var0.getActivePageNames();
    var0.forgetPage("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!");
    org.apache.tapestry.engine.IPageSource var11 = var0.getPageSource();
    boolean var12 = var0.isStateful();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test336");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    var7.setText("hi!");
    var5.setContained((java.lang.Object)var7);
    var0.setVisit((java.lang.Object)var7);
    ch.bluepenguin.email.client.service.EmailFacadeException var17 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var17);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var19 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var19.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var23 = new java.lang.String[] { "(0) null"};
    java.lang.String var24 = var19.returnStringList(var23);
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var25.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var28 = var25.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var29 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var29.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var32 = var29.getMyLocale();
    var25.setLocale(var32);
    var19.setMyLocale(var32);
    var0.setLocale(var32);
    org.apache.tapestry.engine.IPageSource var36 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    var40.beginPageRender();
    java.util.Collection var42 = var40.getBindingNames();
    var37.setPage((org.apache.tapestry.IPage)var40);
    org.apache.tapestry.listener.ListenerMap var44 = var40.getListeners();
    int var45 = var40.getBodyCount();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var46 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var47 = var46.getSeparator();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    var48.addComponent((org.apache.tapestry.IComponent)var51);
    java.lang.String var55 = var48.getIdPath();
    org.apache.tapestry.ILocation var56 = var48.getLocation();
    org.apache.tapestry.IEngine var57 = var48.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var58 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var58.setSeparator("");
    java.util.Locale var61 = var58.getMyLocale();
    var48.setLocale(var61);
    var46.setMyLocale(var61);
    var40.setLocale(var61);
    var0.setLocale(var61);
    org.apache.tapestry.engine.IComponentMessagesSource var66 = var0.getComponentMessagesSource();
    org.apache.tapestry.engine.ISpecificationSource var67 = var0.getSpecificationSource();
    org.apache.tapestry.util.io.DataSqueezer var68 = var0.createDataSqueezer();
    org.apache.tapestry.listener.ListenerMap var69 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0) null"+ "'", var24.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ","+ "'", var47.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test337");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var5 = var3.getMenuItem();
    java.lang.String var6 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var7 = var3.getMenuItem();
    java.lang.String var8 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0) null"+ "'", var8.equals("(0) null"));

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test338");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var4 = var3.displayMenuStructure();
    java.util.Iterator var5 = var3.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var9 = var8.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var6.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    boolean var16 = var15.isLeaf();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var21 = var18.getParent();
    var15.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    ch.bluepenguin.email.client.Folder var23 = var15.getFolder();
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var28 = var25.getFolder();
    ch.bluepenguin.email.client.Folder var29 = var25.getFolder();
    var15.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    var31.setParentFolderId((java.lang.Integer)1);
    java.lang.String var35 = var31.getName();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var39 = var37.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var40 = var37.getParent();
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    boolean var44 = var42.equals((java.lang.Object)(short)(-1));
    java.util.Collection var45 = var42.getChildren();
    boolean var46 = var37.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var42);
    ch.bluepenguin.email.client.Folder var47 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var48 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var47);
    ch.bluepenguin.email.client.Folder var49 = new ch.bluepenguin.email.client.Folder();
    var48.setFolder(var49);
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    var51.setFullName("hi!");
    var49.setParent(var51);
    var51.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    ch.bluepenguin.email.client.Folder var60 = new ch.bluepenguin.email.client.Folder();
    var59.setFolder(var60);
    org.apache.tapestry.contrib.tree.model.ITreeNode var62 = var59.getParent();
    boolean var63 = var59.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var59);
    ch.bluepenguin.email.client.Account var65 = var51.getAccount();
    var42.setFolder(var51);
    boolean var67 = var42.isLeaf();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var69 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var70 = var69.getSuppressed();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var72 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var73 = var72.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var74 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var75 = var74.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var77 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var78 = var77.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var81 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var77.reportException("", (java.lang.Throwable)var81);
    var74.reportException("hi!", (java.lang.Throwable)var81);
    var72.addSuppressed((java.lang.Throwable)var81);
    var69.addSuppressed((java.lang.Throwable)var72);
    boolean var86 = var42.equals((java.lang.Object)var69);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var87 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var42);
    var87.removeFromParent();
    var15.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var87);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var90 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var15);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test339");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    org.apache.tapestry.engine.IPageSource var2 = var0.getPageSource();
    org.apache.tapestry.engine.IScriptSource var3 = var0.getScriptSource();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var0.getSpecification();
    boolean var5 = var0.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test340");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    var0.setCurrentFolder("(0) null\n   (0) null");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var8 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var8.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var11 = var8.getCurrentFolder();
    ch.bluepenguin.email.client.Folder[] var12 = var8.getAllFolders();
    ch.bluepenguin.email.client.MailMessage[] var14 = var8.getMessagesFromFolder("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var14, "SimpleMailMessage: from=(0) null\n   (0) null\n   (0) null\n   (0) null; replyTo=hi!; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=(0) null; sentDate=null; subject=null; text=null");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test341");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    java.lang.String var10 = var6.getName();
    org.springframework.mail.MailSender var11 = var6.getSender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Default EmailFacade Impl"+ "'", var10.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test342");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    var0.setTo("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setCc("hi!");
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.children();
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var16);
    var16.setFullName("hi!");
    var16.setFullName("Dummy EmailFacade Impl");
    var12.setFolder(var16);
    ch.bluepenguin.email.client.Account var23 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var24 = var23.getUniqueID();
    var16.setAccount(var23);
    boolean var26 = var8.equals((java.lang.Object)var23);
    ch.bluepenguin.email.client.AbstractUniqueID var27 = var8.getUniqueID();
    var8.setFrom("(0) null");
    boolean var30 = var0.equals((java.lang.Object)var8);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var31 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var31.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var34 = new ch.bluepenguin.email.client.MailMessage();
    var34.setBcc("Dummy EmailFacade Impl");
    var34.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var39 = var34.getSentDate();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    java.lang.String[] var50 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var40.setBcc(var50);
    var34.setCc(var50);
    java.lang.String var53 = var31.returnStringList(var50);
    var0.setCc(var50);
    ch.bluepenguin.email.client.MailMessage var55 = new ch.bluepenguin.email.client.MailMessage();
    var55.setBcc("Dummy EmailFacade Impl");
    var55.setTechnicalID(100);
    java.lang.String var60 = var55.getReplyTo();
    var55.setTo("");
    ch.bluepenguin.email.client.MailMessage var63 = new ch.bluepenguin.email.client.MailMessage();
    var63.setCc("hi!");
    ch.bluepenguin.email.client.Folder var66 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var67 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var66);
    boolean var69 = var67.equals((java.lang.Object)(short)(-1));
    java.util.Collection var70 = var67.children();
    ch.bluepenguin.email.client.Folder var71 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var72 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var71);
    var71.setFullName("hi!");
    var71.setFullName("Dummy EmailFacade Impl");
    var67.setFolder(var71);
    ch.bluepenguin.email.client.Account var78 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var79 = var78.getUniqueID();
    var71.setAccount(var78);
    boolean var81 = var63.equals((java.lang.Object)var78);
    ch.bluepenguin.email.client.AbstractUniqueID var82 = var63.getUniqueID();
    var63.setFrom("(0) null");
    boolean var85 = var55.equals((java.lang.Object)var63);
    var55.setReplyTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.copyTo((org.springframework.mail.MailMessage)var55);
    java.lang.String var89 = var55.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Dummy EmailFacade Impl"+ "'", var53.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test343");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.IAsset var11 = var0.getAsset("Dummy EmailFacade Impl");
    org.apache.tapestry.IBinding var13 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Map var14 = var0.getAssets();
    org.apache.tapestry.event.ChangeObserver var15 = var0.getChangeObserver();
    java.lang.String var16 = var0.getPageName();
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    int var19 = var17.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    var20.beginPageRender();
    java.util.Collection var22 = var20.getBindingNames();
    var17.setPage((org.apache.tapestry.IPage)var20);
    org.apache.tapestry.INamespace var24 = var17.getNamespace();
    java.lang.String var25 = var17.getIdPath();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setContainer((org.apache.tapestry.IComponent)var17);
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test344");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    var0.setReplyTo("Default EmailFacade Impl");
    java.util.Date var21 = var0.getSentDate();
    var0.setBcc("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.util.Date var24 = var0.getSentDate();
    java.lang.String[] var25 = var0.getBcc();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setParentFolderId((java.lang.Integer)1);
    var26.setFullName("Dummy EmailFacade Impl");
    java.lang.String var32 = var26.getFullName();
    var0.setFolder(var26);
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var37 = var35.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var38 = var35.getParent();
    ch.bluepenguin.email.client.Folder var39 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var40 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var39);
    boolean var42 = var40.equals((java.lang.Object)(short)(-1));
    java.util.Collection var43 = var40.getChildren();
    boolean var44 = var35.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var40);
    java.util.Collection var45 = var35.getChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    var26.setFullName("(0) null\n   (0) null\n   (0) null\n   (0) ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Dummy EmailFacade Impl"+ "'", var32.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test345");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.email.client.cache.MailCache var10 = var6.getCache();
    ch.bluepenguin.email.client.cache.MailCache var11 = var6.getCache();
    boolean var12 = var6.isDirty();
    var6.setDirty(false);
    java.lang.String var15 = var6.getName();
    java.lang.String var16 = var6.getName();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var17 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var19 = new ch.bluepenguin.email.client.cache.MailCache("");
    var17.setCache(var19);
    net.sf.ehcache.Cache var21 = var19.getCache();
    var6.setCache(var19);
    java.lang.String var23 = var6.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Default EmailFacade Impl"+ "'", var15.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Default EmailFacade Impl"+ "'", var16.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Default EmailFacade Impl"+ "'", var23.equals("Default EmailFacade Impl"));

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test346");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var5 = var0.getSubject();
    java.util.Date var6 = var0.getSentDate();
    var0.setFrom("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.setText("(0) null");
    java.lang.String var11 = var0.getFrom();
    var0.setCc("(0) null\n   (0) null\n   (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var11.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test347");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.INamespace var6 = var0.getNamespace();
    java.lang.String var7 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var9 = var8.displayMenuStructure();
    java.util.Iterator var10 = var8.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var14 = var13.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    var11.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = var8.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var13.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    int var25 = var23.getBodyCount();
    var20.addComponent((org.apache.tapestry.IComponent)var23);
    java.lang.String var27 = var20.getIdPath();
    org.apache.tapestry.ILocation var28 = var20.getLocation();
    org.apache.tapestry.IEngine var29 = var20.getEngine();
    var20.beginPageRender();
    org.apache.tapestry.ILocation var31 = var20.getLocation();
    var18.setComponent((org.apache.tapestry.IComponent)var20);
    org.apache.tapestry.IAsset var34 = var20.getAsset("(0) null\n   (0) null");
    var0.setContainer((org.apache.tapestry.IComponent)var20);
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var39 = new ch.bluepenguin.email.client.tapestry.Home();
    var39.beginPageRender();
    java.util.Collection var41 = var39.getBindingNames();
    var36.setPage((org.apache.tapestry.IPage)var39);
    org.apache.tapestry.listener.ListenerMap var43 = var39.getListeners();
    int var44 = var39.getBodyCount();
    var39.endPageRender();
    java.lang.String var46 = var39.getExtendedId();
    java.lang.String var47 = var39.getPageName();
    var20.setPage((org.apache.tapestry.IPage)var39);
    org.apache.tapestry.spec.IComponentSpecification var49 = var39.getSpecification();
    org.apache.tapestry.INamespace var50 = var39.getNamespace();
    org.apache.tapestry.IBinding var52 = var39.getBinding("(0) null\n   (0) null\n   (0) null\n   (0) ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test348");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    java.lang.Object var17 = var3.getContained();
    var3.setDepth(10);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var20 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var20.setText("Dummy EmailFacade Impl");
    var20.setText(",");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var25.setText("Dummy EmailFacade Impl");
    var25.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var31 = var30.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var33.setIndex(10);
    var33.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var38 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var40 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var41 = var40.getSuppressed();
    var38.setParameters((java.lang.Object[])var41);
    ch.bluepenguin.email.client.tapestry.Home var43 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var44 = var43.getBody();
    var38.setComponent((org.apache.tapestry.IComponent)var43);
    var30.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var33, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var38);
    var38.setStyleClass(",");
    var25.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var38);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var50 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var25.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var50);
    var20.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var53 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var53.setText("Dummy EmailFacade Impl");
    var53.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var58 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var59 = var58.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var61 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var61.setIndex(10);
    var61.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var66 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var68 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var69 = var68.getSuppressed();
    var66.setParameters((java.lang.Object[])var69);
    ch.bluepenguin.email.client.tapestry.Home var71 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var72 = var71.getBody();
    var66.setComponent((org.apache.tapestry.IComponent)var71);
    var58.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var61, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var66);
    var66.setStyleClass(",");
    var53.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var66);
    var53.setElement(",");
    var25.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var53);
    var53.setElement("");
    var53.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var53.setText("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var53.setText("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var3.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var53);
    var53.setElement("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0) null"+ "'", var31.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0) null"+ "'", var59.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test349");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    org.apache.tapestry.engine.IComponentMessagesSource var5 = var0.getComponentMessagesSource();
    boolean var6 = var0.isDirty();
    org.apache.tapestry.engine.ISpecificationSource var7 = var0.getSpecificationSource();
    org.apache.tapestry.engine.ISpecificationSource var8 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test350");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    ch.bluepenguin.email.client.MailMessage[] var8 = var6.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var9 = var6.getAllMessages();
    ch.bluepenguin.email.client.Folder var10 = var6.getCurrentFolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test351");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.email.client.tapestry.Home var23 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var24 = var23.getBody();
    int var25 = var23.getBodyCount();
    org.apache.tapestry.IAsset var27 = var23.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var28 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var30 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var31 = var30.getSuppressed();
    var28.setParameters((java.lang.Object[])var31);
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    var28.setComponent((org.apache.tapestry.IComponent)var33);
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    int var38 = var36.getBodyCount();
    var36.setPageName("");
    var33.addBody((org.apache.tapestry.IRender)var36);
    var23.setContainer((org.apache.tapestry.IComponent)var36);
    org.apache.tapestry.INamespace var43 = var36.getNamespace();
    java.lang.String var44 = var36.getIdPath();
    var17.setContained((java.lang.Object)var36);
    org.apache.tapestry.IRender[] var46 = var36.getBody();
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    var36.addComponent((org.apache.tapestry.IComponent)var47);
    org.apache.tapestry.IEngine var49 = var36.getEngine();
    ch.bluepenguin.email.client.tapestry.SpringEngine var50 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var51 = var50.getPageSource();
    org.apache.tapestry.engine.IPageSource var52 = var50.getPageSource();
    java.util.Collection var53 = var50.getActivePageNames();
    org.apache.tapestry.spec.IApplicationSpecification var54 = var50.getSpecification();
    java.lang.Object var55 = var50.getVisit();
    org.apache.tapestry.engine.ITemplateSource var56 = var50.getTemplateSource();
    boolean var57 = var50.getHasVisit();
    var36.attach((org.apache.tapestry.IEngine)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test352");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var6 = var5.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var8.setIndex(10);
    var8.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var13 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var15 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var16 = var15.getSuppressed();
    var13.setParameters((java.lang.Object[])var16);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    var13.setComponent((org.apache.tapestry.IComponent)var18);
    var5.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    var13.setStyleClass(",");
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    java.lang.String var31 = var29.getPageName();
    java.lang.String var32 = var29.toString();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    java.lang.String var35 = var33.getPageName();
    java.lang.String var36 = var33.toString();
    org.apache.tapestry.IEngine var37 = var33.getEngine();
    var29.setContainer((org.apache.tapestry.IComponent)var33);
    org.apache.tapestry.INamespace var39 = var33.getNamespace();
    org.apache.tapestry.event.ChangeObserver var40 = var33.getChangeObserver();
    var25.setComponent((org.apache.tapestry.IComponent)var33);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var42 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var44 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var45 = var44.getSuppressed();
    var42.setParameters((java.lang.Object[])var45);
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    var42.setComponent((org.apache.tapestry.IComponent)var47);
    org.apache.tapestry.INamespace var50 = var47.getNamespace();
    org.apache.tapestry.IPage var51 = var47.getPage();
    org.apache.tapestry.IComponent var52 = var47.getContainer();
    var25.setComponent((org.apache.tapestry.IComponent)var47);
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    int var56 = var54.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var57 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var58 = var57.getBody();
    int var59 = var57.getBodyCount();
    var54.addComponent((org.apache.tapestry.IComponent)var57);
    java.util.Collection var61 = var57.getBindingNames();
    var57.setId("(0) null");
    var57.beginPageRender();
    org.apache.tapestry.IComponent var65 = var57.getContainer();
    var25.setComponent((org.apache.tapestry.IComponent)var57);
    org.apache.tapestry.ILocation var67 = var57.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test353");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    boolean var2 = var0.isStateful();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test354");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    org.apache.tapestry.INamespace var8 = var5.getNamespace();
    org.apache.tapestry.IPage var9 = var5.getPage();
    org.apache.tapestry.IComponent var10 = var5.getContainer();
    java.util.Locale var11 = var5.getLocale();
    org.apache.tapestry.IPage var12 = var5.getPage();
    org.apache.tapestry.listener.ListenerMap var13 = var5.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test355");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.IAsset var11 = var0.getAsset("Dummy EmailFacade Impl");
    var0.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.endPageRender();
    java.lang.String var15 = var0.getIdPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test356");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var0.setText("Dummy EmailFacade Impl");
    var0.setText(",");
    var0.setText("hi!");
    var0.setStyleClass("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test357");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IEngine var3 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    var4.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.util.Map var19 = var15.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var20 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var20.forgetPage("");
    org.apache.tapestry.engine.IPageSource var23 = var20.getPageSource();
    org.apache.tapestry.engine.IPropertySource var24 = var20.getPropertySource();
    java.util.Collection var25 = var20.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var26 = var20.getComponentMessagesSource();
    var15.attach((org.apache.tapestry.IEngine)var20);
    var4.addBody((org.apache.tapestry.IRender)var15);
    var0.addComponent((org.apache.tapestry.IComponent)var4);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    var30.addComponent((org.apache.tapestry.IComponent)var33);
    java.lang.String var37 = var30.getIdPath();
    org.apache.tapestry.ILocation var38 = var30.getLocation();
    var4.setPage((org.apache.tapestry.IPage)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.tapestry.IComponent var41 = var30.getComponent("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]; to=; cc=; bcc=ch.bluepenguin.email.client.service.EmailFacadeException; sentDate=null; subject=null; text=null");
      fail("Expected exception of type org.apache.tapestry.ApplicationRuntimeException");
    } catch (org.apache.tapestry.ApplicationRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test358");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    int var27 = var0.getTechnicalID();
    ch.bluepenguin.email.client.MailMessage var28 = new ch.bluepenguin.email.client.MailMessage();
    var28.setBcc("Dummy EmailFacade Impl");
    var28.setSubject("hi!");
    var0.copyTo((org.springframework.mail.MailMessage)var28);
    var28.setTechnicalID(1);
    var28.setCc("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var28.setFrom("(0) null\n   (0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    var40.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setTechnicalID(100);
    java.lang.String var52 = var47.getReplyTo();
    java.lang.String[] var54 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var47.setCc(var54);
    var40.setBcc(var54);
    var28.setTo(var54);
    var28.setTo("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=(0) null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test359");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var18 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var19 = var18.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var18);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var21 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var22 = var20.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var0.addMenuItem(var22, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var27 = var26.getParent();
    java.lang.Object var28 = var26.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var29 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var26);
    java.lang.String var30 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var32.setParent((java.lang.Object)100L);
    int var35 = var32.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    boolean var37 = var36.checkConsistency();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var37);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var39 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var41 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var42 = var41.getSuppressed();
    var39.setParameters((java.lang.Object[])var42);
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var45 = var44.getBody();
    var39.setComponent((org.apache.tapestry.IComponent)var44);
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    int var49 = var47.getBodyCount();
    var47.setPageName("");
    var44.addBody((org.apache.tapestry.IRender)var47);
    java.util.Collection var53 = var47.getBindingNames();
    org.apache.tapestry.ILocation var54 = var47.getLocation();
    var38.setContained((java.lang.Object)var47);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var56 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var56.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var59 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var59.setText("Dummy EmailFacade Impl");
    var59.setText(",");
    var56.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var59);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var59);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var66 = var0.getRootList();
    int var67 = var66.getChildrenSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0) null\n   (0) null\n   (0) null"+ "'", var30.equals("(0) null\n   (0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test360");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    org.apache.tapestry.util.io.DataSqueezer var6 = var0.createDataSqueezer();
    org.apache.tapestry.util.io.DataSqueezer var7 = var0.createDataSqueezer();
    java.lang.String var8 = var0.toString();
    org.apache.tapestry.spec.IApplicationSpecification var9 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test361");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    java.lang.String var6 = var3.getReserve();
    var3.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var9 = var3.getFirstname();
    var3.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    var3.setFirstname("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]");
    var3.setLastname("ch.bluepenguin.email.client.service.EmailFacadeException");
    java.lang.String var16 = var3.getFirstname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]"+ "'", var16.equals("ch.bluepenguin.email.client.tapestry.Home@57d2df61[(0) null\n   (0) null\n   (0) null]"));

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test362");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.children();
    boolean var12 = var8.getAllowsChildren();
    int var13 = var8.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var8);
    var0.setName("");
    ch.bluepenguin.email.client.Account var17 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var18 = var17.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var17.getUniqueID();
    ch.bluepenguin.email.client.Person var20 = new ch.bluepenguin.email.client.Person();
    java.lang.String var21 = var20.getFirstname();
    var17.setPerson(var20);
    ch.bluepenguin.email.client.Person var23 = var17.getPerson();
    var0.setAccount(var17);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var26 = var25.isLeaf();
    ch.bluepenguin.email.client.Folder var27 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var27);
    boolean var30 = var28.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var31 = var28.getParent();
    ch.bluepenguin.email.client.Folder var32 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var33 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var32);
    boolean var35 = var33.equals((java.lang.Object)(short)(-1));
    java.util.Collection var36 = var33.getChildren();
    boolean var37 = var28.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var33);
    ch.bluepenguin.email.client.Folder var38 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var39 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var38);
    boolean var41 = var39.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var42 = var39.getFolder();
    int var43 = var39.getChildCount();
    var33.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var39);
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    boolean var48 = var46.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var49 = var46.getParent();
    ch.bluepenguin.email.client.Folder var50 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var51 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var50);
    boolean var53 = var51.equals((java.lang.Object)(short)(-1));
    java.util.Collection var54 = var51.getChildren();
    boolean var55 = var46.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var51);
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    boolean var59 = var57.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var60 = var57.getFolder();
    int var61 = var57.getChildCount();
    var51.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var57);
    boolean var63 = var39.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var51);
    java.util.Collection var64 = var51.getChildren();
    ch.bluepenguin.email.client.MailMessage var65 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var66 = var65.toString();
    var65.setFrom("hi!");
    boolean var69 = var51.equals((java.lang.Object)"hi!");
    var25.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var51);
    boolean var71 = var25.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var66.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test363");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    java.lang.Object var22 = var13.getGlobal();
    org.apache.tapestry.engine.IComponentMessagesSource var23 = var13.getComponentMessagesSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test364");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    var0.setPageName("");
    org.apache.tapestry.IBinding var6 = var0.getBinding("hi!");
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    var7.beginPageRender();
    java.util.Collection var9 = var7.getBindingNames();
    org.apache.tapestry.IAsset var11 = var7.getAsset(",");
    java.lang.String var12 = var7.toString();
    java.lang.String var13 = var7.toString();
    java.lang.String var14 = var7.getIdPath();
    java.util.Locale var15 = var7.getLocale();
    org.apache.tapestry.IRequestCycle var16 = var7.getRequestCycle();
    org.apache.tapestry.listener.ListenerMap var17 = var7.getListeners();
    var7.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var19 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var20 = var19.getPageSource();
    org.apache.tapestry.listener.ListenerMap var21 = var19.getListeners();
    java.lang.String var22 = var19.toString();
    java.lang.String var23 = var19.toString();
    var7.attach((org.apache.tapestry.IEngine)var19);
    var0.setContainer((org.apache.tapestry.IComponent)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test365");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var4 = var0.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var5 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var5.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var8 = var5.getMyLocale();
    var0.setLocale(var8);
    org.apache.tapestry.asset.ResourceChecksumSource var10 = var0.getResourceChecksumSource();
    org.apache.tapestry.engine.IPageSource var11 = var0.getPageSource();
    org.apache.tapestry.util.io.DataSqueezer var12 = var0.createDataSqueezer();
    org.apache.tapestry.IResourceResolver var13 = var0.getResourceResolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test366");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.listener.ListenerMap var2 = var0.getListeners();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var4 = var0.getComponentClassEnhancer();
    org.apache.tapestry.engine.IComponentMessagesSource var5 = var0.getComponentMessagesSource();
    org.apache.tapestry.IResourceResolver var6 = var0.getResourceResolver();
    org.apache.tapestry.util.pool.Pool var7 = var0.getPool();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var8 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var9 = var8.getSeparator();
    java.util.Locale var10 = var8.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var11 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var11.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var15 = new java.lang.String[] { "(0) null"};
    java.lang.String var16 = var11.returnStringList(var15);
    ch.bluepenguin.email.client.tapestry.SpringEngine var17 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var17.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var20 = var17.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var21 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var21.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var24 = var21.getMyLocale();
    var17.setLocale(var24);
    var11.setMyLocale(var24);
    var8.setMyLocale(var24);
    java.util.Locale var28 = var8.getMyLocale();
    var0.setLocale(var28);
    org.apache.tapestry.spec.IApplicationSpecification var30 = var0.getSpecification();
    org.apache.tapestry.asset.ResourceChecksumSource var31 = var0.getResourceChecksumSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ","+ "'", var9.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null"+ "'", var16.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test367");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.getIdPath();
    java.util.Locale var8 = var0.getLocale();
    org.apache.tapestry.IRequestCycle var9 = var0.getRequestCycle();
    org.apache.tapestry.listener.ListenerMap var10 = var0.getListeners();
    org.apache.tapestry.IAsset var12 = var0.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.beginPageRender();
    org.apache.tapestry.event.ChangeObserver var14 = var0.getChangeObserver();
    org.apache.tapestry.event.ChangeObserver var15 = var0.getChangeObserver();
    org.apache.tapestry.ILocation var16 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test368");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    boolean var31 = var25.getAllowsChildren();
    boolean var32 = var25.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test369");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var15 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var15.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var18.setText("Dummy EmailFacade Impl");
    var18.setText(",");
    var15.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var15);
    var15.setText("Default EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var28 = var27.displayMenuStructure();
    java.util.Iterator var29 = var27.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var33 = var32.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    var30.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = var27.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var32.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    var37.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var15.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    boolean var42 = var0.equals((java.lang.Object)var15);
    var0.setBcc("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var45 = new ch.bluepenguin.email.client.MailMessage();
    var45.setBcc("Dummy EmailFacade Impl");
    var45.setTechnicalID(100);
    var45.setText("hi!");
    var45.setFrom("(0) null\n   (0) null");
    var45.setTechnicalID((-1));
    var45.setBcc("Default EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var58 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var59 = var58.getUniqueID();
    java.lang.String var60 = var58.getSubject();
    var45.copyTo((org.springframework.mail.MailMessage)var58);
    ch.bluepenguin.email.client.AbstractUniqueID var62 = var58.getUniqueID();
    var58.setBcc("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var65 = new ch.bluepenguin.email.client.MailMessage();
    var65.setBcc("Dummy EmailFacade Impl");
    var65.setReplyTo("Dummy EmailFacade Impl");
    var65.setFrom("(0) null");
    var65.setReplyTo("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String[] var74 = var65.getBcc();
    var58.setTo(var74);
    var0.setCc(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0) null"+ "'", var28.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test370");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var5 = new ch.bluepenguin.email.client.MailMessage();
    var5.setBcc("Dummy EmailFacade Impl");
    java.lang.String var8 = var5.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var9 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var9.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var12 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var13 = var9.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    var14.setParentFolderId((java.lang.Integer)1);
    var14.setFullName("hi!");
    var13.setParent(var14);
    var5.setFolder(var14);
    var0.setFolder(var14);
    var14.setFullName("hi!");
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var27 = var26.isLeaf();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    boolean var31 = var29.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var32 = var29.getParent();
    var26.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var29);
    ch.bluepenguin.email.client.Folder var34 = var26.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var35 = var34.getUniqueID();
    var14.setParent(var34);
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var40 = var38.equals((java.lang.Object)(short)(-1));
    java.util.Collection var41 = var38.children();
    ch.bluepenguin.email.client.Folder var42 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var43 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var42);
    var42.setFullName("hi!");
    var42.setFullName("Dummy EmailFacade Impl");
    var38.setFolder(var42);
    ch.bluepenguin.email.client.Folder var49 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var50 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var49);
    boolean var52 = var50.equals((java.lang.Object)(short)(-1));
    java.util.Collection var53 = var50.children();
    ch.bluepenguin.email.client.Folder var54 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var55 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var54);
    var54.setFullName("hi!");
    var54.setFullName("Dummy EmailFacade Impl");
    var50.setFolder(var54);
    ch.bluepenguin.email.client.Account var61 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var62 = var61.getUniqueID();
    var54.setAccount(var61);
    ch.bluepenguin.email.client.Person var64 = var61.getPerson();
    var42.setAccount(var61);
    ch.bluepenguin.email.client.AbstractUniqueID var66 = var61.getUniqueID();
    ch.bluepenguin.email.client.AbstractUniqueID var67 = var61.getUniqueID();
    ch.bluepenguin.email.client.Account var68 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var69 = var68.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var70 = var68.getUniqueID();
    ch.bluepenguin.email.client.Person var71 = new ch.bluepenguin.email.client.Person();
    java.lang.String var72 = var71.getFirstname();
    var68.setPerson(var71);
    ch.bluepenguin.email.client.Person var74 = var68.getPerson();
    ch.bluepenguin.email.client.Person var75 = var68.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var76 = var75.getUniqueID();
    var61.setPerson(var75);
    var14.setAccount(var61);
    ch.bluepenguin.email.client.AbstractUniqueID var79 = var61.getUniqueID();
    ch.bluepenguin.email.client.Person var80 = new ch.bluepenguin.email.client.Person();
    java.lang.String var81 = var80.getFirstname();
    var80.setLastname("(0) null");
    java.lang.String var84 = var80.getReserve();
    var80.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var87 = var80.getLastname();
    var61.setPerson(var80);
    var80.setLastname("SimpleMailMessage: from=(0) null; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(0) null"+ "'", var87.equals("(0) null"));

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test371");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Account var6 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var7 = var6.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var6.getUniqueID();
    ch.bluepenguin.email.client.Person var9 = new ch.bluepenguin.email.client.Person();
    java.lang.String var10 = var9.getFirstname();
    var6.setPerson(var9);
    ch.bluepenguin.email.client.Person var12 = var6.getPerson();
    var12.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var12.setNickname("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setPerson(var12);
    ch.bluepenguin.email.client.Account var18 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var19 = var18.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var20 = var18.getUniqueID();
    ch.bluepenguin.email.client.Person var21 = new ch.bluepenguin.email.client.Person();
    java.lang.String var22 = var21.getFirstname();
    var18.setPerson(var21);
    java.lang.String var24 = var21.getReserve();
    var21.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var27 = var21.getFirstname();
    var21.setNickname("Current Folder");
    var21.setLastname("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var32 = var21.getNickname();
    java.lang.String var33 = var21.getReserve();
    var21.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    var21.setFirstname("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    var0.setPerson(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Dummy EmailFacade Impl"+ "'", var27.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Current Folder"+ "'", var32.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test372");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    boolean var14 = var12.equals((java.lang.Object)(short)(-1));
    java.util.Collection var15 = var12.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    int var18 = var16.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var16.addComponent((org.apache.tapestry.IComponent)var19);
    java.util.Map var23 = var19.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var24 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var24.forgetPage("");
    org.apache.tapestry.engine.IPageSource var27 = var24.getPageSource();
    org.apache.tapestry.engine.IPropertySource var28 = var24.getPropertySource();
    java.util.Collection var29 = var24.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var30 = var24.getComponentMessagesSource();
    var19.attach((org.apache.tapestry.IEngine)var24);
    boolean var32 = var12.equals((java.lang.Object)var24);
    org.apache.tapestry.engine.IComponentClassEnhancer var33 = var24.getComponentClassEnhancer();
    var5.attach((org.apache.tapestry.IEngine)var24);
    boolean var35 = var24.isStateful();
    var24.forgetPage("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=ch.bluepenguin.email.client.service.EmailFacadeException");
    boolean var38 = var24.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test373");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setDepth((-1));
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var4 = var1.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test374");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.setId("Dummy EmailFacade Impl");
    int var10 = var5.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var11 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var13 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var14 = var13.getSuppressed();
    var11.setParameters((java.lang.Object[])var14);
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    var11.setComponent((org.apache.tapestry.IComponent)var16);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    int var21 = var19.getBodyCount();
    var19.setPageName("");
    var16.addBody((org.apache.tapestry.IRender)var19);
    org.apache.tapestry.IEngine var25 = var19.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    int var28 = var26.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    int var31 = var29.getBodyCount();
    var26.addComponent((org.apache.tapestry.IComponent)var29);
    var19.addBody((org.apache.tapestry.IRender)var29);
    org.apache.tapestry.IComponent var34 = var29.getContainer();
    org.apache.tapestry.event.ChangeObserver var35 = var29.getChangeObserver();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var36 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var36.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var39 = var36.getMyLocale();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var40 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var41 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    java.lang.String var42 = var41.getSeparator();
    java.util.Locale var43 = var41.getMyLocale();
    var40.setMyLocale(var43);
    var36.setMyLocale(var43);
    var29.setLocale(var43);
    var5.addBody((org.apache.tapestry.IRender)var29);
    int var48 = var29.getBodyCount();
    ch.bluepenguin.email.client.tapestry.SpringEngine var49 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var49.forgetPage("");
    org.apache.tapestry.engine.IPageSource var52 = var49.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var53 = var49.getComponentMessagesSource();
    var29.attach((org.apache.tapestry.IEngine)var49);
    java.util.Map var55 = var29.getAssets();
    org.apache.tapestry.ILocation var56 = var29.getLocation();
    java.lang.Object var57 = var29.getVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ","+ "'", var42.equals(","));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test375");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var5);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    var14.setFullName("hi!");
    java.lang.String var18 = var14.getName();
    java.lang.Integer var19 = var14.getParentFolderId();
    ch.bluepenguin.email.client.Account var20 = var14.getAccount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var21);
    boolean var23 = var21.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test376");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var5 = var4.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.String var7 = var6.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var7);
    java.lang.Object var9 = var8.getContained();
    var8.setName("(0) null\n   (0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"(0) null\n   (0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var15 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var16 = var15.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    var13.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var15);
    java.lang.Object var19 = var15.getParent();
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    var21.setFolder(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    var24.setFullName("hi!");
    var22.setParent(var24);
    var15.setContained((java.lang.Object)var24);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var30 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var15.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    java.lang.String var32 = var30.getHyperlink();
    var12.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var30);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var34 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var34.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var37 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var37.setText("Dummy EmailFacade Impl");
    var37.setText(",");
    var34.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    var37.setElement("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var45 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var46 = var45.displayMenuStructure();
    java.util.Iterator var47 = var45.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var48 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var50 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var51 = var50.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var52 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    var48.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var54 = var45.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var55 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var50.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var55);
    var37.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var55);
    var37.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var37);
    ch.bluepenguin.email.client.Folder var61 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var62 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var61);
    boolean var64 = var62.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var65 = var62.getParent();
    ch.bluepenguin.email.client.Folder var66 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var67 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var66);
    boolean var69 = var67.equals((java.lang.Object)(short)(-1));
    java.util.Collection var70 = var67.getChildren();
    boolean var71 = var62.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var67);
    ch.bluepenguin.email.client.Folder var72 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var73 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var72);
    boolean var74 = var73.isLeaf();
    ch.bluepenguin.email.client.Folder var75 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var76 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var75);
    boolean var78 = var76.equals((java.lang.Object)(short)(-1));
    java.util.Collection var79 = var76.getChildren();
    ch.bluepenguin.email.client.Folder var80 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var81 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var80);
    boolean var82 = var81.isLeaf();
    ch.bluepenguin.email.client.Folder var83 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var84 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var83);
    boolean var86 = var84.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var87 = var84.getParent();
    var81.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var84);
    boolean var89 = var76.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var81);
    boolean var90 = var73.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var81);
    boolean var91 = var62.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var73);
    java.util.Collection var92 = var73.getChildren();
    var12.setContained((java.lang.Object)var92);
    java.lang.String var94 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0) null"+ "'", var9.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0) null"+ "'", var46.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test377");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    java.lang.String var10 = var6.getName();
    ch.bluepenguin.email.client.cache.MailCache var11 = var6.getCache();
    var6.setDirty(false);
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var14 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var15 = var14.getReader();
    ch.bluepenguin.email.client.cache.MailCache var16 = var14.getCache();
    var14.setDirty(true);
    boolean var19 = var14.isDirty();
    java.util.logging.Logger var20 = var14.getLogger();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var21 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var22 = var21.getSender();
    boolean var23 = var21.isDirty();
    org.springframework.mail.MailSender var24 = var21.getSender();
    ch.bluepenguin.email.client.cache.MailCache var26 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var27 = var26.getCache();
    var21.setCache(var26);
    var14.setCache(var26);
    java.util.logging.Logger var30 = var14.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var31 = var14.getCache();
    var6.setCache(var31);
    net.sf.ehcache.Cache var33 = var31.getCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Default EmailFacade Impl"+ "'", var10.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test378");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    java.lang.String var16 = var0.displayMenuStructure();
    ch.bluepenguin.email.client.tapestry.SpringEngine var17 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var18 = var17.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var19 = var17.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var22 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var23 = var22.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var22);
    var20.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var22);
    var17.setVisit((java.lang.Object)var20);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var29 = var28.getParent();
    java.lang.Object var30 = var28.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var31 = var20.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    java.lang.String var32 = var20.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var33 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var34 = var33.displayMenuStructure();
    java.util.Iterator var35 = var33.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var36 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var39 = var38.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var40 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38);
    var36.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var42 = var33.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38);
    java.lang.String var43 = var38.getName();
    var38.setIndex(1);
    boolean var46 = var38.isLeaf();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var47 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var47.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var50 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var50.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var53 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var53.setText("Dummy EmailFacade Impl");
    var53.setText(",");
    var50.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var53);
    var47.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var50);
    var50.setText("hi!");
    var20.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var50);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var63 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var38);
    java.util.Iterator var64 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var65 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var66 = var65.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var68 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var68.setIndex(10);
    var68.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var73 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var75 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var76 = var75.getSuppressed();
    var73.setParameters((java.lang.Object[])var76);
    ch.bluepenguin.email.client.tapestry.Home var78 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var79 = var78.getBody();
    var73.setComponent((org.apache.tapestry.IComponent)var78);
    var65.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var68, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var73);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var83 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var84 = var83.getParent();
    var83.setLeaf(false);
    var68.setContained((java.lang.Object)var83);
    java.lang.Object var88 = var83.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var89 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var83);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var83);
    boolean var91 = var83.isLeaf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0) null\n   (0) null"+ "'", var16.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + 10.0f+ "'", var30.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0) null\n   (0) null"+ "'", var32.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0) null"+ "'", var34.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0) null"+ "'", var66.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + 10.0f+ "'", var88.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test379");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    org.apache.tapestry.engine.IComponentClassEnhancer var5 = var0.getComponentClassEnhancer();
    java.util.Collection var6 = var0.getActivePageNames();
    boolean var7 = var0.isResetServiceEnabled();
    ch.bluepenguin.email.client.Account var8 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var9 = var8.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var10 = var8.getUniqueID();
    ch.bluepenguin.email.client.Person var11 = new ch.bluepenguin.email.client.Person();
    java.lang.String var12 = var11.getFirstname();
    var8.setPerson(var11);
    ch.bluepenguin.email.client.Person var14 = var8.getPerson();
    var14.setFirstname("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var17 = var14.getLastname();
    java.lang.String var18 = var14.getLastname();
    var0.setVisit((java.lang.Object)var14);
    var14.setLastname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test380");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.IEngine var4 = var0.getEngine();
    int var5 = var0.getBodyCount();
    java.util.Map var6 = var0.getComponents();
    org.apache.tapestry.IBinding var8 = var0.getBinding("(0) null\n   (0) null\n   (0) SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    org.apache.tapestry.spec.IComponentSpecification var9 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test381");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    org.apache.tapestry.asset.ResourceChecksumSource var6 = var0.getResourceChecksumSource();
    java.util.Collection var7 = var0.getActivePageNames();
    java.lang.Object var8 = var0.getGlobal();
    org.apache.tapestry.engine.ITemplateSource var9 = var0.getTemplateSource();
    org.apache.tapestry.asset.ResourceChecksumSource var10 = var0.getResourceChecksumSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test382");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var2 = var0.getRootList();
    var0.checkMenuModelHealth();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var5 = var4.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var7.setIndex(10);
    var7.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var14 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var15 = var14.getSuppressed();
    var12.setParameters((java.lang.Object[])var15);
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    var12.setComponent((org.apache.tapestry.IComponent)var17);
    var4.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var12);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var7);
    var0.checkMenuModelHealth();
    var0.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test383");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    org.apache.tapestry.contrib.tree.model.ITreeNode var5 = var1.getParent();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    var6.setParentFolderId((java.lang.Integer)1);
    var6.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var12 = var6.getAccount();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var16 = var14.equals((java.lang.Object)(short)(-1));
    java.util.Collection var17 = var14.children();
    boolean var18 = var14.getAllowsChildren();
    int var19 = var14.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var14);
    ch.bluepenguin.email.client.Folder var21 = var6.getParent();
    var6.setFullName("hi!");
    var1.setFolder(var6);
    java.util.Collection var25 = var1.getChildren();
    java.util.Collection var26 = var1.children();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test384");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    var12.setFolder(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    var15.setFullName("hi!");
    var13.setParent(var15);
    var15.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    var23.setFolder(var24);
    org.apache.tapestry.contrib.tree.model.ITreeNode var26 = var23.getParent();
    boolean var27 = var23.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    ch.bluepenguin.email.client.Account var29 = var15.getAccount();
    var6.setFolder(var15);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var33 = var32.isLeaf();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var37 = var35.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var38 = var35.getParent();
    var32.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var35);
    ch.bluepenguin.email.client.Folder var40 = var32.getFolder();
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    boolean var44 = var42.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var45 = var42.getFolder();
    ch.bluepenguin.email.client.Folder var46 = var42.getFolder();
    var32.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var42);
    var6.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var42);
    ch.bluepenguin.email.client.Folder var49 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var50 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var49);
    boolean var51 = var50.isLeaf();
    ch.bluepenguin.email.client.Folder var52 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var53 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var52);
    boolean var55 = var53.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var56 = var53.getParent();
    var50.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var53);
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    boolean var61 = var59.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var62 = var59.getFolder();
    var50.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var59);
    boolean var64 = var50.isLeaf();
    boolean var65 = var50.getAllowsChildren();
    java.util.Collection var66 = var50.children();
    ch.bluepenguin.email.client.Folder var67 = var50.getFolder();
    var6.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var50);
    ch.bluepenguin.email.client.Folder var69 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var70 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var69);
    var69.setParentFolderId((java.lang.Integer)1);
    var69.setFullName("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var75 = var69.getUniqueID();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var76 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var76.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var79 = var76.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var80 = var76.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var81 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var82 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var81);
    var81.setParentFolderId((java.lang.Integer)1);
    var81.setFullName("hi!");
    var80.setParent(var81);
    java.lang.Integer var88 = var80.getParentFolderId();
    ch.bluepenguin.email.client.Folder var89 = var80.getParent();
    var69.setParent(var80);
    var80.setName("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    java.lang.Integer var93 = var80.getParentFolderId();
    var80.setFullName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.AbstractUniqueID var96 = var80.getUniqueID();
    var6.setFolder(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test385");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    java.util.Locale var8 = var3.getLocale();
    java.lang.String var9 = var3.getIdPath();
    var3.setPageName("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var12 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var12.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var16 = new java.lang.String[] { "(0) null"};
    java.lang.String var17 = var12.returnStringList(var16);
    java.util.Locale var18 = var12.getMyLocale();
    java.util.Locale var19 = var12.getMyLocale();
    var12.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var22 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var22.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.MailMessage var25 = new ch.bluepenguin.email.client.MailMessage();
    var25.setBcc("Dummy EmailFacade Impl");
    var25.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var30 = var25.getSentDate();
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    var31.setTechnicalID(100);
    java.lang.String var36 = var31.getReplyTo();
    java.lang.String[] var38 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var31.setCc(var38);
    java.lang.String[] var41 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var31.setBcc(var41);
    var25.setCc(var41);
    java.lang.String var44 = var22.returnStringList(var41);
    java.util.Locale var45 = var22.getMyLocale();
    java.util.Locale var46 = var22.getMyLocale();
    java.util.Locale var47 = var22.getMyLocale();
    var12.setMyLocale(var47);
    var3.setLocale(var47);
    org.apache.tapestry.event.ChangeObserver var50 = var3.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0) null"+ "'", var17.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Dummy EmailFacade Impl"+ "'", var44.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test386");


    ch.bluepenguin.email.client.tapestry.Visit var0 = new ch.bluepenguin.email.client.tapestry.Visit();
    var0.setUserID("");
    var0.setUserID("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var0.setUserID("");
    java.lang.String var7 = var0.getUserID();
    java.lang.String var8 = var0.getUserID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test387");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.IAsset var7 = var0.getAsset(",");
    org.apache.tapestry.IRender[] var8 = var0.getBody();
    java.lang.String var9 = var0.getExtendedId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test388");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    org.apache.tapestry.engine.IPropertySource var22 = var13.getPropertySource();
    boolean var23 = var13.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test389");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.email.client.cache.MailCache var10 = var6.getCache();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var11 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var13 = new ch.bluepenguin.email.client.cache.MailCache("");
    var11.setCache(var13);
    var6.setCache(var13);
    boolean var16 = var6.isDirty();
    java.util.logging.Logger var17 = var6.getLogger();
    org.springframework.mail.javamail.JavaMailReader var18 = var6.getReader();
    boolean var19 = var6.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test390");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var1.setContained((java.lang.Object)var6);
    var6.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var11 = var6.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=hi!");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var12 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var12.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var15 = var12.getCurrentFolder();
    var12.setCurrentFolder("");
    java.lang.String var18 = var12.getName();
    ch.bluepenguin.email.client.Folder var19 = var12.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var21 = var12.getMessagesFromFolder("hi!");
    ch.bluepenguin.email.client.MailMessage[] var22 = var12.getAllMessages();
    ch.bluepenguin.email.client.Folder var23 = var12.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var24 = var12.getAllMessages();
    ch.bluepenguin.email.client.Folder var25 = var12.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var27 = var12.getMessagesFromFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.moveMessages(var27, "(1) null", "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Dummy EmailFacade Impl"+ "'", var18.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test391");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var11 = var0.toString();
    java.lang.String[] var12 = var0.getTo();
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    var13.setBcc("Dummy EmailFacade Impl");
    java.lang.String var16 = var13.getReplyTo();
    java.lang.String var17 = var13.getText();
    var13.setTechnicalID(0);
    java.util.Date var20 = var13.getSentDate();
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    var13.setTo("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var24 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var26 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var27 = var26.getSuppressed();
    var24.setParameters((java.lang.Object[])var27);
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    var24.setComponent((org.apache.tapestry.IComponent)var29);
    var29.setId("Dummy EmailFacade Impl");
    int var34 = var29.getBodyCount();
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var36 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var35);
    boolean var38 = var36.equals((java.lang.Object)(short)(-1));
    java.util.Collection var39 = var36.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var40 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var41 = var40.getBody();
    int var42 = var40.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var43 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var44 = var43.getBody();
    int var45 = var43.getBodyCount();
    var40.addComponent((org.apache.tapestry.IComponent)var43);
    java.util.Map var47 = var43.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var48 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var48.forgetPage("");
    org.apache.tapestry.engine.IPageSource var51 = var48.getPageSource();
    org.apache.tapestry.engine.IPropertySource var52 = var48.getPropertySource();
    java.util.Collection var53 = var48.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var54 = var48.getComponentMessagesSource();
    var43.attach((org.apache.tapestry.IEngine)var48);
    boolean var56 = var36.equals((java.lang.Object)var48);
    org.apache.tapestry.engine.IComponentClassEnhancer var57 = var48.getComponentClassEnhancer();
    var29.attach((org.apache.tapestry.IEngine)var48);
    var29.beginPageRender();
    java.lang.String var60 = var29.toString();
    ch.bluepenguin.email.client.tapestry.Home var61 = new ch.bluepenguin.email.client.tapestry.Home();
    var61.beginPageRender();
    java.util.Collection var63 = var61.getBindingNames();
    org.apache.tapestry.IAsset var65 = var61.getAsset(",");
    java.lang.String var66 = var61.toString();
    org.apache.tapestry.IAsset var68 = var61.getAsset(",");
    ch.bluepenguin.email.client.tapestry.SpringEngine var69 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var69.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var72 = var69.getPropertySource();
    org.apache.tapestry.asset.ResourceChecksumSource var73 = var69.getResourceChecksumSource();
    var61.attach((org.apache.tapestry.IEngine)var69);
    var29.addBody((org.apache.tapestry.IRender)var61);
    var29.endPageRender();
    boolean var77 = var13.equals((java.lang.Object)var29);
    org.apache.tapestry.IAsset var79 = var29.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var11.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test392");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(true);
    boolean var5 = var0.isDirty();
    java.util.logging.Logger var6 = var0.getLogger();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var7 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.MailSender var8 = var7.getSender();
    boolean var9 = var7.isDirty();
    org.springframework.mail.MailSender var10 = var7.getSender();
    ch.bluepenguin.email.client.cache.MailCache var12 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var13 = var12.getCache();
    var7.setCache(var12);
    var0.setCache(var12);
    java.util.logging.Logger var16 = var0.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var17 = var0.getCache();
    org.springframework.mail.javamail.JavaMailReader var18 = var0.getReader();
    org.springframework.mail.MailSender var19 = var0.getSender();
    org.springframework.mail.MailSender var20 = var0.getSender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test393");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    var14.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var21 = new ch.bluepenguin.email.client.MailMessage();
    var21.setBcc("Dummy EmailFacade Impl");
    var21.setTechnicalID(100);
    java.lang.String var26 = var21.getReplyTo();
    java.lang.String[] var28 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var21.setCc(var28);
    var14.setBcc(var28);
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    java.lang.String var34 = var31.getReplyTo();
    var31.setBcc(",");
    var14.copyTo((org.springframework.mail.MailMessage)var31);
    java.lang.String var38 = var14.getReplyTo();
    java.lang.String[] var39 = var14.getBcc();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var49 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var49.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var52 = new ch.bluepenguin.email.client.MailMessage();
    var52.setBcc("Dummy EmailFacade Impl");
    var52.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var57 = var52.getSentDate();
    ch.bluepenguin.email.client.MailMessage var58 = new ch.bluepenguin.email.client.MailMessage();
    var58.setBcc("Dummy EmailFacade Impl");
    var58.setTechnicalID(100);
    java.lang.String var63 = var58.getReplyTo();
    java.lang.String[] var65 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var58.setCc(var65);
    java.lang.String[] var68 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var58.setBcc(var68);
    var52.setCc(var68);
    java.lang.String var71 = var49.returnStringList(var68);
    var40.setCc(var68);
    var14.setCc(var68);
    var0.copyTo((org.springframework.mail.MailMessage)var14);
    java.lang.String var75 = var14.getReplyTo();
    java.util.Date var76 = var14.getSentDate();
    ch.bluepenguin.email.client.MailMessage var77 = new ch.bluepenguin.email.client.MailMessage();
    var77.setBcc("Dummy EmailFacade Impl");
    var77.setTechnicalID(100);
    java.lang.String var82 = var77.getReplyTo();
    java.lang.String[] var84 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var77.setCc(var84);
    var77.setBcc("Dummy EmailFacade Impl");
    var77.setSubject("hi!");
    java.lang.String var90 = var77.toString();
    java.lang.String var91 = var77.getText();
    java.lang.String[] var92 = var77.getCc();
    var14.setCc(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Dummy EmailFacade Impl"+ "'", var71.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var90.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test394");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var2 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var2.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var6 = new java.lang.String[] { "(0) null"};
    java.lang.String var7 = var2.returnStringList(var6);
    java.util.Locale var8 = var2.getMyLocale();
    java.util.Locale var9 = var2.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var10 = new ch.bluepenguin.email.client.MailMessage();
    var10.setBcc("Dummy EmailFacade Impl");
    var10.setTechnicalID(100);
    java.lang.String var15 = var10.getReplyTo();
    java.lang.String[] var17 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var10.setCc(var17);
    java.lang.String[] var20 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var10.setBcc(var20);
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    var10.setBcc(var32);
    java.lang.String[] var35 = var10.getBcc();
    java.lang.String var36 = var2.returnStringList(var35);
    var0.setBcc(var35);
    java.lang.String var38 = var0.getFrom();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var39 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var39.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var43 = new java.lang.String[] { "(0) null"};
    java.lang.String var44 = var39.returnStringList(var43);
    java.util.Locale var45 = var39.getMyLocale();
    java.util.Locale var46 = var39.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var47 = new ch.bluepenguin.email.client.MailMessage();
    var47.setBcc("Dummy EmailFacade Impl");
    var47.setTechnicalID(100);
    java.lang.String var52 = var47.getReplyTo();
    java.lang.String[] var54 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var47.setCc(var54);
    java.lang.String[] var57 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var47.setBcc(var57);
    ch.bluepenguin.email.client.MailMessage var59 = new ch.bluepenguin.email.client.MailMessage();
    var59.setBcc("Dummy EmailFacade Impl");
    var59.setTechnicalID(100);
    java.lang.String var64 = var59.getReplyTo();
    java.lang.String[] var66 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var59.setCc(var66);
    java.lang.String[] var69 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var59.setBcc(var69);
    var47.setBcc(var69);
    java.lang.String[] var72 = var47.getBcc();
    java.lang.String var73 = var39.returnStringList(var72);
    var0.setBcc(var72);
    var0.setTechnicalID(0);
    ch.bluepenguin.email.client.AbstractUniqueID var77 = var0.getUniqueID();
    var0.setSubject("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Dummy EmailFacade Impl"+ "'", var36.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0) null"+ "'", var44.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "Dummy EmailFacade Impl"+ "'", var73.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test395");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    var2.setParentFolderId((java.lang.Integer)0);
    var2.setParentFolderId((java.lang.Integer)10);
    var2.setFullName("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test396");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.children();
    boolean var12 = var8.getAllowsChildren();
    int var13 = var8.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var8);
    ch.bluepenguin.email.client.Folder var15 = var14.getFolder();
    ch.bluepenguin.email.client.tapestry.SpringEngine var16 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var17 = var16.getVisit();
    java.util.Locale var18 = var16.getLocale();
    org.apache.tapestry.IResourceResolver var19 = var16.getResourceResolver();
    org.apache.tapestry.util.io.DataSqueezer var20 = var16.createDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var16);
    java.lang.String var22 = var16.toString();
    boolean var23 = var14.equals((java.lang.Object)var16);
    java.util.Collection var24 = var14.children();
    org.apache.tapestry.contrib.tree.model.ITreeNode var25 = var14.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test397");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.listener.ListenerMap var2 = var0.getListeners();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var4 = var0.getComponentClassEnhancer();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var0.getSpecification();
    java.lang.String var6 = var0.getContextPath();
    boolean var7 = var0.isStateful();
    org.apache.tapestry.engine.IComponentClassEnhancer var8 = var0.getComponentClassEnhancer();
    org.apache.tapestry.engine.IComponentClassEnhancer var9 = var0.getComponentClassEnhancer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test398");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    var7.setText("hi!");
    var5.setContained((java.lang.Object)var7);
    var0.setVisit((java.lang.Object)var7);
    ch.bluepenguin.email.client.service.EmailFacadeException var17 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var17);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var19 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var19.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var23 = new java.lang.String[] { "(0) null"};
    java.lang.String var24 = var19.returnStringList(var23);
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var25.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var28 = var25.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var29 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var29.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var32 = var29.getMyLocale();
    var25.setLocale(var32);
    var19.setMyLocale(var32);
    var0.setLocale(var32);
    org.apache.tapestry.engine.IPageSource var36 = var0.getPageSource();
    java.util.Collection var37 = var0.getActivePageNames();
    org.apache.tapestry.engine.ISpecificationSource var38 = var0.getSpecificationSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0) null"+ "'", var24.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test399");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var11.setIndex(10);
    java.lang.String var14 = var11.getName();
    boolean var15 = var0.equals((java.lang.Object)var11);
    var11.setIndex(100);
    ch.bluepenguin.email.client.Person var18 = new ch.bluepenguin.email.client.Person();
    java.lang.String var19 = var18.getFirstname();
    var18.setLastname("(0) null");
    var18.setLastname("");
    java.lang.String var24 = var18.getReserve();
    var18.setNickname("");
    var11.setContained((java.lang.Object)var18);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var11);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var29 = var11.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test400");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var5 = var0.getSentDate();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var7 = var6.getReader();
    ch.bluepenguin.email.client.cache.MailCache var8 = var6.getCache();
    boolean var9 = var0.equals((java.lang.Object)var6);
    java.lang.String var10 = var6.getName();
    boolean var11 = var6.isDirty();
    ch.bluepenguin.email.client.cache.MailCache var12 = var6.getCache();
    var6.setDirty(true);
    ch.bluepenguin.email.client.cache.MailCache var16 = new ch.bluepenguin.email.client.cache.MailCache("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var6.setCache(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Default EmailFacade Impl"+ "'", var10.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test401");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.listener.ListenerMap var2 = var0.getListeners();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var4 = var0.getComponentClassEnhancer();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var0.getSpecification();
    java.lang.String var6 = var0.getContextPath();
    org.apache.tapestry.engine.IScriptSource var7 = var0.getScriptSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var8.forgetPage("");
    org.apache.tapestry.engine.IPageSource var11 = var8.getPageSource();
    org.apache.tapestry.engine.IComponentMessagesSource var12 = var8.getComponentMessagesSource();
    var0.setVisit((java.lang.Object)var8);
    org.apache.tapestry.engine.IComponentClassEnhancer var14 = var0.getComponentClassEnhancer();
    boolean var15 = var0.getHasVisit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test402");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var10 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var10.setSeparator("");
    java.util.Locale var13 = var10.getMyLocale();
    var0.setLocale(var13);
    org.apache.tapestry.IAsset var16 = var0.getAsset("ch.bluepenguin.email.client.tapestry.Home@262a0e58[(0) null\n   (0) null\n   (0) null]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test403");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Map var7 = var3.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var8.forgetPage("");
    org.apache.tapestry.engine.IPageSource var11 = var8.getPageSource();
    org.apache.tapestry.engine.IPropertySource var12 = var8.getPropertySource();
    java.util.Collection var13 = var8.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var14 = var8.getComponentMessagesSource();
    var3.attach((org.apache.tapestry.IEngine)var8);
    java.lang.Object var16 = var3.getVisit();
    org.apache.tapestry.spec.IComponentSpecification var17 = var3.getSpecification();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    var18.beginPageRender();
    java.util.Collection var20 = var18.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var21 = var18.getListeners();
    java.lang.String var22 = var18.getPageName();
    var3.addComponent((org.apache.tapestry.IComponent)var18);
    java.util.Locale var24 = var3.getLocale();
    org.apache.tapestry.spec.IComponentSpecification var25 = var3.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test404");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.children();
    boolean var12 = var8.getAllowsChildren();
    int var13 = var8.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var8);
    var0.setName("");
    ch.bluepenguin.email.client.Account var17 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var18 = var17.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var19 = var17.getUniqueID();
    ch.bluepenguin.email.client.Person var20 = new ch.bluepenguin.email.client.Person();
    java.lang.String var21 = var20.getFirstname();
    var17.setPerson(var20);
    ch.bluepenguin.email.client.Person var23 = var17.getPerson();
    var0.setAccount(var17);
    ch.bluepenguin.email.client.Person var25 = var17.getPerson();
    java.lang.String var26 = var25.getReserve();
    java.lang.String var27 = var25.getFirstname();
    java.lang.String var28 = var25.getReserve();
    java.lang.String var29 = var25.getNickname();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test405");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    ch.bluepenguin.email.client.tapestry.SpringEngine var2 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var3 = var2.getVisit();
    org.apache.tapestry.engine.IPageSource var4 = var2.getPageSource();
    java.lang.String var5 = var2.getContextPath();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var6 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var6.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var9 = var6.getMyLocale();
    var2.setLocale(var9);
    var0.setLocale(var9);
    java.lang.String var12 = var0.toString();
    org.apache.tapestry.IBinding var14 = var0.getBinding("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    int var15 = var0.getBodyCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test406");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var3.setIndex(10);
    var3.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var8 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var10 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    var8.setParameters((java.lang.Object[])var11);
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var14 = var13.getBody();
    var8.setComponent((org.apache.tapestry.IComponent)var13);
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var3, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var17 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var19 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var19.setIndex(10);
    java.lang.String var22 = var19.getName();
    var19.setDepth(1);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var25 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var26 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var28.setName("");
    int var31 = var28.getDepth();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var32 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    var33.beginPageRender();
    java.util.Collection var35 = var33.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var36 = var33.getListeners();
    java.lang.String var37 = var33.getPageName();
    java.lang.String var38 = var33.getExtendedId();
    var33.setPageName("");
    org.apache.tapestry.listener.ListenerMap var41 = var33.getListeners();
    var28.setParent((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test407");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    java.lang.String var7 = var0.getIdPath();
    java.util.Locale var8 = var0.getLocale();
    org.apache.tapestry.IRequestCycle var9 = var0.getRequestCycle();
    org.apache.tapestry.listener.ListenerMap var10 = var0.getListeners();
    var0.beginPageRender();
    org.apache.tapestry.IPage var12 = var0.getPage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test408");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    java.lang.String var4 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var6 = var1.getRenderer();
    java.lang.String var7 = var1.toString();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    boolean var16 = var14.equals((java.lang.Object)(short)(-1));
    java.util.Collection var17 = var14.getChildren();
    boolean var18 = var9.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var14);
    boolean var19 = var14.isLeaf();
    boolean var20 = var14.isLeaf();
    ch.bluepenguin.email.client.Folder var21 = var14.getFolder();
    var1.setContained((java.lang.Object)var21);
    var21.setParentFolderId((java.lang.Integer)10);
    java.lang.String var25 = var21.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test409");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    boolean var4 = var0.isStateful();
    org.apache.tapestry.listener.ListenerMap var5 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test410");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    var3.beginPageRender();
    ch.bluepenguin.email.client.tapestry.Home var9 = new ch.bluepenguin.email.client.tapestry.Home();
    var9.beginPageRender();
    java.util.Collection var11 = var9.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var12 = var9.getListeners();
    java.lang.String var13 = var9.getPageName();
    java.lang.String var14 = var9.getExtendedId();
    var3.addBody((org.apache.tapestry.IRender)var9);
    var3.setId("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=(0) null; sentDate=null; subject=null; text=null");
    int var18 = var3.getBodyCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test411");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    ch.bluepenguin.email.client.Folder var9 = var0.getFolder();
    java.lang.String[] var10 = var0.getBcc();
    java.lang.String var11 = var0.getReplyTo();
    int var12 = var0.getTechnicalID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test412");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    var0.setText("hi!");
    var0.setFrom("(0) null\n   (0) null");
    var0.setTechnicalID((-1));
    var0.setBcc("Default EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var13 = new ch.bluepenguin.email.client.MailMessage();
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var13.getUniqueID();
    java.lang.String var15 = var13.getSubject();
    var0.copyTo((org.springframework.mail.MailMessage)var13);
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var13.getUniqueID();
    var13.setBcc("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String[] var20 = var13.getCc();
    java.lang.String var21 = var13.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test413");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    java.util.Collection var5 = var0.getActivePageNames();
    org.apache.tapestry.engine.IComponentClassEnhancer var6 = var0.getComponentClassEnhancer();
    java.util.Locale var7 = var0.getLocale();
    org.apache.tapestry.util.io.DataSqueezer var8 = var0.getDataSqueezer();
    java.util.Collection var9 = var0.getActivePageNames();
    org.apache.tapestry.util.io.DataSqueezer var10 = var0.getDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test414");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var2 = var1.getParent();
    ch.bluepenguin.email.client.MailMessage var3 = new ch.bluepenguin.email.client.MailMessage();
    var3.setBcc("Dummy EmailFacade Impl");
    var3.setTechnicalID(100);
    var3.setText("hi!");
    var1.setContained((java.lang.Object)var3);
    java.lang.Object var11 = var1.getContained();
    java.lang.Object var12 = var1.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test415");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    org.apache.tapestry.asset.ResourceChecksumSource var6 = var0.getResourceChecksumSource();
    boolean var7 = var0.isResetServiceEnabled();
    java.lang.Object var8 = var0.getGlobal();
    java.lang.String var9 = var0.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test416");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var1);
    var2.setDepth((-1));
    java.lang.Object var5 = var2.getParent();
    int var6 = var2.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var7 = var2.getRenderer();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var9 = var8.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var9);
    java.lang.Object var11 = var10.getContained();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var15 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var15.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var18 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var18.setText("Dummy EmailFacade Impl");
    var18.setText(",");
    var15.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var18);
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var15);
    var10.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var15);
    var15.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    var15.setText("SimpleMailMessage: from=(0) null; replyTo=null; to=; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    var2.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var15);
    var15.setElement("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=(0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test417");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var3 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var3.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var7 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var3.reportException("", (java.lang.Throwable)var7);
    var0.reportException("hi!", (java.lang.Throwable)var7);
    org.apache.tapestry.engine.IPageSource var10 = var0.getPageSource();
    org.apache.tapestry.spec.IApplicationSpecification var11 = var0.getSpecification();
    org.apache.tapestry.engine.ISpecificationSource var12 = var0.getSpecificationSource();
    boolean var13 = var0.isDirty();
    org.apache.tapestry.engine.ITemplateSource var14 = var0.getTemplateSource();
    org.apache.tapestry.util.io.DataSqueezer var15 = var0.createDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test418");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    var0.setVisit((java.lang.Object)var3);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var5 = var3.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var7 = var6.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var9.setIndex(10);
    var9.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var14 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    var14.setParameters((java.lang.Object[])var17);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    var14.setComponent((org.apache.tapestry.IComponent)var19);
    var6.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var9, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var25 = var24.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var27 = var26.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var28 = var26.getMenuItem();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var29 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var6.addMenuItem(var28, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var29);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var32 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var33 = var32.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var34 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    java.lang.String var35 = var32.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = var6.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var37 = var3.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    var32.setIndex((-1));
    ch.bluepenguin.email.client.Folder var40 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var41 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var40);
    boolean var42 = var41.isLeaf();
    ch.bluepenguin.email.client.Folder var43 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var43);
    boolean var46 = var44.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var47 = var44.getParent();
    var41.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var44);
    ch.bluepenguin.email.client.Folder var49 = var41.getFolder();
    var32.setContained((java.lang.Object)var41);
    java.lang.Object var51 = var32.getParent();
    var32.setIndex(10);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var54 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0) null"+ "'", var7.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test419");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    var4.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    var12.setFolder(var13);
    org.apache.tapestry.contrib.tree.model.ITreeNode var15 = var12.getParent();
    boolean var16 = var12.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var17 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var12);
    ch.bluepenguin.email.client.Account var18 = var4.getAccount();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var19 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var20 = var19.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    boolean var24 = var22.equals((java.lang.Object)(short)(-1));
    java.util.Collection var25 = var22.children();
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    var26.setFullName("hi!");
    var26.setFullName("Dummy EmailFacade Impl");
    var22.setFolder(var26);
    java.util.Collection var33 = var22.getChildren();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    var36.setParentFolderId((java.lang.Integer)1);
    var36.setParentFolderId((java.lang.Integer)0);
    var34.setParent(var36);
    var22.setFolder(var36);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var44 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var22);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var22);
    java.util.Collection var46 = var22.getChildren();
    java.util.Collection var47 = var22.getChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test420");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    org.apache.tapestry.IAsset var7 = var0.getAsset(",");
    ch.bluepenguin.email.client.tapestry.SpringEngine var8 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var8.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var11 = var8.getPropertySource();
    org.apache.tapestry.asset.ResourceChecksumSource var12 = var8.getResourceChecksumSource();
    var0.attach((org.apache.tapestry.IEngine)var8);
    org.apache.tapestry.engine.IComponentMessagesSource var14 = var8.getComponentMessagesSource();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    var15.addComponent((org.apache.tapestry.IComponent)var18);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var22 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var22.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var25 = var22.getMyLocale();
    var18.setLocale(var25);
    java.lang.String var27 = var18.getPageName();
    java.util.Collection var28 = var18.getBindingNames();
    java.util.Map var29 = var18.getComponents();
    var8.setVisit((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test421");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    var0.setParentFolderId((java.lang.Integer)1);
    var0.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var6 = var0.getAccount();
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.children();
    boolean var12 = var8.getAllowsChildren();
    int var13 = var8.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var8);
    var0.setName("");
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    boolean var22 = var20.equals((java.lang.Object)(short)(-1));
    boolean var23 = var18.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var20);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var25 = var24.displayMenuStructure();
    java.util.Iterator var26 = var24.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var29 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var30 = var29.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var31 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29);
    var27.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var33 = var24.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var29);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var35 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var36 = var35.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var37 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var35);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var38 = var37.getMenuItem();
    var24.addMenuItem(var38);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var40 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var41 = var40.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var43 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var43.setIndex(10);
    var43.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var48 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var50 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var51 = var50.getSuppressed();
    var48.setParameters((java.lang.Object[])var51);
    ch.bluepenguin.email.client.tapestry.Home var53 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var54 = var53.getBody();
    var48.setComponent((org.apache.tapestry.IComponent)var53);
    var40.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var43, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var48);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var58 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var59 = var58.getParent();
    var58.setLeaf(false);
    var43.setContained((java.lang.Object)var58);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var63 = var24.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var58);
    var58.setIndex((-1));
    boolean var66 = var20.equals((java.lang.Object)(-1));
    ch.bluepenguin.email.client.Folder var67 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var68 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var67);
    ch.bluepenguin.email.client.Folder var69 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var70 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var69);
    var69.setParentFolderId((java.lang.Integer)1);
    var68.setFolder(var69);
    var20.setFolder(var69);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var75 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var20);
    var75.removeFromParent();
    boolean var77 = var75.getAllowsChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0) null"+ "'", var25.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0) null"+ "'", var41.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test422");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setLeaf(false);
    boolean var4 = var1.isLeaf();
    var1.setIndex(1);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    var1.setContained((java.lang.Object)var7);
    var1.setIndex(0);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var14 = var13.getParent();
    java.lang.Object var15 = var13.getContained();
    var13.setLeaf(true);
    int var18 = var13.getIndex();
    boolean var19 = var13.isLeaf();
    var1.setContained((java.lang.Object)var19);
    java.lang.String var21 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10.0f+ "'", var15.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test423");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.AbstractUniqueID var1 = var0.getUniqueID();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var1);
    java.lang.Object var3 = var2.getContained();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var4 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var4.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var7 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var7.setText("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var10 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var10.setText("Dummy EmailFacade Impl");
    var10.setText(",");
    var7.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var10);
    var4.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var7);
    var2.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var7);
    var7.setStyleClass("SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null");
    var7.setText("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test424");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Account var6 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var7 = var6.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var6.getUniqueID();
    ch.bluepenguin.email.client.Person var9 = new ch.bluepenguin.email.client.Person();
    java.lang.String var10 = var9.getFirstname();
    var6.setPerson(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var12 = var9.getUniqueID();
    var0.setPerson(var9);
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var9.getUniqueID();
    java.lang.String var15 = var9.getReserve();
    java.lang.String var16 = var9.getReserve();
    ch.bluepenguin.email.client.AbstractUniqueID var17 = var9.getUniqueID();
    var17.setId((java.lang.Integer)(-1));
    java.lang.Integer var20 = var17.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + (-1)+ "'", var20.equals((-1)));

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test425");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(false);
    org.springframework.mail.MailSender var5 = var0.getSender();
    java.util.logging.Logger var6 = var0.getLogger();
    java.lang.String var7 = var0.getName();
    org.springframework.mail.javamail.JavaMailReader var8 = var0.getReader();
    boolean var9 = var0.isDirty();
    org.springframework.mail.MailSender var10 = var0.getSender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Default EmailFacade Impl"+ "'", var7.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test426");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    var1.setParent((java.lang.Object)10L);
    java.lang.Object var6 = var1.getContained();
    java.lang.String var7 = var1.toString();
    var1.setIndex(100);
    var1.setIndex(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test427");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var6 = var5.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var7 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    var3.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var5);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var11 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var12 = var11.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var13 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var11);
    ch.bluepenguin.tapestry.components.menu.model.IMenuItem var14 = var13.getMenuItem();
    var0.addMenuItem(var14);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var17.setIndex(10);
    var17.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var17);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var24 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var24.setName("(0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var27 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var28 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var24);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var30.setIndex(10);
    var30.setParent((java.lang.Object)10L);
    java.lang.Object var35 = var30.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var36 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var30);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var37 = var0.getRootList();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var38 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test428");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.lang.String var7 = var0.getIdPath();
    org.apache.tapestry.ILocation var8 = var0.getLocation();
    org.apache.tapestry.IEngine var9 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var13 = new ch.bluepenguin.email.client.tapestry.Home();
    var13.beginPageRender();
    java.util.Collection var15 = var13.getBindingNames();
    var10.setPage((org.apache.tapestry.IPage)var13);
    var0.addComponent((org.apache.tapestry.IComponent)var13);
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    org.apache.tapestry.IAsset var22 = var18.getAsset("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var25 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    var23.setParameters((java.lang.Object[])var26);
    ch.bluepenguin.email.client.tapestry.Home var28 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var29 = var28.getBody();
    var23.setComponent((org.apache.tapestry.IComponent)var28);
    ch.bluepenguin.email.client.tapestry.Home var31 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var32 = var31.getBody();
    int var33 = var31.getBodyCount();
    var31.setPageName("");
    var28.addBody((org.apache.tapestry.IRender)var31);
    var18.setContainer((org.apache.tapestry.IComponent)var31);
    var0.addComponent((org.apache.tapestry.IComponent)var18);
    org.apache.tapestry.IBinding var40 = var18.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    ch.bluepenguin.email.client.tapestry.SpringEngine var41 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var42 = var41.getSpecification();
    java.lang.Object var43 = var41.getGlobal();
    java.lang.Object var44 = var41.getGlobal();
    org.apache.tapestry.engine.ITemplateSource var45 = var41.getTemplateSource();
    var18.attach((org.apache.tapestry.IEngine)var41);
    boolean var47 = var41.isStateful();
    java.util.Collection var48 = var41.getActivePageNames();
    java.lang.String var49 = var41.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test429");


    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var0 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var0.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    java.lang.String var3 = var0.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var3.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test430");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    var0.checkMenuModelHealth();
    var0.checkMenuModelHealth();
    var0.checkMenuModelHealth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test431");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.getPageName();
    int var7 = var0.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var9.setParent((java.lang.Object)100L);
    java.lang.String var12 = var9.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var14 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var15 = var14.getParent();
    java.lang.Object var16 = var14.getContained();
    var14.setLeaf(true);
    var9.setContained((java.lang.Object)var14);
    java.lang.Object var20 = var14.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var14);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var22 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var24 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var25 = var24.getSuppressed();
    var22.setParameters((java.lang.Object[])var25);
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    var22.setComponent((org.apache.tapestry.IComponent)var27);
    org.apache.tapestry.INamespace var30 = var27.getNamespace();
    var14.setParent((java.lang.Object)var27);
    java.lang.String var32 = var27.getPageName();
    org.apache.tapestry.IBinding var34 = var27.getBinding("(1) null");
    var0.setPage((org.apache.tapestry.IPage)var27);
    org.apache.tapestry.event.ChangeObserver var36 = var0.getChangeObserver();
    java.util.Collection var37 = var0.getBindingNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + 10.0f+ "'", var16.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test432");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.IAsset var11 = var0.getAsset("Dummy EmailFacade Impl");
    var0.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    org.apache.tapestry.spec.IComponentSpecification var14 = var0.getSpecification();
    org.apache.tapestry.IComponent var15 = var0.getContainer();
    ch.bluepenguin.email.client.tapestry.Home var16 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var17 = var16.getBody();
    java.lang.String var18 = var16.getPageName();
    java.lang.String var19 = var16.toString();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    java.lang.String var22 = var20.getPageName();
    java.lang.String var23 = var20.toString();
    org.apache.tapestry.IEngine var24 = var20.getEngine();
    var16.setContainer((org.apache.tapestry.IComponent)var20);
    var20.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IComponent var28 = var20.getContainer();
    org.apache.tapestry.IBinding var30 = var20.getBinding("(0) (0) null");
    var0.addComponent((org.apache.tapestry.IComponent)var20);
    org.apache.tapestry.event.ChangeObserver var32 = var0.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test433");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    boolean var31 = var25.getAllowsChildren();
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    var32.setReplyTo("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.MailMessage var37 = new ch.bluepenguin.email.client.MailMessage();
    var37.setBcc("Dummy EmailFacade Impl");
    java.lang.String var40 = var37.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var41 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var41.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var44 = var41.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var45 = var41.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var46 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var47 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var46);
    var46.setParentFolderId((java.lang.Integer)1);
    var46.setFullName("hi!");
    var45.setParent(var46);
    var37.setFolder(var46);
    var32.setFolder(var46);
    var25.setFolder(var46);
    ch.bluepenguin.email.client.Folder var56 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var57 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var56);
    boolean var58 = var57.isLeaf();
    ch.bluepenguin.email.client.Folder var59 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var60 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var59);
    boolean var62 = var60.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var63 = var60.getParent();
    var57.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var60);
    ch.bluepenguin.email.client.Folder var65 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var66 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var65);
    boolean var68 = var66.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var69 = var66.getParent();
    var57.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var66);
    boolean var71 = var57.isLeaf();
    ch.bluepenguin.email.client.tapestry.SpringEngine var72 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var72.forgetPage("");
    org.apache.tapestry.engine.IPageSource var75 = var72.getPageSource();
    java.lang.Object var76 = var72.getGlobal();
    java.lang.Object var77 = var72.getGlobal();
    boolean var78 = var57.equals((java.lang.Object)var72);
    org.apache.tapestry.util.io.DataSqueezer var79 = var72.createDataSqueezer();
    org.apache.tapestry.util.pool.Pool var80 = var72.getPool();
    org.apache.tapestry.engine.IPageSource var81 = var72.getPageSource();
    ch.bluepenguin.email.client.Folder var82 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var83 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var82);
    ch.bluepenguin.email.client.Folder var84 = new ch.bluepenguin.email.client.Folder();
    var83.setFolder(var84);
    ch.bluepenguin.email.client.Folder var86 = var83.getFolder();
    var72.setVisit((java.lang.Object)var83);
    var25.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var83);
    boolean var89 = var83.isLeaf();
    java.util.Collection var90 = var83.children();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test434");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    java.util.Collection var9 = var4.children();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    var10.setParentFolderId((java.lang.Integer)1);
    var10.setParentFolderId((java.lang.Integer)0);
    var4.setFolder(var10);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    boolean var21 = var18.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var24 = var23.isLeaf();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var29 = var26.getParent();
    var23.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var35 = var32.getParent();
    var23.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    var18.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    ch.bluepenguin.email.client.Folder var38 = var32.getFolder();
    ch.bluepenguin.email.client.Folder var39 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var40 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var39);
    boolean var42 = var40.equals((java.lang.Object)(short)(-1));
    java.util.Collection var43 = var40.children();
    ch.bluepenguin.email.client.Folder var44 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var45 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var44);
    var44.setFullName("hi!");
    var44.setFullName("Dummy EmailFacade Impl");
    var40.setFolder(var44);
    java.lang.String var51 = var44.getName();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var44);
    var44.setParentFolderId((java.lang.Integer)(-1));
    var44.setParentFolderId((java.lang.Integer)0);
    var32.setFolder(var44);
    ch.bluepenguin.email.client.Folder var58 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var59 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58);
    var58.setParentFolderId((java.lang.Integer)1);
    var58.setParentFolderId((java.lang.Integer)0);
    ch.bluepenguin.email.client.Account var64 = var58.getAccount();
    ch.bluepenguin.email.client.Folder var65 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var66 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var65);
    boolean var68 = var66.equals((java.lang.Object)(short)(-1));
    java.util.Collection var69 = var66.children();
    boolean var70 = var66.getAllowsChildren();
    int var71 = var66.getChildCount();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var72 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var58, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var66);
    var58.setName("");
    ch.bluepenguin.email.client.Account var75 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var76 = var75.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var77 = var75.getUniqueID();
    ch.bluepenguin.email.client.Person var78 = new ch.bluepenguin.email.client.Person();
    java.lang.String var79 = var78.getFirstname();
    var75.setPerson(var78);
    ch.bluepenguin.email.client.Person var81 = var75.getPerson();
    var58.setAccount(var75);
    ch.bluepenguin.email.client.Person var83 = new ch.bluepenguin.email.client.Person();
    java.lang.String var84 = var83.getFirstname();
    var83.setLastname("(0) null");
    java.lang.String var87 = var83.getReserve();
    var83.setNickname("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    java.lang.String var90 = var83.getLastname();
    var75.setPerson(var83);
    boolean var92 = var32.equals((java.lang.Object)var83);
    var4.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(0) null"+ "'", var90.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test435");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    var7.setText("hi!");
    var5.setContained((java.lang.Object)var7);
    var0.setVisit((java.lang.Object)var7);
    ch.bluepenguin.email.client.service.EmailFacadeException var17 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var17);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var19 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var19.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var23 = new java.lang.String[] { "(0) null"};
    java.lang.String var24 = var19.returnStringList(var23);
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var25.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var28 = var25.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var29 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var29.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var32 = var29.getMyLocale();
    var25.setLocale(var32);
    var19.setMyLocale(var32);
    var0.setLocale(var32);
    org.apache.tapestry.asset.ResourceChecksumSource var36 = var0.getResourceChecksumSource();
    java.util.Locale var37 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0) null"+ "'", var24.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test436");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    org.apache.tapestry.IEngine var3 = var0.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    int var6 = var4.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    var4.addComponent((org.apache.tapestry.IComponent)var7);
    var4.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var13 = var12.getBody();
    int var14 = var12.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var15 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var16 = var15.getBody();
    int var17 = var15.getBodyCount();
    var12.addComponent((org.apache.tapestry.IComponent)var15);
    java.util.Map var19 = var15.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var20 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var20.forgetPage("");
    org.apache.tapestry.engine.IPageSource var23 = var20.getPageSource();
    org.apache.tapestry.engine.IPropertySource var24 = var20.getPropertySource();
    java.util.Collection var25 = var20.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var26 = var20.getComponentMessagesSource();
    var15.attach((org.apache.tapestry.IEngine)var20);
    var4.addBody((org.apache.tapestry.IRender)var15);
    var0.addComponent((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.listener.ListenerMap var30 = var4.getListeners();
    java.lang.String var31 = var4.getExtendedId();
    org.apache.tapestry.IBinding var33 = var4.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    org.apache.tapestry.INamespace var34 = var4.getNamespace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test437");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    java.lang.String var22 = var13.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test438");


    ch.bluepenguin.email.client.Person var0 = new ch.bluepenguin.email.client.Person();
    java.lang.String var1 = var0.getFirstname();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    java.lang.String var3 = var0.getReserve();
    java.lang.String var4 = var0.getReserve();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test439");


    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var1 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    ch.bluepenguin.email.client.service.EmailFacadeException var2 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var3 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var4 = var3.getSuppressed();
    var2.setTechnicalException((java.lang.Exception)var3);
    java.lang.Exception var6 = var2.getTechnicalException();
    var1.addSuppressed((java.lang.Throwable)var2);
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "+ "'", var8.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: "));

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test440");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setCc("hi!");
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    java.util.Collection var7 = var4.children();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    var8.setFullName("hi!");
    var8.setFullName("Dummy EmailFacade Impl");
    var4.setFolder(var8);
    ch.bluepenguin.email.client.Account var15 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var15.getUniqueID();
    var8.setAccount(var15);
    boolean var18 = var0.equals((java.lang.Object)var15);
    java.lang.String var19 = var0.getText();
    var0.setSubject("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test441");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    java.lang.String[] var14 = var0.getCc();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test442");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.Home var7 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var8 = var7.getBody();
    int var9 = var7.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var10 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var11 = var10.getBody();
    int var12 = var10.getBodyCount();
    var7.addComponent((org.apache.tapestry.IComponent)var10);
    java.lang.String var14 = var7.getIdPath();
    org.apache.tapestry.ILocation var15 = var7.getLocation();
    org.apache.tapestry.IEngine var16 = var7.getEngine();
    var7.beginPageRender();
    java.lang.String var18 = var7.toString();
    var3.setPage((org.apache.tapestry.IPage)var7);
    java.util.Collection var20 = var7.getBindingNames();
    org.apache.tapestry.IAsset var22 = var7.getAsset("(0) null");
    java.lang.String var23 = var7.getExtendedId();
    java.lang.String var24 = var7.getPageName();
    var7.detach();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test443");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    var0.setCurrentFolder("");
    java.lang.String var6 = var0.getName();
    ch.bluepenguin.email.client.Folder var7 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var9 = var0.getMessagesFromFolder("hi!");
    ch.bluepenguin.email.client.Folder[] var10 = var0.getAllFolders();
    ch.bluepenguin.email.client.Folder var11 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var12 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.MailMessage[] var13 = var12.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var14 = var12.getAllMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var14, "SimpleMailMessage: from=null; replyTo=null; to=Dummy EmailFacade Impl; cc=hi!; bcc=; sentDate=null; subject=null; text=null", "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Dummy EmailFacade Impl"+ "'", var6.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test444");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var2 = var0.getDataSqueezer();
    var0.setVisit((java.lang.Object)0.0d);
    boolean var5 = var0.isStateful();
    org.apache.tapestry.util.io.DataSqueezer var6 = var0.getDataSqueezer();
    var0.forgetPage("SimpleMailMessage: from=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=(0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test445");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    var3.setId("(0) null");
    org.apache.tapestry.IComponent var10 = var3.getContainer();
    var3.endPageRender();
    java.lang.String var12 = var3.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0) null"+ "'", var12.equals("(0) null"));

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test446");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.tapestry.SpringEngine var1 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var2 = var1.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var4 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var4.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var8 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var4.reportException("", (java.lang.Throwable)var8);
    var1.reportException("hi!", (java.lang.Throwable)var8);
    var0.setTechnicalException((java.lang.Exception)var8);
    ch.bluepenguin.email.client.tapestry.SpringEngine var12 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var13 = var12.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var12.reportException("", (java.lang.Throwable)var16);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var19 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var20 = var19.getSuppressed();
    var16.addSuppressed((java.lang.Throwable)var19);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var23 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var26 = var25.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var28 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var29 = var28.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var32 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var28.reportException("", (java.lang.Throwable)var32);
    var25.reportException("hi!", (java.lang.Throwable)var32);
    var23.addSuppressed((java.lang.Throwable)var32);
    var16.addSuppressed((java.lang.Throwable)var32);
    var0.setTechnicalException((java.lang.Exception)var32);
    java.lang.Throwable[] var38 = var0.getSuppressed();
    java.lang.String var39 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "ch.bluepenguin.email.client.service.EmailFacadeException"+ "'", var39.equals("ch.bluepenguin.email.client.service.EmailFacadeException"));

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test447");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    var0.setTo("");
    ch.bluepenguin.email.client.MailMessage var8 = new ch.bluepenguin.email.client.MailMessage();
    var8.setBcc("Dummy EmailFacade Impl");
    var8.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var13 = var8.getSentDate();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    java.lang.String var19 = var14.getReplyTo();
    java.lang.String[] var21 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var14.setCc(var21);
    java.lang.String[] var24 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var14.setBcc(var24);
    var8.setCc(var24);
    var0.copyTo((org.springframework.mail.MailMessage)var8);
    int var28 = var8.getTechnicalID();
    var8.setBcc("(0) (0) null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test448");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.util.io.DataSqueezer var4 = var0.createDataSqueezer();
    org.apache.tapestry.util.io.DataSqueezer var5 = var0.createDataSqueezer();
    org.apache.tapestry.engine.IPageSource var6 = var0.getPageSource();
    org.apache.tapestry.IResourceResolver var7 = var0.getResourceResolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test449");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    java.util.Iterator var2 = var0.getMenuItemsDepthFirst();
    java.lang.String var3 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var5 = var4.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var9 = var8.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var6.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    java.lang.Object var12 = var8.getParent();
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    var14.setFolder(var15);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var15.setParent(var17);
    var8.setContained((java.lang.Object)var17);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var23 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var8.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var23);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var25 = var4.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var8.setLeaf(false);
    boolean var28 = var8.isLeaf();
    var0.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var8);
    var8.setIndex(2);
    java.lang.Object var32 = var8.getContained();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0) null"+ "'", var3.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0) null"+ "'", var5.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test450");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setIndex(10);
    var1.setParent((java.lang.Object)10L);
    int var6 = var1.getDepth();
    var1.setName("(0) null\n   (0) null\n   (0) null");
    java.lang.Object var9 = var1.getContained();
    ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer var10 = var1.getRenderer();
    java.lang.String var11 = var1.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var13 = var12.toString();
    java.util.Iterator var14 = var12.getChildrenIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0) null\n   (0) null\n   (0) null"+ "'", var11.equals("(0) null\n   (0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0) (0) null\n   (0) null\n   (0) null"+ "'", var13.equals("(0) (0) null\n   (0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test451");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = var1.getFolder();
    var4.setFullName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    boolean var10 = var8.equals((java.lang.Object)(short)(-1));
    java.util.Collection var11 = var8.getChildren();
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var14 = var13.isLeaf();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var16.getParent();
    var13.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    boolean var21 = var8.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var13);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var25 = var23.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var26 = var23.getFolder();
    int var27 = var23.getChildCount();
    boolean var28 = var13.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var23);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    ch.bluepenguin.email.client.AbstractUniqueID var31 = var4.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test452");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var0.forgetPage("");
    org.apache.tapestry.engine.IPageSource var3 = var0.getPageSource();
    org.apache.tapestry.engine.IPropertySource var4 = var0.getPropertySource();
    java.util.Collection var5 = var0.getActivePageNames();
    org.apache.tapestry.engine.IComponentClassEnhancer var6 = var0.getComponentClassEnhancer();
    java.util.Locale var7 = var0.getLocale();
    org.apache.tapestry.util.io.DataSqueezer var8 = var0.getDataSqueezer();
    org.apache.tapestry.IResourceResolver var9 = var0.getResourceResolver();
    org.apache.tapestry.spec.IApplicationSpecification var10 = var0.getSpecification();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test453");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    org.apache.tapestry.INamespace var10 = var4.getNamespace();
    org.apache.tapestry.event.ChangeObserver var11 = var4.getChangeObserver();
    var4.detach();
    org.apache.tapestry.event.ChangeObserver var13 = var4.getChangeObserver();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var14 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var16 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    var14.setParameters((java.lang.Object[])var17);
    ch.bluepenguin.email.client.tapestry.Home var19 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var20 = var19.getBody();
    var14.setComponent((org.apache.tapestry.IComponent)var19);
    var19.setId("Dummy EmailFacade Impl");
    int var24 = var19.getBodyCount();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    java.util.Collection var29 = var26.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    int var32 = var30.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var33 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var34 = var33.getBody();
    int var35 = var33.getBodyCount();
    var30.addComponent((org.apache.tapestry.IComponent)var33);
    java.util.Map var37 = var33.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var38 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var38.forgetPage("");
    org.apache.tapestry.engine.IPageSource var41 = var38.getPageSource();
    org.apache.tapestry.engine.IPropertySource var42 = var38.getPropertySource();
    java.util.Collection var43 = var38.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var44 = var38.getComponentMessagesSource();
    var33.attach((org.apache.tapestry.IEngine)var38);
    boolean var46 = var26.equals((java.lang.Object)var38);
    org.apache.tapestry.engine.IComponentClassEnhancer var47 = var38.getComponentClassEnhancer();
    var19.attach((org.apache.tapestry.IEngine)var38);
    var19.beginPageRender();
    var4.addComponent((org.apache.tapestry.IComponent)var19);
    ch.bluepenguin.email.client.tapestry.Home var51 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var52 = var51.getBody();
    int var53 = var51.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    int var56 = var54.getBodyCount();
    var51.addComponent((org.apache.tapestry.IComponent)var54);
    java.util.Map var58 = var54.getComponents();
    java.lang.String var59 = var54.getPageName();
    var54.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var19.setContainer((org.apache.tapestry.IComponent)var54);
    org.apache.tapestry.IEngine var63 = var54.getEngine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test454");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var1 = var0.getSpecification();
    java.lang.Object var2 = var0.getGlobal();
    java.lang.Object var3 = var0.getGlobal();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    java.lang.Object var6 = var5.getParent();
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    var7.setText("hi!");
    var5.setContained((java.lang.Object)var7);
    var0.setVisit((java.lang.Object)var7);
    ch.bluepenguin.email.client.service.EmailFacadeException var17 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    var0.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var17);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var19 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var19.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var23 = new java.lang.String[] { "(0) null"};
    java.lang.String var24 = var19.returnStringList(var23);
    ch.bluepenguin.email.client.tapestry.SpringEngine var25 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var25.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var28 = var25.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var29 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var29.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var32 = var29.getMyLocale();
    var25.setLocale(var32);
    var19.setMyLocale(var32);
    var0.setLocale(var32);
    org.apache.tapestry.util.io.DataSqueezer var36 = var0.createDataSqueezer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0) null"+ "'", var24.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test455");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    int var4 = var1.getDepth();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var5 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    var1.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var5);
    java.lang.Object var7 = var1.getParent();
    java.lang.Object var8 = var1.getContained();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.util.Iterator var10 = var9.getChildrenIterator();
    java.util.Iterator var11 = var9.getChildrenIterator();
    java.util.Iterator var12 = var9.getChildrenIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 100L+ "'", var7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test456");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var0.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var3 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder[] var4 = var0.getAllFolders();
    ch.bluepenguin.email.client.MailMessage[] var6 = var0.getMessagesFromFolder("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null\n   (0) null");
    ch.bluepenguin.email.client.Folder var7 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var8 = var0.getAllMessages();
    java.lang.String var9 = var0.getName();
    ch.bluepenguin.email.client.MailMessage[] var10 = var0.getAllMessages();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Dummy EmailFacade Impl"+ "'", var9.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test457");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    var0.setDirty(false);
    ch.bluepenguin.email.client.cache.MailCache var3 = var0.getCache();
    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var4 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    ch.bluepenguin.email.client.cache.MailCache var6 = new ch.bluepenguin.email.client.cache.MailCache("");
    var4.setCache(var6);
    ch.bluepenguin.email.client.cache.MailCache var9 = new ch.bluepenguin.email.client.cache.MailCache("(0) null");
    net.sf.ehcache.Cache var10 = var9.getCache();
    var4.setCache(var9);
    org.springframework.mail.MailSender var12 = var4.getSender();
    org.springframework.mail.javamail.JavaMailReader var13 = var4.getReader();
    ch.bluepenguin.email.client.cache.MailCache var14 = var4.getCache();
    var0.setCache(var14);
    org.springframework.mail.MailSender var16 = var0.getSender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test458");


    ch.bluepenguin.email.client.Account var0 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var1 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var2 = var0.getUniqueID();
    ch.bluepenguin.email.client.Person var3 = new ch.bluepenguin.email.client.Person();
    java.lang.String var4 = var3.getFirstname();
    var0.setPerson(var3);
    ch.bluepenguin.email.client.Person var6 = var0.getPerson();
    ch.bluepenguin.email.client.Person var7 = var0.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var8 = var7.getUniqueID();
    java.lang.Integer var9 = var8.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test459");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    org.apache.tapestry.engine.ITemplateSource var22 = var13.getTemplateSource();
    ch.bluepenguin.email.client.MailMessage var23 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var24 = var23.toString();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var25 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var25.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var29 = new java.lang.String[] { "(0) null"};
    java.lang.String var30 = var25.returnStringList(var29);
    java.util.Locale var31 = var25.getMyLocale();
    java.util.Locale var32 = var25.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var33 = new ch.bluepenguin.email.client.MailMessage();
    var33.setBcc("Dummy EmailFacade Impl");
    var33.setTechnicalID(100);
    java.lang.String var38 = var33.getReplyTo();
    java.lang.String[] var40 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var33.setCc(var40);
    java.lang.String[] var43 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var33.setBcc(var43);
    ch.bluepenguin.email.client.MailMessage var45 = new ch.bluepenguin.email.client.MailMessage();
    var45.setBcc("Dummy EmailFacade Impl");
    var45.setTechnicalID(100);
    java.lang.String var50 = var45.getReplyTo();
    java.lang.String[] var52 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var45.setCc(var52);
    java.lang.String[] var55 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var45.setBcc(var55);
    var33.setBcc(var55);
    java.lang.String[] var58 = var33.getBcc();
    java.lang.String var59 = var25.returnStringList(var58);
    var23.setBcc(var58);
    ch.bluepenguin.email.client.Folder var61 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var62 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var61);
    boolean var64 = var62.equals((java.lang.Object)(short)(-1));
    java.util.Collection var65 = var62.getChildren();
    ch.bluepenguin.email.client.Folder var66 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var67 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var66);
    boolean var68 = var67.isLeaf();
    ch.bluepenguin.email.client.Folder var69 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var70 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var69);
    boolean var72 = var70.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var73 = var70.getParent();
    var67.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var70);
    boolean var75 = var62.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var67);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var76 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var76.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var79 = var76.getCurrentFolder();
    var67.setFolder(var79);
    java.lang.String var81 = var79.getName();
    var23.setFolder(var79);
    var13.setVisit((java.lang.Object)var23);
    var23.setTechnicalID(1);
    java.lang.String var86 = var23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var24.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0) null"+ "'", var30.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Dummy EmailFacade Impl"+ "'", var59.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Current Folder"+ "'", var81.equals("Current Folder"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var86.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test460");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var10 = var9.getPerson();
    var2.setAccount(var9);
    ch.bluepenguin.email.client.Account var12 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var13 = var12.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var14 = var12.getUniqueID();
    ch.bluepenguin.email.client.Person var15 = new ch.bluepenguin.email.client.Person();
    java.lang.String var16 = var15.getFirstname();
    var12.setPerson(var15);
    ch.bluepenguin.email.client.Person var18 = var12.getPerson();
    ch.bluepenguin.email.client.Account var19 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var20 = var19.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var21 = var19.getUniqueID();
    ch.bluepenguin.email.client.Person var22 = new ch.bluepenguin.email.client.Person();
    java.lang.String var23 = var22.getFirstname();
    var19.setPerson(var22);
    java.lang.String var25 = var22.getReserve();
    var22.setFirstname("Dummy EmailFacade Impl");
    java.lang.String var28 = var22.getFirstname();
    var12.setPerson(var22);
    var9.setPerson(var22);
    ch.bluepenguin.email.client.Account var31 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var32 = var31.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var33 = var31.getUniqueID();
    ch.bluepenguin.email.client.Person var34 = new ch.bluepenguin.email.client.Person();
    java.lang.String var35 = var34.getFirstname();
    var31.setPerson(var34);
    ch.bluepenguin.email.client.Account var37 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var38 = var37.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var39 = var37.getUniqueID();
    ch.bluepenguin.email.client.Person var40 = new ch.bluepenguin.email.client.Person();
    java.lang.String var41 = var40.getFirstname();
    var37.setPerson(var40);
    ch.bluepenguin.email.client.AbstractUniqueID var43 = var40.getUniqueID();
    var31.setPerson(var40);
    var40.setNickname("");
    ch.bluepenguin.email.client.AbstractUniqueID var47 = var40.getUniqueID();
    java.lang.String var48 = var40.getLastname();
    java.lang.String var49 = var40.getLastname();
    var40.setLastname("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var9.setPerson(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Dummy EmailFacade Impl"+ "'", var28.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test461");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setReplyTo("Dummy EmailFacade Impl");
    var0.setTechnicalID(1);
    var0.setTo("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null");
    var0.setTechnicalID(100);
    var0.setReplyTo("(0) (0) null");
    ch.bluepenguin.email.client.AbstractUniqueID var13 = var0.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test462");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    ch.bluepenguin.email.client.AbstractUniqueID var11 = var0.getUniqueID();
    java.lang.String[] var12 = var0.getTo();
    var0.setReplyTo("hi!");
    java.lang.String var15 = var0.getText();
    java.util.Date var16 = var0.getSentDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test463");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var2 = var0.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var4 = var0.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var5 = var0.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var6 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var7 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var6);
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    var7.setFolder(var8);
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    var10.setFullName("hi!");
    var8.setParent(var10);
    var10.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    var18.setFolder(var19);
    org.apache.tapestry.contrib.tree.model.ITreeNode var21 = var18.getParent();
    boolean var22 = var18.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    ch.bluepenguin.email.client.Folder var25 = var5.getParent();
    java.lang.Integer var26 = var5.getParentFolderId();
    var5.setName("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=(0) null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test464");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.setAll(true);
    var0.clear();
    var0.clear();
    var0.setAll(false);
    boolean var9 = var0.isDirty((java.lang.Integer)1);
    boolean var10 = var0.isAllClean();
    boolean var12 = var0.isDirty((java.lang.Integer)10);
    boolean var13 = var0.isAllClean();
    boolean var15 = var0.isDirty((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test465");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    var3.beginPageRender();
    ch.bluepenguin.email.client.tapestry.Home var9 = new ch.bluepenguin.email.client.tapestry.Home();
    var9.beginPageRender();
    java.util.Collection var11 = var9.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var12 = var9.getListeners();
    java.lang.String var13 = var9.getPageName();
    java.lang.String var14 = var9.getExtendedId();
    var3.addBody((org.apache.tapestry.IRender)var9);
    org.apache.tapestry.event.ChangeObserver var16 = var9.getChangeObserver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test466");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    java.lang.String[] var10 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var0.setBcc(var10);
    ch.bluepenguin.email.client.MailMessage var12 = new ch.bluepenguin.email.client.MailMessage();
    var12.setBcc("Dummy EmailFacade Impl");
    var12.setTechnicalID(100);
    java.lang.String var17 = var12.getReplyTo();
    java.lang.String[] var19 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var12.setCc(var19);
    java.lang.String[] var22 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var12.setBcc(var22);
    var0.setBcc(var22);
    int var25 = var0.getTechnicalID();
    int var26 = var0.getTechnicalID();
    int var27 = var0.getTechnicalID();
    java.lang.String[] var28 = var0.getCc();
    var0.setTo("Default EmailFacade Impl");
    java.lang.String var31 = var0.toString();
    java.lang.String var32 = var0.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"+ "'", var31.equals("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test467");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var0 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var1 = var0.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var2 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var5 = var4.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    var2.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    java.lang.Object var8 = var4.getParent();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var11.setParent(var13);
    var4.setContained((java.lang.Object)var13);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var4.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var19);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var21 = var0.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var4);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var22 = var0.getRootList();
    java.util.Iterator var23 = var22.getChildrenIterator();
    java.util.Iterator var24 = var22.getChildrenIterator();
    boolean var25 = var22.checkConsistency();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0) null"+ "'", var1.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test468");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var7 = var6.isLeaf();
    ch.bluepenguin.email.client.Folder var8 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var9 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8);
    boolean var11 = var9.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var12 = var9.getParent();
    var6.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var9);
    boolean var14 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var17 = var16.isLeaf();
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    boolean var21 = var19.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var22 = var19.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var19);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var28 = var25.getParent();
    var16.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var25);
    boolean var30 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var25);
    ch.bluepenguin.email.client.Folder var31 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var32 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var31);
    boolean var34 = var32.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var35 = var32.getParent();
    ch.bluepenguin.email.client.Folder var36 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var37 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var36);
    boolean var39 = var37.equals((java.lang.Object)(short)(-1));
    java.util.Collection var40 = var37.getChildren();
    boolean var41 = var32.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var37);
    java.util.Collection var42 = var32.getChildren();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var32);
    boolean var44 = var1.getAllowsChildren();
    ch.bluepenguin.email.client.Folder var45 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var45);
    boolean var48 = var46.equals((java.lang.Object)(short)(-1));
    java.util.Collection var49 = var46.getChildren();
    ch.bluepenguin.email.client.Folder var50 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var51 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var50);
    boolean var52 = var51.isLeaf();
    ch.bluepenguin.email.client.Folder var53 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var54 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var53);
    boolean var56 = var54.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var57 = var54.getParent();
    var51.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var54);
    boolean var59 = var46.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var51);
    ch.bluepenguin.email.client.Folder var60 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var61 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var60);
    boolean var62 = var61.isLeaf();
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    boolean var66 = var64.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var67 = var64.getParent();
    var61.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var64);
    ch.bluepenguin.email.client.Folder var69 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var70 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var69);
    boolean var72 = var70.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var73 = var70.getParent();
    var61.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var70);
    var46.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var61);
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var46);
    int var77 = var1.getChildCount();
    org.apache.tapestry.contrib.tree.model.ITreeNode var78 = var1.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test469");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var2 = var1.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var1);
    java.lang.String var4 = var3.toString();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var5 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var4);
    java.lang.Object var6 = var5.getContained();
    var5.setName("(0) null\n   (0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var9 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"(0) null\n   (0) null");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var10 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var12 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var13 = var12.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var14 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12);
    var10.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var12);
    java.lang.Object var16 = var12.getParent();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    var18.setFolder(var19);
    ch.bluepenguin.email.client.Folder var21 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var22 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var21);
    var21.setFullName("hi!");
    var19.setParent(var21);
    var12.setContained((java.lang.Object)var21);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer var27 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.HyperlinkMenuItemRenderer();
    var12.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var27);
    java.lang.String var29 = var27.getHyperlink();
    var9.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var27);
    boolean var31 = var9.isLeaf();
    ch.bluepenguin.email.client.MailMessage var32 = new ch.bluepenguin.email.client.MailMessage();
    var32.setBcc("Dummy EmailFacade Impl");
    java.lang.String var35 = var32.getReplyTo();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var36 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var36.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.Folder var39 = var36.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var40 = var36.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var41 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var42 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var41);
    var41.setParentFolderId((java.lang.Integer)1);
    var41.setFullName("hi!");
    var40.setParent(var41);
    var32.setFolder(var41);
    var9.setParent((java.lang.Object)var41);
    ch.bluepenguin.email.client.Account var50 = var41.getAccount();
    java.lang.String var51 = var41.getFullName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0) null"+ "'", var4.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0) null"+ "'", var6.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test470");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    var0.setBcc(",");
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var6 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var7 = var6.getName();
    ch.bluepenguin.email.client.Folder var8 = var6.getCurrentFolder();
    java.lang.Integer var9 = var8.getParentFolderId();
    var0.setFolder(var8);
    java.lang.String var11 = var8.getFullName();
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var14 = var13.isLeaf();
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    boolean var18 = var16.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var19 = var16.getParent();
    var13.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var16);
    ch.bluepenguin.email.client.Folder var21 = var13.getFolder();
    ch.bluepenguin.email.client.AbstractUniqueID var22 = var21.getUniqueID();
    ch.bluepenguin.email.client.Folder var23 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var24 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var23);
    boolean var26 = var24.equals((java.lang.Object)(short)(-1));
    java.util.Collection var27 = var24.children();
    ch.bluepenguin.email.client.Folder var28 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var29 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var28);
    var28.setFullName("hi!");
    var28.setFullName("Dummy EmailFacade Impl");
    var24.setFolder(var28);
    ch.bluepenguin.email.client.Account var35 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var36 = var35.getUniqueID();
    var28.setAccount(var35);
    ch.bluepenguin.email.client.AbstractUniqueID var38 = var35.getUniqueID();
    var21.setAccount(var35);
    ch.bluepenguin.email.client.Account var40 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var41 = var40.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var42 = var40.getUniqueID();
    ch.bluepenguin.email.client.Person var43 = new ch.bluepenguin.email.client.Person();
    java.lang.String var44 = var43.getFirstname();
    var40.setPerson(var43);
    ch.bluepenguin.email.client.Account var46 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.Person var47 = var46.getPerson();
    ch.bluepenguin.email.client.AbstractUniqueID var48 = var46.getUniqueID();
    ch.bluepenguin.email.client.Person var49 = new ch.bluepenguin.email.client.Person();
    java.lang.String var50 = var49.getFirstname();
    var46.setPerson(var49);
    ch.bluepenguin.email.client.AbstractUniqueID var52 = var49.getUniqueID();
    var40.setPerson(var49);
    var49.setNickname("");
    java.lang.String var56 = var49.getReserve();
    ch.bluepenguin.email.client.AbstractUniqueID var57 = var49.getUniqueID();
    java.lang.String var58 = var49.getReserve();
    var35.setPerson(var49);
    var8.setAccount(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Dummy EmailFacade Impl"+ "'", var7.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test471");


    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var1 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var1.setParent((java.lang.Object)100L);
    var1.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    var1.setName("SimpleMailMessage: from=null; replyTo=Default EmailFacade Impl; to=; cc=hi!; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ; sentDate=null; subject=null; text=null");

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test472");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setTechnicalID(100);
    java.lang.String var5 = var0.getReplyTo();
    java.lang.String[] var7 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var0.setCc(var7);
    var0.setBcc("Dummy EmailFacade Impl");
    var0.setSubject("hi!");
    java.lang.String var13 = var0.toString();
    ch.bluepenguin.email.client.MailMessage var14 = new ch.bluepenguin.email.client.MailMessage();
    var14.setBcc("Dummy EmailFacade Impl");
    var14.setTechnicalID(100);
    var14.setText("hi!");
    ch.bluepenguin.email.client.MailMessage var21 = new ch.bluepenguin.email.client.MailMessage();
    var21.setBcc("Dummy EmailFacade Impl");
    var21.setTechnicalID(100);
    java.lang.String var26 = var21.getReplyTo();
    java.lang.String[] var28 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var21.setCc(var28);
    var14.setBcc(var28);
    ch.bluepenguin.email.client.MailMessage var31 = new ch.bluepenguin.email.client.MailMessage();
    var31.setBcc("Dummy EmailFacade Impl");
    java.lang.String var34 = var31.getReplyTo();
    var31.setBcc(",");
    var14.copyTo((org.springframework.mail.MailMessage)var31);
    java.lang.String var38 = var14.getReplyTo();
    java.lang.String[] var39 = var14.getBcc();
    ch.bluepenguin.email.client.MailMessage var40 = new ch.bluepenguin.email.client.MailMessage();
    var40.setBcc("Dummy EmailFacade Impl");
    var40.setTechnicalID(100);
    java.lang.String var45 = var40.getReplyTo();
    java.lang.String[] var47 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var40.setCc(var47);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var49 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var49.setSeparator("");
    ch.bluepenguin.email.client.MailMessage var52 = new ch.bluepenguin.email.client.MailMessage();
    var52.setBcc("Dummy EmailFacade Impl");
    var52.setReplyTo("Dummy EmailFacade Impl");
    java.util.Date var57 = var52.getSentDate();
    ch.bluepenguin.email.client.MailMessage var58 = new ch.bluepenguin.email.client.MailMessage();
    var58.setBcc("Dummy EmailFacade Impl");
    var58.setTechnicalID(100);
    java.lang.String var63 = var58.getReplyTo();
    java.lang.String[] var65 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var58.setCc(var65);
    java.lang.String[] var68 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var58.setBcc(var68);
    var52.setCc(var68);
    java.lang.String var71 = var49.returnStringList(var68);
    var40.setCc(var68);
    var14.setCc(var68);
    var0.copyTo((org.springframework.mail.MailMessage)var14);
    java.util.Date var75 = var0.getSentDate();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var76 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var77 = var76.displayMenuStructure();
    java.util.Iterator var78 = var76.getMenuItemsDepthFirst();
    boolean var79 = var0.equals((java.lang.Object)var78);
    java.lang.String var80 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var13.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Dummy EmailFacade Impl"+ "'", var71.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0) null"+ "'", var77.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"+ "'", var80.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null"));

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test473");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var2 = var1.isLeaf();
    ch.bluepenguin.email.client.Folder var3 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var4 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var3);
    boolean var6 = var4.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var7 = var4.getParent();
    var1.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var4);
    ch.bluepenguin.email.client.Folder var9 = var1.getFolder();
    ch.bluepenguin.email.client.Folder var10 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var11 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var10);
    boolean var13 = var11.equals((java.lang.Object)(short)(-1));
    ch.bluepenguin.email.client.Folder var14 = var11.getFolder();
    ch.bluepenguin.email.client.Folder var15 = var11.getFolder();
    var1.setParent((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var11);
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    boolean var24 = var23.isLeaf();
    ch.bluepenguin.email.client.Folder var25 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var25);
    boolean var28 = var26.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var29 = var26.getParent();
    var23.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var26);
    boolean var31 = var18.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var23);
    var11.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var18);
    ch.bluepenguin.email.client.Folder var33 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var34 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var33);
    ch.bluepenguin.email.client.Folder var35 = new ch.bluepenguin.email.client.Folder();
    var34.setFolder(var35);
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    var37.setFullName("hi!");
    var35.setParent(var37);
    ch.bluepenguin.email.client.Account var42 = var35.getAccount();
    var11.setFolder(var35);
    org.apache.tapestry.contrib.tree.model.ITreeNode var44 = var11.getParent();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var45 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var46 = var45.displayMenuStructure();
    java.util.Iterator var47 = var45.getMenuItemsDepthFirst();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var48 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var50 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var51 = var50.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var52 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    var48.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var54 = var45.getChildList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var50);
    java.lang.String var55 = var50.getName();
    var50.setIndex(1);
    boolean var58 = var50.isLeaf();
    boolean var59 = var50.isLeaf();
    java.lang.String var60 = var50.toString();
    ch.bluepenguin.email.client.Folder var61 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var62 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var61);
    boolean var64 = var62.equals((java.lang.Object)(short)(-1));
    java.util.Collection var65 = var62.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var66 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var67 = var66.getBody();
    int var68 = var66.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var69 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var70 = var69.getBody();
    int var71 = var69.getBodyCount();
    var66.addComponent((org.apache.tapestry.IComponent)var69);
    java.util.Map var73 = var69.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var74 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var74.forgetPage("");
    org.apache.tapestry.engine.IPageSource var77 = var74.getPageSource();
    org.apache.tapestry.engine.IPropertySource var78 = var74.getPropertySource();
    java.util.Collection var79 = var74.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var80 = var74.getComponentMessagesSource();
    var69.attach((org.apache.tapestry.IEngine)var74);
    boolean var82 = var62.equals((java.lang.Object)var74);
    ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper var83 = new ch.bluepenguin.email.client.tapestry.helpers.TreeModelHelper();
    boolean var84 = var62.equals((java.lang.Object)var83);
    var50.setParent((java.lang.Object)var62);
    var11.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var62);
    var62.removeFromParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0) null"+ "'", var46.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test474");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    java.lang.String var1 = var0.toString();
    ch.bluepenguin.email.client.Folder var2 = var0.getFolder();
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var3 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var4 = var3.getCurrentFolder();
    ch.bluepenguin.email.client.MailMessage[] var5 = var3.getAllMessages();
    ch.bluepenguin.email.client.MailMessage[] var7 = var3.getMessagesFromFolder("(0) null");
    ch.bluepenguin.email.client.Folder var8 = var3.getCurrentFolder();
    ch.bluepenguin.email.client.Folder var9 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var10 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var9);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    var10.setFolder(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var14 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13);
    var13.setFullName("hi!");
    var11.setParent(var13);
    var13.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var20 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var21 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var20);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    var21.setFolder(var22);
    org.apache.tapestry.contrib.tree.model.ITreeNode var24 = var21.getParent();
    boolean var25 = var21.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var26 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var13, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var21);
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var8, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var21);
    var0.setFolder(var8);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    boolean var31 = var0.equals((java.lang.Object)var30);
    var0.setText("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var1.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test475");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.IResourceResolver var3 = var0.getResourceResolver();
    org.apache.tapestry.listener.ListenerMap var4 = var0.getListeners();
    java.lang.String var5 = var0.getContextPath();
    org.apache.tapestry.util.io.DataSqueezer var6 = var0.createDataSqueezer();
    java.util.Collection var7 = var0.getActivePageNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test476");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    ch.bluepenguin.email.client.Folder var7 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var8 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var7);
    var7.setParentFolderId((java.lang.Integer)1);
    var7.setParentFolderId((java.lang.Integer)0);
    var5.setParent(var7);
    ch.bluepenguin.email.client.Folder var14 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var15 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var14);
    ch.bluepenguin.email.client.Folder var16 = new ch.bluepenguin.email.client.Folder();
    var15.setFolder(var16);
    ch.bluepenguin.email.client.Folder var18 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var19 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18);
    var18.setFullName("hi!");
    var16.setParent(var18);
    var18.setParentFolderId((java.lang.Integer)100);
    var7.setParent(var18);
    ch.bluepenguin.email.client.Folder var26 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var27 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var26);
    boolean var28 = var27.isLeaf();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    boolean var32 = var30.equals((java.lang.Object)(short)(-1));
    java.util.Collection var33 = var30.getChildren();
    ch.bluepenguin.email.client.Folder var34 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var35 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var34);
    boolean var36 = var35.isLeaf();
    ch.bluepenguin.email.client.Folder var37 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var38 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var37);
    boolean var40 = var38.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var41 = var38.getParent();
    var35.remove((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var38);
    boolean var43 = var30.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var35);
    boolean var44 = var27.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var35);
    java.util.Collection var45 = var27.getChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var46 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var18, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var27);
    org.apache.tapestry.contrib.tree.model.ITreeNode var47 = var27.getParent();
    boolean var48 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var27);
    ch.bluepenguin.email.client.Folder var49 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var50 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var49);
    boolean var52 = var50.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var53 = var50.getParent();
    ch.bluepenguin.email.client.Folder var54 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var55 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var54);
    boolean var57 = var55.equals((java.lang.Object)(short)(-1));
    java.util.Collection var58 = var55.getChildren();
    boolean var59 = var50.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var55);
    java.util.Collection var60 = var50.getChildren();
    var27.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var50);
    int var62 = var27.getChildCount();
    ch.bluepenguin.email.client.Folder var63 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var64 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var63);
    ch.bluepenguin.email.client.Folder var65 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var66 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var65);
    var65.setParentFolderId((java.lang.Integer)1);
    var64.setFolder(var65);
    org.apache.tapestry.contrib.tree.model.ITreeNode var70 = var64.getParent();
    var27.insert((org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test477");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.engine.IPageSource var2 = var0.getPageSource();
    java.util.Collection var3 = var0.getActivePageNames();
    org.apache.tapestry.spec.IApplicationSpecification var4 = var0.getSpecification();
    java.lang.Object var5 = var0.getVisit();
    ch.bluepenguin.email.client.tapestry.Home var6 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var7 = var6.getBody();
    int var8 = var6.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var9 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var10 = var9.getBody();
    int var11 = var9.getBodyCount();
    var6.addComponent((org.apache.tapestry.IComponent)var9);
    java.util.Map var13 = var9.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var14 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var14.forgetPage("");
    org.apache.tapestry.engine.IPageSource var17 = var14.getPageSource();
    org.apache.tapestry.engine.IPropertySource var18 = var14.getPropertySource();
    java.util.Collection var19 = var14.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var20 = var14.getComponentMessagesSource();
    var9.attach((org.apache.tapestry.IEngine)var14);
    org.apache.tapestry.IResourceResolver var22 = var14.getResourceResolver();
    ch.bluepenguin.email.client.tapestry.SpringEngine var23 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var24 = var23.getSpecification();
    org.apache.tapestry.util.io.DataSqueezer var25 = var23.getDataSqueezer();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var26 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var28 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    java.lang.String var29 = var28.getName();
    ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList var30 = new ch.bluepenguin.tapestry.components.menu.model.impl.MenuItemList((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    var26.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var28);
    var23.setVisit((java.lang.Object)var26);
    java.lang.String var33 = var23.toString();
    ch.bluepenguin.email.client.tapestry.Home var34 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var35 = var34.getBody();
    int var36 = var34.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    var34.addComponent((org.apache.tapestry.IComponent)var37);
    ch.bluepenguin.email.client.tapestry.SpringEngine var41 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var41.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var44 = var41.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var45 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var45.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var48 = var45.getMyLocale();
    var41.setLocale(var48);
    var34.setLocale(var48);
    var23.setLocale(var48);
    var14.setLocale(var48);
    var0.setLocale(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test478");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    var4.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.children();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    var29.setFullName("hi!");
    var29.setFullName("Dummy EmailFacade Impl");
    var25.setFolder(var29);
    ch.bluepenguin.email.client.Account var36 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var36.getUniqueID();
    var29.setAccount(var36);
    ch.bluepenguin.email.client.Person var39 = var36.getPerson();
    var17.setAccount(var36);
    var4.setAccount(var36);
    ch.bluepenguin.email.client.Person var42 = new ch.bluepenguin.email.client.Person();
    java.lang.String var43 = var42.getFirstname();
    var42.setNickname("");
    var42.setLastname(",");
    var36.setPerson(var42);
    var42.setReserve("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    java.lang.String var51 = var42.getFirstname();
    ch.bluepenguin.email.client.AbstractUniqueID var52 = var42.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test479");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    int var7 = var5.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var8 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var9 = var8.getBody();
    int var10 = var8.getBodyCount();
    var5.addComponent((org.apache.tapestry.IComponent)var8);
    java.util.Map var12 = var8.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var13 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var13.forgetPage("");
    org.apache.tapestry.engine.IPageSource var16 = var13.getPageSource();
    org.apache.tapestry.engine.IPropertySource var17 = var13.getPropertySource();
    java.util.Collection var18 = var13.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var19 = var13.getComponentMessagesSource();
    var8.attach((org.apache.tapestry.IEngine)var13);
    boolean var21 = var1.equals((java.lang.Object)var13);
    org.apache.tapestry.engine.IComponentClassEnhancer var22 = var13.getComponentClassEnhancer();
    var13.forgetPage(",");
    org.apache.tapestry.engine.IScriptSource var25 = var13.getScriptSource();
    org.apache.tapestry.asset.ResourceChecksumSource var26 = var13.getResourceChecksumSource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var27 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var27.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var31 = new java.lang.String[] { "(0) null"};
    java.lang.String var32 = var27.returnStringList(var31);
    java.util.Locale var33 = var27.getMyLocale();
    var13.setLocale(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0) null"+ "'", var32.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test480");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    java.lang.String var2 = var0.getPageName();
    java.lang.String var3 = var0.toString();
    ch.bluepenguin.email.client.tapestry.Home var4 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var5 = var4.getBody();
    java.lang.String var6 = var4.getPageName();
    java.lang.String var7 = var4.toString();
    org.apache.tapestry.IEngine var8 = var4.getEngine();
    var0.setContainer((org.apache.tapestry.IComponent)var4);
    var4.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IComponent var12 = var4.getContainer();
    org.apache.tapestry.IEngine var13 = var4.getEngine();
    org.apache.tapestry.IBinding var15 = var4.getBinding("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test481");


    ch.bluepenguin.email.client.service.impl.EmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeImpl();
    org.springframework.mail.javamail.JavaMailReader var1 = var0.getReader();
    ch.bluepenguin.email.client.cache.MailCache var2 = var0.getCache();
    var0.setDirty(true);
    java.util.logging.Logger var5 = var0.getLogger();
    ch.bluepenguin.email.client.cache.MailCache var6 = var0.getCache();
    java.lang.String var7 = var0.getName();
    ch.bluepenguin.email.client.cache.MailCache var8 = var0.getCache();
    java.util.logging.Logger var9 = var0.getLogger();
    boolean var10 = var0.isDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Default EmailFacade Impl"+ "'", var7.equals("Default EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test482");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    java.lang.Object var1 = var0.getVisit();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var3 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)10.0f);
    var0.setVisit((java.lang.Object)10.0f);
    java.lang.String var5 = var0.getContextPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test483");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    java.lang.String var2 = var0.toString();
    org.apache.tapestry.engine.IScriptSource var3 = var0.getScriptSource();
    var0.forgetPage("hi!");
    org.apache.tapestry.engine.IComponentClassEnhancer var6 = var0.getComponentClassEnhancer();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var7 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var7.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var10 = var7.getSeparator();
    var7.setSeparator("(0) null\n   (0) null");
    java.lang.String var13 = var7.getSeparator();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var14 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var14.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var18 = new java.lang.String[] { "(0) null"};
    java.lang.String var19 = var14.returnStringList(var18);
    java.util.Locale var20 = var14.getMyLocale();
    java.util.Locale var21 = var14.getMyLocale();
    ch.bluepenguin.email.client.MailMessage var22 = new ch.bluepenguin.email.client.MailMessage();
    var22.setBcc("Dummy EmailFacade Impl");
    var22.setTechnicalID(100);
    java.lang.String var27 = var22.getReplyTo();
    java.lang.String[] var29 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var22.setCc(var29);
    java.lang.String[] var32 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var22.setBcc(var32);
    java.lang.String var34 = var14.returnStringList(var32);
    java.lang.String var35 = var7.returnStringList(var32);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var36 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var36.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String[] var40 = new java.lang.String[] { "(0) null"};
    java.lang.String var41 = var36.returnStringList(var40);
    ch.bluepenguin.email.client.tapestry.SpringEngine var42 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var42.forgetPage("");
    org.apache.tapestry.engine.IPropertySource var45 = var42.getPropertySource();
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var46 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var46.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var49 = var46.getMyLocale();
    var42.setLocale(var49);
    var36.setMyLocale(var49);
    java.util.Locale var52 = var36.getMyLocale();
    var7.setMyLocale(var52);
    java.util.Locale var54 = var7.getMyLocale();
    var0.setLocale(var54);
    org.apache.tapestry.engine.IComponentClassEnhancer var56 = var0.getComponentClassEnhancer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"+ "'", var10.equals("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0) null\n   (0) null"+ "'", var13.equals("(0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0) null"+ "'", var19.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Dummy EmailFacade Impl"+ "'", var34.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Dummy EmailFacade Impl"+ "'", var35.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0) null"+ "'", var41.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test484");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.beginPageRender();
    java.util.Collection var2 = var0.getBindingNames();
    org.apache.tapestry.IAsset var4 = var0.getAsset(",");
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    org.apache.tapestry.IComponent var7 = var0.getContainer();
    org.apache.tapestry.listener.ListenerMap var8 = var0.getListeners();
    org.apache.tapestry.listener.ListenerMap var9 = var0.getListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test485");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper var7 = new ch.bluepenguin.email.client.tapestry.helpers.DisplayHelper();
    var7.setSeparator("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.util.Locale var10 = var7.getMyLocale();
    var3.setLocale(var10);
    java.lang.String var12 = var3.getPageName();
    java.util.Collection var13 = var3.getBindingNames();
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    int var16 = var14.getBodyCount();
    org.apache.tapestry.IEngine var17 = var14.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var18 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var19 = var18.getBody();
    int var20 = var18.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var21 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var22 = var21.getBody();
    int var23 = var21.getBodyCount();
    var18.addComponent((org.apache.tapestry.IComponent)var21);
    var18.endPageRender();
    ch.bluepenguin.email.client.tapestry.Home var26 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var27 = var26.getBody();
    int var28 = var26.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var29 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var30 = var29.getBody();
    int var31 = var29.getBodyCount();
    var26.addComponent((org.apache.tapestry.IComponent)var29);
    java.util.Map var33 = var29.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var34 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var34.forgetPage("");
    org.apache.tapestry.engine.IPageSource var37 = var34.getPageSource();
    org.apache.tapestry.engine.IPropertySource var38 = var34.getPropertySource();
    java.util.Collection var39 = var34.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var40 = var34.getComponentMessagesSource();
    var29.attach((org.apache.tapestry.IEngine)var34);
    var18.addBody((org.apache.tapestry.IRender)var29);
    var14.addComponent((org.apache.tapestry.IComponent)var18);
    ch.bluepenguin.email.client.tapestry.Home var44 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var45 = var44.getBody();
    int var46 = var44.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var47 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var48 = var47.getBody();
    int var49 = var47.getBodyCount();
    var44.addComponent((org.apache.tapestry.IComponent)var47);
    java.lang.String var51 = var44.getIdPath();
    org.apache.tapestry.ILocation var52 = var44.getLocation();
    var18.setPage((org.apache.tapestry.IPage)var44);
    ch.bluepenguin.email.client.tapestry.Home var54 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var55 = var54.getBody();
    int var56 = var54.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var57 = new ch.bluepenguin.email.client.tapestry.Home();
    var57.beginPageRender();
    java.util.Collection var59 = var57.getBindingNames();
    var54.setPage((org.apache.tapestry.IPage)var57);
    org.apache.tapestry.INamespace var61 = var54.getNamespace();
    ch.bluepenguin.email.client.tapestry.Home var62 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var63 = var62.getBody();
    int var64 = var62.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var65 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var66 = var65.getBody();
    int var67 = var65.getBodyCount();
    var62.addComponent((org.apache.tapestry.IComponent)var65);
    java.lang.String var69 = var62.getIdPath();
    org.apache.tapestry.ILocation var70 = var62.getLocation();
    org.apache.tapestry.IEngine var71 = var62.getEngine();
    var62.beginPageRender();
    var54.addComponent((org.apache.tapestry.IComponent)var62);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var74 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var76 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var77 = var76.getSuppressed();
    var74.setParameters((java.lang.Object[])var77);
    ch.bluepenguin.email.client.tapestry.Home var79 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var80 = var79.getBody();
    var74.setComponent((org.apache.tapestry.IComponent)var79);
    ch.bluepenguin.email.client.tapestry.Home var82 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var83 = var82.getBody();
    int var84 = var82.getBodyCount();
    var82.setPageName("");
    var79.addBody((org.apache.tapestry.IRender)var82);
    var62.addComponent((org.apache.tapestry.IComponent)var82);
    var44.setContainer((org.apache.tapestry.IComponent)var62);
    var3.addBody((org.apache.tapestry.IRender)var44);
    var3.setId("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null");
    java.lang.String var93 = var3.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null"+ "'", var93.equals("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: (0) null"));

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test486");


    ch.bluepenguin.email.client.MailMessage var0 = new ch.bluepenguin.email.client.MailMessage();
    var0.setBcc("Dummy EmailFacade Impl");
    java.lang.String var3 = var0.getReplyTo();
    java.lang.String var4 = var0.getText();
    var0.setTechnicalID(100);
    ch.bluepenguin.email.client.MailMessage var7 = new ch.bluepenguin.email.client.MailMessage();
    var7.setBcc("Dummy EmailFacade Impl");
    var7.setTechnicalID(100);
    java.lang.String var12 = var7.getReplyTo();
    java.lang.String[] var14 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var7.setCc(var14);
    java.lang.String[] var17 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var7.setBcc(var17);
    ch.bluepenguin.email.client.MailMessage var19 = new ch.bluepenguin.email.client.MailMessage();
    var19.setBcc("Dummy EmailFacade Impl");
    var19.setTechnicalID(100);
    java.lang.String var24 = var19.getReplyTo();
    java.lang.String[] var26 = new java.lang.String[] { "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null"};
    var19.setCc(var26);
    java.lang.String[] var29 = new java.lang.String[] { "Dummy EmailFacade Impl"};
    var19.setBcc(var29);
    var7.setBcc(var29);
    int var32 = var7.getTechnicalID();
    var0.copyTo((org.springframework.mail.MailMessage)var7);
    int var34 = var7.getTechnicalID();
    java.lang.String[] var35 = var7.getCc();
    var7.setCc("SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=Dummy EmailFacade Impl; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test487");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    boolean var4 = var0.isDirty((java.lang.Integer)1);
    boolean var6 = var0.isDirty((java.lang.Integer)2);
    boolean var7 = var0.isAllClean();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var8 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test488");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    java.util.Map var1 = var0.getComponents();
    org.apache.tapestry.spec.IComponentSpecification var2 = var0.getSpecification();
    org.apache.tapestry.IRequestCycle var3 = var0.getRequestCycle();
    var0.endPageRender();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test489");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    org.apache.tapestry.contrib.tree.model.ITreeNode var4 = var1.getParent();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    boolean var8 = var6.equals((java.lang.Object)(short)(-1));
    java.util.Collection var9 = var6.getChildren();
    boolean var10 = var1.containsChild((org.apache.tapestry.contrib.tree.model.ITreeNode)var6);
    ch.bluepenguin.email.client.Folder var11 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var12 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var11);
    ch.bluepenguin.email.client.Folder var13 = new ch.bluepenguin.email.client.Folder();
    var12.setFolder(var13);
    ch.bluepenguin.email.client.Folder var15 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var16 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15);
    var15.setFullName("hi!");
    var13.setParent(var15);
    var15.setParentFolderId((java.lang.Integer)100);
    ch.bluepenguin.email.client.Folder var22 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var23 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var22);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    var23.setFolder(var24);
    org.apache.tapestry.contrib.tree.model.ITreeNode var26 = var23.getParent();
    boolean var27 = var23.getAllowsChildren();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var28 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var15, (org.apache.tapestry.contrib.tree.model.IMutableTreeNode)var23);
    ch.bluepenguin.email.client.Account var29 = var15.getAccount();
    var6.setFolder(var15);
    boolean var31 = var6.isLeaf();
    ch.bluepenguin.email.client.tapestry.Home var32 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var33 = var32.getBody();
    java.lang.String var34 = var32.getPageName();
    java.lang.String var35 = var32.toString();
    ch.bluepenguin.email.client.tapestry.Home var36 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var37 = var36.getBody();
    java.lang.String var38 = var36.getPageName();
    java.lang.String var39 = var36.toString();
    org.apache.tapestry.IEngine var40 = var36.getEngine();
    var32.setContainer((org.apache.tapestry.IComponent)var36);
    var36.setId("Dummy EmailFacade Impl");
    org.apache.tapestry.IPage var44 = var36.getPage();
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var46 = var45.getBody();
    int var47 = var45.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var48 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var49 = var48.getBody();
    int var50 = var48.getBodyCount();
    var45.addComponent((org.apache.tapestry.IComponent)var48);
    java.util.Map var52 = var48.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var53 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var53.forgetPage("");
    org.apache.tapestry.engine.IPageSource var56 = var53.getPageSource();
    org.apache.tapestry.engine.IPropertySource var57 = var53.getPropertySource();
    java.util.Collection var58 = var53.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var59 = var53.getComponentMessagesSource();
    var48.attach((org.apache.tapestry.IEngine)var53);
    java.lang.Object var61 = var48.getVisit();
    var48.setPageName("Default EmailFacade Impl");
    ch.bluepenguin.email.client.tapestry.Home var64 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var65 = var64.getBody();
    java.lang.String var66 = var64.getPageName();
    java.lang.String var67 = var64.toString();
    org.apache.tapestry.IEngine var68 = var64.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var69 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var70 = var69.getBody();
    java.lang.String var71 = var69.getPageName();
    java.lang.String var72 = var69.toString();
    org.apache.tapestry.IEngine var73 = var69.getEngine();
    var64.addBody((org.apache.tapestry.IRender)var69);
    java.lang.String var75 = var69.toString();
    var48.addComponent((org.apache.tapestry.IComponent)var69);
    var36.addComponent((org.apache.tapestry.IComponent)var48);
    org.apache.tapestry.IBinding var79 = var36.getBinding("(0) null\n   (0) null");
    ch.bluepenguin.email.client.tapestry.Home var80 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var81 = var80.getBody();
    int var82 = var80.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var83 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var84 = var83.getBody();
    int var85 = var83.getBodyCount();
    var80.addComponent((org.apache.tapestry.IComponent)var83);
    java.util.Collection var87 = var83.getBindingNames();
    org.apache.tapestry.IAsset var89 = var83.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var90 = var83.toString();
    java.util.Collection var91 = var83.getBindingNames();
    var83.setPageName("");
    org.apache.tapestry.INamespace var94 = var83.getNamespace();
    var83.endPageRender();
    java.lang.String var96 = var83.getIdPath();
    var36.addComponent((org.apache.tapestry.IComponent)var83);
    boolean var98 = var6.equals((java.lang.Object)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test490");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    boolean var3 = var1.equals((java.lang.Object)(short)(-1));
    java.util.Collection var4 = var1.children();
    ch.bluepenguin.email.client.Folder var5 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var6 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var5);
    var5.setFullName("hi!");
    var5.setFullName("Dummy EmailFacade Impl");
    var1.setFolder(var5);
    java.lang.String var12 = var5.getName();
    java.lang.String var13 = var5.getName();
    java.lang.Integer var14 = var5.getParentFolderId();
    java.lang.Integer var15 = var5.getParentFolderId();
    ch.bluepenguin.email.client.AbstractUniqueID var16 = var5.getUniqueID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test491");


    ch.bluepenguin.email.client.service.EmailFacadeException var0 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var1 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var2 = var1.getSuppressed();
    var0.setTechnicalException((java.lang.Exception)var1);
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var4 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)var0);
    ch.bluepenguin.email.client.tapestry.SpringEngine var5 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var6 = var5.getPageSource();
    org.apache.tapestry.engine.IPageSource var7 = var5.getPageSource();
    java.util.Collection var8 = var5.getActivePageNames();
    org.apache.tapestry.spec.IApplicationSpecification var9 = var5.getSpecification();
    ch.bluepenguin.email.client.tapestry.SpringEngine var11 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    ch.bluepenguin.email.client.service.EmailFacadeException var13 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    ch.bluepenguin.email.client.service.EmailFacadeException var14 = new ch.bluepenguin.email.client.service.EmailFacadeException();
    java.lang.Throwable[] var15 = var14.getSuppressed();
    var13.setTechnicalException((java.lang.Exception)var14);
    var11.reportException("(0) null\n   (0) null\n   (0) null\n   (0) null", (java.lang.Throwable)var14);
    var5.reportException("(0) null\n   (0) null\n   (0) null\n   (0) null", (java.lang.Throwable)var14);
    ch.bluepenguin.email.client.Folder var19 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var20 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var19);
    boolean var22 = var20.equals((java.lang.Object)(short)(-1));
    java.util.Collection var23 = var20.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var24 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var25 = var24.getBody();
    int var26 = var24.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    var24.addComponent((org.apache.tapestry.IComponent)var27);
    java.util.Map var31 = var27.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var32 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var32.forgetPage("");
    org.apache.tapestry.engine.IPageSource var35 = var32.getPageSource();
    org.apache.tapestry.engine.IPropertySource var36 = var32.getPropertySource();
    java.util.Collection var37 = var32.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var38 = var32.getComponentMessagesSource();
    var27.attach((org.apache.tapestry.IEngine)var32);
    boolean var40 = var20.equals((java.lang.Object)var32);
    org.apache.tapestry.engine.IComponentClassEnhancer var41 = var32.getComponentClassEnhancer();
    java.lang.String var42 = var32.getContextPath();
    boolean var43 = var32.getHasVisit();
    ch.bluepenguin.email.client.tapestry.SpringEngine var45 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var46 = var45.getPageSource();
    ch.bluepenguin.email.client.tapestry.SpringEngine var48 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var49 = var48.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var52 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var48.reportException("", (java.lang.Throwable)var52);
    var45.reportException("hi!", (java.lang.Throwable)var52);
    ch.bluepenguin.email.client.tapestry.SpringEngine var55 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.spec.IApplicationSpecification var56 = var55.getSpecification();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var59 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    var55.reportException("", (java.lang.Throwable)var59);
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var62 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var63 = var62.getSuppressed();
    var59.addSuppressed((java.lang.Throwable)var62);
    var52.addSuppressed((java.lang.Throwable)var59);
    var32.reportException("SimpleMailMessage: from=null; replyTo=null; to=; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=null", (java.lang.Throwable)var59);
    var14.setTechnicalException((java.lang.Exception)var59);
    var0.addSuppressed((java.lang.Throwable)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test492");


    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var0 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var2 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    var0.setParameters((java.lang.Object[])var3);
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var6 = var5.getBody();
    var0.setComponent((org.apache.tapestry.IComponent)var5);
    var5.detach();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var9 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var11 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var12 = var11.getSuppressed();
    var9.setParameters((java.lang.Object[])var12);
    ch.bluepenguin.email.client.tapestry.Home var14 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var15 = var14.getBody();
    var9.setComponent((org.apache.tapestry.IComponent)var14);
    var14.setId("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var19 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var21 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    var19.setParameters((java.lang.Object[])var22);
    ch.bluepenguin.email.client.tapestry.Home var24 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var25 = var24.getBody();
    var19.setComponent((org.apache.tapestry.IComponent)var24);
    org.apache.tapestry.INamespace var27 = var24.getNamespace();
    var14.setContainer((org.apache.tapestry.IComponent)var24);
    var5.setPage((org.apache.tapestry.IPage)var24);
    java.lang.String var30 = var24.getExtendedId();
    java.util.Collection var31 = var24.getBindingNames();
    var24.setPageName("SimpleMailMessage: from=null; replyTo=null; to=Default EmailFacade Impl; cc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=,");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test493");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    java.lang.String var1 = var0.getName();
    var0.setCurrentFolder("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=Dummy EmailFacade Impl; sentDate=null; subject=hi!; text=ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    ch.bluepenguin.email.client.Folder[] var4 = var0.getAllFolders();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var6 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var6.setLeaf(false);
    boolean var9 = var6.isLeaf();
    var6.setIndex(1);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer var12 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.GenericMarkupMenuItemRenderer();
    var12.setText("Dummy EmailFacade Impl");
    var12.setElement("Dummy EmailFacade Impl");
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel var17 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel();
    java.lang.String var18 = var17.displayMenuStructure();
    ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem var20 = new ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem((java.lang.Object)"");
    var20.setIndex(10);
    var20.setParent((java.lang.Object)10L);
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var25 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var27 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var28 = var27.getSuppressed();
    var25.setParameters((java.lang.Object[])var28);
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var31 = var30.getBody();
    var25.setComponent((org.apache.tapestry.IComponent)var30);
    var17.addMenuItem((ch.bluepenguin.tapestry.components.menu.model.IMenuItem)var20, (ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    var25.setStyleClass(",");
    var12.setNestedRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.email.client.tapestry.Home var37 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var38 = var37.getBody();
    int var39 = var37.getBodyCount();
    var37.setPageName("");
    org.apache.tapestry.IRender[] var42 = var37.getBody();
    var25.setComponent((org.apache.tapestry.IComponent)var37);
    var6.setRenderer((ch.bluepenguin.tapestry.components.menu.renderer.IMenuItemRenderer)var25);
    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var45 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    var45.setCurrentFolder("(0) null");
    ch.bluepenguin.email.client.MailMessage[] var48 = var45.getAllMessages();
    ch.bluepenguin.email.client.Folder var49 = var45.getCurrentFolder();
    java.lang.String var50 = var45.getName();
    ch.bluepenguin.email.client.MailMessage[] var52 = var45.getMessagesFromFolder("(0) null\n   (0) null\n   (0) null");
    var25.setParameters((java.lang.Object[])var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.copyMessages(var52, "SimpleMailMessage: from=null; replyTo=Dummy EmailFacade Impl; to=; cc=(0) null; bcc=Dummy EmailFacade Impl; sentDate=null; subject=null; text=null", "SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null; sentDate=null; subject=null; text=ch.bluepenguin.email.client.service.EmailFacadeException");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Dummy EmailFacade Impl"+ "'", var1.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0) null"+ "'", var18.equals("(0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Dummy EmailFacade Impl"+ "'", var50.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test494");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    var0.setPageName("Dummy EmailFacade Impl");
    var0.setId("(0) null\n   (0) null");
    int var5 = var0.getBodyCount();
    ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer var6 = new ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer();
    ch.bluepenguin.tapestry.components.menu.model.MenuStructureException var8 = new ch.bluepenguin.tapestry.components.menu.model.MenuStructureException("");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    var6.setParameters((java.lang.Object[])var9);
    ch.bluepenguin.email.client.tapestry.Home var11 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var12 = var11.getBody();
    var6.setComponent((org.apache.tapestry.IComponent)var11);
    var11.setId("Dummy EmailFacade Impl");
    int var16 = var11.getBodyCount();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    boolean var20 = var18.equals((java.lang.Object)(short)(-1));
    java.util.Collection var21 = var18.getChildren();
    ch.bluepenguin.email.client.tapestry.Home var22 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var23 = var22.getBody();
    int var24 = var22.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var25 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var26 = var25.getBody();
    int var27 = var25.getBodyCount();
    var22.addComponent((org.apache.tapestry.IComponent)var25);
    java.util.Map var29 = var25.getComponents();
    ch.bluepenguin.email.client.tapestry.SpringEngine var30 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    var30.forgetPage("");
    org.apache.tapestry.engine.IPageSource var33 = var30.getPageSource();
    org.apache.tapestry.engine.IPropertySource var34 = var30.getPropertySource();
    java.util.Collection var35 = var30.getActivePageNames();
    org.apache.tapestry.engine.IComponentMessagesSource var36 = var30.getComponentMessagesSource();
    var25.attach((org.apache.tapestry.IEngine)var30);
    boolean var38 = var18.equals((java.lang.Object)var30);
    org.apache.tapestry.engine.IComponentClassEnhancer var39 = var30.getComponentClassEnhancer();
    var11.attach((org.apache.tapestry.IEngine)var30);
    var0.setContainer((org.apache.tapestry.IComponent)var11);
    ch.bluepenguin.email.client.tapestry.Home var42 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var43 = var42.getBody();
    int var44 = var42.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var45 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var46 = var45.getBody();
    int var47 = var45.getBodyCount();
    var42.addComponent((org.apache.tapestry.IComponent)var45);
    java.lang.String var49 = var42.getIdPath();
    org.apache.tapestry.ILocation var50 = var42.getLocation();
    org.apache.tapestry.IEngine var51 = var42.getEngine();
    var42.beginPageRender();
    java.lang.String var53 = var42.toString();
    var11.setPage((org.apache.tapestry.IPage)var42);
    ch.bluepenguin.email.client.tapestry.Home var55 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var56 = var55.getBody();
    java.lang.String var57 = var55.getPageName();
    java.lang.String var58 = var55.toString();
    ch.bluepenguin.email.client.tapestry.Home var59 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var60 = var59.getBody();
    java.lang.String var61 = var59.getPageName();
    java.lang.String var62 = var59.toString();
    org.apache.tapestry.IEngine var63 = var59.getEngine();
    var55.setContainer((org.apache.tapestry.IComponent)var59);
    org.apache.tapestry.IAsset var66 = var55.getAsset("Dummy EmailFacade Impl");
    var55.setId("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    var11.addBody((org.apache.tapestry.IRender)var55);
    ch.bluepenguin.email.client.tapestry.SpringEngine var70 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var71 = var70.getPageSource();
    org.apache.tapestry.engine.IPageSource var72 = var70.getPageSource();
    java.util.Collection var73 = var70.getActivePageNames();
    org.apache.tapestry.spec.IApplicationSpecification var74 = var70.getSpecification();
    java.lang.Object var75 = var70.getVisit();
    org.apache.tapestry.engine.IPropertySource var76 = var70.getPropertySource();
    org.apache.tapestry.engine.IPageSource var77 = var70.getPageSource();
    var55.attach((org.apache.tapestry.IEngine)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test495");


    ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl var0 = new ch.bluepenguin.email.client.service.impl.DummyEmailFacadeImpl();
    ch.bluepenguin.email.client.Folder var1 = var0.getCurrentFolder();
    java.lang.String var2 = var0.getName();
    var0.setCurrentFolder("ch.bluepenguin.tapestry.components.menu.model.MenuStructureException: ");
    var0.setCurrentFolder("(0) null\n   (0) null\n   (0) null\n   (0) null");
    ch.bluepenguin.email.client.Folder var7 = var0.getCurrentFolder();
    java.lang.String var8 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Dummy EmailFacade Impl"+ "'", var2.equals("Dummy EmailFacade Impl"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Dummy EmailFacade Impl"+ "'", var8.equals("Dummy EmailFacade Impl"));

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test496");


    ch.bluepenguin.email.client.tapestry.SpringEngine var0 = new ch.bluepenguin.email.client.tapestry.SpringEngine();
    org.apache.tapestry.engine.IPageSource var1 = var0.getPageSource();
    org.apache.tapestry.listener.ListenerMap var2 = var0.getListeners();
    java.lang.String var3 = var0.toString();
    org.apache.tapestry.engine.IComponentClassEnhancer var4 = var0.getComponentClassEnhancer();
    org.apache.tapestry.spec.IApplicationSpecification var5 = var0.getSpecification();
    java.lang.String var6 = var0.getContextPath();
    java.lang.String var7 = var0.toString();
    org.apache.tapestry.util.pool.Pool var8 = var0.getPool();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test497");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    ch.bluepenguin.email.client.tapestry.Home var2 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var3 = var2.getBody();
    int var4 = var2.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var5 = new ch.bluepenguin.email.client.tapestry.Home();
    var5.beginPageRender();
    java.util.Collection var7 = var5.getBindingNames();
    var2.setPage((org.apache.tapestry.IPage)var5);
    org.apache.tapestry.listener.ListenerMap var9 = var5.getListeners();
    int var10 = var5.getBodyCount();
    java.util.Map var11 = var5.getAssets();
    ch.bluepenguin.email.client.tapestry.Home var12 = new ch.bluepenguin.email.client.tapestry.Home();
    var12.beginPageRender();
    java.util.Collection var14 = var12.getBindingNames();
    org.apache.tapestry.listener.ListenerMap var15 = var12.getListeners();
    java.lang.String var16 = var12.getPageName();
    var5.setPage((org.apache.tapestry.IPage)var12);
    var0.addComponent((org.apache.tapestry.IComponent)var5);
    java.lang.String var19 = var0.getIdPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test498");


    ch.bluepenguin.email.client.Folder var0 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var1 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var0);
    ch.bluepenguin.email.client.Folder var2 = new ch.bluepenguin.email.client.Folder();
    var1.setFolder(var2);
    ch.bluepenguin.email.client.Folder var4 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var5 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var4);
    var4.setFullName("hi!");
    var2.setParent(var4);
    ch.bluepenguin.email.client.Account var9 = var4.getAccount();
    var4.setName("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    ch.bluepenguin.email.client.Folder var12 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var13 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var12);
    boolean var15 = var13.equals((java.lang.Object)(short)(-1));
    java.util.Collection var16 = var13.children();
    ch.bluepenguin.email.client.Folder var17 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var18 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var17);
    var17.setFullName("hi!");
    var17.setFullName("Dummy EmailFacade Impl");
    var13.setFolder(var17);
    ch.bluepenguin.email.client.Folder var24 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var25 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var24);
    boolean var27 = var25.equals((java.lang.Object)(short)(-1));
    java.util.Collection var28 = var25.children();
    ch.bluepenguin.email.client.Folder var29 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var30 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var29);
    var29.setFullName("hi!");
    var29.setFullName("Dummy EmailFacade Impl");
    var25.setFolder(var29);
    ch.bluepenguin.email.client.Account var36 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var37 = var36.getUniqueID();
    var29.setAccount(var36);
    ch.bluepenguin.email.client.Person var39 = var36.getPerson();
    var17.setAccount(var36);
    var4.setAccount(var36);
    ch.bluepenguin.email.client.AbstractUniqueID var42 = var36.getUniqueID();
    ch.bluepenguin.email.client.MailMessage var43 = new ch.bluepenguin.email.client.MailMessage();
    var43.setCc("hi!");
    ch.bluepenguin.email.client.Folder var46 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var47 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var46);
    boolean var49 = var47.equals((java.lang.Object)(short)(-1));
    java.util.Collection var50 = var47.children();
    ch.bluepenguin.email.client.Folder var51 = new ch.bluepenguin.email.client.Folder();
    ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode var52 = new ch.bluepenguin.email.client.tapestry.helpers.FolderTreeNode(var51);
    var51.setFullName("hi!");
    var51.setFullName("Dummy EmailFacade Impl");
    var47.setFolder(var51);
    ch.bluepenguin.email.client.Account var58 = new ch.bluepenguin.email.client.Account();
    ch.bluepenguin.email.client.AbstractUniqueID var59 = var58.getUniqueID();
    var51.setAccount(var58);
    boolean var61 = var43.equals((java.lang.Object)var58);
    ch.bluepenguin.email.client.Person var62 = new ch.bluepenguin.email.client.Person();
    var62.setReserve("(0) null\n   (0) null\n   (0) null");
    java.lang.String var65 = var62.getReserve();
    var58.setPerson(var62);
    java.lang.String var67 = var62.getLastname();
    var36.setPerson(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0) null\n   (0) null\n   (0) null"+ "'", var65.equals("(0) null\n   (0) null\n   (0) null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test499");


    ch.bluepenguin.email.client.service.impl.EmailFacadeState var0 = new ch.bluepenguin.email.client.service.impl.EmailFacadeState();
    var0.clear();
    var0.clear();
    var0.setAll(true);
    boolean var5 = var0.isAllClean();
    boolean var6 = var0.isAllClean();
    boolean var8 = var0.isDirty((java.lang.Integer)0);
    boolean var10 = var0.isDirty((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test500");


    ch.bluepenguin.email.client.tapestry.Home var0 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var1 = var0.getBody();
    int var2 = var0.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var3 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var4 = var3.getBody();
    int var5 = var3.getBodyCount();
    var0.addComponent((org.apache.tapestry.IComponent)var3);
    java.util.Collection var7 = var3.getBindingNames();
    org.apache.tapestry.IAsset var9 = var3.getAsset("SimpleMailMessage: from=null; replyTo=null; to=; cc=; bcc=; sentDate=null; subject=null; text=null");
    java.lang.String var10 = var3.toString();
    java.util.Collection var11 = var3.getBindingNames();
    var3.setPageName("");
    org.apache.tapestry.INamespace var14 = var3.getNamespace();
    java.util.Collection var15 = var3.getBindingNames();
    org.apache.tapestry.IPage var16 = var3.getPage();
    ch.bluepenguin.email.client.tapestry.Home var17 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var18 = var17.getBody();
    int var19 = var17.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var20 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var21 = var20.getBody();
    int var22 = var20.getBodyCount();
    var17.addComponent((org.apache.tapestry.IComponent)var20);
    java.lang.String var24 = var17.getIdPath();
    org.apache.tapestry.ILocation var25 = var17.getLocation();
    org.apache.tapestry.IEngine var26 = var17.getEngine();
    ch.bluepenguin.email.client.tapestry.Home var27 = new ch.bluepenguin.email.client.tapestry.Home();
    org.apache.tapestry.IRender[] var28 = var27.getBody();
    int var29 = var27.getBodyCount();
    ch.bluepenguin.email.client.tapestry.Home var30 = new ch.bluepenguin.email.client.tapestry.Home();
    var30.beginPageRender();
    java.util.Collection var32 = var30.getBindingNames();
    var27.setPage((org.apache.tapestry.IPage)var30);
    var17.addComponent((org.apache.tapestry.IComponent)var30);
    var30.setPageName("hi!");
    var3.setContainer((org.apache.tapestry.IComponent)var30);
    int var38 = var3.getBodyCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);

  }

}
